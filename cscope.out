cscope 15 $HOME/kos               0001582167
	@Makefile

1 
	ghñp
:

2 @
echo
 "USAGE: (see src/Makefile forádditionalÅargets)"

3 @
echo
 "$(MAKE)áll buildÉverything"

4 @
echo
 "$(MAKE) clean cleanÉverything"

5 @
echo
 "$(MAKE) dep build dependencies"

6 @
echo
 "$(MAKE)Ñun buildándÑun (qemu)"

7 @
echo
 "$(MAKE) debug build,Ñun (qemu),ánd debug (qemu/gdb)"

8 @
echo
 "$(MAKE) gdb build,Ñun (qemu),ánd debug (remote gdb)"

9 @
echo
 "$(MAKE) bochs buildándÑun/debug (bochs)"

10 @
echo
 "$(MAKE) vbox buildándÑun/debug (VirtualBox) - setupÇeeded"

12 
tgz
: 
v˛ón


13 
rm
 -
f
 
kos
.
tgz
; 
èr
 
czvf
 
	gkos
.
	gtgz
 --
	gxf‹m
 's,,kos/,' \

14 --
ex˛ude
 
	g§c
//
a˝iˇ
 --ex˛udê
§c
//
lwù
/lwip \

15 --
ex˛ude
 
cfg
/
Logs
 --ex˛udêcfg/
KOS
.
vbox
 --ex˛udêcfg/KOS.vbox-
¥ev
 \

16 
cfg
 
c⁄fig
 
LICENSE
 
Makefûe
 Makefûe.
dï
 
∑tches
 
README
 
£tup_¸os£nv
.
sh
 
§c


18 .
DEFAULT
:

19 
ni˚
 -10 
$
(
MAKE
Ë-
C
 
§c
 -
j
 $(
shñl
 
fgªp
 
¥o˚ss‹
 /
¥oc
/
˝uöfo
|
wc
 -
l
) $@

	@src/Makefile

1 
	gSRCDIR
:=
	$$
(
CURDIR
)

2 
ö˛ude
 
	`$
(
SRCDIR
)/
Makefûe
.
c⁄fig


3 
SOURCEDIRS
=
gíîic
 
ru¡ime
 
kî√l
 
machöe
 
devi˚s
 
w‹ld
 
maö
 
gdb


4 
SOURCES
=
	`$
(
wûdˇrd
 $(
addsuffix


	@src/Makefile.config

1 
ö˛ude
 
$
(
SRCDIR
)/../
c⁄fig


2 
	gCFGDIR
:=
$
(
SRCDIR
)/../
cfg


4 
GCC
=
$
(
GCCDIR
)/
bö
/$(
TARGET
)-
gcc


5 
GPP
=
$
(
GCCDIR
)/
bö
/$(
TARGET
)-
g
++

6 
CC
=
	$$
(
GCC
)

7 
	`i„q
 (
	`$
(
CC
),
˛™g
)

8 
CXX
=
˛™g
++

10 
CXX
=
	$$
(
GPP
)

11 
ídif


13 
AS
=
	`$
(
GCCDIR
)/
bö
/$(
TARGET
)-
as


14 
AR
=
	`$
(
GCCDIR
)/
bö
/$(
TARGET
)-
¨


15 
LD
=
	`$
(
GCCDIR
)/
bö
/$(
TARGET
)-
ld


16 
RANLIB
=
	`$
(
GCCDIR
)/
bö
/$(
TARGET
)-
ø∆ib


17 
STRIP
=
	`$
(
GCCDIR
)/
bö
/$(
TARGET
)-
°rù


18 
GDB
=
	`$
(
GDBDIR
)/
bö
/$(
TARGET
)-
gdb
 -
x
 $(
CFGDIR
)/
gdböô
.
cfg


20 
IMAGE
=/
tmp
/
$$USER
/
KOS
.
img


21 
ISO
=/
tmp
/
$$USER
/
KOS
.
iso


22 
STAGE
=
°age


24 
SHELL
=/
bö
/
bash


26 
QEMU_DISP
=-
di•œy
 
sdl


27 #QEMU_DISP=-
di•œy
 
vnc
=:0 #vncvõwî 
loˇlho°


29 
QEMU
=
	`$
(
TOOLSDIR
)/
bö
/
qemu
-
sy°em
-
x86_64
 -
nodefc⁄fig
 $(
QEMU_DISP
)\

30 -
m
 768 -
smp
 
c‹es
=2,
thªads
=1,
sockës
=2 -
debugc⁄
 
fûe
:/
tmp
/
$$USER
/
KOS
.
dbg


31 #QEMU+=-
d
 ,
˝u_ª£t


33 
QEMU_UNET
=-
devi˚
 
e1000
,
√tdev
=
hn0
 -√tdev 
u£r
,
id
=hn0,
ª°ri˘
=
off
,
t·p
=
	`$
(
TFTPDIR
),
boŸfûe
=
pxñöux
.0

34 
QEMU_RNET
=-
devi˚
 
e1000
,
√tdev
=
hn0
 -√tdev 
bridge
,
id
=hn0,
br
=
br0


36 
QEMU_IMG
=-
boŸ
 
‹dî
=
d
 -
cdrom
 
	$$
(
ISO
)

37 #QEMU_IMG=-
boŸ
 
‹dî
=
c
 -
hda
 
	`$
(
IMAGE
)

38 
QEMU_PXE
=-
boŸ
 
‹dî
=
n


40 
QEMU_SER
=-
£rül
 
fûe
:/
tmp
/
$$USER
/
KOS
.serial

41 
QEMU_GDB
=-
£rül
 
t˝
::2345,
£rvî
 -£rü»
fûe
:/
tmp
/
$$USER
/
KOS
.serial

43 
TMPFILES
=/
tmp
/
$$USER
/
KOS
.
dbg
 /tmp/$$USER/KOS.
£rül


45 
KERNBASE
=0xFFFFFFFF80000000

47 
KERNFLAGS
=-
DKERNEL
 -
DKERNBASE
=
	$$
(
KERNBASE
)

49 
CFGFLAGS
=-
D__KOS__
 -
m64
 -
ö˛ude
 
	`$
(
SRCDIR
)/
ã°›ti⁄s
.
h
\

50 -
	`I$
(
SRCDIR
Ë-I$(SRCDIR)/
ö˛ude


52 #w‹k¨ound 
gdb
 7.6.x 
vs
. 
gcc
 4.8.
y
 -> 
°ûl
 
√eded
?

53 
DBGFLAGS
=-
gdw¨f
-2

55 
OPTFLAGS
=-
O3
 -
‚o
-
omô
-
‰ame
-
poöãr


57 
LANGFLAGS
=-
°d
=
c
++11 -
‚o
-
πti
 -‚o-
ex˚±i⁄s


59 
COMPFLAGS
=-
‚o
-
comm⁄
 -
WÆl
 -
Wexåa
\

60 -
Wno
-
unu£d
-
fun˘i⁄
 -Wno-unu£d-
∑ømëî


62 
CLANGFLAGS
=-
no°döc
++ -
èrgë
 
	`$
(
TARGET
)\

63 -
Wno
-
unu£d
-
¥iv©e
-
fõld
 -Wno-
©åibuãs
\

64 -
	`I$
(
GCCDIR
)/
	`$
(
TARGET
)/
ö˛ude
\

65 -
	`I$
(
GCCDIR
)/
	`$
(
TARGET
)/
ö˛ude
/
c
++/$(
GCCVER
)\

66 -
	`I$
(
GCCDIR
)/
	`$
(
TARGET
)/
ö˛ude
/
c
++/$(
GCCVER
)/$(TARGET)\

67 -
	`I$
(
GCCDIR
)/
lib
/
gcc
/
	`$
(
TARGET
)/$(
GCCVER
)/
ö˛ude


69 
	`i„q
 (
	`$
(
CC
),
˛™g
)

70 
COMPFLAGS
+=
	$$
(
CLANGFLAGS
)

72 
COMPFLAGS
+=-
W°ack
-
ußge
=2048

73 
ídif


75 
MACHFLAGS
=-
f‰ì°™dög
 -
mcmodñ
=
kî√l
 -
m64
\

76 -
mno
-
ªd
-
z⁄e
 -mno-
mmx
 -mno-
avx
 -mno-
avx2
 -mno-3d
now
\

77 -
mno
-
s£
 -mno-
s£2
 -mno-
s£3
 -mno-
s£4
 -mno-
s£4a
 -mno-sse4.1 -mno-sse4.2

78 #-
mp›˙t


80 
TSTFLAGS
=
	`$
(
KERNFLAGS
Ë$(
CFGFLAGS
Ë$(
OPTFLAGS
Ë$(
DBGFLAGS
Ë$(
LANGFLAGS
Ë
	$$
(
COMPFLAGS
)

81 
PREFLAGS
=
	`$
(
KERNFLAGS
Ë$(
CFGFLAGS
Ë$(
OPTFLAGS
Ë$(
LANGFLAGS
Ë$(
COMPFLAGS
Ë
	$$
(
MACHFLAGS
)

82 
CXXFLAGS
=
	`$
(
KERNFLAGS
Ë$(
CFGFLAGS
Ë$(
OPTFLAGS
Ë$(
DBGFLAGS
Ë$(
LANGFLAGS
Ë$(
COMPFLAGS
Ë
	$$
(
MACHFLAGS
)

83 
CFLAGS

	`$
(
KERNFLAGS
Ë$(
OPTFLAGS
Ë$(
DBGFLAGS
Ë$(
COMPFLAGS
Ë
	$$
(
MACHFLAGS
)

85 
ASFLAGS
=-
g
 --64 --
divide
 --
defsym
 
KERNBASE
=
	`$
(KERNBASE)\

86 -
	`I$
(
SRCDIR
Ë-I$(SRCDIR)/
ö˛ude


88 
LDFLAGS
=-
nodeÁu…libs
 -

89 
LDDEF
=--
defsym
=
KERNBASE
=
	$$
(
KERNBASE
)

90 
LIBS
=-
	`L$
(
GCCDIR
)/
	`$
(
TARGET
)/
lib
 -L$(GCCDIR)/lib/
gcc
/$(TARGET)/$(
GCCVER
)\

91 -
l°dc
++ -
lc
 -
lgcc


93 
MODULES
=

94 
MODULES
+=
LockTe°


95 
MODULES
+=
T˝Te°


96 
MODULES
+=
Ex≥rimíts


97 
MODULES
+=
InôPro˚ss


99 
CXXFLAGS
+=-
Iexã∫
/
lwù
\

100 -
Iexã∫
/
lwù
/lwù/
§c
/
ö˛ude
\

101 -
Iexã∫
/
lwù
/lwù/
§c
/
ö˛ude
/
ùv4


	@src/Makefile.local

1 .
	gPHONY
: 
kÆli


3 
kÆli
:

4 
	$$
(
MAKE
Ë
˛ón


5 
rsync
 -
e
 /
u§
/
bö
/
ssh
 -
Õπuvzog
 
	`$
(
SRCDIR
)/ 
$
@:$(SRCDIR)/ --
dñëe


6 
ssh
 
$
@ 
	`$
(
MAKE
Ë-
C
 $(
SRCDIR
)/.. 
t·p


7 
	$$
(
MAKE
Ë
Æl


	@src/Makefile.state

1 
	gCC_SAVE
=/
u§
/
loˇl
/
kos
/
¸oss
/
gcc
/
bö
/
x86_64
-
pc
-
ñf
-gcc

2 
RGDB_SAVE
=

	@src/devices/Devices.cc

1 
	~"devi˚s/S¸ìn.h
"

2 
	~"devi˚s/Sîül.h
"

4 
boﬁ
 
	gSîülDevi˚
::
gdb
;

5 
boﬁ
 
	gDebugDevi˚
::
vÆid
 = 
Ál£
;

7 
	gS¸ìn
::
buf„r
[
xmax
 * 
ymax
];

8 * 
	gS¸ìn
::
video
 = 
nuŒ±r
;

	@src/devices/ISA_DMA.cc

1 
	~"machöe/CPU.h
"

2 
	~"devi˚s/ISA_DMA.h
"

6 c⁄° 
	gBôSåög
<
	guöt8_t
, 2, 1> 
	gISA_DMA
::
MaskOn
;

9 c⁄° 
	gBôSåög
<
	guöt8_t
, 0, 2> 
	gISA_DMA
::
Sñe˘‹
;

10 c⁄° 
	gBôSåög
<
	guöt8_t
, 2, 2> 
	gISA_DMA
::
Tøns„r
;

11 c⁄° 
	gBôSåög
<
	guöt8_t
, 4, 1> 
	gISA_DMA
::
Auto
;

12 c⁄° 
	gBôSåög
<
	guöt8_t
, 5, 1> 
	gISA_DMA
::
Down
;

13 c⁄° 
	gBôSåög
<
	guöt8_t
, 6, 2> 
	gISA_DMA
::
Mode
;

16 
uöt8_t
 
	mAddªss
;

17 
uöt8_t
 
	mCou¡
;

18 
uöt8_t
 
	mPage
;

19 } 
	gp‹ts
[] = {

31 
uöt8_t
 
	mSètus
;

32 
uöt8_t
 
	mComm™d
;

33 
uöt8_t
 
	mReque°
;

34 
uöt8_t
 
	mSögÀCh™√lMask
;

35 
uöt8_t
 
	mMode
;

36 
uöt8_t
 
	mFFRe£t
;

37 
uöt8_t
 
	mI¡îmedüã
;

38 
uöt8_t
 
	mMa°îRe£t
;

39 
uöt8_t
 
	mMaskRe£t
;

40 
uöt8_t
 
	mMu…iCh™√lMask
;

41 } 
	gªgi°îs
[] = {

46 
ölöe
 
	gISA_DMA
::
	$mask
(
uöt8_t
 
ch™√l
, 
boﬁ
 
mask
) {

47 
CPU
::
	`out8
(
ªgi°îs
[
ch™√l
/4].
SögÀCh™√lMask
,

48 (
ch™√l
 & 
	`Sñe˘‹
()Ë| 
MaskOn
.
	`put
(
mask
));

49 
	}
}

51 
ölöe
 
	gISA_DMA
::
	$£tup
(
uöt8_t
 
ch™√l
, uöt8_à
mode
, 
boﬁ
 
autoInô
, 
∑ddr
 
buf„r
, 
uöt16_t
 
Àngth
) {

52 
CPU
::
	`out8
(
ªgi°îs
[
ch™√l
/4].
FFRe£t
, 0xff);

53 
CPU
::
	`out8
(
ªgi°îs
[
ch™√l
/4].
Mode
,

54 (
ch™√l
 & 
	`Sñe˘‹
()Ë| (
mode
 & (
	`Tøns„r
(Ë| 
Auto
.
	`put
(
autoInô
Ë| 
	`Mode
())));

55 
CPU
::
	`out8
(
p‹ts
[
ch™√l
].
Addªss
, 
buf„r
 & 0xff);

56 
CPU
::
	`out8
(
p‹ts
[
ch™√l
].
Addªss
, (
buf„r
 >> 8) & 0xff);

57 
CPU
::
	`out8
(
p‹ts
[
ch™√l
].
Page
, (
buf„r
 >> 16) & 0xff);

58 
CPU
::
	`out8
(
p‹ts
[
ch™√l
].
Cou¡
, 
Àngth
 & 0xff);

59 
CPU
::
	`out8
(
p‹ts
[
ch™√l
].
Cou¡
, (
Àngth
 >> 8) & 0xff);

60 
	}
}

62 
boﬁ
 
	gISA_DMA
::
	$°¨tTøns„r
(
uöt8_t
 
ch™√l
, uöt8_à
mode
, 
∑ddr
 
buf„r
, 
size_t
 
Àngth
) {

63 i‡(
ch™√l
 >8 || ch™√l/4 =0Ë 
Ál£
;

64 i‡(
Àngth
 > 0x10000Ë 
Ál£
;

65 
	`mask
(
ch™√l
, 
åue
);

66 
	`£tup
(
ch™√l
, 
mode
, 
Ál£
, 
Àngth
-1, 
buf„r
);

67 
	`mask
(
ch™√l
, 
Ál£
);

68  
åue
;

69 
	}
}

	@src/devices/ISA_DMA.h

1 #i‚de‡
_ISA_DMA_h_


2 
	#_ISA_DMA_h_
 1

	)

4 
	~"gíîic/bôm™ù.h
"

8 ˛as†
	cISA_DMA
 {

9 
ISA_DMA
(Ë
dñëe
;

10 
ISA_DMA
(c⁄° ISA_DMA&Ë
dñëe
;

11 
	mISA_DMA
& 
	m›î©‹
=(c⁄° 
ISA_DMA
&Ë
dñëe
;

14 c⁄° 
	mBôSåög
<
	muöt8_t
, 2, 1> 
	mMaskOn
;

17 c⁄° 
	mBôSåög
<
	muöt8_t
, 0, 2> 
	mSñe˘‹
;

18 c⁄° 
	mBôSåög
<
	muöt8_t
, 2, 2> 
	mTøns„r
;

19 c⁄° 
	mBôSåög
<
	muöt8_t
, 4, 1> 
	mAuto
;

20 c⁄° 
	mBôSåög
<
	muöt8_t
, 5, 1> 
	mDown
;

21 c⁄° 
	mBôSåög
<
	muöt8_t
, 6, 2> 
	mMode
;

23 ˛as†
	cTøns„rTy≥
 {

24 
	mSñfTe°
 = 0b00,

25 
	mWrôe
 = 0b01,

26 
	mRód
 = 0b10,

27 
	mInvÆid
 = 0b11

30 ˛as†
	cTøns„rMode
 {

31 
	gOnDem™d
 = 0b00,

32 
	gSögÀ
 = 0b01,

33 
	gBlock
 = 0b10,

34 
	gCasˇde
 = 0b11

37 
ölöe
 
mask
(
uöt8_t
 
ch™√l
, 
boﬁ
 mask);

38 
ölöe
 
£tup
(
uöt8_t
 
ch™√l
, uöt8_à
mode
, 
boﬁ
 
autoInô
, 
∑ddr
 
buf„r
, 
uöt16_t
 
Àngth
);

39 
	gpublic
:

40 
boﬁ
 
°¨tTøns„r
(
uöt8_t
 
ch™√l
, uöt8_à
mode
, 
∑ddr
 
buf„r
, 
size_t
 
Àngth
);

	@src/devices/Keyboard.cc

17 
	~"kî√l/Ouçut.h
"

18 
	~"machöe/APIC.h
"

19 
	~"machöe/Machöe.h
"

20 
	~"devi˚s/Keybﬂrd.h
"

23 : 
Keybﬂrd
::
KeyCode
 {

25 
KEY_BACKSPACE
 = '\b',

26 
	gKEY_TAB
 = '\t',

27 
	gKEY_ENTER
 = '\n',

28 
	gKEY_ESCAPE
 = 0x1B,

29 
	gKEY_BACKSLASH
 = '\\',

30 
	gKEY_QUOTE
 = '\'',

31 
	gKEY_DELETE
 = 0x7F,

34 
	gKEY_F1
 = 0x1000,

35 
	gKEY_F2
,

36 
	gKEY_F3
,

37 
	gKEY_F4
,

38 
	gKEY_F5
,

39 
	gKEY_F6
,

40 
	gKEY_F7
,

41 
	gKEY_F8
,

42 
	gKEY_F9
,

43 
	gKEY_F10
,

44 
	gKEY_F11
,

45 
	gKEY_F12
,

48 
	gKEY_PRTSCR
,

49 
	gKEY_SCROLLLOCK
,

50 
	gKEY_PAUSE
,

53 
	gKEY_CAPSLOCK
,

54 
	gKEY_LSHIFT
,

55 
	gKEY_LCTRL
,

56 
	gKEY_LALT
,

57 
	gKEY_LGUI
,

58 
	gKEY_RSHIFT
,

59 
	gKEY_RCTRL
,

60 
	gKEY_RALT
,

61 
	gKEY_RGUI
,

64 
	gKEY_UP
,

65 
	gKEY_DOWN
,

66 
	gKEY_LEFT
,

67 
	gKEY_RIGHT
,

68 
	gKEY_INSERT
,

69 
	gKEY_HOME
,

70 
	gKEY_END
,

71 
	gKEY_PGUP
,

72 
	gKEY_PGDOWN
,

75 
	gKEY_KP_DOT
,

76 
	gKEY_KP_0
,

77 
	gKEY_KP_1
,

78 
	gKEY_KP_2
,

79 
	gKEY_KP_3
,

80 
	gKEY_KP_4
,

81 
	gKEY_KP_5
,

82 
	gKEY_KP_6
,

83 
	gKEY_KP_7
,

84 
	gKEY_KP_8
,

85 
	gKEY_KP_9
,

86 
	gKEY_KP_NUMLOCK
,

87 
	gKEY_KP_DIVIDE
,

88 
	gKEY_KP_ASTERISK
,

89 
	gKEY_KP_MINUS
,

90 
	gKEY_KP_PLUS
,

91 
	gKEY_KP_ENTER
,

93 
	gKEY_UNKNOWN


97 c⁄° 
	gèbÀXTtoKey
[][2] = {

99 { 
KEY_UNKNOWN
, KEY_UNKNOWN },

100 { 
KEY_ESCAPE
, 
KEY_UNKNOWN
 },

101 { '1', 
KEY_UNKNOWN
 },

102 { '2', 
KEY_UNKNOWN
 },

103 { '3', 
KEY_UNKNOWN
 },

104 { '4', 
KEY_UNKNOWN
 },

105 { '5', 
KEY_UNKNOWN
 },

106 { '6', 
KEY_UNKNOWN
 },

107 { '7', 
KEY_UNKNOWN
 },

108 { '8', 
KEY_UNKNOWN
 },

109 { '9', 
KEY_UNKNOWN
 },

110 { '0', 
KEY_UNKNOWN
 },

111 { '-', 
KEY_UNKNOWN
 },

112 { '=', 
KEY_UNKNOWN
 },

113 { 
KEY_BACKSPACE
, 
KEY_UNKNOWN
 },

114 { 
KEY_TAB
, 
KEY_UNKNOWN
 },

115 { 'q', 
KEY_UNKNOWN
 },

116 { 'w', 
KEY_UNKNOWN
 },

117 { 'e', 
KEY_UNKNOWN
 },

118 { 'r', 
KEY_UNKNOWN
 },

119 { 't', 
KEY_UNKNOWN
 },

120 { 'y', 
KEY_UNKNOWN
 },

121 { 'u', 
KEY_UNKNOWN
 },

122 { 'i', 
KEY_UNKNOWN
 },

123 { 'o', 
KEY_UNKNOWN
 },

124 { 'p', 
KEY_UNKNOWN
 },

125 { '[', 
KEY_UNKNOWN
 },

126 { ']', 
KEY_UNKNOWN
 },

127 { 
KEY_ENTER
, 
KEY_KP_ENTER
 },

128 { 
KEY_LCTRL
, 
KEY_RCTRL
 },

129 { 'a', 
KEY_UNKNOWN
 },

130 { 's', 
KEY_UNKNOWN
 },

131 { 'd', 
KEY_UNKNOWN
 },

132 { 'f', 
KEY_UNKNOWN
 },

133 { 'g', 
KEY_UNKNOWN
 },

134 { 'h', 
KEY_UNKNOWN
 },

135 { 'j', 
KEY_UNKNOWN
 },

136 { 'k', 
KEY_UNKNOWN
 },

137 { 'l', 
KEY_UNKNOWN
 },

138 { ';', 
KEY_UNKNOWN
 },

139 { '\'', 
KEY_UNKNOWN
 },

140 { '`', 
KEY_UNKNOWN
 },

141 { 
KEY_LSHIFT
, 
KEY_PRTSCR
 },

142 { '\\', 
KEY_UNKNOWN
 },

143 { 'z', 
KEY_UNKNOWN
 },

144 { 'x', 
KEY_UNKNOWN
 },

145 { 'c', 
KEY_UNKNOWN
 },

146 { 'v', 
KEY_UNKNOWN
 },

147 { 'b', 
KEY_UNKNOWN
 },

148 { 'n', 
KEY_UNKNOWN
 },

149 { 'm', 
KEY_UNKNOWN
 },

150 { ',', 
KEY_UNKNOWN
 },

151 { '.', 
KEY_UNKNOWN
 },

152 { '/', 
KEY_KP_DIVIDE
 },

153 { 
KEY_RSHIFT
, 
KEY_UNKNOWN
 },

154 { 
KEY_KP_ASTERISK
, 
KEY_PRTSCR
 },

155 { 
KEY_LALT
, 
KEY_RALT
 },

156 { ' ', 
KEY_UNKNOWN
 },

157 { 
KEY_CAPSLOCK
, 
KEY_UNKNOWN
 },

158 { 
KEY_F1
, 
KEY_UNKNOWN
 },

159 { 
KEY_F2
, 
KEY_UNKNOWN
 },

160 { 
KEY_F3
, 
KEY_UNKNOWN
 },

161 { 
KEY_F4
, 
KEY_UNKNOWN
 },

162 { 
KEY_F5
, 
KEY_UNKNOWN
 },

163 { 
KEY_F6
, 
KEY_UNKNOWN
 },

164 { 
KEY_F7
, 
KEY_UNKNOWN
 },

165 { 
KEY_F8
, 
KEY_UNKNOWN
 },

166 { 
KEY_F9
, 
KEY_UNKNOWN
 },

167 { 
KEY_F10
, 
KEY_UNKNOWN
 },

168 { 
KEY_KP_NUMLOCK
, 
KEY_UNKNOWN
 },

169 { 
KEY_SCROLLLOCK
, 
KEY_UNKNOWN
 },

170 { 
KEY_KP_7
, 
KEY_HOME
 },

171 { 
KEY_KP_8
, 
KEY_UP
 },

172 { 
KEY_KP_9
, 
KEY_PGUP
 },

173 { 
KEY_KP_MINUS
, 
KEY_UNKNOWN
 },

174 { 
KEY_KP_4
, 
KEY_LEFT
 },

175 { 
KEY_KP_5
, 
KEY_UNKNOWN
 },

176 { 
KEY_KP_6
, 
KEY_RIGHT
 },

177 { 
KEY_KP_PLUS
, 
KEY_UNKNOWN
 },

178 { 
KEY_KP_1
, 
KEY_END
 },

179 { 
KEY_KP_2
, 
KEY_DOWN
 },

180 { 
KEY_KP_3
, 
KEY_PGDOWN
 },

181 { 
KEY_KP_0
, 
KEY_INSERT
 },

182 { 
KEY_KP_DOT
, 
KEY_DELETE
 },

183 { 
KEY_UNKNOWN
, KEY_UNKNOWN },

184 { 
KEY_UNKNOWN
, KEY_UNKNOWN },

185 { 
KEY_UNKNOWN
, KEY_UNKNOWN },

186 { 
KEY_F11
, 
KEY_UNKNOWN
 },

187 { 
KEY_F12
, 
KEY_UNKNOWN
 }

191 c⁄° 
uöt8_t
 
	gèbÀATtoXT
[0x80] = {

205 
	gsˇnCodeSë
 = 2;

209 c⁄° 
uöt8_t
 
	gx11Code
[2][0x80] = {

245 c⁄° 
uöt8_t
 
	gD©aP‹t
 = 0x60;

246 c⁄° 
uöt8_t
 
	gSètusRegi°î
 = 0x64;

247 c⁄° 
uöt8_t
 
	gComm™dRegi°î
 = 0x64;

249 
	eCTRL_CMDS
 {

250 
	mCTRL_CMD_READ_CONFIG
 = 0x20,

251 
	mCTRL_CMD_WRITE_CONFIG
 = 0x60,

252 
	mCTRL_CMD_DISABLE_P2
 = 0xA7,

253 
	mCTRL_CMD_ENABLE_P2
 = 0xA8,

254 
	mCTRL_CMD_TEST_P2
 = 0xA9,

255 
	mCTRL_CMD_SELF_TEST
 = 0xAA,

256 
	mCTRL_CMD_TEST_P1
 = 0xAB,

257 
	mCTRL_CMD_DISABLE_P1
 = 0xAD,

258 
	mCTRL_CMD_ENABLE_P1
 = 0xAE,

259 
	mCTRL_CMD_READ_CTRL_INPUT
 = 0xC0,

260 
	mCTRL_CMD_READ_CTRL_OUTPUT
 = 0xD0,

261 
	mCTRL_CMD_WRITE_CTRL_OUTPUT
 = 0xD1,

262 
	mCTRL_CMD_WRITE_P1_OUTPUT
 = 0xD2,

263 
	mCTRL_CMD_WRITE_P2_OUTPUT
 = 0xD3,

264 
	mCTRL_CMD_WRITE_TO_P2
 = 0xD4,

265 
	mCTRL_CMD_READ_TEST_INPUTS
 = 0xE0,

266 
	mCTRL_CMD_SYSTEM_RESET
 = 0xFE,

269 
	eCTRL_STATS_MASK
 {

270 
	mCTRL_STATS_MASK_OUT_BUF
 = 0x01,

271 
	mCTRL_STATS_MASK_IN_BUF
 = 0x02,

272 
	mCTRL_STATS_MASK_SYSTEM
 = 0x04,

273 
	mCTRL_STATS_MASK_CMD_DATA
 = 0x08,

274 
	mCTRL_STATS_MASK_LOCKED
 = 0x10,

275 
	mCTRL_STATS_MASK_AUX_BUF
 = 0x20,

276 
	mCTRL_STATS_MASK_TIMEOUT
 = 0x40,

277 
	mCTRL_STATS_MASK_PARITY
 = 0x80

280 
	eDEV_CMDS
 {

281 
	mDEV_CMD_SET_LED
 = 0xED,

282 
	mDEV_CMD_ECHO
 = 0xEE,

283 
	mDEV_CMD_SCAN_CODE_SET
 = 0xF0,

284 
	mDEV_CMD_ID
 = 0xF2,

285 
	mDEV_CMD_AUTODELAY
 = 0xF3,

286 
	mDEV_CMD_ENABLE
 = 0xF4,

287 
	mDEV_CMD_DISABLE
 = 0xF5,

288 
	mDEV_CMD_DEFAULT_PARAMETERS
 = 0xF6,

289 
	mDEV_CMD_ALL_AUTO
 = 0xF7,

290 
	mDEV_CMD_ALL_MAKEBREAK
 = 0xF8,

291 
	mDEV_CMD_ALL_MAKEONLY
 = 0xF9,

292 
	mDEV_CMD_ALL_MAKEBREAK_AUTO
 = 0xFA,

293 
	mDEV_CMD_SINGLE_AUTOREPEAT
 = 0xFB,

294 
	mDEV_CMD_SINGLE_MAKEBREAK
 = 0xFC,

295 
	mDEV_CMD_SINGLE_BREAKONLY
 = 0xFD,

296 
	mDEV_CMD_RESEND
 = 0xFE,

297 
	mDEV_CMD_RESET
 = 0xFF

301 
	eERROR
 {

302 
	mERR_BUF_OVERRUN
 = 0x00,

303 
	mERR_ID_RET
 = 0x83AB,

304 
	mERR_BAT
 = 0xAA,

305 
	mERR_ECHO_RET
 = 0xEE,

306 
	mERR_ACK
 = 0xFA,

307 
	mERR_BAT_FAILED
 = 0xFC,

308 
	mERR_DIAG_FAILED
 = 0xFD,

309 
	mERR_RESEND_CMD
 = 0xFE,

310 
	mERR_KEY
 = 0xFF

313 
boﬁ
 
	$C⁄åﬁÀrCheckRódBuf„r
() {

314  
CPU
::
	`ö8
(
SètusRegi°î
Ë& 
CTRL_STATS_MASK_OUT_BUF
;

315 
	}
}

317 
boﬁ
 
	$C⁄åﬁÀrCheckWrôeBuf„r
() {

318  
CPU
::
	`ö8
(
SètusRegi°î
Ë& 
CTRL_STATS_MASK_IN_BUF
;

319 
	}
}

321 
	$C⁄åﬁÀrComm™d
(
uöt8_t
 
cmd
) {

322 
	`C⁄åﬁÀrCheckWrôeBuf„r
());

323 
CPU
::
	`out8
(
Comm™dRegi°î
, 
cmd
);

324 
	}
}

326 
	$DøöRódBuf„r
() {

327 
	`C⁄åﬁÀrCheckRódBuf„r
()) {

328 
uöt8_t
 
d©a
 = 
CPU
::
	`ö8
(
D©aP‹t
);

329 
DBG
::
	`out1
(DBG::
Devi˚s
, ' ', 
	`FmtHex
(
d©a
));

331 
	}
}

333 
uöt8_t
 
	$D©aRód
() {

334 !
	`C⁄åﬁÀrCheckRódBuf„r
());

335  
CPU
::
	`ö8
(
D©aP‹t
);

336 
	}
}

338 
	gãm∂©e
<
boﬁ
 
	g£c⁄d
=
Ál£
>

339 
	$D©aWrôe
(
uöt8_t
 
d©a
) {

340 
	`C⁄åﬁÀrCheckWrôeBuf„r
());

341 i‡(
£c⁄d
Ë
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_WRITE_TO_P2
);

342 
CPU
::
	`out8
(
D©aP‹t
, 
d©a
);

343 
	}
}

345 
	gãm∂©e
<
boﬁ
 
	g£c⁄d
=
Ál£
>

346 
uöt8_t
 
	$Devi˚Comm™dOn˚
(
uöt8_t
 
cmd
) {

347 
D©aWrôe
<
£c⁄d
>(
cmd
);

348  
	`D©aRód
();

349 
	}
}

351 
	gãm∂©e
<
boﬁ
 
	g£c⁄d
=
Ál£
>

352 
uöt8_t
 
	$Devi˚Comm™d
(
uöt8_t
 
cmd
) {

353 
uöt8_t
 
ªtcode
;

354 dÿ
ªtcode
 = 
Devi˚Comm™dOn˚
<
£c⁄d
>(
cmd
); ªtcodê=
ERR_RESEND_CMD
);

355  
ªtcode
;

356 
	}
}

358 
	gãm∂©e
<
boﬁ
 
	g£c⁄d
=
Ál£
>

359 
	$Devi˚Comm™dCheck
(
uöt8_t
 
cmd
) {

360 
uöt8_t
 
ªtcode
 = 
	`Devi˚Comm™d
(
cmd
);

361 
	`KCHECK1
(
ªtcode
 =
ERR_ACK
, 
	`FmtHex
(retcode));

362 
	}
}

364 
boﬁ
 
	$SñfTe°
() {

365 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_SELF_TEST
);

366  (
	`D©aRód
() == 0x55);

367 
	}
}

370 
	$SëLeds
(
uöt8_t
 
Àd
) {

371 
	`D©aWrôe
(
DEV_CMD_SET_LED
);

372 
	`D©aWrôe
(
Àd
);

373 
	}
}

375 
	gKeybﬂrd
::
	$öô
() {

376 
DBG
::
	`out1
(DBG::
Devi˚s
, "PS/2:");

377 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_ENABLE_P1
);

378 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_ENABLE_P2
);

379 
	`DøöRódBuf„r
();

381 
DBG
::
	`out1
(DBG::
Devi˚s
, " CFG:");

382 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_READ_CONFIG
);

383 
uöt8_t
 
c⁄fig
 = 
	`D©aRód
();

384 
DBG
::
	`out1
(DBG::
Devi˚s
, 
	`FmtHex
(
c⁄fig
));

385 
c⁄fig
 &= ~(1 << 0);

386 
c⁄fig
 &= ~(1 << 1);

387 
c⁄fig
 &= ~(1 << 6);

388 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_WRITE_CONFIG
);

389 
	`D©aWrôe
(
c⁄fig
);

391 i‡(!
	`SñfTe°
()) ;

392 
DBG
::
	`out1
(DBG::
Devi˚s
, " ST");

394 i‡(!(
c⁄fig
 & (1 << 4))) {

395 
DBG
::
	`out1
(DBG::
Devi˚s
, " keyb:");

396 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_TEST_P1
);

397 
uöt8_t
 
d©a
 = 
	`D©aRód
();

398 
	`KCHECK1
–
d©a
 =0x00, 
	`FmtHex
(data));

399 
DBG
::
	`out1
(DBG::
Devi˚s
, 'T');

400 
	`DøöRódBuf„r
();

403 
	`Devi˚Comm™dCheck
(
DEV_CMD_DISABLE
);

404 
DBG
::
	`out1
(DBG::
Devi˚s
, 'S');

405 
	`Devi˚Comm™dCheck
(
DEV_CMD_RESET
);

406 
DBG
::
	`out1
(DBG::
Devi˚s
, 'R');

407 
d©a
 = 
	`D©aRód
();

408 
	`KCHECK1
–
d©a
 =
ERR_BAT
, 
	`FmtHex
(data));

409 
DBG
::
	`out1
(DBG::
Devi˚s
, 'R');

410 
	`Devi˚Comm™dCheck
(
DEV_CMD_SCAN_CODE_SET
);

411 
	`Devi˚Comm™dCheck
(0x02);

412 
	`Devi˚Comm™dCheck
(
DEV_CMD_SCAN_CODE_SET
);

413 
d©a
 = 
	`Devi˚Comm™d
(0x00);

414 i‡(
d©a
 =
ERR_ACK
Ëd©®
	`D©aRód
();

415 
DBG
::
	`out1
(DBG::
Devi˚s
, '/', 
	`FmtHex
(
d©a
));

416 
d©a
) {

417 0x01: 0x43: 
sˇnCodeSë
 = 1; ;

418 0x02: 0x41: 
sˇnCodeSë
 = 2; ;

419 0x03: 0x3F: 
sˇnCodeSë
 = 3; ;

420 : 
	`KABORT0
();

422 
DBG
::
	`out1
(DBG::
Devi˚s
, '/', 
	`FmtHex
(
sˇnCodeSë
));

424 
	`Devi˚Comm™dCheck
(
DEV_CMD_ENABLE
);

425 
DBG
::
	`out1
(DBG::
Devi˚s
, "/A");

427 
c⁄fig
 |= (1 << 0);

431 i‡(!(
c⁄fig
 & (1 << 5))) {

432 
DBG
::
	`out1
(DBG::
Devi˚s
, " mouse:");

433 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_TEST_P2
);

434 
uöt8_t
 
d©a
 = 
	`D©aRód
();

435 
	`KCHECK1
–
d©a
 =0x00, 
	`FmtHex
(data));

436 
DBG
::
	`out1
(DBG::
Devi˚s
, 'T');

437 
	`DøöRódBuf„r
();

438 
Devi˚Comm™dCheck
<
åue
>(
DEV_CMD_DISABLE
);

439 
DBG
::
	`out1
(DBG::
Devi˚s
, 'S');

440 
Devi˚Comm™dCheck
<
åue
>(
DEV_CMD_RESET
);

441 
DBG
::
	`out1
(DBG::
Devi˚s
, 'R');

442 
d©a
 = 
	`D©aRód
();

443 
	`KCHECK1
–
d©a
 =
ERR_BAT
, 
	`FmtHex
(data));

444 
DBG
::
	`out1
(DBG::
Devi˚s
, 'R');

446 
Devi˚Comm™dCheck
<
åue
>(
DEV_CMD_ENABLE
);

447 
DBG
::
	`out1
(DBG::
Devi˚s
, "/A");

448 
c⁄fig
 |= (1 << 1);

452 
DBG
::
	`oué
(DBG::
Devi˚s
, " - ", 
	`FmtHex
(
c⁄fig
));

454 i‡(
c⁄fig
 & (1 << 0)Ë
Machöe
::
	`ªgi°îIrqAsync
(
PIC
::
Keybﬂrd
, (
funcvoid1_t
)
úqH™dÀr
, 
this
);

455 i‡(
c⁄fig
 & (1 << 1)Ë
Machöe
::
	`ªgi°îIrqSync
(
PIC
::
Mou£
, 0xfc);

457 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_WRITE_CONFIG
);

458 
	`D©aWrôe
(
c⁄fig
);

459 
	}
}

461 
ölöe
 
	gKeybﬂrd
::
	$úqH™dÀrI¡î«l
() {

463 
	`C⁄åﬁÀrCheckRódBuf„r
()) {

464 
KeyCode
 
code
 = 
	`D©aRód
();

466 #i‡
TESTING_KEYCODE_LOOP


467 
kbq
.
	`åySíd
(
code
);

471 
code
) {

472 0xE0: 
	`KASSERT0
(!
exãnded
);Éxtended = 1; ;

473 0xE1: 
	`KASSERT0
(!
exãnded
);Éxtended = 2; ;

474 
ERR_ACK
: 
	`KCHECK0
(
acks
 > 0);ácks -= 1; ;

476 
	`KCHECK0
(!
acks
);

478 i‡(
sˇnCodeSë
 == 1) {

479 i‡(
code
 & 0x80) {

480 
code
 &= ~0x80;

481 
is_bªak
 = 
åue
;

484 i‡(
code
 == 0xf0) {

485 
is_bªak
 = 
åue
;

488 
	`KASSERT1
(
code
 >= 0 && code < 0x80, code);

489 
code
 = 
èbÀATtoXT
[code];

493 
KeyCode
 
key
;

494 i‡(
exãnded
 =2 && 
code
 == 0x1D) {

495 
exãnded
 = 3;

497 } i‡(
exãnded
 =3 && 
code
 == 0x45) {

498 
key
 = 
KEY_PAUSE
;

500 
	`KASSERT1
(
exãnded
 >= 0 &&Éxtended <= 1,Éxtended);

501 
key
 = 
èbÀXTtoKey
[
code
][
exãnded
];

503 
exãnded
 = 0;

505 i‡(
is_bªak
) {

506 
is_bªak
 = 
Ál£
;

507 
key
) {

508 
KEY_LCTRL
: 
KEY_RCTRL
: 
˘æ
 = 
Ál£
; ;

509 
KEY_LSHIFT
: 
KEY_RSHIFT
: 
shi·
 = 
Ál£
; ;

510 
KEY_LALT
: 
KEY_RALT
: 
Æt
 = 
Ál£
; ;

515 
key
) {

516 
KEY_LCTRL
: 
KEY_RCTRL
: 
˘æ
 = 
åue
; ;

517 
KEY_LSHIFT
: 
KEY_RSHIFT
: 
shi·
 = 
åue
; ;

518 
KEY_LALT
: 
KEY_RALT
: 
Æt
 = 
åue
; ;

519 
KEY_SCROLLLOCK
: 
Àd
 ^1; 
	`SëLeds
÷ed); 
acks
 += 2; ;

520 
KEY_KP_NUMLOCK
: 
Àd
 ^2; 
	`SëLeds
÷ed); 
acks
 += 2; ;

521 
KEY_CAPSLOCK
: 
Àd
 ^4; 
	`SëLeds
÷ed); 
acks
 += 2; ;

524 i‡(
Æt
) {

525 i‡(
˘æ
 && 
key
 =
KEY_DELETE
Ë
	`ReboŸ
();

526 
kbq
.
	`åySíd
(
KEY_ESCAPE
);

529 i‡((
shi·
 || 
	`gë_ˇp¶ock
()Ë&& 
key
 >= 'a' && key <= 'z') {

530 
key
 -= 32;

531 
£nd
;

534 i‡(
˘æ
 && 
key
 >= 'a' && key <= 'z') {

535 
key
 -= 96;

536 
£nd
;

539 i‡(
shi·
Ë
key
) {

540 '1': 
key
 = '!'; 
£nd
;

541 '2': 
key
 = '@'; 
£nd
;

542 '3': 
key
 = '#'; 
£nd
;

543 '4': 
key
 = '$'; 
£nd
;

544 '5': 
key
 = '%'; 
£nd
;

545 '6': 
key
 = '^'; 
£nd
;

546 '7': 
key
 = '&'; 
£nd
;

547 '8': 
key
 = '*'; 
£nd
;

548 '9': 
key
 = '('; 
£nd
;

549 '0': 
key
 = ')'; 
£nd
;

550 '-': 
key
 = '_'; 
£nd
;

551 '=': 
key
 = '+'; 
£nd
;

552 ',': 
key
 = '<'; 
£nd
;

553 '.': 
key
 = '>'; 
£nd
;

554 '/': 
key
 = '?'; 
£nd
;

555 ';': 
key
 = ':'; 
£nd
;

556 '\'': 
key
 = '"'; 
£nd
;

557 '[': 
key
 = '{'; 
£nd
;

558 ']': 
key
 = '}'; 
£nd
;

559 '`': 
key
 = '~'; 
£nd
;

560 '\\': 
key
 = '|'; 
£nd
;

563 i‡(
	`gë_numlock
()Ë
key
) {

564 
KEY_KP_DOT
: 
key
 = '.'; 
£nd
;

565 
KEY_KP_0
: 
key
 = '0'; 
£nd
;

566 
KEY_KP_1
: 
key
 = '1'; 
£nd
;

567 
KEY_KP_2
: 
key
 = '2'; 
£nd
;

568 
KEY_KP_3
: 
key
 = '3'; 
£nd
;

569 
KEY_KP_4
: 
key
 = '4'; 
£nd
;

570 
KEY_KP_5
: 
key
 = '5'; 
£nd
;

571 
KEY_KP_6
: 
key
 = '6'; 
£nd
;

572 
KEY_KP_7
: 
key
 = '7'; 
£nd
;

573 
KEY_KP_8
: 
key
 = '8'; 
£nd
;

574 
KEY_KP_9
: 
key
 = '9'; 
£nd
;

577 
key
) {

578 
KEY_KP_DOT
: 
key
 = 
KEY_DELETE
; 
£nd
;

579 
KEY_KP_0
: 
key
 = 
KEY_INSERT
; 
£nd
;

580 
KEY_KP_1
: 
key
 = 
KEY_END
; 
£nd
;

581 
KEY_KP_2
: 
key
 = 
KEY_DOWN
; 
£nd
;

582 
KEY_KP_3
: 
key
 = 
KEY_PGDOWN
; 
£nd
;

583 
KEY_KP_4
: 
key
 = 
KEY_LEFT
; 
£nd
;

584 
KEY_KP_5
: 
key
 = 
KEY_UNKNOWN
; 
£nd
;

585 
KEY_KP_6
: 
key
 = 
KEY_RIGHT
; 
£nd
;

586 
KEY_KP_7
: 
key
 = 
KEY_HOME
; 
£nd
;

587 
KEY_KP_8
: 
key
 = 
KEY_UP
; 
£nd
;

588 
KEY_KP_9
: 
key
 = 
KEY_PGUP
; 
£nd
;

589 
KEY_KP_DIVIDE
: 
key
 = '/'; 
£nd
;

590 
KEY_KP_ASTERISK
: 
key
 = '*'; 
£nd
;

591 
KEY_KP_MINUS
: 
key
 = '-'; 
£nd
;

592 
KEY_KP_PLUS
: 
key
 = '+'; 
£nd
;

593 
KEY_KP_ENTER
: 
key
 = 
KEY_ENTER
; 
£nd
;

596 
£nd
:

597 
kbq
.
	`åySíd
(
key
);

599 
	}
}

601 
	gKeybﬂrd
::
	$úqH™dÀr
(
Keybﬂrd
* 
keyb
) {

602 
keyb
->
	`úqH™dÀrI¡î«l
();

603 
	}
}

606 
	gKeybﬂrd
::
	$ª£t_sy°em
() {

607 
	`C⁄åﬁÀrComm™d
(
CTRL_CMD_WRITE_CTRL_OUTPUT
);

608 
	`D©aWrôe
(
CTRL_CMD_SYSTEM_RESET
);

609 
	}
}

	@src/devices/Keyboard.h

22 #i‚de‡
_Keybﬂrd_h_


23 
	#_Keybﬂrd_h_
 1

	)

25 
	~"gíîic/Buf„rs.h
"

26 
	~"ru¡ime/SyncQueues.h
"

28 ˛as†
	cKeybﬂrd
 {

29 
	mpublic
:

30 
	tKeyCode
;

32 
	m¥iv©e
:

33 
MesßgeQueue
<
FixedRögBuf„r
<
KeyCode
,256>> 
	mkbq
;

36 
boﬁ
 
	mis_bªak
;

37 
boﬁ
 
	mshi·
, 
	mÆt
, 
	m˘æ
;

38 
	mÀd
;

39 
	macks
;

40 
	mexãnded
;

42 
ölöe
 
úqH™dÀrI¡î«l
();

44 
	mpublic
:

45 
	$Keybﬂrd
(Ë: 
	`is_bªak
(
Ál£
), 
	`shi·
(Ál£), 
	`Æt
(Ál£), 
	`˘æ
(false),

46 
	`Àd
(0), 
	`acks
(0), 
	$exãnded
(0) {}

48 
	$öô
(Ë
	`__£˘i⁄
(".boot.text");

49 
	`úqH™dÀr
(
Keybﬂrd
* 
keyb
);

50 
KeyCode
 
	$ªad
(Ë{  
kbq
.
	`ªcv
(); 
	}
}

51 
boﬁ
 
	$åyRód
(
KeyCode
& 
kc
Ë{  
kbq
.
	`åyRecv
(kc); 
	}
}

54 
boﬁ
 
	$gë_s¸ﬁl_lock
(Ë{  
Àd
 & 1; 
	}
}

55 
boﬁ
 
	$gë_numlock
(Ë{  
Àd
 & 2; 
	}
}

56 
boﬁ
 
	$gë_ˇp¶ock
(Ë{  
Àd
 & 4; 
	}
}

59 
boﬁ
 
	$gë_Æt
(Ë{  
Æt
; 
	}
}

60 
boﬁ
 
	$gë_˘æ
(Ë{  
˘æ
; 
	}
}

61 
boﬁ
 
	$gë_shi·
(Ë{  
shi·
; 
	}
}

64 
ª£t_sy°em
();

	@src/devices/PCI.cc

17 
	~"devi˚s/PCI.h
"

20 
	gPCI
::
checkAŒBu£s
(
li°
<
PCIDevi˚
>& 
pciDevLi°
) {

21 i‡((
HódîTy≥
(0,0,0Ë& 0x80Ë=0Ë
checkBus
(0, 
pciDevLi°
);

22 
uöt8_t
 
	gfunc
 = 0; fun¯< 
	gMaxBus
; func++) {

23 i‡(
Víd‹ID
(0,0,
func
Ë=0xffffË
checkBus
(func, 
pciDevLi°
);

28 
	gPCI
::
checkBus
(
uöt8_t
 
bus
, 
li°
<
PCIDevi˚
>& 
pciDevLi°
) {

29 
	gDBG
::
oué
(
DBG
::
PCI
, "Checkög BUS ", 
FmtHex
(
bus
));

30 
uöt8_t
 
	gdev
 = 0; dev < 
	gMaxDevi˚
; dev++) {

31 
checkDevi˚
(
bus
, 
dev
, 
pciDevLi°
);

36 
	gPCI
::
checkDevi˚
(
uöt8_t
 
bus
, uöt8_à
dev
, 
li°
<
PCIDevi˚
>& 
pciDevLi°
) {

37 i‡(
Víd‹ID
(
bus
,
dev
,0) == 0xffff) ;

38 
checkFun˘i⁄
(
bus
, 
dev
, 0, 
pciDevLi°
);

39 i‡((
HódîTy≥
(
bus
,
dev
,0) & 0x80) != 0) {

40 
uöt8_t
 
func
 = 1; 
	gfunc
 < 
	gMaxFun˘i⁄
; func++) {

41 i‡(
Víd‹ID
(
bus
,
dev
,
func
Ë!0xffffË
checkFun˘i⁄
(bus, dev, func, 
pciDevLi°
);

47 
	gPCI
::
checkFun˘i⁄
(
uöt8_t
 
bus
, uöt8_à
dev
, uöt8_à
func
, 
li°
<
PCIDevi˚
>& 
pciDevLi°
) {

48 
	gDBG
::
oué
(
DBG
::
PCI
, "PCI b/d/f: ", 
FmtHex
(
bus
,2), '/', FmtHex(
dev
,2), '/', FmtHex(
func
,2),

49 " v/d: ", 
FmtHex
(
Víd‹ID
(
bus
,
dev
,
func
),4), '/', FmtHex(
Devi˚ID
(bus,dev,func),4),

50 " cmd: ", 
FmtHex
(
Comm™d
(
bus
,
dev
,
func
),4), " st: ", FmtHex(
Sètus
(bus,dev,func),4));

51 
	gli°
<
	guöt32_t
> 
	gbusLi°
;

52 
uöt32_t
 
	ght
 = 
HódîTy≥
(
bus
,
dev
,
func
);

53 
	ght
 & 0x7f) {

55 
uöt8_t
 
û
 = 
I¡îru±Löe
(
bus
,
dev
,
func
);

56 
uöt8_t
 
	gù
 = 
I¡îru±Pö
(
bus
,
dev
,
func
);

57 
	gDBG
::
out1
(
DBG
::
PCI
, "IRQ L/P: ", 
FmtHex
(
û
,2), '/', 
ù
 ? ('A' + ip - 1) : 'X');

58 
	gDBG
::
out1
(
DBG
::
PCI
, " BARs:");

59 
	gi
 = 0; i < 6; i += 1) {

60 
DBG
::
out1
(DBG::
PCI
, ' ', 
FmtHex
(
BAR
(
bus
,
dev
,
func
,
i
)));

62 
	gpciDevLi°
.
push_back
–{
bus
, 
dev
, 
func
, 
û
} );

65 
uöt32_t
 
sb
 = 
Sec⁄d¨yBus
(
bus
,
dev
,
func
);

66 
	gDBG
::
out1
(
DBG
::
PCI
, "Sec⁄d¨yBus: ", 
FmtHex
(
sb
));

67 
	gDBG
::
out1
(
DBG
::
PCI
, " BARs:");

68 
	gi
 = 0; i < 2; i += 1) {

69 
DBG
::
out1
(DBG::
PCI
, ' ', 
FmtHex
(
BAR
(
bus
,
dev
,
func
,
i
)));

71 i‡(
CœssCode
(
bus
,
dev
,
func
Ë=0x06 && 
SubCœss
(bus,dev,func) == 0x04 ) {

72 
busLi°
.
push_back
(
sb
);

78 : 
KABORT1
(
FmtHex
(
ht
));

80 
	gDBG
::
oué
(
DBG
::
PCI
);

81 
uöt32_t
 
	gsb
 : 
busLi°
Ë
checkBus
(
sb
, 
pciDevLi°
);

	@src/devices/PCI.h

17 #i‚de‡
_PCI_h_


18 
	#_PCI_h_
 1

	)

20 
	~"kî√l/Ouçut.h
"

21 
	~"machöe/CPU.h
"

23 
	~<li°
>

27 ˛as†
	cPCIDevi˚
 {

28 
uöt8_t
 
	mbus
;

29 
uöt8_t
 
	mdev
;

30 
uöt8_t
 
	mfunc
;

31 
uöt8_t
 
	múq
;

32 
	$£tIrq
(
uöt8_t
 
i
Ë{ 
úq
 = i; }

33 
public
:

34 
	$PCIDevi˚
(
uöt8_t
 
b
, uöt8_à
d
, uöt8_à
f
, uöt8_à
i
Ë: 
	`bus
(b), 
	`dev
(d), 
	`func
(f), 
	$úq
(
i
Ë{
	}
}

35 
uöt8_t
 
	$gëBus
(Ëc⁄° {  
bus
; 
	}
}

36 
uöt8_t
 
	$gëDevi˚
(Ëc⁄° {  
dev
; 
	}
}

37 
uöt8_t
 
	$gëFun˘i⁄
(Ëc⁄° {  
func
; 
	}
}

38 
uöt8_t
 
	$gëIrq
(Ëc⁄° {  
úq
; 
	}
}

39 
ölöe
 
uöt32_t
 
	$gëBARSize
(
uöt8_t
 
idx
) const;

40 
	}
};

42 
«me•a˚
 
	gPCI
 {

43 c⁄° 
uöt16_t
 
	gAddªssP‹t
 = 0xCF8;

44 c⁄° 
uöt16_t
 
	gD©aP‹t
 = 0xCFC;

45 c⁄° 
uöt8_t
 
	gMaxBus
 = 8;

46 c⁄° 
uöt8_t
 
	gMaxDevi˚
 = 32;

47 c⁄° 
uöt8_t
 
	gMaxFun˘i⁄
 = 8;

48 c⁄° 
uöt32_t
 
	gDeÁu…Width
 = 32;

50 
	uC⁄fig
 {

51 
uöt32_t
 
	gc
;

53 
uöt32_t
 
	gZîo
 : 2;

54 
uöt32_t
 
	gRegi°î
 : 6;

55 
uöt32_t
 
	gFun˘i⁄
 : 3;

56 
uöt32_t
 
	gDevi˚
 : 5;

57 
uöt32_t
 
	gBus
 : 8;

58 
uöt32_t
 
	gRe£rved
 : 7;

59 
uöt32_t
 
	gE«bÀ
 : 1;

61 
C⁄fig
(
uöt8_t
 
b
, uöt8_à
d
, uöt8_à
f
, uöt8_à
r
)

62 : 
Zîo
(0), 
Regi°î
(
r
), 
Fun˘i⁄
(
f
), 
Devi˚
(
d
), 
Bus
(
b
), 
E«bÀ
(1) {}

63 
›î©‹
 
uöt32_t
(Ëc⁄° {  
	gc
; }

64 } 
	g__∑cked
;

66 
ölöe
 
ßnôyCheck
() {

67 
	gCPU
::
out32
(
AddªssP‹t
, 0x80000000);

68 
KASSERT1
(
CPU
::
ö32
(
AddªssP‹t
) == 0x80000000, "No PCI controller detected!");

71 
	gãm∂©e
<
mw‹d
 
	gwidth
=32>

72 
ölöe
 
uöt32_t
 
ªadC⁄fig
(
uöt8_t
 
bus
, uöt8_à
dev
, uöt8_à
func
, uöt8_à
ªg
) {

73 
°©ic_as£π
(
width
 == 8 || width == 16 || width == 32, "unsupported width");

74 
uöt32_t
 
	gshi·
 = (
ªg
 & 3) * 8;

75 
KASSERTN
(
width
 + 
shi·
 <= 32, width, ' ', shift);

76 
	gCPU
::
out32
(
AddªssP‹t
, 
C⁄fig
(
bus
,
dev
,
func
,
ªg
 / 4));

77  (
	gCPU
::
ö32
(
D©aP‹t
Ë>> 
shi·
Ë& 
bômask
<
uöt32_t
>(
width
);

80 
	gãm∂©e
<
mw‹d
 
	gwidth
=32>

81 
ölöe
 
uöt32_t
 
ªadC⁄fig
(c⁄° 
PCIDevi˚
& 
pd
, 
uöt8_t
 
ªg
) {

82  
	gªadC⁄fig
<
	gwidth
>(
	gpd
.
gëBus
(),Öd.
gëDevi˚
(),Öd.
gëFun˘i⁄
(), 
	gªg
);

85 
	gãm∂©e
<
mw‹d
 
	gwidth
=32>

86 
ölöe
 
wrôeC⁄fig
(
uöt8_t
 
bus
, uöt8_à
dev
, uöt8_à
func
, uöt8_à
ªg
, 
uöt32_t
 
vÆue
) {

87 
°©ic_as£π
(
width
 == 8 || width == 16 || width == 32, "unsupported width");

88 
uöt32_t
 
	gshi·
 = (
ªg
 & 3) * 8;

89 
KASSERTN
(
width
 + 
shi·
 <= 32, width, ' ', shift);

90 
	gCPU
::
out32
(
AddªssP‹t
, 
C⁄fig
(
bus
,
dev
,
func
,
ªg
 / 4));

91 
	gCPU
::
out32
(
D©aP‹t
, (
vÆue
 & 
bômask
<
uöt32_t
>(
width
)Ë<< 
shi·
);

94 
	gãm∂©e
<
mw‹d
 
	gwidth
=32>

95 
ölöe
 
wrôeC⁄fig
(c⁄° 
PCIDevi˚
& 
pd
, 
uöt8_t
 
ªg
, 
uöt32_t
 
vÆ
) {

96 
	gwrôeC⁄fig
<
	gwidth
>(
	gpd
.
gëBus
(),Öd.
gëDevi˚
(),Öd.
gëFun˘i⁄
(), 
	gªg
, 
	gvÆ
);

99 
	gãm∂©e
<
	gªg
,
mw‹d
 
	gwidth
>

100 
	sRegi°î
 {

101 
uöt32_t
 
	gc
;

102 
ªad
(
uöt8_t
 
bus
, uöt8_à
dev
, uöt8_à
func
, uöt8_à
off
 = 0) {

103 
c
 = 
PCI
::
ªadC⁄fig
<
width
*8>(
bus
, 
	gdev
, 
	gfunc
, 
	gªg
 + 
off
*
	gwidth
);

105 
ªad
(c⁄° 
PCIDevi˚
& 
pd
, 
uöt8_t
 
off
 = 0) {

106 
ªad
(
pd
.
gëBus
(),Öd.
gëDevi˚
(),Öd.
gëFun˘i⁄
(), 
off
);

108 
wrôe
(
uöt8_t
 
bus
, uöt8_à
dev
, uöt8_à
func
, uöt8_à
off
 = 0) {

109 
PCI
::
wrôeC⁄fig
<
width
*8>(
bus
, 
dev
, 
func
, 
ªg
 + 
off
*width, 
c
);

111 
wrôe
(c⁄° 
PCIDevi˚
& 
pd
, 
uöt8_t
 
off
 = 0) {

112 
wrôe
(
pd
.
gëBus
(),Öd.
gëDevi˚
(),Öd.
gëFun˘i⁄
(), 
off
);

114 
wrôe
(
uöt8_t
 
bus
, uöt8_à
dev
, uöt8_à
func
, 
uöt32_t
 
vÆ
, uöt8_à
off
 = 0) {

115 
PCI
::
wrôeC⁄fig
<
width
*8>(
bus
, 
dev
, 
func
, 
ªg
 + 
off
*width, 
vÆ
);

117 
wrôe
(c⁄° 
PCIDevi˚
& 
pd
, 
uöt32_t
 
vÆ
, 
uöt8_t
 
off
 = 0) {

118 
wrôe
(
pd
.
gëBus
(),Öd.
gëDevi˚
(),Öd.
gëFun˘i⁄
(), 
vÆ
, 
off
);

120 
Regi°î
() = ;

121 
Regi°î
(
uöt8_t
 
bus
, uöt8_à
dev
, uöt8_à
func
, uöt8_à
off
 = 0Ë{ 
ªad
(bus, dev, func, off); }

122 
Regi°î
(c⁄° 
PCIDevi˚
& 
pd
, 
uöt8_t
 
off
 = 0Ë{ 
ªad
(pd, off); }

123 
›î©‹
 
uöt32_t
(Ëc⁄° {  
	gc
; }

126 c⁄° 
	gBôSåög
<
	guöt16_t
, 0,1> 
	gIOS∑˚
;

127 c⁄° 
	gBôSåög
<
	guöt16_t
, 1,1> 
	gMem‹yS∑˚
;

128 c⁄° 
	gBôSåög
<
	guöt16_t
, 2,1> 
	gBusMa°î
;

129 c⁄° 
	gBôSåög
<
	guöt16_t
, 3,1> 
	gS≥cülCy˛es
;

130 c⁄° 
	gBôSåög
<
	guöt16_t
, 4,1> 
	gMem‹yWrôeAndInvÆid©e
;

131 c⁄° 
	gBôSåög
<
	guöt16_t
, 5,1> 
	gVGAPÆëãSno›
;

132 c⁄° 
	gBôSåög
<
	guöt16_t
, 6,1> 
	gP¨ôyEº‹Re•⁄£
;

133 c⁄° 
	gBôSåög
<
	guöt16_t
, 8,1> 
	gSERR
;

134 c⁄° 
	gBôSåög
<
	guöt16_t
, 9,1> 
	gFa°BackToBack
;

135 c⁄° 
	gBôSåög
<
	guöt16_t
,10,1> 
	gI¡îru±DißbÀ
;

137 c⁄° 
	gBôSåög
<
	guöt16_t
, 3,1> 
	gI¡îru±Sètus
;

138 c⁄° 
	gBôSåög
<
	guöt16_t
, 4,1> 
	gC≠abûôõsLi°
;

139 c⁄° 
	gBôSåög
<
	guöt16_t
, 5,1> 
	gMHz66C≠
;

140 c⁄° 
	gBôSåög
<
	guöt16_t
, 7,1> 
	gFa°BackToBackC≠
;

141 c⁄° 
	gBôSåög
<
	guöt16_t
, 8,1> 
	gMa°îD©aP¨ôyEº‹
;

142 c⁄° 
	gBôSåög
<
	guöt16_t
, 9,2> 
	gDEVSELTimög
;

143 c⁄° 
	gBôSåög
<
	guöt16_t
,11,1> 
	gSig«ÀdT¨gëAb‹t
;

144 c⁄° 
	gBôSåög
<
	guöt16_t
,12,1> 
	gRe˚ivedT¨gëAb‹t
;

145 c⁄° 
	gBôSåög
<
	guöt16_t
,13,1> 
	gRe˚ivedMa°îAb‹t
;

146 c⁄° 
	gBôSåög
<
	guöt16_t
,14,1> 
	gSig«ÀdSy°emEº‹
;

147 c⁄° 
	gBôSåög
<
	guöt16_t
,15,1> 
	gDëe˘edP¨ôyEº‹
;

150 
	gRegi°î
< 0,2> 
	tVíd‹ID
;

151 
	gRegi°î
< 2,2> 
	tDevi˚ID
;

152 
	gRegi°î
< 4,2> 
	tComm™d
;

153 
	gRegi°î
< 6,2> 
	tSètus
;

154 
	gRegi°î
< 8,1> 
	tRevisi⁄ID
;

155 
	gRegi°î
< 9,1> 
	tProgIF
;

156 
	gRegi°î
<10,1> 
	tSubCœss
;

157 
	gRegi°î
<11,1> 
	tCœssCode
;

158 
	gRegi°î
<12,1> 
	tCacheLöeSize
;

159 
	gRegi°î
<13,1> 
	tL©ícyTimî
;

160 
	gRegi°î
<14,1> 
	tHódîTy≥
;

161 
	gRegi°î
<15,1> 
	tBIST
;

164 
	gRegi°î
<16,4> 
	tBAR
;

165 
	gRegi°î
<40,4> 
	tC¨dbusCIS
;

166 
	gRegi°î
<44,2> 
	tSubVíd‹ID
;

167 
	gRegi°î
<46,2> 
	tSubSy°emID
;

168 
	gRegi°î
<48,4> 
	tEx∑nsi⁄ROM
;

169 
	gRegi°î
<52,1> 
	tC≠abûôõs
;

170 
	gRegi°î
<60,1> 
	tI¡îru±Löe
;

171 
	gRegi°î
<61,1> 
	tI¡îru±Pö
;

172 
	gRegi°î
<62,1> 
	tMöGø¡
;

173 
	gRegi°î
<63,1> 
	tMaxL©ícy
;

177 
	gRegi°î
<24,1> 
	tPrim¨yBus
;

178 
	gRegi°î
<25,1> 
	tSec⁄d¨yBus
;

179 
	gRegi°î
<26,1> 
	tSub‹dö©eBus
;

180 
	gRegi°î
<27,1> 
	tSec⁄d¨yL©ícyTimî
;

184 
checkAŒBu£s
(
li°
<
PCIDevi˚
>& 
pciDevLi°
);

185 
checkBus
(
uöt8_t
 
bus
, 
li°
<
PCIDevi˚
>& 
pciDevLi°
);

186 
checkDevi˚
(
uöt8_t
 
bus
, uöt8_à
dev
, 
li°
<
PCIDevi˚
>& 
pciDevLi°
);

187 
checkFun˘i⁄
(
uöt8_t
 
bus
, uöt8_à
dev
, uöt8_à
func
, 
li°
<
PCIDevi˚
>& 
pciDevLi°
);

190 
uöt32_t
 
	gPCIDevi˚
::
	$gëBARSize
(
uöt8_t
 
idx
) const {

191 
uöt32_t
 
b¨
 = 
PCI
::
	`BAR
(*
this
,
idx
);

192 
PCI
::
BAR
::
	`wrôe
(*
this
, 0xffffffff, 
idx
);

193 
uöt32_t
 
mask
 = 
PCI
::
	`BAR
(*
this
,
idx
);

194 
PCI
::
BAR
::
	`wrôe
(*
this
, 
b¨
, 
idx
);

195  ~
mask
 + 1;

196 
	}
}

	@src/devices/PIT.cc

1 
	~"machöe/APIC.h
"

2 
	~"machöe/CPU.h
"

3 
	~"machöe/Machöe.h
"

4 
	~"devi˚s/PIT.h
"

7 
	gPIT
::
	$öô
() {

8 
Machöe
::
	`ªgi°îIrqSync
(
PIC
::
PIT
, 0xf0);

9 
uöt32_t
 
divis‹
 = 1193182 / 
‰equícy
;

10 
CPU
::
	`out8
(0x43, 0x36);

11 
CPU
::
	`out8
(0x40, 
divis‹
 & 0xFF);

12 
CPU
::
	`out8
(0x40, 
divis‹
 >> 8);

13 
	}
}

	@src/devices/PIT.h

1 #i‚de‡
_PIT_h_


2 
	#_PIT_h_
 1

	)

4 ˛as†
	cPIT
 {

5 c⁄° 
	m‰equícy
 = 1000;

6 
	mpublic
:

7 
	$öô
(Ë
	`__£˘i⁄
(".boot.text");

	@src/devices/RTC.cc

17 
	~"machöe/APIC.h
"

18 
	~"machöe/Machöe.h
"

19 
	~"devi˚s/RTC.h
"

20 
	~"kî√l/Ouçut.h
"

22 
	gRTC
::
	$öô
() {

23 
Machöe
::
	`ªgi°îIrqSync
(
PIC
::
RTC
, 0xf8);

25 
CPU
::
	`out8
(0x70, CPU::
	`ö8
(0x70) | 0x80);

27 
CPU
::
	`out8
(0x70, 0x0A);

28 
uöt8_t
 
¥ev
 = 
CPU
::
	`ö8
(0x71);

29 
CPU
::
	`out8
(0x70, 0x0A);

30 
CPU
::
	`out8
(0x71, 
¥ev
 | 0x03);

31 
KOUT
::
	`oué
("The frequency is 8192.");

33 
CPU
::
	`out8
(0x70, 0x0B);

34 
¥ev
 = 
CPU
::
	`ö8
(0x71);

35 
CPU
::
	`out8
(0x70, 0x0B);

36 
CPU
::
	`out8
(0x71, 
¥ev
 | 0x40);

38 
CPU
::
	`out8
(0x70, CPU::
	`ö8
(0x70) & 0x7F);

40 
	`°©icI¡îru±H™dÀr
();

41 
	}
}

	@src/devices/RTC.h

17 #i‚de‡
_RTC_h_


18 
	#_RTC_h_
 1

	)

20 
	~"machöe/CPU.h
"

22 ˛as†
	cRTC
 {

23 vﬁ©ûê
mw‹d
 
	mcuºítTick
;

24 
	mpublic
:

25 
	$RTC
(Ë: 
	$cuºítTick
(0) {}

26 
	$öô
(Ë
	`__£˘i⁄
(".boot.text");

27 
	$°©icI¡îru±H™dÀr
() {

28 
CPU
::
	`out8
(0x70,0x0C);

29 
CPU
::
	`ö8
(0x71);

30 
cuºítTick
 += 1;

31 
	}
}

32 
	$waô
(
mw‹d
 
ticks
) {

33 
mw‹d
 
°¨t
 = 
cuºítTick
;

34 
cuºítTick
 < 
°¨t
 + 
ticks
Ë
CPU
::
	`Pau£
();

35 
	}
}

36 
mw‹d
 
	$tick
() {

37  
cuºítTick
;

38 
	}
}

	@src/devices/Screen.h

17 #i‚de‡
_S¸ìn_h_


18 
	#_S¸ìn_h_
 1

	)

20 
	~"machöe/CPU.h
"

22 
	~<c°rög
>

25 ˛as†
	cS¸ìn
 : 
public
 
NoObje˘
 {

26 
‰õnd
 
˛ass
 
Machöe
;

28 c⁄° 
	mxmax
 = 160;

29 c⁄° 
	mymax
 = 25;

30 
	mbuf„r
[
xmax
 * 
ymax
] 
__Æig√d
(0x1000);

31 * 
	mvideo
;

33 
boﬁ
 
	$öô
(
mw‹d
 
di•œ˚mít
) {

35 i‡(((*(
uöt16_t
*)0x410Ë& 0x30Ë=0x30Ë 
Ál£
;

36 
video
 = (*)(
di•œ˚mít
 + 0xb8000);

37 
	`mem˝y
(
buf„r
, 
video
, 
ymax
 * 
xmax
);

38  
åue
;

41 
vaddr
 
	$gëAddªss
(Ë{  
	`vaddr
(
video
); 
	}
}

42 
	$£tAddªss
–
vaddr
 
vma
 ) { 
video
 = (*)vma; 
	}
}

44 
	$s¸ﬁl
–
off£t
, 
Àngth
 ) {

45 
	`memmove
(
buf„r
 + 
off£t
, buf„∏+ off£à+ 
xmax
, 
Àngth
 - xmax);

46 
	`mem£t
(
buf„r
 + 
off£t
 + 
Àngth
 - 
xmax
, 0, xmax );

47 
	`mem˝y
(
video
 + 
off£t
, 
buf„r
 + off£t, 
Àngth
 );

48 
	}
}

50 
	$£tcurs‹
–
posôi⁄
 ) {

51 
posôi⁄
 =Öosition / 2;

52 
CPU
::
	`out8
(0x3D4, 14);

53 
CPU
::
	`out8
(0x3D5, 
posôi⁄
 >> 8);

54 
CPU
::
	`out8
(0x3D4, 15);

55 
CPU
::
	`out8
(0x3D5, 
posôi⁄
);

56 
	}
}

58 
	gpublic
:

59 
	$off£t
–
fú°löe
 ) {

60  (
fú°löe
 - 1Ë* 
xmax
;

61 
	}
}

63 
	$Àngth
–
fú°löe
, 
œ°löe
 ) {

64  (1 + 
œ°löe
 - 
fú°löe
Ë* 
xmax
;

65 
	}
}

67 
	$˛s
–
off£t
, 
Àngth
 ) {

68 
	`mem£t
(
buf„r
 + 
off£t
, 0, 
Àngth
);

69 
	`mem˝y
(
video
 + 
off£t
, 
buf„r
 + off£t, 
Àngth
 );

70 
	}
}

72 
	$putch¨
–
c
, & 
posôi⁄
, 
off£t
, 
Àngth
 ) {

73 i‡(
c
 == '\n') {

74 
posôi⁄
 = (’osôi⁄ / 
xmax
) + 1) * xmax;

76 
buf„r
[
posôi⁄
] = 
c
;

77 
video
[
posôi⁄
] = 
c
;

78 
posôi⁄
 += 1;

79 
buf„r
[
posôi⁄
] = 0x07;

80 
video
[
posôi⁄
] = 0x07;

81 
posôi⁄
 += 1;

83 i‡(
posôi⁄
 >
off£t
 + 
Àngth
) {

84 
	`s¸ﬁl
(
off£t
, 
Àngth
);

85 
posôi⁄
 -
xmax
;

87 
	`£tcurs‹
(
posôi⁄
);

88 
	}
}

92 ˛as†
	cS¸ìnSegmít
 {

93 
	moff£t
;

94 
	mÀngth
;

95 
	mposôi⁄
;

96 
	mpublic
:

97 
	$S¸ìnSegmít
(
fú°löe
, 
œ°löe
, 
°¨éöe
 = 0)

98 : 
	`off£t
(
S¸ìn
::off£t(
fú°löe
)),

99 
	`Àngth
(
S¸ìn
::
	$Àngth
(
fú°löe
,
œ°löe
)) {

100 
posôi⁄
 = (
°¨éöe
 > 
fú°löe
Ë? 
S¸ìn
::
	`off£t
(startline) : Screen::offset(firstline);

102 
	`S¸ìnSegmít
(c⁄° 
S¸ìnSegmít
&Ë
dñëe
;

103 
S¸ìnSegmít
& 
›î©‹
=(c⁄° S¸ìnSegmít&Ë
dñëe
;

104 
	$˛s
(Ë{ 
S¸ìn
::
	`˛s
–
off£t
, 
Àngth
 ); 
	}
}

105 
	$wrôe
(
c
) {

106 
S¸ìn
::
	`putch¨
–
c
, 
posôi⁄
, 
off£t
, 
Àngth
 );

107 
	}
}

	@src/devices/Serial.h

17 #i‚de‡
_Sîül_h_


18 
	#_Sîül_h_
 1

	)

20 
	~"machöe/CPU.h
"

22 ˛as†
	cDebugDevi˚
 : 
public
 
NoObje˘
 {

23 
‰õnd
 
˛ass
 
Machöe
;

24 
‰õnd
 
˛ass
 
	mSîülDevi˚
;

25 
boﬁ
 
	mvÆid
;

26 
	$öô
(Ë{ 
vÆid
 = (
CPU
::
	`ö8
(0xE9) == 0xE9); }

27 
public
:

28 
ölöe
 
	`wrôe
(
c
);

29 
	}
};

31 c⁄° 
	gmaxSîül
 = 2;

33 c⁄° 
uöt16_t
 
	gSîülP‹t
[
maxSîül
] = { 0x3F8, 0x2F8 };

35 ˛as†
	cSîülDevi˚
 : 
public
 
NoObje˘
 {

36 
‰õnd
 
˛ass
 
DebugDevi˚
;

37 
‰õnd
 
˛ass
 
	mMachöe
;

38 
boﬁ
 
	mgdb
;

40 
	$öô
(
boﬁ
 
g
) {

41 
gdb
 = 
g
;

42 
i
 = 0; i < 
maxSîül
; i += 1) {

43 
CPU
::
	`out8
(
SîülP‹t
[
i
] + 1, 0x00);

44 
CPU
::
	`out8
(
SîülP‹t
[
i
] + 3, 0x80);

45 
CPU
::
	`out8
(
SîülP‹t
[
i
] + 0, 0x01);

46 
CPU
::
	`out8
(
SîülP‹t
[
i
] + 1, 0x00);

47 
CPU
::
	`out8
(
SîülP‹t
[
i
] + 3, 0x03);

48 
CPU
::
	`out8
(
SîülP‹t
[
i
] + 2, 0xC7);

52 
public
:

53 
	$wrôe
(
c
, 
uöt16_t
 
idx
 = 0) {

54 (
CPU
::
	`ö8
(
SîülP‹t
[
idx
] + 5) & 0x20) == 0);

55 
CPU
::
	`out8
(
SîülP‹t
[
idx
], 
c
);

56 
	}
}

57 
	$ªad
(
uöt16_t
 
idx
 = 0) {

58 (
CPU
::
	`ö8
(
SîülP‹t
[
idx
] + 5) & 1) == 0);

59  
CPU
::
	`ö8
(
SîülP‹t
[
idx
]);

60 
	}
}

61 
	$dbgwrôe
(
c
) {

62 
uöt16_t
 
idx
 = 
gdb
 ? 1 : 0; idx < 
maxSîül
; idx += 1) {

63 
	`wrôe
(
c
, 
idx
);

64 i‡(
c
 ='\n'Ë
	`wrôe
('\r', 
idx
);

66 
	}
}

69 
	gDebugDevi˚
::
	$wrôe
(
c
) {

70 i‡(
vÆid
Ë
CPU
::
	`out8
(0xE9, 
c
);

71 
SîülDevi˚
::
	`dbgwrôe
(
c
);

72 
	}
}

	@src/extern/acpica/Makefile

1 #
#Comm⁄ 
make
 
a˝iˇ
 
toﬁs
 
™d
 
utûôõs


5 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


7 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
t›
 
Àvñ
 
a˝iˇ
 directory.

8 #Ià
•ecifiˇŒy
 
∂a˚s
 
Æl
 
the
 
obje˘
 
fûes
 
óch
 
toﬁ
 
ö
 
£∑øã


9 #gíî©e/
unix
 
subdúe˘‹õs
, 
nŸ
 
wôhö
 
the
 
v¨ious
 
ACPICA
 
sour˚


10 #codê
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s
 
bëwìn
 
dif„ª¡


11 #compû©i⁄†
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 
dif„ª¡
 
compûe
 
›ti⁄s
.

14 #i„q (
$
(
OS
),
efi
)

16 #ö˛udê
gíî©e
/
efi
/
Makefûe
.
c⁄fig


17 #ö˛udê
gíî©e
/
efi
/
Makefûe
.
comm⁄


20 #ö˛udê
gíî©e
/
unix
/
Makefûe
.
c⁄fig


21 #ö˛udê
gíî©e
/
unix
/
Makefûe
.
comm⁄


23 
	gSRCDIR
:=
$
(
CURDIR
)/../..

24 
ö˛ude
 
$
(
SRCDIR
)/
Makefûe
.
c⁄fig


25 
CC
=
	$$
(
GCC
Ë#compûög 
wôh
 
˛™g
 
is
 
possibÀ
, 
but
 
throws
 
w¨nögs


26 
CFLAGS
 +-
	`I$
(
ACPICA_INCLUDE
Ë-
D__KOS__
 -
W°ri˘
-
Æüsög
=0 
	$$
(
OPTFLAGS
)

28 
ACPICA_SRC
 = 
sour˚


29 
ACPICA_COMMON
 = 
	`$
(
ACPICA_SRC
)/
comm⁄


30 
ACPICA_TOOLS
 = 
	`$
(
ACPICA_SRC
)/
toﬁs


31 
ACPICA_OSL
 = 
	`$
(
ACPICA_SRC
)/
os_•ecific
/
£rvi˚_œyîs


32 
ACPICA_CORE
 = 
	`$
(
ACPICA_SRC
)/
comp⁄íts


33 
ACPICA_INCLUDE
 = 
	`$
(
ACPICA_SRC
)/
ö˛ude


34 
ACPICA_DEBUGGER
 = 
	`$
(
ACPICA_CORE
)/
debuggî


35 
ACPICA_DISASSEMBLER
 = 
	`$
(
ACPICA_CORE
)/
dißs£mbÀr


36 
ACPICA_DISPATCHER
 = 
	`$
(
ACPICA_CORE
)/
di•©chî


37 
ACPICA_EVENTS
 = 
	`$
(
ACPICA_CORE
)/
evíts


38 
ACPICA_EXECUTER
 = 
	`$
(
ACPICA_CORE
)/
execuãr


39 
ACPICA_HARDWARE
 = 
	`$
(
ACPICA_CORE
)/
h¨dw¨e


40 
ACPICA_NAMESPACE
 = 
	`$
(
ACPICA_CORE
)/
«me•a˚


41 
ACPICA_PARSER
 = 
	`$
(
ACPICA_CORE
)/
∑r£r


42 
ACPICA_RESOURCES
 = 
	`$
(
ACPICA_CORE
)/
ªsour˚s


43 
ACPICA_TABLES
 = 
	`$
(
ACPICA_CORE
)/
èbÀs


44 
ACPICA_UTILITIES
 = 
	`$
(
ACPICA_CORE
)/
utûôõs


46 
ACPICA
=
	`$
(
ACPICA_DISPATCHER
)\

47 
	`$
(
ACPICA_EVENTS
)\

48 
	`$
(
ACPICA_EXECUTER
)\

49 
	`$
(
ACPICA_HARDWARE
)\

50 
	`$
(
ACPICA_NAMESPACE
)\

51 
	`$
(
ACPICA_PARSER
)\

52 
	`$
(
ACPICA_RESOURCES
)\

53 
	`$
(
ACPICA_TABLES
)\

54 
	$$
(
ACPICA_UTILITIES
)

56 
SOURCES
=
	`$
(
wûdˇrd
 $(
addsuffix


	@src/extern/acpica/generate/unix/Makefile

1 #
#Comm⁄ 
make
 
a˝iˇ
 
toﬁs
 
™d
 
utûôõs


5 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


7 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
the
 
gíî©e
/
unix
 directory.

8 #Ià
•ecifiˇŒy
 
∂a˚s
 
Æl
 
the
 
obje˘
 
fûes
 
óch
 
toﬁ
 
ö
 
£∑øã


9 #gíî©e/
unix
 
subdúe˘‹õs
, 
nŸ
 
wôhö
 
the
 
v¨ious
 
ACPICA
 
sour˚


10 #codê
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s
 
bëwìn
 
dif„ª¡


11 #compû©i⁄†
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 
dif„ª¡
 
compûe
 
›ti⁄s
.

12 #
_DIRECTORY_PATH = "."

15 
ö˛ude
 
	gMakefûe
.
c⁄fig


16 
ö˛ude
 
	gMakefûe
.
	gcomm⁄


	@src/extern/acpica/generate/unix/Makefile.common

1 #
#Comm⁄ 
make
 
a˝iˇ
 
toﬁs
 
™d
 
utûôõs


5 #
#Gë 
the
 
OS
 
machöe
 
¨chôe˘uª
. 
Anythög
 
wôh
 
a
 "64" 
ö
Åhê
ªtu∫ed


7 #°rög 
wûl
 
be
 
åóãd
 
as
 
a
 64-
bô
 
OS
. 
Othîwi£
, 
the
  
is
 32-bit.

8 #
 ($(HOST), _FªeBSD)

10 
	gHARDWARE_NAME
 :
$
(
shñl
 
u«me
 -
p
)

12 
HARDWARE_NAME
 :
$
(
shñl
 
u«me
 -
m
)

13 
ídif


15 #
#Maö 
ruÀ
 
wûl
 
⁄ly
 
gíî©e
 
vîsi⁄s
 
th©
 
¨e
 
≠¥›rüã
 
the
 
ru¬ög


17 #OS, 
eôhî
 64-
bô
 
‹
 32-bit.

18 #
: $(PROGS)

20 
	$$
(
PROGS
): 
FORCE


21 @
cd
 
	`$
(
BUILD_DIRECTORY_PATH
)/
$
@; \

22 
mkdú
 -
p
 
obj
; \

23 
	`$
(
MAKE
Ë|| 
exô
 "$$?"; \

24 [ 
	`$
(
föd°rög
 64,$(
HARDWARE_NAME
)Ë]; 
thí
 \

25 
echo
 "64-bit version of $@:"; \

27 
echo
 "32-bit version of $@:"; \

28 
fi
; \

29 
ls
 -
Æ
 ../
bö
/
$
@; \

30 
echo
 "";

32 #
#Sim∂ê
˛ón
 
ªmoves
 
Æl
 .
obj
 
fûes
, 
but
 
Àaves
 
the
 
execuèbÀs


34 #ö 
the
 
loˇl
 
bö
 
dúe˘‹y


35 #
: FORCE

37 @
toﬁ«me
 
ö
 
	`$
(
PROGS
); do \

38 (
cd
 
	`$
(
BUILD_DIRECTORY_PATH
)/
$$toﬁ«me
; \

39 [ -
d
 "obj" ] ; 
thí
 \

40 
echo
 "Removing $$toolname:"; \

41 
pwd
; \

42 
	$$
(
MAKE
Ë
˛ón
; \

43 
rmdú
 
obj
; \

44 
echo
 ""; \

45 
fi
; \

47 
d⁄e
;

49 #
#Vîy 
˛ón
 
ªmoves
 
Æl
 
execuèbÀs
 
™d
 
the
 
loˇl
 
bö
 
dúe˘‹y


51 #
: FORCE

53 @
toﬁ«me
 
ö
 
	`$
(
PROGS
); do \

54 (
cd
 
	`$
(
BUILD_DIRECTORY_PATH
)/
$$toﬁ«me
; \

55 [ -
d
 "obj" ] ; 
thí
 \

56 
echo
 "Removing $$toolname:"; \

57 
pwd
; \

58 
	$$
(
MAKE
Ë
˛ón
; \

59 
rmdú
 
obj
; \

60 
echo
 ""; \

61 
fi
; \

63 [ -
e
 "$(BUILD_DIRECTORY_PATH)/bö/$$toﬁ«me" ] ; 
thí
 \

64 
rm
 
	`$
(
BUILD_DIRECTORY_PATH
)/
bö
/
$$toﬁ«me
; \

65 
fi
; \

66 
d⁄e
; \

67 [ -
d
 "bö" ] ; 
thí
 \

68 
rmdú
 
bö
; \

69 
fi
;

71 #
#In°Æ»
Æl
 
toﬁs
, 
eôhî
 32-
bô
 
‹
 64-bô 
as
 
≠¥›rüã
 
the
 
ho°
 
OS


73 #
: FORCE

75 @
toﬁ«me
 
ö
 
	`$
(
PROGS
); do \

76 (
cd
 
	`$
(
BUILD_DIRECTORY_PATH
)/
$$toﬁ«me
; \

77 
pwd
; \

78 
	$$
(
MAKE
Ë
PROG
=
$$toﬁ«me
 
ö°Æl
; \

79 [ 
	`$
(
föd°rög
 64,$(
HARDWARE_NAME
)Ë]; 
thí
 \

80 
echo
 "Installed 64-bit version of $$toolname"; \

82 
echo
 "Installed 32-bit version of $$toolname"; \

83 
fi
; \

84 
echo
 ""; \

86 
d⁄e
;

88 
machöe
: 
FORCE


89 @
echo
 "Machineárchitecture: $(HARDWARE_NAME), $(XBITS)";

90 @
echo
 "Findstring: $(findstring 64, $(HARDWARE_NAME))";

92 
FORCE
:

	@src/extern/acpica/generate/unix/Makefile.config

1 #
#Makefûe.
c⁄fig


3 #
#Comm⁄ 
c⁄figuøti⁄
 
™d
 
£tup
 
fûe
 
to
 
gíî©e
 
the
 
ACPICA
 
toﬁs
ánd

5 #utûôõs: 
the
 
iASL
 
compûî
, 
a˝õxec
, 
a˝ihñp
, 
a˝öames
, 
a˝i§c
,

6 #a˝ixåa˘, 
a˝ibö
.

7 #
#Thi†
fûe
 
is
 
ö˛uded
 
by
 
the
 
ödividuÆ
 
makefûes
 
óch
 
toﬁ
.

11 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


13 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


14 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


15 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


16 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

17 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

22 #
#OPT_CFLAGS 
ˇn
 
be
 
ovîriddí
 
⁄
 
the
 
make
 
comm™d
 
löe
 
by


24 #addög 
OPT_CFLAGS
="..." 
to
 
the
 
övoˇti⁄
.

27 #gc¯
should
 
be
 
vîsi⁄
 4 
‹
 
gª©î
, 
Ÿhîwi£
 
some
 
of
 
the
 
›ti⁄s


28 #u£d 
wûl
 
nŸ
 
be
 
ªcognized
.

29 #O±i⁄Æ: 
Së
 
HOST
 
to
 
™
 
≠¥›rüã
 
vÆue
 (
_LINUX
, 
_FªeBSD
, 
_APPLE
, 
_CYGWIN
, 
ëc
.)

30 #Sì 
ö˛ude
/
∂©f‹m
/
a˚nv
.
h
 
suµ‹ãd
 
vÆues
.

31 #NŸe: 
HOST
 
is
 
nŸ
 
√¨ly
 
as
 
imp‹è¡
 
≠∂iˇti⁄s
á†
ô


32 #i†
the
 
kî√l
-
ªsidít
 
vîsi⁄
 
of
 
ACPICA
, 
™d
 
ô
 
may


33 #nŸ 
be
 
√˚sßry
 
to
 
ch™ge
 
ô
.

34 #
.
SUFFIXES
 :

36 
	gPROGS
 = 
a˝ibö
 
a˝idump
 
a˝õxam∂es
 
a˝õxec
 
a˝ihñp
 
a˝öames
 
a˝i§c
 
a˝ixåa˘
 
ü¶


37 
HOST
 ?
_CYGWIN


38 
CC
 = 
gcc


40 #
#Comm⁄ 
deföes


42 #
 = obj

44 
BINDIR
 = 
bö


45 
COMPILEOBJ
 = 
$
(
CC
Ë-
c
 $(
CFLAGS
Ë$(
OPT_CFLAGS
Ë-
o
 $@ $<

46 
LINKPROG
 = 
$
(
CC
Ë$(
OBJECTS
Ë-
o
 $(
PROG
Ë
	$$
(
LDFLAGS
)

47 
PREFIX
 ?/
u§


48 
INSTALLDIR
 = 
	`$
(
PREFIX
)/
bö


49 
UNAME_S
 :
	`$
(
shñl
 
u«me
 -
s
)

51 #
#Ho° 
dëe˘i⁄
 
™d
 
c⁄figuøti⁄


53 #
 ($(UNAME_S), D¨wöË#Ma¯OS X

55 
HOST
 = 
_APPLE


56 
ídif


58 
	`i„q
 (
	`$
(
UNAME_S
), 
FªeBSD
)

59 
HOST
 = 
_FªeBSD


60 
ídif


62 
	`i„q
 (
	`$
(
UNAME_S
), 
NëBSD
)

63 
HOST
 = 
_NëBSD


64 
ídif


66 
	`i„q
 (
	`$
(
HOST
), 
_APPLE
)

67 
INSTALL
 = 
˝


68 
INSTALLFLAGS
 ?-
f


70 
INSTALL
 = 
ö°Æl


71 
INSTALLFLAGS
 ?-
m
 555 -
s


72 
ídif


74 
INSTALLPROG
 = \

75 
mkdú
 -
p
 
	`$
(
DESTDIR
)$(
INSTALLDIR
); \

76 
	`$
(
INSTALL
Ë$(
INSTALLFLAGS
Ë../$(
BINDIR
)/$(
PROG
Ë$(
DESTDIR
)$(
INSTALLDIR
)/
	$$
(
PROG
)

78 #
#Ríamê
a
 .
exe
 
fûe
 
√˚sßry


80 #
 = \

82 @[ -
e
 "$(PROG).exe" ] ; 
thí
 \

83 
mv
 
	`$
(
PROG
).
exe
 $(PROG); \

84 
echo
 "Renamed $(PROG).exeÅo $(PROG)"; \

85 
fi
;

87 #
#C›y 
the
 
föÆ
 
execuèbÀ
 
to
Åhê
loˇl
 
bö
 
dúe˘‹y


89 #
 = \

91 @
mkdú
 -
p
 ../
	`$
(
BINDIR
); \

92 
˝
 -
f
 
	`$
(
PROG
Ë../$(
BINDIR
); \

93 
echo
 "Copied $(PROG)Åo $(FINAL_PROG)";

95 #
#Maö 
ACPICA
 
sour˚
 
dúe˘‹õs


97 #
_SRC = ../../../sour˚

99 
ACPICA_COMMON
 = 
	`$
(
ACPICA_SRC
)/
comm⁄


100 
ACPICA_TOOLS
 = 
	`$
(
ACPICA_SRC
)/
toﬁs


101 
ACPICA_OSL
 = 
	`$
(
ACPICA_SRC
)/
os_•ecific
/
£rvi˚_œyîs


102 
ACPICA_CORE
 = 
	`$
(
ACPICA_SRC
)/
comp⁄íts


103 
ACPICA_INCLUDE
 = 
	`$
(
ACPICA_SRC
)/
ö˛ude


104 
ACPICA_DEBUGGER
 = 
	`$
(
ACPICA_CORE
)/
debuggî


105 
ACPICA_DISASSEMBLER
 = 
	`$
(
ACPICA_CORE
)/
dißs£mbÀr


106 
ACPICA_DISPATCHER
 = 
	`$
(
ACPICA_CORE
)/
di•©chî


107 
ACPICA_EVENTS
 = 
	`$
(
ACPICA_CORE
)/
evíts


108 
ACPICA_EXECUTER
 = 
	`$
(
ACPICA_CORE
)/
execuãr


109 
ACPICA_HARDWARE
 = 
	`$
(
ACPICA_CORE
)/
h¨dw¨e


110 
ACPICA_NAMESPACE
 = 
	`$
(
ACPICA_CORE
)/
«me•a˚


111 
ACPICA_PARSER
 = 
	`$
(
ACPICA_CORE
)/
∑r£r


112 
ACPICA_RESOURCES
 = 
	`$
(
ACPICA_CORE
)/
ªsour˚s


113 
ACPICA_TABLES
 = 
	`$
(
ACPICA_CORE
)/
èbÀs


114 
ACPICA_UTILITIES
 = 
	`$
(
ACPICA_CORE
)/
utûôõs


116 #
#ACPICA 
toﬁ
 
™d
 
utûôy
 
sour˚
 
dúe˘‹õs


118 #
 = $(ACPICA_TOOLS)/a˝ibö

120 
ACPIDUMP
 = 
	`$
(
ACPICA_TOOLS
)/
a˝idump


121 
ACPIEXAMPLES
 = 
	`$
(
ACPICA_TOOLS
)/
exam∂es


122 
ACPIEXEC
 = 
	`$
(
ACPICA_TOOLS
)/
a˝õxec


123 
ACPIHELP
 = 
	`$
(
ACPICA_TOOLS
)/
a˝ihñp


124 
ACPINAMES
 = 
	`$
(
ACPICA_TOOLS
)/
a˝öames


125 
ACPISRC
 = 
	`$
(
ACPICA_TOOLS
)/
a˝i§c


126 
ACPIXTRACT
 = 
	`$
(
ACPICA_TOOLS
)/
a˝ixåa˘


127 
ASL_COMPILER
 = 
	`$
(
ACPICA_SRC
)/
compûî


129 #
#Comm⁄ 
ACPICA
 
hódî
 
fûes


131 #
_HEADERS = \

133 
	`$
(
wûdˇrd
 $(
ACPICA_INCLUDE
)

	@src/extern/acpica/generate/unix/Makefile.rules

1 #
#Comm⁄ 
ruÀs
 
gíî©i⁄
 
of
 
ACPICA
 
utûôõs


3 #
#FINAL_PROG - 
C›õs
 
the
 
utûôy
 
to
Åhê
loˇl
 
bö
 
dúe˘‹y


5 #PROG - 
Buûds
 
the
 
utûôy
 (
löks
Åhê
obje˘
 
fûes
)

6 #
#NŸe: 
$
(
INTERMEDIATES
Ë
™d
 $(
MISC
Ë
¨e
 
u£d
 
iASL
 
compûî
 
⁄ly
.

10 
	$$
(
FINAL_PROG
Ë: 
	`$
(
PROG
)

11 
	`$
(
COPYPROG
)

13 
	$$
(
PROG
Ë: 
	`$
(
INTERMEDIATES
Ë$(
MISC
Ë$(
OBJECTS
)

14 
	`$
(
LINKPROG
)

15 
	`$
(
RENAMEPROG
)

17 
	`$
(
OBJDIR
)/%.
o
 : %.
c
 $(
HEADERS
Ë$(
ACPICA_HEADERS
)

18 
	$$
(
COMPILEOBJ
)

20 
˛ón
 :

21 
rm
 -
f
 
	`$
(
PROG
Ë$(PROG).
exe
 $(
OBJECTS
Ë$(
INTERMEDIATES
Ë
	$$
(
MISC
)

23 
ö°Æl
 :

24 
	`$
(
INSTALLPROG
)

	@src/extern/acpica/generate/unix/acpibin/Makefile

1 #
#a˝ibö - 
Bö¨y
 
ACPI
 
èbÀ
 
utûôy


5 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


7 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


8 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


9 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


10 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

11 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

12 #
 ../Makefûe.c⁄fig

14 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
a˝ibö


15 
PROG
 = 
$
(
OBJDIR
)/
a˝ibö


17 #
#Sórch 
∑ths
 
sour˚
 
fûes


19 #
 %.¯\

21 
$
(
ACPIBIN
)\

22 
$
(
ACPICA_UTILITIES
)\

23 
$
(
ACPICA_COMMON
)\

24 
	$$
(
ACPICA_OSL
)

26 
HEADERS
 = \

27 
	`$
(
wûdˇrd
 $(
ACPIBIN
)

	@src/extern/acpica/generate/unix/acpidump/Makefile

1 #
#a˝idum∞- 
ACPI
 
èbÀ
 
dump
 
utûôy
 (
bö¨y
 
to
 
ascii
 
hex
)

5 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


7 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


8 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


9 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


10 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

11 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

12 #
 ../Makefûe.c⁄fig

14 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
a˝idump


15 
PROG
 = 
$
(
OBJDIR
)/
a˝idump


17 #
#Sórch 
∑ths
 
sour˚
 
fûes


19 #
 %.¯\

21 
$
(
ACPIDUMP
)\

22 
$
(
ACPICA_TABLES
)\

23 
$
(
ACPICA_UTILITIES
)\

24 
$
(
ACPICA_COMMON
)\

25 
	$$
(
ACPICA_OSL
)

27 
HEADERS
 = \

28 
	`$
(
wûdˇrd
 $(
ACPIDUMP
)

	@src/extern/acpica/generate/unix/acpiexamples/Makefile

1 #
#a˝õxam∂e†- 
Exam∂e
 
ACPICA
 
öôüliz©i⁄
 
code
 
™d
 
c⁄åﬁ


3 #mëhod 
executi⁄
.

6 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


8 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


9 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


10 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


11 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

12 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

13 #
 ../Makefûe.c⁄fig

15 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
a˝õxam∂es


16 
PROG
 = 
$
(
OBJDIR
)/
a˝õxam∂es


18 #
#Sórch 
∑ths
 
sour˚
 
fûes


20 #
 %.¯\

22 
$
(
ACPIEXAMPLES
)\

23 
$
(
ACPICA_DISPATCHER
)\

24 
$
(
ACPICA_EVENTS
)\

25 
$
(
ACPICA_EXECUTER
)\

26 
$
(
ACPICA_HARDWARE
)\

27 
$
(
ACPICA_NAMESPACE
)\

28 
$
(
ACPICA_PARSER
)\

29 
$
(
ACPICA_TABLES
)\

30 
$
(
ACPICA_UTILITIES
)\

31 
$
(
ACPICA_COMMON
)\

32 
	$$
(
ACPICA_OSL
)

34 
HEADERS
 = \

35 
	`$
(
wûdˇrd
 $(
ACPIEXAMPLES
)

	@src/extern/acpica/generate/unix/acpiexec/Makefile

1 #
#a˝õxec: 
ACPI
 
executi⁄
 
simuœt‹
. 
Runs
 
ACPICA
 
code
 
ö
 
u£r


3 #•a˚. 
Lﬂds
 
ACPI
 
èbÀs
, 
di•œys
 
the
 
«me•a˚
, 
™d
 
Ælows


4 #executi⁄ 
of
 
c⁄åﬁ
 
mëhods
.

7 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


9 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


10 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


11 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


12 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

13 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

14 #
 ../Makefûe.c⁄fig

16 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
a˝õxec


17 
PROG
 = 
$
(
OBJDIR
)/
a˝õxec


19 #
#Sórch 
∑ths
 
sour˚
 
fûes


21 #
 %.¯\

23 
$
(
ACPIEXEC
)\

24 
$
(
ACPICA_DEBUGGER
)\

25 
$
(
ACPICA_DISASSEMBLER
)\

26 
$
(
ACPICA_DISPATCHER
)\

27 
$
(
ACPICA_EVENTS
)\

28 
$
(
ACPICA_EXECUTER
)\

29 
$
(
ACPICA_HARDWARE
)\

30 
$
(
ACPICA_NAMESPACE
)\

31 
$
(
ACPICA_PARSER
)\

32 
$
(
ACPICA_RESOURCES
)\

33 
$
(
ACPICA_TABLES
)\

34 
$
(
ACPICA_UTILITIES
)\

35 
$
(
ACPICA_COMMON
)\

36 
	$$
(
ACPICA_OSL
)

38 
HEADERS
 = \

39 
	`$
(
wûdˇrd
 $(
ACPIEXEC
)

	@src/extern/acpica/generate/unix/acpihelp/Makefile

1 #
#a˝ihñ∞- 
ACPI
 
Hñp
 
utûôy
. 
Di•œys
 
ASL
 
›î©‹
 
sy¡ax
 
™d


3 #öf‹m©i⁄ 
about
 
ACPI
 
¥edeföed
 
«mes
.

6 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


8 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


9 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


10 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


11 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

12 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

13 #
 ../Makefûe.c⁄fig

15 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
a˝ihñp


16 
PROG
 = 
$
(
OBJDIR
)/
a˝ihñp


18 #
#Sórch 
∑ths
 
sour˚
 
fûes


20 #
 %.¯\

22 
$
(
ACPIHELP
)\

23 
$
(
ACPICA_COMMON
)\

24 
$
(
ACPICA_UTILITIES
)\

25 
	$$
(
ACPICA_OSL
)

27 
HEADERS
 = \

28 
	`$
(
wûdˇrd
 $(
ACPIHELP
)

	@src/extern/acpica/generate/unix/acpinames/Makefile

1 #
#a˝öame†- 
Lﬂd
 
ACPI
 
èbÀ
 
™d
 
dump
 
«me•a˚
. 
This
 
is
 
a
 
sub£t


3 #o‡
the
 
A˝iExec
 
fun˘i⁄Æôy
, 
ô
 
is
 
öãnded
 
to
 
dem⁄°øã


4 #thê
c⁄figuøbûôy
 
of
 
ACPICA
.

7 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


9 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


10 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


11 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


12 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

13 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

14 #
 ../Makefûe.c⁄fig

16 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
a˝öames


17 
PROG
 = 
$
(
OBJDIR
)/
a˝öames


19 #
#Sórch 
∑ths
 
sour˚
 
fûes


21 #
 %.¯\

23 
$
(
ACPINAMES
)\

24 
$
(
ACPICA_DISPATCHER
)\

25 
$
(
ACPICA_EXECUTER
)\

26 
$
(
ACPICA_NAMESPACE
)\

27 
$
(
ACPICA_PARSER
)\

28 
$
(
ACPICA_TABLES
)\

29 
$
(
ACPICA_UTILITIES
)\

30 
$
(
ACPICA_COMMON
)\

31 
	$$
(
ACPICA_OSL
)

33 
HEADERS
 = \

34 
	`$
(
wûdˇrd
 $(
ACPINAMES
)

	@src/extern/acpica/generate/unix/acpisrc/Makefile

1 #
#a˝i§¯- 
ACPICA
 
sour˚
 
code
 
c⁄vîsi⁄
 
utûôy


5 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


7 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


8 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


9 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


10 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

11 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

12 #
 ../Makefûe.c⁄fig

14 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
a˝i§c


15 
PROG
 = 
$
(
OBJDIR
)/
a˝i§c


17 #
#Sórch 
∑th
 
sour˚
 
fûes
 
™d
 
ödividuÆ
 source files

19 #
 %.¯\

21 
$
(
ACPISRC
)\

22 
$
(
ACPICA_UTILITIES
)\

23 
$
(
ACPICA_COMMON
)\

24 
	$$
(
ACPICA_OSL
)

26 
HEADERS
 = \

27 
	`$
(
wûdˇrd
 $(
ACPISRC
)

	@src/extern/acpica/generate/unix/acpixtract/Makefile

1 #
#a˝ixåa˘ - 
exåa˘
 
bö¨y
 
ACPI
 
èbÀs
 
‰om
 
a˝idump
 
ãxt
 
ouçut


5 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


7 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


8 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


9 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


10 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

11 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

12 #
 ../Makefûe.c⁄fig

14 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
a˝ixåa˘


15 
PROG
 = 
$
(
OBJDIR
)/
a˝ixåa˘


17 #
#Sórch 
∑ths
 
sour˚
 
fûes


19 #
 %.¯\

21 
$
(
ACPIXTRACT
)\

22 
$
(
ACPICA_UTILITIES
)\

23 
$
(
ACPICA_COMMON
)\

24 
	$$
(
ACPICA_OSL
)

26 
HEADERS
 = \

27 
	`$
(
wûdˇrd
 $(
ACPIXTRACT
)

	@src/extern/acpica/generate/unix/iasl/Makefile

1 #
#iASL 
compûî
/
dißs£mbÀr


5 #
#NŸe: 
This
 
makefûe
 
is
 
öãnded
 
to
 
be
 
u£d
 
‰om
 
wôhö
 
the
 
«tive


7 #ACPICA 
dúe˘‹y
 
°ru˘uª
, 
‰om
 
undî
 
gíî©e
/
unix
. 
It
 
•ecifiˇŒy


8 #∂a˚†
Æl
 
obje˘
 
fûes
 
ö
 
a
 
gíî©e
/
unix
 
subdúe˘‹y
, 
nŸ
 
wôhö


9 #thê
v¨ious
 
ACPICA
 
sour˚
 
dúe˘‹õs
. 
This
 
¥evíts
 
cﬁlisi⁄s


10 #bëwì¿
dif„ª¡
 
compû©i⁄s
 
of
 
the
 
ßme
 
sour˚
 
fûe
 
wôh
 different

11 #compûê
›ti⁄s
, 
™d
 
¥evíts
 
pﬁluti⁄
 
of
 
the
 
sour˚
 
code
.

12 #
 ../Makefûe.c⁄fig

14 
	gFINAL_PROG
 = ../
$
(
BINDIR
)/
ü¶


15 
PROG
 = 
$
(
OBJDIR
)/
ü¶


17 #
#Sórch 
∑ths
 
sour˚
 
fûes


19 #
 %.¯\

21 
$
(
ASL_COMPILER
)\

22 
$
(
ACPICA_DEBUGGER
)\

23 
$
(
ACPICA_DISASSEMBLER
)\

24 
$
(
ACPICA_DISPATCHER
)\

25 
$
(
ACPICA_EXECUTER
)\

26 
$
(
ACPICA_NAMESPACE
)\

27 
$
(
ACPICA_PARSER
)\

28 
$
(
ACPICA_TABLES
)\

29 
$
(
ACPICA_UTILITIES
)\

30 
$
(
ACPICA_COMMON
)\

31 
	$$
(
ACPICA_OSL
)

33 
HEADERS
 = \

34 
	`$
(
wûdˇrd
 $(
ASL_COMPILER
)

	@src/extern/acpica/source/compiler/aslcompiler.h

116 #i‚de‡
__ASLCOMPILER_H


117 
	#__ASLCOMPILER_H


	)

119 
	~"a˝i.h
"

120 
	~"accomm⁄.h
"

121 
	~"amÃe§c.h
"

122 
	~"acdebug.h
"

126 #i‡(
deföed
 
WIN32
 || deföed 
WIN64
)

129 #¥agm®
w¨nög
(
dißbÀ
:4103)

132 #¥agm®
w¨nög
(
dißbÀ
:4115)

135 
	~<°dio.h
>

136 
	~<°dlib.h
>

137 
	~<°d¨g.h
>

138 
	~<°rög.h
>

139 
	~<î∫o.h
>

140 
	~<˘y≥.h
>

144 
	~"a¶deföe.h
"

145 
	~"a¶ty≥s.h
"

146 
	~"a¶mesßges.h
"

147 
	~"a¶globÆ.h
"

148 
	~"¥ïro˚ss.h
"

160 
ACPI_PARSE_OBJECT
 *

161 
A¶DoEº‹
 (

165 
A¶CompûîÀx
(

169 
A¶Re£tCuºítLöeBuf„r
 (

173 
A¶In£πLöeBuf„r
 (

174 
Sour˚Ch¨
);

177 
A¶P›I≈utFûeSèck
 (

181 
A¶PushI≈utFûeSèck
 (

182 
FILE
 *
I≈utFûe
,

183 *
Fûíame
);

186 
A¶P¨£rCÀ™up
 (

194 
A¶InôülizeGlobÆs
 (

198 
	$ACPI_STATUS
 (*
	tASL_PATHNAME_CALLBACK
) (

201 
ACPI_STATUS


202 
	`A¶DoO√Fûe
 (

203 *
Fûíame
);

205 
ACPI_STATUS


206 
	`A¶CheckF‹Eº‹Exô
 (

214 
	`A¶CompûîSign⁄
 (

215 
UINT32
 
FûeId
);

218 
	`A¶CompûîFûeHódî
 (

219 
UINT32
 
FûeId
);

222 
	`CmDoCompûe
 (

226 
	`CmDoOuçutFûes
 (

230 
	`CmCÀ™upAndExô
 (

234 
	`CmDñëeCaches
 (

241 
ACPI_STATUS


242 
	`FlCheckF‹A˝iTabÀ
 (

243 
FILE
 *
H™dÀ
);

245 
ACPI_STATUS


246 
	`FlCheckF‹Ascii
 (

247 
FILE
 *
H™dÀ
,

248 *
Fûíame
,

249 
BOOLEAN
 
Di•œyEº‹s
);

255 
ACPI_STATUS


256 
	`AnOthîSem™ticA«lysisWÆkBegö
 (

257 
ACPI_PARSE_OBJECT
 *
Op
,

258 
UINT32
 
Levñ
,

259 *
C⁄ãxt
);

261 
ACPI_STATUS


262 
	`AnOthîSem™ticA«lysisWÆkEnd
 (

263 
ACPI_PARSE_OBJECT
 *
Op
,

264 
UINT32
 
Levñ
,

265 *
C⁄ãxt
);

267 
ACPI_STATUS


268 
	`AnO≥øndTy≥checkWÆkEnd
 (

269 
ACPI_PARSE_OBJECT
 *
Op
,

270 
UINT32
 
Levñ
,

271 *
C⁄ãxt
);

273 
ACPI_STATUS


274 
	`AnMëhodTypögWÆkEnd
 (

275 
ACPI_PARSE_OBJECT
 *
Op
,

276 
UINT32
 
Levñ
,

277 *
C⁄ãxt
);

283 
ACPI_STATUS


284 
	`MtMëhodA«lysisWÆkBegö
 (

285 
ACPI_PARSE_OBJECT
 *
Op
,

286 
UINT32
 
Levñ
,

287 *
C⁄ãxt
);

289 
ACPI_STATUS


290 
	`MtMëhodA«lysisWÆkEnd
 (

291 
ACPI_PARSE_OBJECT
 *
Op
,

292 
UINT32
 
Levñ
,

293 *
C⁄ãxt
);

299 
UINT32


300 
	`AnM≠ObjTy≥ToBty≥
 (

301 
ACPI_PARSE_OBJECT
 *
Op
);

303 
UINT32


304 
	`AnM≠ArgTy≥ToBty≥
 (

305 
UINT32
 
ArgTy≥
);

307 
UINT32


308 
	`AnGëBty≥
 (

309 
ACPI_PARSE_OBJECT
 *
Op
);

312 
	`AnF‹m©Bty≥
 (

313 *
Buf„r
,

314 
UINT32
 
Bty≥
);

321 
	`AnCheckId
 (

322 
ACPI_PARSE_OBJECT
 *
Op
,

323 
ACPI_NAME
 
Ty≥
);

327 
	#ASL_TYPE_HID
 0

	)

328 
	#ASL_TYPE_CID
 1

	)

330 
BOOLEAN


331 
	`AnIsI¡î«lMëhod
 (

332 
ACPI_PARSE_OBJECT
 *
Op
);

334 
UINT32


335 
	`AnGëI¡î«lMëhodRëu∫Ty≥
 (

336 
ACPI_PARSE_OBJECT
 *
Op
);

338 
BOOLEAN


339 
	`AnLa°SèãmítIsRëu∫
 (

340 
ACPI_PARSE_OBJECT
 *
Op
);

343 
	`AnCheckMëhodRëu∫VÆue
 (

344 
ACPI_PARSE_OBJECT
 *
Op
,

345 c⁄° 
ACPI_OPCODE_INFO
 *
OpInfo
,

346 
ACPI_PARSE_OBJECT
 *
ArgOp
,

347 
UINT32
 
RequúedBty≥s
,

348 
UINT32
 
ThisNodeBty≥
);

350 
BOOLEAN


351 
	`AnIsResu…U£d
 (

352 
ACPI_PARSE_OBJECT
 *
Op
);

355 
	`ApCheckF‹G≥NameC⁄Êi˘
 (

356 
ACPI_PARSE_OBJECT
 *
Op
);

359 
	`ApCheckRegMëhod
 (

360 
ACPI_PARSE_OBJECT
 *
Op
);

362 
BOOLEAN


363 
	`ApFödNameInSc›e
 (

364 *
Name
,

365 
ACPI_PARSE_OBJECT
 *
Op
);

372 
	`A¶Ab‹t
 (

376 
	`A¶Eº‹
 (

377 
UINT8
 
Levñ
,

378 
UINT16
 
MesßgeId
,

379 
ACPI_PARSE_OBJECT
 *
Op
,

380 *
ExåaMesßge
);

382 
ACPI_STATUS


383 
	`A¶DißbÀEx˚±i⁄
 (

384 *
MesßgeIdSåög
);

386 
BOOLEAN


387 
	`A¶IsEx˚±i⁄DißbÀd
 (

388 
UINT8
 
Levñ
,

389 
UINT16
 
MesßgeId
);

392 
	`A¶C‹eSubsy°emEº‹
 (

393 
ACPI_PARSE_OBJECT
 *
Op
,

394 
ACPI_STATUS
 
Sètus
,

395 *
ExåaMesßge
,

396 
BOOLEAN
 
Ab‹t
);

399 
	`A¶Compûîîr‹
(

400 c⁄° *
s
);

403 
	`A¶Comm⁄Eº‹
 (

404 
UINT8
 
Levñ
,

405 
UINT16
 
MesßgeId
,

406 
UINT32
 
CuºítLöeNumbî
,

407 
UINT32
 
LogiˇlLöeNumbî
,

408 
UINT32
 
LogiˇlByãOff£t
,

409 
UINT32
 
Cﬁumn
,

410 *
Fûíame
,

411 *
ExåaMesßge
);

414 
	`A¶Comm⁄Eº‹2
 (

415 
UINT8
 
Levñ
,

416 
UINT16
 
MesßgeId
,

417 
UINT32
 
LöeNumbî
,

418 
UINT32
 
Cﬁumn
,

419 *
Sour˚Löe
,

420 *
Fûíame
,

421 *
ExåaMesßge
);

424 
	`AePrötEx˚±i⁄
 (

425 
UINT32
 
FûeId
,

426 
ASL_ERROR_MSG
 *
Enode
,

427 *
Hódî
);

430 
	`AePrötEº‹Log
 (

431 
UINT32
 
FûeId
);

434 
	`AeCÀ¨Eº‹Log
 (

442 
	`LsDoLi°ögs
 (

446 
	`LsWrôeNodeToAsmLi°ög
 (

447 
ACPI_PARSE_OBJECT
 *
Op
);

450 
	`LsWrôeNode
 (

451 
ACPI_PARSE_OBJECT
 *
Op
,

452 
UINT32
 
FûeId
);

455 
	`LsDumpP¨£Tªe
 (

463 
	`LsDumpAscii
 (

464 
UINT32
 
FûeId
,

465 
UINT32
 
Cou¡
,

466 
UINT8
 *
Buf„r
);

469 
	`LsDumpAsciiInCommít
 (

470 
UINT32
 
FûeId
,

471 
UINT32
 
Cou¡
,

472 
UINT8
 *
Buf„r
);

475 
	`LsCheckEx˚±i⁄
 (

476 
UINT32
 
LöeNumbî
,

477 
UINT32
 
FûeId
);

480 
	`LsFlushLi°ögBuf„r
 (

481 
UINT32
 
FûeId
);

484 
	`LsWrôeLi°ögHexByãs
 (

485 
UINT8
 *
Buf„r
,

486 
UINT32
 
Lígth
,

487 
UINT32
 
FûeId
);

490 
	`LsWrôeSour˚Löes
 (

491 
UINT32
 
ToLöeNumbî
,

492 
UINT32
 
ToLogiˇlLöeNumbî
,

493 
UINT32
 
FûeId
);

495 
UINT32


496 
	`LsWrôeO√Sour˚Löe
 (

497 
UINT32
 
FûeId
);

500 
	`LsPushNode
 (

501 *
Fûíame
);

503 
ASL_LISTING_NODE
 *

504 
	`LsP›Node
 (

512 
	`HxDoHexOuçut
 (

519 
ACPI_STATUS


520 
	`OpcAmlC⁄°™tWÆk
 (

521 
ACPI_PARSE_OBJECT
 *
Op
,

522 
UINT32
 
Levñ
,

523 *
C⁄ãxt
);

530 
	`AeDecodeMesßgeId
 (

531 
UINT16
 
MesßgeId
);

534 
	`AeDecodeEx˚±i⁄Levñ
 (

535 
UINT8
 
Levñ
);

537 
UINT16


538 
	`AeBuûdFuŒEx˚±i⁄Code
 (

539 
UINT8
 
Levñ
,

540 
UINT16
 
MesßgeId
);

545 
ACPI_STATUS


546 
	`LsAmlOff£tWÆk
 (

547 
ACPI_PARSE_OBJECT
 *
Op
,

548 
UINT32
 
Levñ
,

549 *
C⁄ãxt
);

552 
	`LsDoOff£tTabÀHódî
 (

553 
UINT32
 
FûeId
);

556 
	`LsDoOff£tTabÀFoŸî
 (

557 
UINT32
 
FûeId
);

563 
ACPI_STATUS


564 
	`OpcAmlOpcodeWÆk
 (

565 
ACPI_PARSE_OBJECT
 *
Op
,

566 
UINT32
 
Levñ
,

567 *
C⁄ãxt
);

569 
ACPI_STATUS


570 
	`OpcAmlOpcodeUpd©eWÆk
 (

571 
ACPI_PARSE_OBJECT
 *
Op
,

572 
UINT32
 
Levñ
,

573 *
C⁄ãxt
);

576 
	`OpcGíî©eAmlOpcode
 (

577 
ACPI_PARSE_OBJECT
 *
Op
);

579 
UINT32


580 
	`OpcSëO±imÆI¡egîSize
 (

581 
ACPI_PARSE_OBJECT
 *
Op
);

584 
	`OpcGëI¡egîWidth
 (

585 
ACPI_PARSE_OBJECT
 *
Op
);

591 
ACPI_PARSE_OBJECT
 *

592 
	`UtGëArg
 (

593 
ACPI_PARSE_OBJECT
 *
Op
,

594 
UINT32
 
Argn
);

597 
	`O≤Gíî©eAmlO≥ønds
 (

598 
ACPI_PARSE_OBJECT
 *
Op
);

601 
	`O≤DoPackage
 (

602 
ACPI_PARSE_OBJECT
 *
Op
);

609 
	`O±O±imizeNameP©h
 (

610 
ACPI_PARSE_OBJECT
 *
Op
,

611 
UINT32
 
Fœgs
,

612 
ACPI_WALK_STATE
 *
WÆkSèã
,

613 *
AmlNameSåög
,

614 
ACPI_NAMESPACE_NODE
 *
T¨gëNode
);

621 
	`OpcDoPrötf
 (

622 
ACPI_PARSE_OBJECT
 *
Op
);

625 
	`OpcDoF¥ötf
 (

626 
ACPI_PARSE_OBJECT
 *
Op
);

633 
	`A¶Pru√P¨£Tªe
 (

634 
UINT32
 
Pru√Dïth
,

635 
UINT32
 
Ty≥
);

642 
	`CgGíî©eAmlOuçut
 (

650 
	`FlO≥nFûe
 (

651 
UINT32
 
FûeId
,

652 *
Fûíame
,

653 *
Mode
);

659 
ACPI_STATUS


660 
	`LnPackageLígthWÆk
 (

661 
ACPI_PARSE_OBJECT
 *
Op
,

662 
UINT32
 
Levñ
,

663 *
C⁄ãxt
);

665 
ACPI_STATUS


666 
	`LnInôLígthsWÆk
 (

667 
ACPI_PARSE_OBJECT
 *
Op
,

668 
UINT32
 
Levñ
,

669 *
C⁄ãxt
);

672 
	`CgGíî©eAmlLígths
 (

673 
ACPI_PARSE_OBJECT
 *
Op
);

679 
ACPI_OBJECT_TYPE


680 
	`A¶M≠NamedOpcodeToD©aTy≥
 (

681 
UINT16
 
Opcode
);

687 
BOOLEAN


688 
	`ApCheckF‹PªdeföedMëhod
 (

689 
ACPI_PARSE_OBJECT
 *
Op
,

690 
ASL_METHOD_INFO
 *
MëhodInfo
);

693 
	`ApCheckPªdeföedRëu∫VÆue
 (

694 
ACPI_PARSE_OBJECT
 *
Op
,

695 
ASL_METHOD_INFO
 *
MëhodInfo
);

697 
UINT32


698 
	`ApCheckF‹PªdeföedName
 (

699 
ACPI_PARSE_OBJECT
 *
Op
,

700 *
Name
);

703 
	`ApCheckF‹PªdeföedObje˘
 (

704 
ACPI_PARSE_OBJECT
 *
Op
,

705 *
Name
);

707 
ACPI_STATUS


708 
	`ApCheckObje˘Ty≥
 (

709 c⁄° *
PªdeföedName
,

710 
ACPI_PARSE_OBJECT
 *
Op
,

711 
UINT32
 
Ex≥˘edBty≥s
,

712 
UINT32
 
PackageIndex
);

715 
	`ApDi•œyRe£rvedNames
 (

723 
	`ApCheckPackage
 (

724 
ACPI_PARSE_OBJECT
 *
P¨ítOp
,

725 c⁄° 
ACPI_PREDEFINED_INFO
 *
Pªdeföed
);

731 
ACPI_STATUS


732 
	`TrAmlTønsf‹mWÆk
 (

733 
ACPI_PARSE_OBJECT
 *
Op
,

734 
UINT32
 
Levñ
,

735 *
C⁄ãxt
);

741 
ACPI_STATUS


742 
	`TrWÆkP¨£Tªe
 (

743 
ACPI_PARSE_OBJECT
 *
Op
,

744 
UINT32
 
Visô©i⁄
,

745 
ASL_WALK_CALLBACK
 
Des˚ndögCÆlback
,

746 
ASL_WALK_CALLBACK
 
As˚ndögCÆlback
,

747 *
C⁄ãxt
);

751 
	#ASL_WALK_VISIT_DOWNWARD
 0x01

	)

752 
	#ASL_WALK_VISIT_UPWARD
 0x02

	)

753 
	#ASL_WALK_VISIT_TWICE
 (
ASL_WALK_VISIT_DOWNWARD
 | 
ASL_WALK_VISIT_UPWARD
)

	)

756 
ACPI_PARSE_OBJECT
 *

757 
	`TrAŒoˇãNode
 (

758 
UINT32
 
P¨£Opcode
);

761 
	`TrPrötNodeCompûeFœgs
 (

762 
UINT32
 
Fœgs
);

765 
	`TrRñó£Node
 (

766 
ACPI_PARSE_OBJECT
 *
Op
);

768 
ACPI_PARSE_OBJECT
 *

769 
	`TrUpd©eNode
 (

770 
UINT32
 
P¨£Opcode
,

771 
ACPI_PARSE_OBJECT
 *
Op
);

773 
ACPI_PARSE_OBJECT
 *

774 
	`TrCª©eNode
 (

775 
UINT32
 
P¨£Opcode
,

776 
UINT32
 
NumChûdªn
,

779 
ACPI_PARSE_OBJECT
 *

780 
	`TrCª©eLófNode
 (

781 
UINT32
 
P¨£Opcode
);

783 
ACPI_PARSE_OBJECT
 *

784 
	`TrCª©eNuŒT¨gë
 (

787 
ACPI_PARSE_OBJECT
 *

788 
	`TrCª©eAssignmítNode
 (

789 
ACPI_PARSE_OBJECT
 *
T¨gë
,

790 
ACPI_PARSE_OBJECT
 *
Sour˚
);

792 
ACPI_PARSE_OBJECT
 *

793 
	`TrCª©eT¨gëO≥ønd
 (

794 
ACPI_PARSE_OBJECT
 *
OrigöÆOp
,

795 
ACPI_PARSE_OBJECT
 *
P¨ítOp
);

797 
ACPI_PARSE_OBJECT
 *

798 
	`TrCª©eVÆuedLófNode
 (

799 
UINT32
 
P¨£Opcode
,

800 
UINT64
 
VÆue
);

802 
ACPI_PARSE_OBJECT
 *

803 
	`TrCª©eC⁄°™tLófNode
 (

804 
UINT32
 
P¨£Opcode
);

806 
ACPI_PARSE_OBJECT
 *

807 
	`TrLökChûdªn
 (

808 
ACPI_PARSE_OBJECT
 *
Op
,

809 
UINT32
 
NumChûdªn
,

813 
	`TrSëEndLöeNumbî
 (

814 
ACPI_PARSE_OBJECT
 *
Op
);

817 
	`TrWÆkTªe
 (

820 
ACPI_PARSE_OBJECT
 *

821 
	`TrLökPìrNode
 (

822 
ACPI_PARSE_OBJECT
 *
Op1
,

823 
ACPI_PARSE_OBJECT
 *
Op2
);

825 
ACPI_PARSE_OBJECT
 *

826 
	`TrLökChûdNode
 (

827 
ACPI_PARSE_OBJECT
 *
Op1
,

828 
ACPI_PARSE_OBJECT
 *
Op2
);

830 
ACPI_PARSE_OBJECT
 *

831 
	`TrSëNodeFœgs
 (

832 
ACPI_PARSE_OBJECT
 *
Op
,

833 
UINT32
 
Fœgs
);

835 
ACPI_PARSE_OBJECT
 *

836 
	`TrSëNodeAmlLígth
 (

837 
ACPI_PARSE_OBJECT
 *
Op
,

838 
UINT32
 
Lígth
);

840 
ACPI_PARSE_OBJECT
 *

841 
	`TrLökPìrNodes
 (

842 
UINT32
 
NumPìrs
,

850 
	`FlAddIn˛udeDúe˘‹y
 (

851 *
Dú
);

854 
	`FlMîgeP©h«mes
 (

855 *
PªfixDú
,

856 *
FûeP©h«me
);

859 
	`FlO≥nIn˛udeFûe
 (

860 
ACPI_PARSE_OBJECT
 *
Op
);

863 
	`FlFûeEº‹
 (

864 
UINT32
 
FûeId
,

865 
UINT8
 
Eº‹Id
);

867 
UINT32


868 
	`FlGëFûeSize
 (

869 
UINT32
 
FûeId
);

871 
ACPI_STATUS


872 
	`FlRódFûe
 (

873 
UINT32
 
FûeId
,

874 *
Buf„r
,

875 
UINT32
 
Lígth
);

878 
	`FlWrôeFûe
 (

879 
UINT32
 
FûeId
,

880 *
Buf„r
,

881 
UINT32
 
Lígth
);

884 
	`FlSìkFûe
 (

885 
UINT32
 
FûeId
,

886 
Off£t
);

889 
	`FlClo£Fûe
 (

890 
UINT32
 
FûeId
);

893 
	`FlPrötFûe
 (

894 
UINT32
 
FûeId
,

895 *
F‹m©
,

899 
	`FlDñëeFûe
 (

900 
UINT32
 
FûeId
);

903 
	`FlSëLöeNumbî
 (

904 
UINT32
 
LöeNumbî
);

907 
	`FlSëFûíame
 (

908 *
Fûíame
);

910 
ACPI_STATUS


911 
	`FlO≥nI≈utFûe
 (

912 *
I≈utFûíame
);

914 
ACPI_STATUS


915 
	`FlO≥nAmlOuçutFûe
 (

916 *
I≈utFûíame
);

918 
ACPI_STATUS


919 
	`FlO≥nMiscOuçutFûes
 (

920 *
I≈utFûíame
);

926 
	`MpEmôM≠pögInfo
 (

933 
ACPI_STATUS


934 
	`LdLﬂdName•a˚
 (

935 
ACPI_PARSE_OBJECT
 *
RoŸOp
);

942 
	`LkFödUƒe„ªn˚dObje˘s
 (

949 
	`Ußge
 (

953 
	`A¶FûíameHñp
 (

960 
ACPI_STATUS


961 
	`NsDi•œyName•a˚
 (

965 
	`NsSëupName•a˚Li°ög
 (

966 *
H™dÀ
);

972 
	`A¶Comm™dLöe
 (

973 
¨gc
,

974 **
¨gv
);

979 
ACPI_STATUS


980 
	`XfCrossRe„ªn˚Name•a˚
 (

988 
	`DbgPröt
 (

989 
UINT32
 
Ty≥
,

990 *
F‹m©
,

995 
	#ASL_DEBUG_OUTPUT
 0

	)

996 
	#ASL_PARSE_OUTPUT
 1

	)

997 
	#ASL_TREE_OUTPUT
 2

	)

1000 
	`UtDi•œySuµ‹ãdTabÀs
 (

1004 
	`UtDi•œyC⁄°™tOpcodes
 (

1007 
UINT8


1008 
	`UtBegöEvít
 (

1009 *
Name
);

1012 
	`UtEndEvít
 (

1013 
UINT8
 
Evít
);

1016 
	`UtLoˇlCÆloc
 (

1017 
UINT32
 
Size
);

1020 
	`UtPrötF‹m©ãdName
 (

1021 
UINT16
 
P¨£Opcode
,

1022 
UINT32
 
Levñ
);

1025 
	`UtDi•œySumm¨y
 (

1026 
UINT32
 
FûeId
);

1029 
	`UtC⁄vîtByãToHex
 (

1030 
UINT8
 
RawByã
,

1031 
UINT8
 *
Buf„r
);

1034 
	`UtC⁄vîtByãToAsmHex
 (

1035 
UINT8
 
RawByã
,

1036 
UINT8
 *
Buf„r
);

1039 
	`UtGëOpName
 (

1040 
UINT32
 
P¨£Opcode
);

1043 
	`UtSëP¨£OpName
 (

1044 
ACPI_PARSE_OBJECT
 *
Op
);

1047 
	`UtSåögCacheCÆloc
 (

1048 
UINT32
 
Lígth
);

1051 
	`UtEx∑ndLöeBuf„rs
 (

1055 
	`UtFªeLöeBuf„rs
 (

1058 
ACPI_STATUS


1059 
	`UtI¡î«lizeName
 (

1060 *
Exã∫ÆName
,

1061 **
C⁄vîãdName
);

1064 
	`UtAâachNamï©hToOw√r
 (

1065 
ACPI_PARSE_OBJECT
 *
Op
,

1066 
ACPI_PARSE_OBJECT
 *
NameNode
);

1068 
ACPI_PARSE_OBJECT
 *

1069 
	`UtCheckI¡egîR™ge
 (

1070 
ACPI_PARSE_OBJECT
 *
Op
,

1071 
UINT32
 
LowVÆue
,

1072 
UINT32
 
HighVÆue
);

1074 
UINT64


1075 
	`UtDoC⁄°™t
 (

1076 *
Såög
);

1078 
ACPI_STATUS


1079 
	`UtSåtoul64
 (

1080 *
Såög
,

1081 
UINT32
 
Ba£
,

1082 
UINT64
 *
RëI¡egî
);

1088 
ACPI_STATUS


1089 
	`AuVÆid©eUuid
 (

1090 *
InSåög
);

1092 
ACPI_STATUS


1093 
	`AuC⁄vîtUuidToSåög
 (

1094 *
UuIdBuf„r
,

1095 *
OutSåög
);

1101 
	`RsSmÆlAddªssCheck
 (

1102 
UINT8
 
Ty≥
,

1103 
UINT32
 
Möimum
,

1104 
UINT32
 
Maximum
,

1105 
UINT32
 
Lígth
,

1106 
UINT32
 
Alignmít
,

1107 
ACPI_PARSE_OBJECT
 *
MöOp
,

1108 
ACPI_PARSE_OBJECT
 *
MaxOp
,

1109 
ACPI_PARSE_OBJECT
 *
LígthOp
,

1110 
ACPI_PARSE_OBJECT
 *
AlignOp
,

1111 
ACPI_PARSE_OBJECT
 *
Op
);

1114 
	`RsL¨geAddªssCheck
 (

1115 
UINT64
 
Möimum
,

1116 
UINT64
 
Maximum
,

1117 
UINT64
 
Lígth
,

1118 
UINT64
 
Gønuœrôy
,

1119 
UINT8
 
Fœgs
,

1120 
ACPI_PARSE_OBJECT
 *
MöOp
,

1121 
ACPI_PARSE_OBJECT
 *
MaxOp
,

1122 
ACPI_PARSE_OBJECT
 *
LígthOp
,

1123 
ACPI_PARSE_OBJECT
 *
GønOp
,

1124 
ACPI_PARSE_OBJECT
 *
Op
);

1126 
UINT16


1127 
	`RsGëSåögD©aLígth
 (

1128 
ACPI_PARSE_OBJECT
 *
InôülizîOp
);

1130 
ASL_RESOURCE_NODE
 *

1131 
	`RsAŒoˇãResour˚Node
 (

1132 
UINT32
 
Size
);

1135 
	`RsCª©eResour˚Fõld
 (

1136 
ACPI_PARSE_OBJECT
 *
Op
,

1137 *
Name
,

1138 
UINT32
 
ByãOff£t
,

1139 
UINT32
 
BôOff£t
,

1140 
UINT32
 
BôLígth
);

1143 
	`RsSëFœgBôs
 (

1144 
UINT8
 *
Fœgs
,

1145 
ACPI_PARSE_OBJECT
 *
Op
,

1146 
UINT8
 
Posôi⁄
,

1147 
UINT8
 
DeÁu…Bô
);

1150 
	`RsSëFœgBôs16
 (

1151 
UINT16
 *
Fœgs
,

1152 
ACPI_PARSE_OBJECT
 *
Op
,

1153 
UINT8
 
Posôi⁄
,

1154 
UINT8
 
DeÁu…Bô
);

1156 
ACPI_PARSE_OBJECT
 *

1157 
	`RsCom∂ëeNodeAndGëNext
 (

1158 
ACPI_PARSE_OBJECT
 *
Op
);

1161 
	`RsCheckLi°F‹Du∂iˇãs
 (

1162 
ACPI_PARSE_OBJECT
 *
Op
);

1164 
ASL_RESOURCE_NODE
 *

1165 
	`RsDoO√Resour˚Des¸ùt‹
 (

1166 
ASL_RESOURCE_INFO
 *
Info
,

1167 
UINT8
 *
Sèã
);

1171 
	#ACPI_RSTATE_NORMAL
 0

	)

1172 
	#ACPI_RSTATE_START_DEPENDENT
 1

	)

1173 
	#ACPI_RSTATE_DEPENDENT_LIST
 2

	)

1175 
UINT32


1176 
	`RsLökDes¸ùt‹Chaö
 (

1177 
ASL_RESOURCE_NODE
 **
PªviousRnode
,

1178 
ASL_RESOURCE_NODE
 *
Rnode
);

1181 
	`RsDoResour˚Tem∂©e
 (

1182 
ACPI_PARSE_OBJECT
 *
Op
);

1188 
ASL_RESOURCE_NODE
 *

1189 
	`RsDoEndTagDes¸ùt‹
 (

1190 
ASL_RESOURCE_INFO
 *
Info
);

1192 
ASL_RESOURCE_NODE
 *

1193 
	`RsDoEndDïídítDes¸ùt‹
 (

1194 
ASL_RESOURCE_INFO
 *
Info
);

1196 
ASL_RESOURCE_NODE
 *

1197 
	`RsDoMem‹y24Des¸ùt‹
 (

1198 
ASL_RESOURCE_INFO
 *
Info
);

1200 
ASL_RESOURCE_NODE
 *

1201 
	`RsDoMem‹y32Des¸ùt‹
 (

1202 
ASL_RESOURCE_INFO
 *
Info
);

1204 
ASL_RESOURCE_NODE
 *

1205 
	`RsDoMem‹y32FixedDes¸ùt‹
 (

1206 
ASL_RESOURCE_INFO
 *
Info
);

1208 
ASL_RESOURCE_NODE
 *

1209 
	`RsDoSèπDïídítDes¸ùt‹
 (

1210 
ASL_RESOURCE_INFO
 *
Info
);

1212 
ASL_RESOURCE_NODE
 *

1213 
	`RsDoSèπDïídítNoPriDes¸ùt‹
 (

1214 
ASL_RESOURCE_INFO
 *
Info
);

1216 
ASL_RESOURCE_NODE
 *

1217 
	`RsDoVíd‹SmÆlDes¸ùt‹
 (

1218 
ASL_RESOURCE_INFO
 *
Info
);

1224 
ASL_RESOURCE_NODE
 *

1225 
	`RsDoDmaDes¸ùt‹
 (

1226 
ASL_RESOURCE_INFO
 *
Info
);

1228 
ASL_RESOURCE_NODE
 *

1229 
	`RsDoFixedDmaDes¸ùt‹
 (

1230 
ASL_RESOURCE_INFO
 *
Info
);

1232 
ASL_RESOURCE_NODE
 *

1233 
	`RsDoFixedIoDes¸ùt‹
 (

1234 
ASL_RESOURCE_INFO
 *
Info
);

1236 
ASL_RESOURCE_NODE
 *

1237 
	`RsDoIoDes¸ùt‹
 (

1238 
ASL_RESOURCE_INFO
 *
Info
);

1240 
ASL_RESOURCE_NODE
 *

1241 
	`RsDoIrqDes¸ùt‹
 (

1242 
ASL_RESOURCE_INFO
 *
Info
);

1244 
ASL_RESOURCE_NODE
 *

1245 
	`RsDoIrqNoFœgsDes¸ùt‹
 (

1246 
ASL_RESOURCE_INFO
 *
Info
);

1252 
ASL_RESOURCE_NODE
 *

1253 
	`RsDoI¡îru±Des¸ùt‹
 (

1254 
ASL_RESOURCE_INFO
 *
Info
);

1256 
ASL_RESOURCE_NODE
 *

1257 
	`RsDoVíd‹L¨geDes¸ùt‹
 (

1258 
ASL_RESOURCE_INFO
 *
Info
);

1260 
ASL_RESOURCE_NODE
 *

1261 
	`RsDoGíîÆRegi°îDes¸ùt‹
 (

1262 
ASL_RESOURCE_INFO
 *
Info
);

1264 
ASL_RESOURCE_NODE
 *

1265 
	`RsDoGpioI¡Des¸ùt‹
 (

1266 
ASL_RESOURCE_INFO
 *
Info
);

1268 
ASL_RESOURCE_NODE
 *

1269 
	`RsDoGpioIoDes¸ùt‹
 (

1270 
ASL_RESOURCE_INFO
 *
Info
);

1272 
ASL_RESOURCE_NODE
 *

1273 
	`RsDoI2cSîülBusDes¸ùt‹
 (

1274 
ASL_RESOURCE_INFO
 *
Info
);

1276 
ASL_RESOURCE_NODE
 *

1277 
	`RsDoSpiSîülBusDes¸ùt‹
 (

1278 
ASL_RESOURCE_INFO
 *
Info
);

1280 
ASL_RESOURCE_NODE
 *

1281 
	`RsDoU¨tSîülBusDes¸ùt‹
 (

1282 
ASL_RESOURCE_INFO
 *
Info
);

1287 
ASL_RESOURCE_NODE
 *

1288 
	`RsDoDw‹dIoDes¸ùt‹
 (

1289 
ASL_RESOURCE_INFO
 *
Info
);

1291 
ASL_RESOURCE_NODE
 *

1292 
	`RsDoDw‹dMem‹yDes¸ùt‹
 (

1293 
ASL_RESOURCE_INFO
 *
Info
);

1295 
ASL_RESOURCE_NODE
 *

1296 
	`RsDoDw‹dS∑˚Des¸ùt‹
 (

1297 
ASL_RESOURCE_INFO
 *
Info
);

1303 
ASL_RESOURCE_NODE
 *

1304 
	`RsDoExãndedIoDes¸ùt‹
 (

1305 
ASL_RESOURCE_INFO
 *
Info
);

1307 
ASL_RESOURCE_NODE
 *

1308 
	`RsDoExãndedMem‹yDes¸ùt‹
 (

1309 
ASL_RESOURCE_INFO
 *
Info
);

1311 
ASL_RESOURCE_NODE
 *

1312 
	`RsDoExãndedS∑˚Des¸ùt‹
 (

1313 
ASL_RESOURCE_INFO
 *
Info
);

1319 
ASL_RESOURCE_NODE
 *

1320 
	`RsDoQw‹dIoDes¸ùt‹
 (

1321 
ASL_RESOURCE_INFO
 *
Info
);

1323 
ASL_RESOURCE_NODE
 *

1324 
	`RsDoQw‹dMem‹yDes¸ùt‹
 (

1325 
ASL_RESOURCE_INFO
 *
Info
);

1327 
ASL_RESOURCE_NODE
 *

1328 
	`RsDoQw‹dS∑˚Des¸ùt‹
 (

1329 
ASL_RESOURCE_INFO
 *
Info
);

1335 
ASL_RESOURCE_NODE
 *

1336 
	`RsDoW‹dIoDes¸ùt‹
 (

1337 
ASL_RESOURCE_INFO
 *
Info
);

1339 
ASL_RESOURCE_NODE
 *

1340 
	`RsDoW‹dS∑˚Des¸ùt‹
 (

1341 
ASL_RESOURCE_INFO
 *
Info
);

1343 
ASL_RESOURCE_NODE
 *

1344 
	`RsDoW‹dBusNumbîDes¸ùt‹
 (

1345 
ASL_RESOURCE_INFO
 *
Info
);

1351 
ACPI_STATUS


1352 
	`DtDoCompûe
(

1355 
ACPI_STATUS


1356 
	`DtCª©eTem∂©es
 (

1357 *
Sig«tuª
);

	@src/extern/acpica/source/compiler/asldefine.h

116 #i‚de‡
__ASLDEFINE_H


117 
	#__ASLDEFINE_H


	)

123 
	#ASL_COMPILER_NAME
 "ASL+ O±imizög Compûî"

	)

124 
	#AML_DISASSEMBLER_NAME
 "AML/ASL+ Dißs£mbÀr"

	)

125 
	#ASL_INVOCATION_NAME
 "ü¶"

	)

126 
	#ASL_CREATOR_ID
 "INTL"

	)

128 
	#ASL_COMPLIANCE
 "Suµ‹t†ACPI S≥cifiˇti⁄ Revisi⁄ 5.1"

	)

133 
	#ASL_MAX_ERROR_COUNT
 200

	)

134 
	#ASL_PARSEOP_CACHE_SIZE
 (1024 * 16)

	)

135 
	#ASL_STRING_CACHE_SIZE
 (1024 * 64)

	)

137 
	#ASL_FIRST_PARSE_OPCODE
 
PARSEOP_ACCESSAS


	)

138 
	#ASL_PARSE_OPCODE_BASE
 
PARSEOP_ACCESSAS


	)

147 #i‡
deföed
 (
YYBISON
)

148 
	#ASL_YYTNAME_START
 3

	)

149 #ñi‡
deföed
 (
YYBYACC
)

150 
	#ASL_YYTNAME_START
 257

	)

157 
	#ASL_RESDESC_OFFSET
(
m
Ë
	`ACPI_OFFSET
 (
AML_RESOURCE
, m)

	)

158 
	#ASL_PTR_DIFF
(
a
,
b
Ë((
UINT8
 *)(bË- (UINT8 *)◊))

	)

159 
	#ASL_PTR_ADD
(
a
,
b
Ë((
UINT8
 *)◊Ë((UINT8 *)◊Ë+ (b)))

	)

160 
	#ASL_GET_CHILD_NODE
(
a
Ë◊)->
A¶
.
Chûd


	)

161 
	#ASL_GET_PEER_NODE
(
a
Ë◊)->
A¶
.
Next


	)

162 
	#OP_TABLE_ENTRY
(
a
,
b
,
c
,
d
Ë{b,d,a,c}

	)

167 
	#AML_RAW_DATA_BYTE
 (
UINT16
Ë0xAA01

	)

168 
	#AML_RAW_DATA_WORD
 (
UINT16
Ë0xAA02

	)

169 
	#AML_RAW_DATA_DWORD
 (
UINT16
Ë0xAA04

	)

170 
	#AML_RAW_DATA_QWORD
 (
UINT16
Ë0xAA08

	)

171 
	#AML_RAW_DATA_BUFFER
 (
UINT16
Ë0xAA0B

	)

172 
	#AML_RAW_DATA_CHAIN
 (
UINT16
Ë0xAA0C

	)

173 
	#AML_PACKAGE_LENGTH
 (
UINT16
Ë0xAA10

	)

174 
	#AML_UNASSIGNED_OPCODE
 (
UINT16
Ë0xEEEE

	)

175 
	#AML_DEFAULT_ARG_OP
 (
UINT16
Ë0xDDDD

	)

180 
	#FILE_SUFFIX_PREPROCESSOR
 "i"

	)

181 
	#FILE_SUFFIX_AML_CODE
 "aml"

	)

182 
	#FILE_SUFFIX_MAP
 "m≠"

	)

183 
	#FILE_SUFFIX_LISTING
 "l°"

	)

184 
	#FILE_SUFFIX_HEX_DUMP
 "hex"

	)

185 
	#FILE_SUFFIX_DEBUG
 "txt"

	)

186 
	#FILE_SUFFIX_SOURCE
 "§c"

	)

187 
	#FILE_SUFFIX_NAMESPACE
 "n•"

	)

188 
	#FILE_SUFFIX_ASM_SOURCE
 "asm"

	)

189 
	#FILE_SUFFIX_C_SOURCE
 "c"

	)

190 
	#FILE_SUFFIX_DISASSEMBLY
 "d¶"

	)

191 
	#FILE_SUFFIX_ASM_INCLUDE
 "öc"

	)

192 
	#FILE_SUFFIX_C_INCLUDE
 "h"

	)

193 
	#FILE_SUFFIX_ASL_CODE
 "a¶"

	)

194 
	#FILE_SUFFIX_C_OFFSET
 "off£t.h"

	)

199 
	#ASL_INPUT_TYPE_BINARY
 0

	)

200 
	#ASL_INPUT_TYPE_ACPI_TABLE
 1

	)

201 
	#ASL_INPUT_TYPE_ASCII_ASL
 2

	)

202 
	#ASL_INPUT_TYPE_ASCII_DATA
 3

	)

207 
	#ASL_EXTERNAL_METHOD
 255

	)

208 
	#ASL_ABORT
 
TRUE


	)

209 
	#ASL_NO_ABORT
 
FALSE


	)

210 
	#ASL_EOF
 
ACPI_UINT32_MAX


	)

215 
	#ASL_LISTING_LINE_PREFIX
 ": "

	)

220 
	#ACPI_VALID_RESERVED_NAME_MAX
 0x80000000

	)

221 
	#ACPI_NOT_RESERVED_NAME
 
ACPI_UINT32_MAX


	)

222 
	#ACPI_PREDEFINED_NAME
 (
ACPI_UINT32_MAX
 - 1)

	)

223 
	#ACPI_EVENT_RESERVED_NAME
 (
ACPI_UINT32_MAX
 - 2)

	)

224 
	#ACPI_COMPILER_RESERVED_NAME
 (
ACPI_UINT32_MAX
 - 3)

	)

229 
	#NEGATIVE
 1

	)

230 
	#POSITIVE
 0

	)

235 
	#RsCª©eMu…iBôFõld
 \

236 
RsCª©eResour˚Fõld


	)

238 
	#RsCª©eBôFõld
(
Op
, 
Name
, 
ByãOff£t
, 
BôOff£t
) \

239 
	`RsCª©eResour˚Fõld
 (
Op
, 
Name
, 
ByãOff£t
, 
BôOff£t
, 1)

	)

241 
	#RsCª©eByãFõld
(
Op
, 
Name
, 
ByãOff£t
) \

242 
	`RsCª©eResour˚Fõld
 (
Op
, 
Name
, 
ByãOff£t
, 0, 8);

	)

244 
	#RsCª©eW‹dFõld
(
Op
, 
Name
, 
ByãOff£t
) \

245 
	`RsCª©eResour˚Fõld
 (
Op
, 
Name
, 
ByãOff£t
, 0, 16);

	)

247 
	#RsCª©eDw‹dFõld
(
Op
, 
Name
, 
ByãOff£t
) \

248 
	`RsCª©eResour˚Fõld
 (
Op
, 
Name
, 
ByãOff£t
, 0, 32);

	)

250 
	#RsCª©eQw‹dFõld
(
Op
, 
Name
, 
ByãOff£t
) \

251 
	`RsCª©eResour˚Fõld
 (
Op
, 
Name
, 
ByãOff£t
, 0, 64);

	)

	@src/extern/acpica/source/compiler/aslglobal.h

116 #i‚de‡
__ASLGLOBAL_H


117 
	#__ASLGLOBAL_H


	)

124 #unde‡
ASL_EXTERN


126 #ifde‡
_DECLARE_GLOBALS


127 
	#ASL_EXTERN


	)

128 
	#ASL_INIT_GLOBAL
(
a
,
b
Ë◊)=(b)

	)

130 
	#ASL_EXTERN
 

	)

131 
	#ASL_INIT_GLOBAL
(
a
,
b
Ë◊)

	)

135 #ifde‡
_DECLARE_GLOBALS


136 
UINT32
 
Gbl_Ex˚±i⁄Cou¡
[
ASL_NUM_REPORT_LEVELS
] = {0,0,0,0,0,0};

140 
ASL_FILE_INFO
 
	gGbl_Fûes
 [
ASL_NUM_FILES
] =

142 {
NULL
, NULL, "stdout: ", "Standard Output"},

143 {
NULL
, NULL, "stderr: ", "Standard Error"},

144 {
NULL
, NULL, "Table Input: ", "Source Input"},

145 {
NULL
, NULL, "Binary Output:", "AML Output"},

146 {
NULL
, NULL, "Source Output:", "Source Output"},

147 {
NULL
, NULL, "Preprocessor: ", "Preprocessor Output"},

148 {
NULL
, NULL, "Listing File: ", "Listing Output"},

149 {
NULL
, NULL, "Hex Dump: ", "Hex Table Output"},

150 {
NULL
, NULL, "Namespace: ", "Namespace Output"},

151 {
NULL
, NULL, "Debug File: ", "Debug Output"},

152 {
NULL
, NULL, "ASM Source: ", "Assembly Code Output"},

153 {
NULL
, NULL, "C Source: ", "C Code Output"},

154 {
NULL
, NULL, "ASM Include: ", "Assembly Header Output"},

155 {
NULL
, NULL, "C Include: ", "C Header Output"},

156 {
NULL
, NULL, "Offset Table: ", "C Offset Table Output"},

157 {
NULL
, NULL, "Device Map: ", "Device Map Output"}

161 
UINT32
 
Gbl_Ex˚±i⁄Cou¡
[
ASL_NUM_REPORT_LEVELS
];

162 
ASL_FILE_INFO
 
Gbl_Fûes
 [
ASL_NUM_FILES
];

169 
yydebug
;

170 
FILE
 *
A¶Compûîö
;

171 
DtP¨£rdebug
;

172 
PrP¨£rdebug
;

173 c⁄° 
ASL_MAPPING_ENTRY
 
A¶Keyw‹dM≠pög
[];

174 *
A¶Compûîãxt
;

180 #i‚de‡
ASLCOMPILER_ASLCOMPILERPARSE_H


181 
A¶Compûîdebug
;

185 
	#ASL_DEFAULT_LINE_BUFFER_SIZE
 (1024 * 32Ë

	)

186 
	#ASL_MSG_BUFFER_SIZE
 4096

	)

187 
	#ASL_MAX_DISABLED_MESSAGES
 32

	)

188 
	#HEX_TABLE_LINE_SIZE
 8

	)

189 
	#HEX_LISTING_LINE_SIZE
 8

	)

194 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_CuºítLöeBuf„r
, 
NULL
);

195 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_LöeBufPå
, 
NULL
);

196 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_LöeBuf„rSize
, 
ASL_DEFAULT_LINE_BUFFER_SIZE
);

197 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_CuºítCﬁumn
, 0);

198 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_PªviousLöeNumbî
, 0);

199 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_CuºítLöeNumbî
, 1);

200 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_LogiˇlLöeNumbî
, 1);

201 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_CuºítLöeOff£t
, 0);

202 
ASL_EXTERN
 
UINT8
 
ASL_INIT_GLOBAL
 (
Gbl_Sy¡axEº‹
, 0);

206 
ASL_EXTERN
 
ASL_ERROR_MSG
 
ASL_INIT_GLOBAL
 (*
Gbl_Eº‹Log
,
NULL
);

207 
ASL_EXTERN
 
ASL_ERROR_MSG
 
ASL_INIT_GLOBAL
 (*
Gbl_NextEº‹
,
NULL
);

211 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_DoCompûe
, 
TRUE
);

212 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_DoSign⁄
, 
TRUE
);

213 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Pª¥o˚ssO∆y
, 
FALSE
);

214 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Pª¥o˚ssFœg
, 
TRUE
);

215 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Dißs£mbÀAŒ
, 
FALSE
);

217 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_U£DeÁu…AmlFûíame
, 
TRUE
);

218 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_M≠fûeFœg
, 
FALSE
);

219 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_NsOuçutFœg
, 
FALSE
);

220 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Pª¥o˚ss‹OuçutFœg
, 
FALSE
);

221 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_DebugFœg
, 
FALSE
);

222 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_AsmOuçutFœg
, 
FALSE
);

223 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_C_OuçutFœg
, 
FALSE
);

224 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_C_Off£tTabÀFœg
, 
FALSE
);

225 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_AsmIn˛udeOuçutFœg
, 
FALSE
);

226 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_C_In˛udeOuçutFœg
, 
FALSE
);

227 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Li°ögFœg
, 
FALSE
);

228 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Ign‹eEº‹s
, 
FALSE
);

229 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Sour˚OuçutFœg
, 
FALSE
);

230 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_P¨£O∆yFœg
, 
FALSE
);

231 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_CompûeTimesFœg
, 
FALSE
);

232 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_FﬁdC⁄°™ts
, 
TRUE
);

233 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Vîbo£Eº‹s
, 
TRUE
);

234 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_NoEº‹s
, 
FALSE
);

235 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_W¨nögsAsEº‹s
, 
FALSE
);

236 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_NoResour˚Checkög
, 
FALSE
);

237 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_DißsmFœg
, 
FALSE
);

238 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_I¡egîO±imiz©i⁄Fœg
, 
TRUE
);

239 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Re„ªn˚O±imiz©i⁄Fœg
, 
TRUE
);

240 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Di•œyRem¨ks
, 
TRUE
);

241 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Di•œyW¨nögs
, 
TRUE
);

242 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Di•œyO±imiz©i⁄s
, 
FALSE
);

243 
ASL_EXTERN
 
UINT8
 
ASL_INIT_GLOBAL
 (
Gbl_W¨nögLevñ
, 
ASL_WARNING
);

244 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_U£OrigöÆCompûîId
, 
FALSE
);

245 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Vîbo£Tem∂©es
, 
FALSE
);

246 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_DoTem∂©es
, 
FALSE
);

247 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_CompûeGíîic
, 
FALSE
);

248 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_AŒEx˚±i⁄sDißbÀd
, 
FALSE
);

249 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_Pru√P¨£Tªe
, 
FALSE
);

252 
	#HEX_OUTPUT_NONE
 0

	)

253 
	#HEX_OUTPUT_C
 1

	)

254 
	#HEX_OUTPUT_ASM
 2

	)

255 
	#HEX_OUTPUT_ASL
 3

	)

257 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_HexOuçutFœg
, 
HEX_OUTPUT_NONE
);

262 
ASL_EXTERN
 *
	gGbl_Dúe˘‹yP©h
;

263 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_In˛udeFûíame
, 
NULL
);

264 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_OuçutFûíamePªfix
, 
NULL
);

265 
ASL_EXTERN
 
ASL_INCLUDE_DIR
 
ASL_INIT_GLOBAL
 (*
Gbl_In˛udeDúLi°
, 
NULL
);

266 
ASL_EXTERN
 *
	gGbl_CuºítI≈utFûíame
;

267 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_Exã∫ÆRefFûíame
, 
NULL
);

269 
ASL_EXTERN
 
BOOLEAN
 
ASL_INIT_GLOBAL
 (
Gbl_HasIn˛udeFûes
, 
FALSE
);

274 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_I≈utByãCou¡
, 0);

275 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_I≈utFõldCou¡
, 0);

276 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_NsLookupCou¡
, 0);

277 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
TŸÆKeyw‹ds
, 0);

278 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
TŸÆNamedObje˘s
, 0);

279 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
TŸÆExecuèbÀOpcodes
, 0);

280 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
TŸÆP¨£Nodes
, 0);

281 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
TŸÆMëhods
, 0);

282 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
TŸÆAŒoˇti⁄s
, 0);

283 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
TŸÆAŒoˇãd
, 0);

284 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
TŸÆFﬁds
, 0);

289 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_P¨£OpCou¡
, 0);

290 
ASL_EXTERN
 
ASL_CACHE_INFO
 
ASL_INIT_GLOBAL
 (*
Gbl_P¨£OpCacheLi°
, 
NULL
);

291 
ASL_EXTERN
 
ACPI_PARSE_OBJECT
 
ASL_INIT_GLOBAL
 (*
Gbl_P¨£OpCacheNext
, 
NULL
);

292 
ASL_EXTERN
 
ACPI_PARSE_OBJECT
 
ASL_INIT_GLOBAL
 (*
Gbl_P¨£OpCacheLa°
, 
NULL
);

294 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_SåögCou¡
, 0);

295 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_SåögSize
, 0);

296 
ASL_EXTERN
 
ASL_CACHE_INFO
 
ASL_INIT_GLOBAL
 (*
Gbl_SåögCacheLi°
, 
NULL
);

297 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_SåögCacheNext
, 
NULL
);

298 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_SåögCacheLa°
, 
NULL
);

302 
ASL_EXTERN
 
ACPI_GPIO_INFO
 
ASL_INIT_GLOBAL
 (*
Gbl_GpioLi°
, 
NULL
);

303 
ASL_EXTERN
 
ACPI_SERIAL_INFO
 
ASL_INIT_GLOBAL
 (*
Gbl_SîülLi°
, 
NULL
);

308 
ASL_EXTERN
 
UINT8
 
ASL_INIT_GLOBAL
 (
Gbl_Revisi⁄Ovîride
, 0);

309 
ASL_EXTERN
 
UINT8
 
ASL_INIT_GLOBAL
 (
Gbl_TempCou¡
, 0);

310 
ASL_EXTERN
 
ACPI_PARSE_OBJECT
 
ASL_INIT_GLOBAL
 (*
RoŸNode
, 
NULL
);

311 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_TabÀLígth
, 0);

312 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_Sour˚Löe
, 0);

313 
ASL_EXTERN
 
ASL_LISTING_NODE
 
ASL_INIT_GLOBAL
 (*
Gbl_Li°ögNode
, 
NULL
);

314 
ASL_EXTERN
 
ACPI_PARSE_OBJECT
 *
	gGbl_Fú°LevñIn£πi⁄Node
;

315 
ASL_EXTERN
 
UINT8
 
ASL_INIT_GLOBAL
 (
Gbl_FûeTy≥
, 0);

316 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_Sig«tuª
, 
NULL
);

317 
ASL_EXTERN
 *
	gGbl_Tem∂©eSig«tuª
;

319 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_CuºítHexCﬁumn
, 0);

320 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_CuºítAmlOff£t
, 0);

321 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_CuºítLöe
, 0);

322 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_DißbÀdMesßgesIndex
, 0);

323 
ASL_EXTERN
 
UINT8
 
ASL_INIT_GLOBAL
 (
Gbl_HexByãsWîeWrôãn
, 
FALSE
);

324 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_NumName•a˚Obje˘s
, 0);

325 
ASL_EXTERN
 
UINT32
 
ASL_INIT_GLOBAL
 (
Gbl_Re£rvedMëhods
, 0);

326 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_TabÀSig«tuª
, "NO_SIG");

327 
ASL_EXTERN
 
ASL_INIT_GLOBAL
 (*
Gbl_TabÀId
, "NO_ID");

328 
ASL_EXTERN
 
UINT8
 
ASL_INIT_GLOBAL
 (
Gbl_Pru√Dïth
, 0);

329 
ASL_EXTERN
 
UINT16
 
ASL_INIT_GLOBAL
 (
Gbl_Pru√Ty≥
, 0);

334 
ASL_EXTERN
 
ASL_ANALYSIS_WALK_INFO
 
	gA«lysisWÆkInfo
;

335 
ASL_EXTERN
 
ACPI_TABLE_HEADER
 
	gTabÀHódî
;

339 
	#ASL_NUM_EVENTS
 20

	)

340 
ASL_EXTERN
 
ASL_EVENT_INFO
 
	gA¶Gbl_Evíts
[
ASL_NUM_EVENTS
];

341 
ASL_EXTERN
 
UINT8
 
	gA¶Gbl_NextEvít
;

342 
ASL_EXTERN
 
UINT8
 
	gA¶Gbl_Name•a˚Evít
;

346 
ASL_EXTERN
 
UINT8
 
	gGbl_AmlBuf„r
[
HEX_LISTING_LINE_SIZE
];

347 
ASL_EXTERN
 
	gMsgBuf„r
[
ASL_MSG_BUFFER_SIZE
];

348 
ASL_EXTERN
 
	gSåögBuf„r
[
ASL_MSG_BUFFER_SIZE
];

349 
ASL_EXTERN
 
	gSåögBuf„r2
[
ASL_MSG_BUFFER_SIZE
];

350 
ASL_EXTERN
 
UINT32
 
	gGbl_DißbÀdMesßges
[
ASL_MAX_DISABLED_MESSAGES
];

	@src/extern/acpica/source/compiler/aslmessages.h

116 #i‚de‡
__ASLMESSAGES_H


117 
	#__ASLMESSAGES_H


	)

124 
	mASL_OPTIMIZATION
 = 0,

125 
	mASL_REMARK
,

126 
	mASL_WARNING
,

127 
	mASL_WARNING2
,

128 
	mASL_WARNING3
,

129 
	mASL_ERROR
,

130 
	mASL_NUM_REPORT_LEVELS


132 } 
	tASL_MESSAGE_TYPES
;

135 
	#ASL_ERROR_LEVEL_LENGTH
 8

	)

141 
	#ASL_MSG_MAIN_COMPILER
 0

	)

142 
	#ASL_MSG_MAIN_COMPILER_END
 299

	)

144 
	#ASL_MSG_TABLE_COMPILER
 300

	)

145 
	#ASL_MSG_TABLE_COMPILER_END
 499

	)

147 
	#ASL_MSG_PREPROCESSOR
 500

	)

148 
	#ASL_MSG_PREPROCESSOR_END
 599

	)

168 
	mASL_MSG_RESERVED
 = 
ASL_MSG_MAIN_COMPILER
,

170 
	mASL_MSG_ALIGNMENT
,

171 
	mASL_MSG_ALPHANUMERIC_STRING
,

172 
	mASL_MSG_AML_NOT_IMPLEMENTED
,

173 
	mASL_MSG_ARG_COUNT_HI
,

174 
	mASL_MSG_ARG_COUNT_LO
,

175 
	mASL_MSG_ARG_INIT
,

176 
	mASL_MSG_BACKWARDS_OFFSET
,

177 
	mASL_MSG_BUFFER_LENGTH
,

178 
	mASL_MSG_CLOSE
,

179 
	mASL_MSG_COMPILER_INTERNAL
,

180 
	mASL_MSG_COMPILER_RESERVED
,

181 
	mASL_MSG_CONNECTION_MISSING
,

182 
	mASL_MSG_CONNECTION_INVALID
,

183 
	mASL_MSG_CONSTANT_EVALUATION
,

184 
	mASL_MSG_CONSTANT_FOLDED
,

185 
	mASL_MSG_CORE_EXCEPTION
,

186 
	mASL_MSG_DEBUG_FILE_OPEN
,

187 
	mASL_MSG_DEBUG_FILENAME
,

188 
	mASL_MSG_DEPENDENT_NESTING
,

189 
	mASL_MSG_DMA_CHANNEL
,

190 
	mASL_MSG_DMA_LIST
,

191 
	mASL_MSG_DUPLICATE_CASE
,

192 
	mASL_MSG_DUPLICATE_ITEM
,

193 
	mASL_MSG_EARLY_EOF
,

194 
	mASL_MSG_ENCODING_LENGTH
,

195 
	mASL_MSG_EX_INTERRUPT_LIST
,

196 
	mASL_MSG_EX_INTERRUPT_LIST_MIN
,

197 
	mASL_MSG_EX_INTERRUPT_NUMBER
,

198 
	mASL_MSG_FIELD_ACCESS_WIDTH
,

199 
	mASL_MSG_FIELD_UNIT_ACCESS_WIDTH
,

200 
	mASL_MSG_FIELD_UNIT_OFFSET
,

201 
	mASL_MSG_GPE_NAME_CONFLICT
,

202 
	mASL_MSG_HID_LENGTH
,

203 
	mASL_MSG_HID_PREFIX
,

204 
	mASL_MSG_HID_SUFFIX
,

205 
	mASL_MSG_INCLUDE_FILE_OPEN
,

206 
	mASL_MSG_INPUT_FILE_OPEN
,

207 
	mASL_MSG_INTEGER_LENGTH
,

208 
	mASL_MSG_INTEGER_OPTIMIZATION
,

209 
	mASL_MSG_INTERRUPT_LIST
,

210 
	mASL_MSG_INTERRUPT_NUMBER
,

211 
	mASL_MSG_INVALID_ACCESS_SIZE
,

212 
	mASL_MSG_INVALID_ADDR_FLAGS
,

213 
	mASL_MSG_INVALID_CONSTANT_OP
,

214 
	mASL_MSG_INVALID_EISAID
,

215 
	mASL_MSG_INVALID_ESCAPE
,

216 
	mASL_MSG_INVALID_GRAN_FIXED
,

217 
	mASL_MSG_INVALID_GRANULARITY
,

218 
	mASL_MSG_INVALID_LENGTH
,

219 
	mASL_MSG_INVALID_LENGTH_FIXED
,

220 
	mASL_MSG_INVALID_MIN_MAX
,

221 
	mASL_MSG_INVALID_OPERAND
,

222 
	mASL_MSG_INVALID_PERFORMANCE
,

223 
	mASL_MSG_INVALID_PRIORITY
,

224 
	mASL_MSG_INVALID_STRING
,

225 
	mASL_MSG_INVALID_TARGET
,

226 
	mASL_MSG_INVALID_TIME
,

227 
	mASL_MSG_INVALID_TYPE
,

228 
	mASL_MSG_INVALID_UUID
,

229 
	mASL_MSG_ISA_ADDRESS
,

230 
	mASL_MSG_LEADING_ASTERISK
,

231 
	mASL_MSG_LIST_LENGTH_LONG
,

232 
	mASL_MSG_LIST_LENGTH_SHORT
,

233 
	mASL_MSG_LISTING_FILE_OPEN
,

234 
	mASL_MSG_LISTING_FILENAME
,

235 
	mASL_MSG_LOCAL_INIT
,

236 
	mASL_MSG_LOCAL_OUTSIDE_METHOD
,

237 
	mASL_MSG_LONG_LINE
,

238 
	mASL_MSG_MEMORY_ALLOCATION
,

239 
	mASL_MSG_MISSING_ENDDEPENDENT
,

240 
	mASL_MSG_MISSING_STARTDEPENDENT
,

241 
	mASL_MSG_MULTIPLE_DEFAULT
,

242 
	mASL_MSG_MULTIPLE_TYPES
,

243 
	mASL_MSG_NAME_EXISTS
,

244 
	mASL_MSG_NAME_OPTIMIZATION
,

245 
	mASL_MSG_NAMED_OBJECT_IN_WHILE
,

246 
	mASL_MSG_NESTED_COMMENT
,

247 
	mASL_MSG_NO_CASES
,

248 
	mASL_MSG_NO_REGION
,

249 
	mASL_MSG_NO_RETVAL
,

250 
	mASL_MSG_NO_WHILE
,

251 
	mASL_MSG_NON_ASCII
,

252 
	mASL_MSG_NON_ZERO
,

253 
	mASL_MSG_NOT_EXIST
,

254 
	mASL_MSG_NOT_FOUND
,

255 
	mASL_MSG_NOT_METHOD
,

256 
	mASL_MSG_NOT_PARAMETER
,

257 
	mASL_MSG_NOT_REACHABLE
,

258 
	mASL_MSG_NOT_REFERENCED
,

259 
	mASL_MSG_NULL_DESCRIPTOR
,

260 
	mASL_MSG_NULL_STRING
,

261 
	mASL_MSG_OPEN
,

262 
	mASL_MSG_OUTPUT_FILE_OPEN
,

263 
	mASL_MSG_OUTPUT_FILENAME
,

264 
	mASL_MSG_PACKAGE_LENGTH
,

265 
	mASL_MSG_PREPROCESSOR_FILENAME
,

266 
	mASL_MSG_READ
,

267 
	mASL_MSG_RECURSION
,

268 
	mASL_MSG_REGION_BUFFER_ACCESS
,

269 
	mASL_MSG_REGION_BYTE_ACCESS
,

270 
	mASL_MSG_RESERVED_ARG_COUNT_HI
,

271 
	mASL_MSG_RESERVED_ARG_COUNT_LO
,

272 
	mASL_MSG_RESERVED_METHOD
,

273 
	mASL_MSG_RESERVED_NO_RETURN_VAL
,

274 
	mASL_MSG_RESERVED_OPERAND_TYPE
,

275 
	mASL_MSG_RESERVED_PACKAGE_LENGTH
,

276 
	mASL_MSG_RESERVED_RETURN_VALUE
,

277 
	mASL_MSG_RESERVED_USE
,

278 
	mASL_MSG_RESERVED_WORD
,

279 
	mASL_MSG_RESOURCE_FIELD
,

280 
	mASL_MSG_RESOURCE_INDEX
,

281 
	mASL_MSG_RESOURCE_LIST
,

282 
	mASL_MSG_RESOURCE_SOURCE
,

283 
	mASL_MSG_RESULT_NOT_USED
,

284 
	mASL_MSG_RETURN_TYPES
,

285 
	mASL_MSG_SCOPE_FWD_REF
,

286 
	mASL_MSG_SCOPE_TYPE
,

287 
	mASL_MSG_SEEK
,

288 
	mASL_MSG_SERIALIZED
,

289 
	mASL_MSG_SERIALIZED_REQUIRED
,

290 
	mASL_MSG_SINGLE_NAME_OPTIMIZATION
,

291 
	mASL_MSG_SOME_NO_RETVAL
,

292 
	mASL_MSG_STRING_LENGTH
,

293 
	mASL_MSG_SWITCH_TYPE
,

294 
	mASL_MSG_SYNC_LEVEL
,

295 
	mASL_MSG_SYNTAX
,

296 
	mASL_MSG_TABLE_SIGNATURE
,

297 
	mASL_MSG_TAG_LARGER
,

298 
	mASL_MSG_TAG_SMALLER
,

299 
	mASL_MSG_TIMEOUT
,

300 
	mASL_MSG_TOO_MANY_TEMPS
,

301 
	mASL_MSG_TRUNCATION
,

302 
	mASL_MSG_UNKNOWN_RESERVED_NAME
,

303 
	mASL_MSG_UNREACHABLE_CODE
,

304 
	mASL_MSG_UNSUPPORTED
,

305 
	mASL_MSG_UPPER_CASE
,

306 
	mASL_MSG_VENDOR_LIST
,

307 
	mASL_MSG_WRITE
,

308 
	mASL_MSG_RANGE
,

309 
	mASL_MSG_BUFFER_ALLOCATION
,

310 
	mASL_MSG_MISSING_DEPENDENCY
,

311 
	mASL_MSG_ILLEGAL_FORWARD_REF
,

312 
	mASL_MSG_ILLEGAL_METHOD_REF
,

316 
	mASL_MSG_BUFFER_ELEMENT
 = 
ASL_MSG_TABLE_COMPILER
,

317 
	mASL_MSG_DIVIDE_BY_ZERO
,

318 
	mASL_MSG_FLAG_VALUE
,

319 
	mASL_MSG_INTEGER_SIZE
,

320 
	mASL_MSG_INVALID_EXPRESSION
,

321 
	mASL_MSG_INVALID_FIELD_NAME
,

322 
	mASL_MSG_INVALID_HEX_INTEGER
,

323 
	mASL_MSG_OEM_TABLE
,

324 
	mASL_MSG_RESERVED_VALUE
,

325 
	mASL_MSG_UNKNOWN_LABEL
,

326 
	mASL_MSG_UNKNOWN_SUBTABLE
,

327 
	mASL_MSG_UNKNOWN_TABLE
,

328 
	mASL_MSG_ZERO_VALUE
,

332 
	mASL_MSG_DIRECTIVE_SYNTAX
 = 
ASL_MSG_PREPROCESSOR
,

333 
	mASL_MSG_ENDIF_MISMATCH
,

334 
	mASL_MSG_ERROR_DIRECTIVE
,

335 
	mASL_MSG_EXISTING_NAME
,

336 
	mASL_MSG_INVALID_INVOCATION
,

337 
	mASL_MSG_MACRO_SYNTAX
,

338 
	mASL_MSG_TOO_MANY_ARGUMENTS
,

339 
	mASL_MSG_UNKNOWN_DIRECTIVE
,

340 
	mASL_MSG_UNKNOWN_PRAGMA
,

341 
	mASL_MSG_WARNING_DIRECTIVE
,

343 } 
	tASL_MESSAGE_IDS
;

	@src/extern/acpica/source/compiler/asltypes.h

116 #i‚de‡
__ASLTYPES_H


117 
	#__ASLTYPES_H


	)

129 
	#NODE_VISITED
 0x00000001

	)

130 
	#NODE_AML_PACKAGE
 0x00000002

	)

131 
	#NODE_IS_TARGET
 0x00000004

	)

132 
	#NODE_IS_RESOURCE_DESC
 0x00000008

	)

133 
	#NODE_IS_RESOURCE_FIELD
 0x00000010

	)

134 
	#NODE_HAS_NO_EXIT
 0x00000020

	)

135 
	#NODE_IF_HAS_NO_EXIT
 0x00000040

	)

136 
	#NODE_NAME_INTERNALIZED
 0x00000080

	)

137 
	#NODE_METHOD_NO_RETVAL
 0x00000100

	)

138 
	#NODE_METHOD_SOME_NO_RETVAL
 0x00000200

	)

139 
	#NODE_RESULT_NOT_USED
 0x00000400

	)

140 
	#NODE_METHOD_TYPED
 0x00000800

	)

141 
	#NODE_UNUSED_FLAG
 0x00001000

	)

142 
	#NODE_COMPILE_TIME_CONST
 0x00002000

	)

143 
	#NODE_IS_TERM_ARG
 0x00004000

	)

144 
	#NODE_WAS_ONES_OP
 0x00008000

	)

145 
	#NODE_IS_NAME_DECLARATION
 0x00010000

	)

146 
	#NODE_COMPILER_EMITTED
 0x00020000

	)

147 
	#NODE_IS_DUPLICATE
 0x00040000

	)

148 
	#NODE_IS_RESOURCE_DATA
 0x00080000

	)

149 
	#NODE_IS_NULL_RETURN
 0x00100000

	)

153 
	sa¶_mëhod_öfo


155 
ACPI_PARSE_OBJECT
 *
	mOp
;

156 
a¶_mëhod_öfo
 *
	mNext
;

157 
UINT32
 
	mVÆidArgTy≥s
[
ACPI_METHOD_NUM_ARGS
];

158 
UINT32
 
	mVÆidRëu∫Ty≥s
;

159 
UINT32
 
	mNumRëu∫NoVÆue
;

160 
UINT32
 
	mNumRëu∫WôhVÆue
;

161 
UINT8
 
	mNumArgumíts
;

162 
UINT8
 
	mLoˇlInôülized
[
ACPI_METHOD_NUM_LOCALS
];

163 
UINT8
 
	mArgInôülized
[
ACPI_METHOD_NUM_ARGS
];

164 
UINT8
 
	mHasBìnTy≥d
;

165 
UINT8
 
	mShouldBeSîülized
;

167 } 
	tASL_METHOD_INFO
;

172 
	sa¶_™Æysis_wÆk_öfo


174 
ASL_METHOD_INFO
 *
	mMëhodSèck
;

176 } 
	tASL_ANALYSIS_WALK_INFO
;

181 
	sa¶_m≠pög_íåy


183 
UINT32
 
	mVÆue
;

184 
UINT32
 
	mA˝iBty≥
;

185 
UINT16
 
	mAmlOpcode
;

186 
UINT8
 
	mFœgs
;

188 } 
	tASL_MAPPING_ENTRY
;

193 
	sa¶_wÆk_öfo


195 
ACPI_PARSE_OBJECT
 **
	mNodePå
;

196 
UINT32
 *
	mLevñPå
;

198 } 
	tASL_WALK_INFO
;

203 
	sa¶_fûe_öfo


205 
FILE
 *
	mH™dÀ
;

206 *
	mFûíame
;

207 c⁄° *
	mSh‹tDes¸ùti⁄
;

208 c⁄° *
	mDes¸ùti⁄
;

210 } 
	tASL_FILE_INFO
;

212 
	sa¶_fûe_°©us


214 
UINT32
 
	mLöe
;

215 
UINT32
 
	mOff£t
;

217 } 
	tASL_FILE_STATUS
;

226 
	mASL_FILE_STDOUT
 = 0,

227 
	mASL_FILE_STDERR
,

228 
	mASL_FILE_INPUT
,

229 
	mASL_FILE_AML_OUTPUT
,

230 
	mASL_FILE_SOURCE_OUTPUT
,

231 
	mASL_FILE_PREPROCESSOR
,

232 
	mASL_FILE_LISTING_OUTPUT
,

233 
	mASL_FILE_HEX_OUTPUT
,

234 
	mASL_FILE_NAMESPACE_OUTPUT
,

235 
	mASL_FILE_DEBUG_OUTPUT
,

236 
	mASL_FILE_ASM_SOURCE_OUTPUT
,

237 
	mASL_FILE_C_SOURCE_OUTPUT
,

238 
	mASL_FILE_ASM_INCLUDE_OUTPUT
,

239 
	mASL_FILE_C_INCLUDE_OUTPUT
,

240 
	mASL_FILE_C_OFFSET_OUTPUT
,

241 
	mASL_FILE_MAP_OUTPUT


243 } 
	tASL_FILE_TYPES
;

246 
	#ASL_MAX_FILE_TYPE
 15

	)

247 
	#ASL_NUM_FILES
 (
ASL_MAX_FILE_TYPE
 + 1)

	)

252 
	sa¶_ˇche_öfo


254 *
	mNext
;

255 
	mBuf„r
[1];

257 } 
	tASL_CACHE_INFO
;

260 
	sa¶_ö˛ude_dú


262 *
	mDú
;

263 
a¶_ö˛ude_dú
 *
	mNext
;

265 } 
	tASL_INCLUDE_DIR
;

270 
	sa¶_îr‹_msg


272 
UINT32
 
	mLöeNumbî
;

273 
UINT32
 
	mLogiˇlLöeNumbî
;

274 
UINT32
 
	mLogiˇlByãOff£t
;

275 
UINT32
 
	mCﬁumn
;

276 *
	mMesßge
;

277 
a¶_îr‹_msg
 *
	mNext
;

278 *
	mFûíame
;

279 *
	mSour˚Löe
;

280 
UINT32
 
	mFûíameLígth
;

281 
UINT16
 
	mMesßgeId
;

282 
UINT8
 
	mLevñ
;

284 } 
	tASL_ERROR_MSG
;

289 
	sa¶_li°ög_node


291 *
	mFûíame
;

292 
UINT32
 
	mLöeNumbî
;

293 
a¶_li°ög_node
 *
	mNext
;

295 } 
	tASL_LISTING_NODE
;

303 #i‚de‡
ASL_WALK_CALLBACK_DEFINED


305 
	$ACPI_STATUS
 (*
	tASL_WALK_CALLBACK
) (

306 
	tACPI_PARSE_OBJECT
 *
	tOp
,

307 
	tUINT32
 
	tLevñ
,

308 *
	tC⁄ãxt
);

309 
	#ASL_WALK_CALLBACK_DEFINED


	)

313 
	sa¶_evít_öfo


315 
UINT64
 
SèπTime
;

316 
UINT64
 
EndTime
;

317 *
EvítName
;

318 
BOOLEAN
 
VÆid
;

320 } 
	tASL_EVENT_INFO
;

325 
	sa˝i_gpio_öfo


327 
a˝i_gpio_öfo
 *
Next
;

328 
ACPI_PARSE_OBJECT
 *
Op
;

329 *
Devi˚Name
;

330 
ACPI_NAMESPACE_NODE
 *
T¨gëNode
;

331 
UINT32
 
Re„ªn˚s
;

332 
UINT32
 
PöCou¡
;

333 
UINT32
 
PöIndex
;

334 
UINT16
 
PöNumbî
;

335 
UINT8
 
Ty≥
;

336 
UINT8
 
Dúe˘i⁄
;

337 
UINT8
 
Pﬁ¨ôy
;

339 } 
	tACPI_GPIO_INFO
;

341 
	sa˝i_£rül_öfo


343 
a˝i_£rül_öfo
 *
Next
;

344 
ACPI_PARSE_OBJECT
 *
Op
;

345 *
Devi˚Name
;

346 
ACPI_NAMESPACE_NODE
 *
T¨gëNode
;

347 
AML_RESOURCE
 *
Resour˚
;

348 
UINT32
 
S≥ed
;

349 
UINT16
 
Addªss
;

351 } 
	tACPI_SERIAL_INFO
;

	@src/extern/acpica/source/compiler/dtcompiler.h

116 
	#__DTCOMPILER_H__


	)

118 #i‚de‡
_DTCOMPILER


119 
	#_DTCOMPILER


	)

121 
	~<°dio.h
>

122 
	~"acdißsm.h
"

125 
	#ASL_FIELD_CACHE_SIZE
 512

	)

126 
	#ASL_SUBTABLE_CACHE_SIZE
 128

	)

129 #unde‡
DT_EXTERN


131 #ifde‡
_DECLARE_DT_GLOBALS


132 
	#DT_EXTERN


	)

133 
	#DT_INIT_GLOBAL
(
a
,
b
Ë◊)=(b)

	)

135 
	#DT_EXTERN
 

	)

136 
	#DT_INIT_GLOBAL
(
a
,
b
Ë◊)

	)

142 
	#DT_FIELD_TYPE_STRING
 0

	)

143 
	#DT_FIELD_TYPE_INTEGER
 1

	)

144 
	#DT_FIELD_TYPE_BUFFER
 2

	)

145 
	#DT_FIELD_TYPE_PCI_PATH
 3

	)

146 
	#DT_FIELD_TYPE_FLAG
 4

	)

147 
	#DT_FIELD_TYPE_FLAGS_INTEGER
 5

	)

148 
	#DT_FIELD_TYPE_INLINE_SUBTABLE
 6

	)

149 
	#DT_FIELD_TYPE_UUID
 7

	)

150 
	#DT_FIELD_TYPE_UNICODE
 8

	)

151 
	#DT_FIELD_TYPE_DEVICE_PATH
 9

	)

152 
	#DT_FIELD_TYPE_LABEL
 10

	)

158 
	sdt_fõld


160 *
Name
;

161 *
VÆue
;

162 
UINT32
 
SåögLígth
;

163 
dt_fõld
 *
Next
;

164 
dt_fõld
 *
NextLabñ
;

165 
UINT32
 
Löe
;

166 
UINT32
 
ByãOff£t
;

167 
UINT32
 
NameCﬁumn
;

168 
UINT32
 
Cﬁumn
;

169 
UINT32
 
TabÀOff£t
;

170 
UINT8
 
Fœgs
;

172 } 
	tDT_FIELD
;

176 
	#DT_FIELD_NOT_ALLOCATED
 1

	)

182 
	sdt_subèbÀ


184 
dt_subèbÀ
 *
	mP¨ít
;

185 
dt_subèbÀ
 *
	mChûd
;

186 
dt_subèbÀ
 *
	mPìr
;

187 
dt_subèbÀ
 *
	mSèckT›
;

188 
UINT8
 *
	mBuf„r
;

189 
UINT8
 *
	mLígthFõld
;

190 
UINT32
 
	mLígth
;

191 
UINT32
 
	mTŸÆLígth
;

192 
UINT32
 
	mSizeOfLígthFõld
;

193 
UINT16
 
	mDïth
;

194 
UINT8
 
	mFœgs
;

196 } 
	tDT_SUBTABLE
;

205 
DT_EXTERN
 
DT_FIELD
 
DT_INIT_GLOBAL
 (*
Gbl_FõldLi°
, 
NULL
);

209 
DT_EXTERN
 
DT_SUBTABLE
 
DT_INIT_GLOBAL
 (*
Gbl_RoŸTabÀ
, 
NULL
);

213 
DT_EXTERN
 
DT_SUBTABLE
 
DT_INIT_GLOBAL
 (*
Gbl_SubèbÀSèck
, 
NULL
);

217 
DT_EXTERN
 
DT_FIELD
 
DT_INIT_GLOBAL
 (*
Gbl_LabñLi°
, 
NULL
);

221 
DT_EXTERN
 
UINT32
 
DT_INIT_GLOBAL
 (
Gbl_CuºítTabÀOff£t
, 0);

225 
DT_EXTERN
 
UINT32
 
DT_INIT_GLOBAL
 (
Gbl_SubèbÀCou¡
, 0);

226 
DT_EXTERN
 
ASL_CACHE_INFO
 
DT_INIT_GLOBAL
 (*
Gbl_SubèbÀCacheLi°
, 
NULL
);

227 
DT_EXTERN
 
DT_SUBTABLE
 
DT_INIT_GLOBAL
 (*
Gbl_SubèbÀCacheNext
, 
NULL
);

228 
DT_EXTERN
 
DT_SUBTABLE
 
DT_INIT_GLOBAL
 (*
Gbl_SubèbÀCacheLa°
, 
NULL
);

230 
DT_EXTERN
 
UINT32
 
DT_INIT_GLOBAL
 (
Gbl_FõldCou¡
, 0);

231 
DT_EXTERN
 
ASL_CACHE_INFO
 
DT_INIT_GLOBAL
 (*
Gbl_FõldCacheLi°
, 
NULL
);

232 
DT_EXTERN
 
DT_FIELD
 
DT_INIT_GLOBAL
 (*
Gbl_FõldCacheNext
, 
NULL
);

233 
DT_EXTERN
 
DT_FIELD
 
DT_INIT_GLOBAL
 (*
Gbl_FõldCacheLa°
, 
NULL
);

238 
ACPI_STATUS


239 
DtCompûeTabÀ
 (

240 
DT_FIELD
 **
Fõld
,

241 
ACPI_DMTABLE_INFO
 *
Info
,

242 
DT_SUBTABLE
 **
RëSubèbÀ
,

243 
BOOLEAN
 
Requúed
);

248 
UINT32


249 
DtGëNextLöe
 (

250 
FILE
 *
H™dÀ
);

252 
DT_FIELD
 *

253 
DtSˇnFûe
 (

254 
FILE
 *
H™dÀ
);

257 
DtOuçutBö¨y
 (

258 
DT_SUBTABLE
 *
RoŸTabÀ
);

261 
DtDumpSubèbÀLi°
 (

265 
DtDumpFõldLi°
 (

266 
DT_FIELD
 *
Fõld
);

269 
DtWrôeFõldToLi°ög
 (

270 
UINT8
 *
Buf„r
,

271 
DT_FIELD
 *
Fõld
,

272 
UINT32
 
Lígth
);

275 
DtWrôeTabÀToLi°ög
 (

282 
DtCª©eSubèbÀ
 (

283 
UINT8
 *
Buf„r
,

284 
UINT32
 
Lígth
,

285 
DT_SUBTABLE
 **
RëSubèbÀ
);

287 
UINT32


288 
DtGëSubèbÀLígth
 (

289 
DT_FIELD
 *
Fõld
,

290 
ACPI_DMTABLE_INFO
 *
Info
);

293 
DtSëSubèbÀLígth
 (

294 
DT_SUBTABLE
 *
SubèbÀ
);

297 
DtPushSubèbÀ
 (

298 
DT_SUBTABLE
 *
SubèbÀ
);

301 
DtP›SubèbÀ
 (

304 
DT_SUBTABLE
 *

305 
DtPìkSubèbÀ
 (

309 
DtIn£πSubèbÀ
 (

310 
DT_SUBTABLE
 *
P¨ítTabÀ
,

311 
DT_SUBTABLE
 *
SubèbÀ
);

313 
DT_SUBTABLE
 *

314 
DtGëNextSubèbÀ
 (

315 
DT_SUBTABLE
 *
P¨ítTabÀ
,

316 
DT_SUBTABLE
 *
ChûdTabÀ
);

318 
DT_SUBTABLE
 *

319 
DtGëP¨ítSubèbÀ
 (

320 
DT_SUBTABLE
 *
SubèbÀ
);

325 
ACPI_STATUS


326 
DtResﬁveI¡egîEx¥essi⁄
 (

327 
DT_FIELD
 *
Fõld
,

328 
UINT64
 *
Rëu∫VÆue
);

330 
UINT64


331 
DtDoO≥øt‹
 (

332 
UINT64
 
Le·VÆue
,

333 
UINT32
 
O≥øt‹
,

334 
UINT64
 
RightVÆue
);

336 
UINT64


337 
DtResﬁveLabñ
 (

338 *
LabñSåög
);

341 
DtDëe˘AŒLabñs
 (

342 
DT_FIELD
 *
FõldLi°
);

348 
DtCompûeO√Fõld
 (

349 
UINT8
 *
Buf„r
,

350 
DT_FIELD
 *
Fõld
,

351 
UINT32
 
ByãLígth
,

352 
UINT8
 
Ty≥
,

353 
UINT8
 
Fœgs
);

356 
DtCompûeI¡egî
 (

357 
UINT8
 *
Buf„r
,

358 
DT_FIELD
 *
Fõld
,

359 
UINT32
 
ByãLígth
,

360 
UINT8
 
Fœgs
);

362 
UINT32


363 
DtCompûeBuf„r
 (

364 
UINT8
 *
Buf„r
,

365 *
VÆue
,

366 
DT_FIELD
 *
Fõld
,

367 
UINT32
 
ByãLígth
);

370 
DtCompûeFœg
 (

371 
UINT8
 *
Buf„r
,

372 
DT_FIELD
 *
Fõld
,

373 
ACPI_DMTABLE_INFO
 *
Info
);

378 
UINT64


379 
DtEvÆu©eEx¥essi⁄
 (

380 *
Ex¥Såög
);

383 
DtInôLexî
 (

384 *
Såög
);

387 
DtTîmö©eLexî
 (

391 
DtGëOpName
 (

392 
UINT32
 
P¨£Opcode
);

398 (*
	tDT_WALK_CALLBACK
) (

399 
	tDT_SUBTABLE
 *
	tSubèbÀ
,

400 *
	tC⁄ãxt
,

401 *
	tRëu∫VÆue
);

404 
	`DtWÆkTabÀTªe
 (

405 
DT_SUBTABLE
 *
SèπTabÀ
,

406 
DT_WALK_CALLBACK
 
U£rFun˘i⁄
,

407 *
C⁄ãxt
,

408 *
Rëu∫VÆue
);

411 
	`DtEº‹
 (

412 
UINT8
 
Levñ
,

413 
UINT16
 
MesßgeId
,

414 
DT_FIELD
 *
FõldObje˘
,

415 *
ExåaMesßge
);

418 
	`DtNameEº‹
 (

419 
UINT8
 
Levñ
,

420 
UINT16
 
MesßgeId
,

421 
DT_FIELD
 *
FõldObje˘
,

422 *
ExåaMesßge
);

425 
	`DtF©Æ
 (

426 
UINT16
 
MesßgeId
,

427 
DT_FIELD
 *
FõldObje˘
,

428 *
ExåaMesßge
);

430 
ACPI_STATUS


431 
	`DtSåtoul64
 (

432 *
Såög
,

433 
UINT64
 *
Rëu∫I¡egî
);

436 
	`DtGëFõldVÆue
 (

437 
DT_FIELD
 *
Fõld
);

439 
UINT8


440 
	`DtGëFõldTy≥
 (

441 
ACPI_DMTABLE_INFO
 *
Info
);

443 
UINT32


444 
	`DtGëBuf„rLígth
 (

445 *
Buf„r
);

447 
UINT32


448 
	`DtGëFõldLígth
 (

449 
DT_FIELD
 *
Fõld
,

450 
ACPI_DMTABLE_INFO
 *
Info
);

453 
	`DtSëTabÀChecksum
 (

454 
UINT8
 *
ChecksumPoöãr
);

457 
	`DtSëTabÀLígth
(

460 
DT_SUBTABLE
 *

461 
	`UtSubèbÀCacheCÆloc
 (

464 
DT_FIELD
 *

465 
	`UtFõldCacheCÆloc
 (

469 
	`DtDñëeCaches
 (

475 
ACPI_STATUS


476 
	`DtCompûeFacs
 (

477 
DT_FIELD
 **
PFõldLi°
);

479 
ACPI_STATUS


480 
	`DtCompûeRsdp
 (

481 
DT_FIELD
 **
PFõldLi°
);

483 
ACPI_STATUS


484 
	`DtCompûeAsf
 (

485 **
PFõldLi°
);

487 
ACPI_STATUS


488 
	`DtCompûeC≥p
 (

489 **
PFõldLi°
);

491 
ACPI_STATUS


492 
	`DtCompûeC§t
 (

493 **
PFõldLi°
);

495 
ACPI_STATUS


496 
	`DtCompûeDbg2
 (

497 **
PFõldLi°
);

499 
ACPI_STATUS


500 
	`DtCompûeDm¨
 (

501 **
PFõldLi°
);

503 
ACPI_STATUS


504 
	`DtCompûeEöj
 (

505 **
PFõldLi°
);

507 
ACPI_STATUS


508 
	`DtCompûeEr°
 (

509 **
PFõldLi°
);

511 
ACPI_STATUS


512 
	`DtCompûeFadt
 (

513 **
PFõldLi°
);

515 
ACPI_STATUS


516 
	`DtCompûeFpdt
 (

517 **
PFõldLi°
);

519 
ACPI_STATUS


520 
	`DtCompûeGtdt
 (

521 **
PFõldLi°
);

523 
ACPI_STATUS


524 
	`DtCompûeHe°
 (

525 **
PFõldLi°
);

527 
ACPI_STATUS


528 
	`DtCompûeIvrs
 (

529 **
PFõldLi°
);

531 
ACPI_STATUS


532 
	`DtCompûeLpô
 (

533 **
PFõldLi°
);

535 
ACPI_STATUS


536 
	`DtCompûeMadt
 (

537 **
PFõldLi°
);

539 
ACPI_STATUS


540 
	`DtCompûeMcfg
 (

541 **
PFõldLi°
);

543 
ACPI_STATUS


544 
	`DtCompûeMp°
 (

545 **
PFõldLi°
);

547 
ACPI_STATUS


548 
	`DtCompûeMs˘
 (

549 **
PFõldLi°
);

551 
ACPI_STATUS


552 
	`DtCompûeMtmr
 (

553 **
PFõldLi°
);

555 
ACPI_STATUS


556 
	`DtCompûePmâ
 (

557 **
PFõldLi°
);

559 
ACPI_STATUS


560 
	`DtCompûePc˘
 (

561 **
PFõldLi°
);

563 
ACPI_STATUS


564 
	`DtCompûeRsdt
 (

565 **
PFõldLi°
);

567 
ACPI_STATUS


568 
	`DtCompûeS3±
 (

569 
DT_FIELD
 **
PFõldLi°
);

571 
ACPI_STATUS


572 
	`DtCompûeSlic
 (

573 **
PFõldLi°
);

575 
ACPI_STATUS


576 
	`DtCompûeSlô
 (

577 **
PFõldLi°
);

579 
ACPI_STATUS


580 
	`DtCompûeSøt
 (

581 **
PFõldLi°
);

583 
ACPI_STATUS


584 
	`DtCompûeUefi
 (

585 **
PFõldLi°
);

587 
ACPI_STATUS


588 
	`DtCompûeVπc
 (

589 **
PFõldLi°
);

591 
ACPI_STATUS


592 
	`DtCompûeWd©
 (

593 **
PFõldLi°
);

595 
ACPI_STATUS


596 
	`DtCompûeXsdt
 (

597 **
PFõldLi°
);

599 
ACPI_STATUS


600 
	`DtCompûeGíîic
 (

601 **
PFõldLi°
);

603 
ACPI_DMTABLE_INFO
 *

604 
	`DtGëGíîicTabÀInfo
 (

605 *
Name
);

609 c⁄° 
Tem∂©eAsf
[];

610 c⁄° 
Tem∂©eBoŸ
[];

611 c⁄° 
Tem∂©eBît
[];

612 c⁄° 
Tem∂©eBgπ
[];

613 c⁄° 
Tem∂©eC≥p
[];

614 c⁄° 
Tem∂©eC§t
[];

615 c⁄° 
Tem∂©eDbg2
[];

616 c⁄° 
Tem∂©eDbgp
[];

617 c⁄° 
Tem∂©eDm¨
[];

618 c⁄° 
Tem∂©eEcdt
[];

619 c⁄° 
Tem∂©eEöj
[];

620 c⁄° 
Tem∂©eEr°
[];

621 c⁄° 
Tem∂©eFadt
[];

622 c⁄° 
Tem∂©eFpdt
[];

623 c⁄° 
Tem∂©eGtdt
[];

624 c⁄° 
Tem∂©eHe°
[];

625 c⁄° 
Tem∂©eH≥t
[];

626 c⁄° 
Tem∂©eIvrs
[];

627 c⁄° 
Tem∂©eLpô
[];

628 c⁄° 
Tem∂©eMadt
[];

629 c⁄° 
Tem∂©eMcfg
[];

630 c⁄° 
Tem∂©eMchi
[];

631 c⁄° 
Tem∂©eMp°
[];

632 c⁄° 
Tem∂©eMs˘
[];

633 c⁄° 
Tem∂©eMsdm
[];

634 c⁄° 
Tem∂©eMtmr
[];

635 c⁄° 
Tem∂©ePc˘
[];

636 c⁄° 
Tem∂©ePmâ
[];

637 c⁄° 
Tem∂©eRsdt
[];

638 c⁄° 
Tem∂©eS3±
[];

639 c⁄° 
Tem∂©eSb°
[];

640 c⁄° 
Tem∂©eSlic
[];

641 c⁄° 
Tem∂©eSlô
[];

642 c⁄° 
Tem∂©eSp¸
[];

643 c⁄° 
Tem∂©eSpmi
[];

644 c⁄° 
Tem∂©eSøt
[];

645 c⁄° 
Tem∂©eT˝a
[];

646 c⁄° 
Tem∂©eTpm2
[];

647 c⁄° 
Tem∂©eUefi
[];

648 c⁄° 
Tem∂©eVπc
[];

649 c⁄° 
Tem∂©eW´t
[];

650 c⁄° 
Tem∂©eWd©
[];

651 c⁄° 
Tem∂©eWddt
[];

652 c⁄° 
Tem∂©eWdπ
[];

653 c⁄° 
Tem∂©eXsdt
[];

	@src/extern/acpica/source/compiler/dttemplate.h

116 #i‚de‡
__DTTEMPLATE_H


117 
	#__DTTEMPLATE_H


	)

122 c⁄° 
	gTem∂©eDsdt
[] =

131 c⁄° 
	gTem∂©eSsdt
[] =

143 c⁄° 
	gTem∂©eAsf
[] =

162 c⁄° 
	gTem∂©eBgπ
[] =

173 c⁄° 
	gTem∂©eBît
[] =

183 c⁄° 
	gTem∂©eBoŸ
[] =

192 c⁄° 
	gTem∂©eC≥p
[] =

203 c⁄° 
	gTem∂©eC§t
[] =

249 c⁄° 
	gTem∂©eDbg2
[] =

276 c⁄° 
	gTem∂©eDbgp
[] =

287 c⁄° 
	gTem∂©eDm¨
[] =

309 c⁄° 
	gTem∂©eEcdt
[] =

322 c⁄° 
	gTem∂©eEöj
[] =

364 c⁄° 
	gTem∂©eEr°
[] =

438 c⁄° 
	gTem∂©eFacs
[] =

452 c⁄° 
	gTem∂©eFadt
[] =

490 c⁄° 
	gTem∂©eFpdt
[] =

507 c⁄° 
	gTem∂©eGtdt
[] =

539 c⁄° 
	gTem∂©eHe°
[] =

602 c⁄° 
	gTem∂©eH≥t
[] =

613 c⁄° 
	gTem∂©eIvrs
[] =

641 c⁄° 
	gTem∂©eLpô
[] =

670 c⁄° 
	gTem∂©eMadt
[] =

712 c⁄° 
	gTem∂©eMcfg
[] =

724 c⁄° 
	gTem∂©eMchi
[] =

737 c⁄° 
	gTem∂©eMsdm
[] =

754 c⁄° 
	gTem∂©eMp°
[] =

781 c⁄° 
	gTem∂©eMs˘
[] =

803 c⁄° 
	gTem∂©eMtmr
[] =

817 c⁄° 
	gTem∂©ePc˘
[] =

843 c⁄° 
	gTem∂©ePmâ
[] =

870 c⁄° 
	gTem∂©eRsdp
[] =

879 c⁄° 
	gTem∂©eRsdt
[] =

892 c⁄° 
	gTem∂©eS3±
[] =

903 c⁄° 
	gTem∂©eSb°
[] =

913 c⁄° 
	gTem∂©eSlic
[] =

964 c⁄° 
	gTem∂©eSlô
[] =

1024 c⁄° 
	gTem∂©eSp¸
[] =

1038 c⁄° 
	gTem∂©eSpmi
[] =

1051 c⁄° 
	gTem∂©eSøt
[] =

1074 c⁄° 
	gTem∂©eT˝a
[] =

1085 c⁄° 
	gTem∂©eTpm2
[] =

1096 c⁄° 
	gTem∂©eUefi
[] =

1107 c⁄° 
	gTem∂©eVπc
[] =

1120 c⁄° 
	gTem∂©eW´t
[] =

1129 c⁄° 
	gTem∂©eWd©
[] =

1145 c⁄° 
	gTem∂©eWddt
[] =

1157 c⁄° 
	gTem∂©eWdπ
[] =

1170 c⁄° 
	gTem∂©eXsdt
[] =

	@src/extern/acpica/source/compiler/preprocess.h

116 
	#__PREPROCESS_H__


	)

118 #i‚de‡
_PREPROCESS


119 
	#_PREPROCESS


	)

121 #unde‡
PR_EXTERN


123 #ifde‡
_DECLARE_PR_GLOBALS


124 
	#PR_EXTERN


	)

125 
	#PR_INIT_GLOBAL
(
a
,
b
Ë◊)=(b)

	)

127 
	#PR_EXTERN
 

	)

128 
	#PR_INIT_GLOBAL
(
a
,
b
Ë◊)

	)

135 
	#PR_MAX_MACRO_ARGS
 32

	)

136 
	#PR_MAX_ARG_INSTANCES
 24

	)

137 
	#PR_LINES_PER_BLOCK
 4096

	)

143 
	#PR_TOKEN_SEPARATORS
 " ,(){}\t\n"

	)

144 
	#PR_MACRO_SEPARATORS
 " ,(){}~!*/%+-<>=&^|\"\t\n"

	)

145 
	#PR_MACRO_ARGUMENTS
 " ,\t\n"

	)

146 
	#PR_EXPR_SEPARATORS
 " ,(){}~!*/%+-<>=&^|\"\t\n"

	)

148 
	#PR_PREFIX_ID
 "Pr(%.4uË- "

	)

150 
	#THIS_TOKEN_OFFSET
(
t
Ë(—-
Gbl_MaöTokíBuf„r
Ë+ 1)

	)

156 
	s¥_ma¸o_¨g


158 *
Name
;

159 
UINT32
 
Off£t
[
PR_MAX_ARG_INSTANCES
];

160 
UINT16
 
U£Cou¡
;

162 } 
	tPR_MACRO_ARG
;

164 
	s¥_deföe_öfo


166 
¥_deföe_öfo
 *
	mPªvious
;

167 
¥_deföe_öfo
 *
	mNext
;

168 *
	mIdítifõr
;

169 *
	mRïœ˚mít
;

170 *
	mBody
;

171 
PR_MACRO_ARG
 *
	mArgs
;

172 
UINT16
 
	mArgCou¡
;

173 
BOOLEAN
 
	mPîsi°
;

175 } 
	tPR_DEFINE_INFO
;

177 
	s¥_dúe˘ive_öfo


179 *
	mName
;

180 
UINT8
 
	mArgCou¡
;

182 } 
	tPR_DIRECTIVE_INFO
;

184 
	s¥_›î©‹_öfo


186 *
	mOp
;

188 } 
	tPR_OPERATOR_INFO
;

190 
	s¥_fûe_node


192 
¥_fûe_node
 *
	mNext
;

193 
FILE
 *
	mFûe
;

194 *
	mFûíame
;

195 
UINT32
 
	mCuºítLöeNumbî
;

197 } 
	tPR_FILE_NODE
;

199 
	#MAX_ARGUMENT_LENGTH
 24

	)

201 
	sdúe˘ive_öfo


203 
dúe˘ive_öfo
 *
	mNext
;

204 
	mArgumít
[
MAX_ARGUMENT_LENGTH
];

205 
	mDúe˘ive
;

206 
BOOLEAN
 
	mIgn‹ögThisCodeBlock
;

208 } 
	tDIRECTIVE_INFO
;

215 
PR_EXTERN
 
PR_INIT_GLOBAL
 (*
XXXEvÆBuf„r
, 
NULL
);

218 
PR_EXTERN
 
PR_INIT_GLOBAL
 (*
Gbl_MaöTokíBuf„r
, 
NULL
);

219 
PR_EXTERN
 
PR_INIT_GLOBAL
 (*
Gbl_Ma¸oTokíBuf„r
, 
NULL
);

220 
PR_EXTERN
 
PR_INIT_GLOBAL
 (*
Gbl_Ex¥essi⁄TokíBuf„r
, 
NULL
);

222 
PR_EXTERN
 
UINT32
 
	gGbl_Pª¥o˚ss‹LöeNumbî
;

223 
PR_EXTERN
 
	gGbl_IfDïth
;

224 
PR_EXTERN
 
PR_FILE_NODE
 *
	gGbl_I≈utFûeLi°
;

225 
PR_EXTERN
 
PR_DEFINE_INFO
 
PR_INIT_GLOBAL
 (*
Gbl_DeföeLi°
, 
NULL
);

226 
PR_EXTERN
 
BOOLEAN
 
PR_INIT_GLOBAL
 (
Gbl_Pª¥o˚ss‹Eº‹
, 
FALSE
);

227 
PR_EXTERN
 
BOOLEAN
 
PR_INIT_GLOBAL
 (
Gbl_Ign‹ögThisCodeBlock
, 
FALSE
);

228 
PR_EXTERN
 
DIRECTIVE_INFO
 
PR_INIT_GLOBAL
 (*
Gbl_Dúe˘iveSèck
, 
NULL
);

234 
PrInôülizePª¥o˚ss‹
 (

238 
PrInôülizeGlobÆs
 (

242 
PrTîmö©ePª¥o˚ss‹
 (

246 
PrDoPª¥o˚ss
 (

249 
UINT64


250 
PrIsDeföed
 (

251 *
Idítifõr
);

253 
UINT64


254 
PrResﬁveDeföe
 (

255 *
Idítifõr
);

258 
PrInôLexî
 (

259 *
Såög
);

262 
PrTîmö©eLexî
 (

270 
PrDumpPªdeföedNames
 (

273 
PR_DEFINE_INFO
 *

274 
PrAddDeföe
 (

275 *
Tokí
,

276 *
Tokí2
,

277 
BOOLEAN
 
Pîsi°
);

280 
PrRemoveDeföe
 (

281 *
DeföeName
);

283 
PR_DEFINE_INFO
 *

284 
PrM©chDeföe
 (

285 *
M©chSåög
);

288 
PrAddMa¸o
 (

289 *
Name
,

290 **
Next
);

293 
PrDoMa¸oInvoˇti⁄
 (

294 *
TokíBuf„r
,

295 *
Ma¸oSèπ
,

296 
PR_DEFINE_INFO
 *
DeföeInfo
,

297 **
Next
);

303 
ACPI_STATUS


304 
PrResﬁveI¡egîEx¥essi⁄
 (

305 *
Löe
,

306 
UINT64
 *
Rëu∫VÆue
);

309 
PrPri‹ôizeEx¥essi⁄
 (

310 *
OrigöÆLöe
);

315 
UINT64


316 
PrEvÆu©eEx¥essi⁄
 (

317 *
Ex¥Såög
);

324 
PrGëNextTokí
 (

325 *
Buf„r
,

326 *
M©chSåög
,

327 **
Next
);

330 
PrEº‹
 (

331 
UINT8
 
Levñ
,

332 
UINT16
 
MesßgeId
,

333 
UINT32
 
Cﬁumn
);

336 
PrRïœ˚D©a
 (

337 *
Buf„r
,

338 
UINT32
 
LígthToRemove
,

339 *
Buf„rToAdd
,

340 
UINT32
 
LígthToAdd
);

343 
PrO≥nIn˛udeFûe
 (

344 *
Fûíame
);

346 
FILE
 *

347 
PrO≥nIn˛udeWôhPªfix
 (

348 *
PªfixDú
,

349 *
Fûíame
);

352 
PrPushI≈utFûeSèck
 (

353 
FILE
 *
I≈utFûe
,

354 *
Fûíame
);

356 
BOOLEAN


357 
PrP›I≈utFûeSèck
 (

	@src/extern/acpica/source/include/acapps.h

116 #i‚de‡
_ACAPPS


117 
	#_ACAPPS


	)

120 #ifde‡
_MSC_VER


121 #¥agm®
w¨nög
(
dißbÀ
:4100)

126 
	#ACPICA_NAME
 "I¡ñ ACPI Comp⁄íàArchôe˘uª"

	)

127 
	#ACPICA_COPYRIGHT
 "C›yrighà(cË2000 - 2015 I¡ñ C‹p‹©i⁄"

	)

129 #i‡
ACPI_MACHINE_WIDTH
 == 64

130 
	#ACPI_WIDTH
 "-64"

	)

132 #ñi‡
ACPI_MACHINE_WIDTH
 == 32

133 
	#ACPI_WIDTH
 "-32"

	)

136 #îr‹ 
unknown
 
ACPI_MACHINE_WIDTH


137 
	#ACPI_WIDTH
 "-??"

	)

143 
	#ACPI_COMMON_SIGNON
(
UtûôyName
) \

145 
ACPICA_NAME
, \

146 
UtûôyName
, ((
UINT32
Ë
ACPI_CA_VERSION
), 
ACPI_WIDTH
, \

147 
ACPICA_COPYRIGHT


	)

149 
	#ACPI_COMMON_HEADER
(
UtûôyName
, 
Pªfix
) \

151 
Pªfix
, 
ACPICA_NAME
, \

152 
Pªfix
, 
UtûôyName
, ((
UINT32
Ë
ACPI_CA_VERSION
), 
ACPI_WIDTH
, \

153 
Pªfix
, 
ACPICA_COPYRIGHT
, \

154 
Pªfix


	)

158 
	#ACPI_USAGE_HEADER
(
Ußge
) \

159 
	`A˝iOsPrötf
 ("Ußge: %s\nO±i⁄s:\n", 
Ußge
);

	)

161 
	#ACPI_USAGE_TEXT
(
Des¸ùti⁄
) \

162 
	`A˝iOsPrötf
 (
Des¸ùti⁄
);

	)

164 
	#ACPI_OPTION
(
Name
, 
Des¸ùti⁄
) \

165 
	`A˝iOsPrötf
 (" %-18s%s\n", 
Name
, 
Des¸ùti⁄
);

	)

168 
	#FILE_SUFFIX_DISASSEMBLY
 "d¶"

	)

169 
	#ACPI_TABLE_FILE_SUFFIX
 ".d©"

	)

176 
A˝iGë›t
(

177 
¨gc
,

178 **
¨gv
,

179 *
›ts
);

182 
A˝iGë›tArgumít
 (

183 
¨gc
,

184 **
¨gv
);

186 
A˝iGbl_O±öd
;

187 
A˝iGbl_O±îr
;

188 
A˝iGbl_SubO±Ch¨
;

189 *
A˝iGbl_O±¨g
;

195 
UINT32


196 
CmGëFûeSize
 (

197 
ACPI_FILE
 
Fûe
);

200 #i‚de‡
ACPI_DUMP_APP


204 
ACPI_STATUS


205 
AdAmlDißs£mbÀ
 (

206 
BOOLEAN
 
OutToFûe
,

207 *
Fûíame
,

208 *
Pªfix
,

209 **
OutFûíame
);

212 
AdPrötSèti°ics
 (

215 
ACPI_STATUS


216 
AdFödDsdt
(

217 
UINT8
 **
DsdtPå
,

218 
UINT32
 *
DsdtLígth
);

221 
AdDumpTabÀs
 (

224 
ACPI_STATUS


225 
AdGëLoˇlTabÀs
 (

228 
ACPI_STATUS


229 
AdP¨£TabÀ
 (

230 
ACPI_TABLE_HEADER
 *
TabÀ
,

231 
ACPI_OWNER_ID
 *
Ow√rId
,

232 
BOOLEAN
 
LﬂdTabÀ
,

233 
BOOLEAN
 
Exã∫Æ
);

235 
ACPI_STATUS


236 
AdDi•œyTabÀs
 (

237 *
Fûíame
,

238 
ACPI_TABLE_HEADER
 *
TabÀ
);

240 
ACPI_STATUS


241 
AdDi•œySèti°ics
 (

249 
A˝iDmCrossRe„ªn˚Name•a˚
 (

250 
ACPI_PARSE_OBJECT
 *
P¨£TªeRoŸ
,

251 
ACPI_NAMESPACE_NODE
 *
Name•a˚RoŸ
,

252 
ACPI_OWNER_ID
 
Ow√rId
);

255 
A˝iDmDumpTªe
 (

256 
ACPI_PARSE_OBJECT
 *
Origö
);

259 
A˝iDmFödOΩh™Mëhods
 (

260 
ACPI_PARSE_OBJECT
 *
Origö
);

263 
A˝iDmFöishName•a˚Lﬂd
 (

264 
ACPI_PARSE_OBJECT
 *
P¨£TªeRoŸ
,

265 
ACPI_NAMESPACE_NODE
 *
Name•a˚RoŸ
,

266 
ACPI_OWNER_ID
 
Ow√rId
);

269 
A˝iDmC⁄vîtResour˚Indexes
 (

270 
ACPI_PARSE_OBJECT
 *
P¨£TªeRoŸ
,

271 
ACPI_NAMESPACE_NODE
 *
Name•a˚RoŸ
);

277 
ACPI_STATUS


278 
AdInôülize
 (

282 
FlGíî©eFûíame
 (

283 *
I≈utFûíame
,

284 *
Suffix
);

286 
ACPI_STATUS


287 
FlS∂ôI≈utP©h«me
 (

288 *
I≈utP©h
,

289 **
OutDúe˘‹yP©h
,

290 **
OutFûíame
);

293 
AdGíî©eFûíame
 (

294 *
Pªfix
,

295 *
TabÀId
);

298 
AdWrôeTabÀ
 (

299 
ACPI_TABLE_HEADER
 *
TabÀ
,

300 
UINT32
 
Lígth
,

301 *
TabÀName
,

302 *
OemTabÀId
);

	@src/extern/acpica/source/include/acbuffer.h

116 #i‚de‡
__ACBUFFER_H__


117 
	#__ACBUFFER_H__


	)

139 
	sa˝i_fde_öfo


141 
UINT32
 
	mFl›py0
;

142 
UINT32
 
	mFl›py1
;

143 
UINT32
 
	mFl›py2
;

144 
UINT32
 
	mFl›py3
;

145 
UINT32
 
	mT≠e
;

147 } 
	tACPI_FDE_INFO
;

153 
	sa˝i_gπ_öfo


155 
UINT16
 
	mYór
;

156 
UINT8
 
	mM⁄th
;

157 
UINT8
 
	mDay
;

158 
UINT8
 
	mHour
;

159 
UINT8
 
	mMöuã
;

160 
UINT8
 
	mSec⁄d
;

161 
UINT8
 
	mVÆid
;

162 
UINT16
 
	mMûli£c⁄ds
;

163 
UINT16
 
	mTimez⁄e
;

164 
UINT8
 
	mDaylight
;

165 
UINT8
 
	mRe£rved
[3];

167 } 
	tACPI_GRT_INFO
;

171 
	sa˝i_gtm_öfo


173 
UINT32
 
	mPioS≥ed0
;

174 
UINT32
 
	mDmaS≥ed0
;

175 
UINT32
 
	mPioS≥ed1
;

176 
UINT32
 
	mDmaS≥ed1
;

177 
UINT32
 
	mFœgs
;

179 } 
	tACPI_GTM_INFO
;

190 
	sa˝i_∂d_öfo


192 
UINT8
 
	mRevisi⁄
;

193 
UINT8
 
	mIgn‹eCﬁ‹
;

194 
UINT8
 
	mRed
;

195 
UINT8
 
	mGªí
;

196 
UINT8
 
	mBlue
;

197 
UINT16
 
	mWidth
;

198 
UINT16
 
	mHeight
;

199 
UINT8
 
	mU£rVisibÀ
;

200 
UINT8
 
	mDock
;

201 
UINT8
 
	mLid
;

202 
UINT8
 
	mP™ñ
;

203 
UINT8
 
	mVîtiˇlPosôi⁄
;

204 
UINT8
 
	mH‹iz⁄èlPosôi⁄
;

205 
UINT8
 
	mSh≠e
;

206 
UINT8
 
	mGroupOrõ¡©i⁄
;

207 
UINT8
 
	mGroupTokí
;

208 
UINT8
 
	mGroupPosôi⁄
;

209 
UINT8
 
	mBay
;

210 
UINT8
 
	mEje˘abÀ
;

211 
UINT8
 
	mO•mEje˘Requúed
;

212 
UINT8
 
	mCaböëNumbî
;

213 
UINT8
 
	mC¨dCageNumbî
;

214 
UINT8
 
	mRe„ªn˚
;

215 
UINT8
 
	mRŸ©i⁄
;

216 
UINT8
 
	mOrdî
;

217 
UINT8
 
	mRe£rved
;

218 
UINT16
 
	mVîtiˇlOff£t
;

219 
UINT16
 
	mH‹iz⁄èlOff£t
;

221 } 
	tACPI_PLD_INFO
;

231 
	#ACPI_PLD_REV1_BUFFER_SIZE
 16

	)

232 
	#ACPI_PLD_BUFFER_SIZE
 20

	)

236 
	#ACPI_PLD_GET_REVISION
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 0, 
ACPI_7BIT_MASK
)

	)

237 
	#ACPI_PLD_SET_REVISION
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 0, 
ACPI_7BIT_MASK
, vÆueË

	)

239 
	#ACPI_PLD_GET_IGNORE_COLOR
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 7, 
ACPI_1BIT_MASK
)

	)

240 
	#ACPI_PLD_SET_IGNORE_COLOR
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 7, 
ACPI_1BIT_MASK
, vÆueË

	)

242 
	#ACPI_PLD_GET_RED
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 8, 
ACPI_8BIT_MASK
)

	)

243 
	#ACPI_PLD_SET_RED
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 8, 
ACPI_8BIT_MASK
, vÆueË

	)

245 
	#ACPI_PLD_GET_GREEN
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 16, 
ACPI_8BIT_MASK
)

	)

246 
	#ACPI_PLD_SET_GREEN
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 16, 
ACPI_8BIT_MASK
, vÆueË

	)

248 
	#ACPI_PLD_GET_BLUE
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 24, 
ACPI_8BIT_MASK
)

	)

249 
	#ACPI_PLD_SET_BLUE
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 24, 
ACPI_8BIT_MASK
, vÆueË

	)

253 
	#ACPI_PLD_GET_WIDTH
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 0, 
ACPI_16BIT_MASK
)

	)

254 
	#ACPI_PLD_SET_WIDTH
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 0, 
ACPI_16BIT_MASK
, vÆueË

	)

256 
	#ACPI_PLD_GET_HEIGHT
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 16, 
ACPI_16BIT_MASK
)

	)

257 
	#ACPI_PLD_SET_HEIGHT
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 16, 
ACPI_16BIT_MASK
, vÆueË

	)

261 
	#ACPI_PLD_GET_USER_VISIBLE
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 0, 
ACPI_1BIT_MASK
)

	)

262 
	#ACPI_PLD_SET_USER_VISIBLE
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 0, 
ACPI_1BIT_MASK
, vÆueË

	)

264 
	#ACPI_PLD_GET_DOCK
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 1, 
ACPI_1BIT_MASK
)

	)

265 
	#ACPI_PLD_SET_DOCK
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 1, 
ACPI_1BIT_MASK
, vÆueË

	)

267 
	#ACPI_PLD_GET_LID
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 2, 
ACPI_1BIT_MASK
)

	)

268 
	#ACPI_PLD_SET_LID
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 2, 
ACPI_1BIT_MASK
, vÆueË

	)

270 
	#ACPI_PLD_GET_PANEL
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 3, 
ACPI_3BIT_MASK
)

	)

271 
	#ACPI_PLD_SET_PANEL
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 3, 
ACPI_3BIT_MASK
, vÆueË

	)

273 
	#ACPI_PLD_GET_VERTICAL
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 6, 
ACPI_2BIT_MASK
)

	)

274 
	#ACPI_PLD_SET_VERTICAL
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 6, 
ACPI_2BIT_MASK
, vÆueË

	)

276 
	#ACPI_PLD_GET_HORIZONTAL
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 8, 
ACPI_2BIT_MASK
)

	)

277 
	#ACPI_PLD_SET_HORIZONTAL
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 8, 
ACPI_2BIT_MASK
, vÆueË

	)

279 
	#ACPI_PLD_GET_SHAPE
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 10, 
ACPI_4BIT_MASK
)

	)

280 
	#ACPI_PLD_SET_SHAPE
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 10, 
ACPI_4BIT_MASK
, vÆueË

	)

282 
	#ACPI_PLD_GET_ORIENTATION
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 14, 
ACPI_1BIT_MASK
)

	)

283 
	#ACPI_PLD_SET_ORIENTATION
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 14, 
ACPI_1BIT_MASK
, vÆueË

	)

285 
	#ACPI_PLD_GET_TOKEN
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 15, 
ACPI_8BIT_MASK
)

	)

286 
	#ACPI_PLD_SET_TOKEN
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 15, 
ACPI_8BIT_MASK
, vÆueË

	)

288 
	#ACPI_PLD_GET_POSITION
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 23, 
ACPI_8BIT_MASK
)

	)

289 
	#ACPI_PLD_SET_POSITION
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 23, 
ACPI_8BIT_MASK
, vÆueË

	)

291 
	#ACPI_PLD_GET_BAY
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 31, 
ACPI_1BIT_MASK
)

	)

292 
	#ACPI_PLD_SET_BAY
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 31, 
ACPI_1BIT_MASK
, vÆueË

	)

296 
	#ACPI_PLD_GET_EJECTABLE
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 0, 
ACPI_1BIT_MASK
)

	)

297 
	#ACPI_PLD_SET_EJECTABLE
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 0, 
ACPI_1BIT_MASK
, vÆueË

	)

299 
	#ACPI_PLD_GET_OSPM_EJECT
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 1, 
ACPI_1BIT_MASK
)

	)

300 
	#ACPI_PLD_SET_OSPM_EJECT
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 1, 
ACPI_1BIT_MASK
, vÆueË

	)

302 
	#ACPI_PLD_GET_CABINET
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 2, 
ACPI_8BIT_MASK
)

	)

303 
	#ACPI_PLD_SET_CABINET
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 2, 
ACPI_8BIT_MASK
, vÆueË

	)

305 
	#ACPI_PLD_GET_CARD_CAGE
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 10, 
ACPI_8BIT_MASK
)

	)

306 
	#ACPI_PLD_SET_CARD_CAGE
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 10, 
ACPI_8BIT_MASK
, vÆueË

	)

308 
	#ACPI_PLD_GET_REFERENCE
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 18, 
ACPI_1BIT_MASK
)

	)

309 
	#ACPI_PLD_SET_REFERENCE
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 18, 
ACPI_1BIT_MASK
, vÆueË

	)

311 
	#ACPI_PLD_GET_ROTATION
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 19, 
ACPI_4BIT_MASK
)

	)

312 
	#ACPI_PLD_SET_ROTATION
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 19, 
ACPI_4BIT_MASK
, vÆueË

	)

314 
	#ACPI_PLD_GET_ORDER
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 23, 
ACPI_5BIT_MASK
)

	)

315 
	#ACPI_PLD_SET_ORDER
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 23, 
ACPI_5BIT_MASK
, vÆueË

	)

319 
	#ACPI_PLD_GET_VERT_OFFSET
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 0, 
ACPI_16BIT_MASK
)

	)

320 
	#ACPI_PLD_SET_VERT_OFFSET
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 0, 
ACPI_16BIT_MASK
, vÆueË

	)

322 
	#ACPI_PLD_GET_HORIZ_OFFSET
(
dw‹d
Ë
	`ACPI_GET_BITS
 (dw‹d, 16, 
ACPI_16BIT_MASK
)

	)

323 
	#ACPI_PLD_SET_HORIZ_OFFSET
(
dw‹d
,
vÆue
Ë
	`ACPI_SET_BITS
 (dw‹d, 16, 
ACPI_16BIT_MASK
, vÆueË

	)

	@src/extern/acpica/source/include/accommon.h

116 #i‚de‡
__ACCOMMON_H__


117 
	#__ACCOMMON_H__


	)

126 
	~"acc⁄fig.h
"

127 
	~"acma¸os.h
"

128 
	~"a˛oˇl.h
"

129 
	~"acobje˘.h
"

130 
	~"ac°ru˘.h
"

131 
	~"acglobÆ.h
"

132 
	~"achw¨e.h
"

133 
	~"acutûs.h
"

	@src/extern/acpica/source/include/acconfig.h

116 #i‚de‡
_ACCONFIG_H


117 
	#_ACCONFIG_H


	)

145 
	#ACPI_OS_NAME
 "Mi¸oso· Wödow†NT"

	)

149 
	#ACPI_MAX_STATE_CACHE_DEPTH
 96

	)

150 
	#ACPI_MAX_PARSE_CACHE_DEPTH
 96

	)

151 
	#ACPI_MAX_EXTPARSE_CACHE_DEPTH
 96

	)

152 
	#ACPI_MAX_OBJECT_CACHE_DEPTH
 96

	)

153 
	#ACPI_MAX_NAMESPACE_CACHE_DEPTH
 96

	)

159 #i‚de‡
ACPI_CHECKSUM_ABORT


160 
	#ACPI_CHECKSUM_ABORT
 
FALSE


	)

178 #i‚de‡
ACPI_REDUCED_HARDWARE


179 
	#ACPI_REDUCED_HARDWARE
 
FALSE


	)

191 
	#ACPI_CA_SUPPORT_LEVEL
 5

	)

195 
	#ACPI_MAX_SEMAPHORE_COUNT
 256

	)

199 
	#ACPI_MAX_REFERENCE_COUNT
 0x800

	)

203 
	#ACPI_DEFAULT_PAGE_SIZE
 4096

	)

207 
	#ACPI_NUM_OWNERID_MASKS
 8

	)

211 
	#ACPI_ROOT_TABLE_SIZE_INCREMENT
 4

	)

215 
	#ACPI_MAX_LOOP_ITERATIONS
 0xFFFF

	)

219 
	#ACPI_MAX_SLEEP
 2000

	)

223 
	#ACPI_ADDRESS_RANGE_MAX
 2

	)

234 
	#ACPI_METHOD_NUM_LOCALS
 8

	)

235 
	#ACPI_METHOD_MAX_LOCAL
 7

	)

237 
	#ACPI_METHOD_NUM_ARGS
 7

	)

238 
	#ACPI_METHOD_MAX_ARG
 6

	)

243 
	#ACPI_OBJ_NUM_OPERANDS
 8

	)

244 
	#ACPI_OBJ_MAX_OPERAND
 7

	)

248 
	#ACPI_RESULTS_FRAME_OBJ_NUM
 8

	)

255 
	#ACPI_RESULTS_OBJ_NUM_MAX
 255

	)

259 
	#ACPI_EBDA_PTR_LOCATION
 0x0000040E

	)

260 
	#ACPI_EBDA_PTR_LENGTH
 2

	)

261 
	#ACPI_EBDA_WINDOW_SIZE
 1024

	)

262 
	#ACPI_HI_RSDP_WINDOW_BASE
 0x000E0000

	)

263 
	#ACPI_HI_RSDP_WINDOW_SIZE
 0x00020000

	)

264 
	#ACPI_RSDP_SCAN_STEP
 16

	)

268 
	#ACPI_USER_REGION_BEGIN
 0x80

	)

272 
	#ACPI_MAX_ADDRESS_SPACE
 255

	)

273 
	#ACPI_NUM_DEFAULT_SPACES
 4

	)

277 
	#ACPI_MAX_MATCH_OPCODE
 5

	)

281 
	#ACPI_RSDP_CHECKSUM_LENGTH
 20

	)

282 
	#ACPI_RSDP_XCHECKSUM_LENGTH
 36

	)

286 
	#ACPI_SMBUS_BUFFER_SIZE
 34

	)

287 
	#ACPI_GSBUS_BUFFER_SIZE
 34

	)

288 
	#ACPI_IPMI_BUFFER_SIZE
 66

	)

292 
	#ACPI_NUM_SxD_METHODS
 4

	)

293 
	#ACPI_NUM_SxW_METHODS
 5

	)

304 
	#UUID_BUFFER_LENGTH
 16

	)

305 
	#UUID_STRING_LENGTH
 36

	)

309 
	#UUID_HYPHEN1_OFFSET
 8

	)

310 
	#UUID_HYPHEN2_OFFSET
 13

	)

311 
	#UUID_HYPHEN3_OFFSET
 18

	)

312 
	#UUID_HYPHEN4_OFFSET
 23

	)

321 
	#ACPI_DEBUGGER_MAX_ARGS
 
ACPI_METHOD_NUM_ARGS
 + 4

	)

322 
	#ACPI_DB_LINE_BUFFER_SIZE
 512

	)

324 
	#ACPI_DEBUGGER_COMMAND_PROMPT
 '-'

	)

325 
	#ACPI_DEBUGGER_EXECUTE_PROMPT
 '%'

	)

	@src/extern/acpica/source/include/acdebug.h

116 #i‚de‡
__ACDEBUG_H__


117 
	#__ACDEBUG_H__


	)

120 
	#ACPI_DEBUG_BUFFER_SIZE
 0x4000

	)

122 
	sa˝i_db_comm™d_öfo


124 *
	mName
;

125 
UINT8
 
	mMöArgs
;

127 } 
	tACPI_DB_COMMAND_INFO
;

129 
	sa˝i_db_comm™d_hñp


131 
UINT8
 
	mLöeCou¡
;

132 *
	mInvoˇti⁄
;

133 *
	mDes¸ùti⁄
;

135 } 
	tACPI_DB_COMMAND_HELP
;

137 
	sa˝i_db_¨gumít_öfo


139 *
	mName
;

141 } 
	tACPI_DB_ARGUMENT_INFO
;

143 
	sa˝i_db_execuã_wÆk


145 
UINT32
 
	mCou¡
;

146 
UINT32
 
	mMaxCou¡
;

148 } 
	tACPI_DB_EXECUTE_WALK
;

151 
	#PARAM_LIST
(
∂
Ë
	)
pl

152 
	#DBTEST_OUTPUT_LEVEL
(
lvl
Ëi‡(
A˝iGbl_DbO±_Vîbo£
)

	)

153 
	#VERBOSE_PRINT
(
Â
Ë
	`DBTEST_OUTPUT_LEVEL
(
lvl
) {\

154 
A˝iOsPrötf
 
	`PARAM_LIST
(
Â
);}

	)

156 
	#EX_NO_SINGLE_STEP
 1

	)

157 
	#EX_SINGLE_STEP
 2

	)

163 
ACPI_STATUS


164 
A˝iDbInôülize
 (

168 
A˝iDbTîmö©e
 (

171 
ACPI_STATUS


172 
A˝iDbSögÀSãp
 (

173 
ACPI_WALK_STATE
 *
WÆkSèã
,

174 
ACPI_PARSE_OBJECT
 *
Op
,

175 
UINT32
 
OpTy≥
);

181 
ACPI_NAMESPACE_NODE
 *

182 
A˝iDbC⁄vîtToNode
 (

183 *
InSåög
);

186 
A˝iDbDi•œyTabÀInfo
 (

187 *
TabÀArg
);

190 
A˝iDbDi•œyTem∂©e
 (

191 *
Buf„rArg
);

194 
A˝iDbU∆ﬂdA˝iTabÀ
 (

195 *
Name
);

198 
A˝iDbSídNŸify
 (

199 *
Name
,

200 
UINT32
 
VÆue
);

203 
A˝iDbDi•œyI¡îÁ˚s
 (

204 *
A˘i⁄Arg
,

205 *
I¡îÁ˚NameArg
);

207 
ACPI_STATUS


208 
A˝iDbSÀï
 (

209 *
Obje˘Arg
);

212 
A˝iDbDi•œyLocks
 (

216 
A˝iDbDi•œyResour˚s
 (

217 *
Obje˘Arg
);

219 
ACPI_HW_DEPENDENT_RETURN_VOID
 (

221 
	$A˝iDbDi•œyG≥s
 (

225 
	`A˝iDbDi•œyH™dÀrs
 (

228 
	`ACPI_HW_DEPENDENT_RETURN_VOID
 (

230 
	$A˝iDbGíî©eG≥
 (

231 *
G≥Arg
,

232 *
BlockArg
))

234 
	`ACPI_HW_DEPENDENT_RETURN_VOID
 (

236 
	$A˝iDbGíî©eSci
 (

240 
	`A˝iDbExecuãTe°
 (

241 *
Ty≥Arg
);

247 
ACPI_STATUS


248 
	`A˝iDbHexCh¨ToVÆue
 (

249 
HexCh¨
,

250 
UINT8
 *
Rëu∫VÆue
);

252 
ACPI_STATUS


253 
	`A˝iDbC⁄vîtToPackage
 (

254 *
Såög
,

255 
ACPI_OBJECT
 *
Obje˘
);

257 
ACPI_STATUS


258 
	`A˝iDbC⁄vîtToObje˘
 (

259 
ACPI_OBJECT_TYPE
 
Ty≥
,

260 *
Såög
,

261 
ACPI_OBJECT
 *
Obje˘
);

263 
UINT8
 *

264 
	`A˝iDbEncodePldBuf„r
 (

265 
ACPI_PLD_INFO
 *
PldInfo
);

268 
	`A˝iDbDumpPldBuf„r
 (

269 
ACPI_OBJECT
 *
ObjDesc
);

276 
	`A˝iDbSëMëhodBªakpoöt
 (

277 *
Loˇti⁄
,

278 
ACPI_WALK_STATE
 *
WÆkSèã
,

279 
ACPI_PARSE_OBJECT
 *
Op
);

282 
	`A˝iDbSëMëhodCÆlBªakpoöt
 (

283 
ACPI_PARSE_OBJECT
 *
Op
);

286 
	`A˝iDbSëMëhodD©a
 (

287 *
Ty≥Arg
,

288 *
IndexArg
,

289 *
VÆueArg
);

291 
ACPI_STATUS


292 
	`A˝iDbDißs£mbÀMëhod
 (

293 *
Name
);

296 
	`A˝iDbDißs£mbÀAml
 (

297 *
Sèãmíts
,

298 
ACPI_PARSE_OBJECT
 *
Op
);

301 
	`A˝iDbB©chExecuã
 (

302 *
Cou¡Arg
);

309 
	`A˝iDbSëSc›e
 (

310 *
Name
);

313 
	`A˝iDbDumpName•a˚
 (

314 *
SèπArg
,

315 *
DïthArg
);

318 
	`A˝iDbDumpName•a˚P©hs
 (

322 
	`A˝iDbDumpName•a˚ByOw√r
 (

323 *
Ow√rArg
,

324 *
DïthArg
);

326 
ACPI_STATUS


327 
	`A˝iDbFödNameInName•a˚
 (

328 *
NameArg
);

331 
	`A˝iDbCheckPªdeföedNames
 (

334 
ACPI_STATUS


335 
	`A˝iDbDi•œyObje˘s
 (

336 *
ObjTy≥Arg
,

337 *
Di•œyCou¡Arg
);

340 
	`A˝iDbCheckI¡egrôy
 (

344 
	`A˝iDbFödRe„ªn˚s
 (

345 *
Obje˘Arg
);

348 
	`A˝iDbGëBusInfo
 (

356 
	`A˝iDbDi•œyMëhodInfo
 (

357 
ACPI_PARSE_OBJECT
 *
Op
);

360 
	`A˝iDbDecodeAndDi•œyObje˘
 (

361 *
T¨gë
,

362 *
OuçutTy≥
);

365 
	`A˝iDbDi•œyResu…Obje˘
 (

366 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

367 
ACPI_WALK_STATE
 *
WÆkSèã
);

369 
ACPI_STATUS


370 
	`A˝iDbDi•œyAŒMëhods
 (

371 *
Di•œyCou¡Arg
);

374 
	`A˝iDbDi•œyArgumíts
 (

378 
	`A˝iDbDi•œyLoˇls
 (

382 
	`A˝iDbDi•œyResu…s
 (

386 
	`A˝iDbDi•œyCÆlögTªe
 (

390 
	`A˝iDbDi•œyObje˘Ty≥
 (

391 *
Obje˘Arg
);

394 
	`A˝iDbDi•œyArgumítObje˘
 (

395 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

396 
ACPI_WALK_STATE
 *
WÆkSèã
);

403 
	`A˝iDbExecuã
 (

404 *
Name
,

405 **
Args
,

406 
ACPI_OBJECT_TYPE
 *
Ty≥s
,

407 
UINT32
 
Fœgs
);

410 
	`A˝iDbCª©eExecuti⁄Thªads
 (

411 *
NumThªadsArg
,

412 *
NumLo›sArg
,

413 *
MëhodNameArg
);

416 
	`A˝iDbDñëeObje˘s
 (

417 
UINT32
 
Cou¡
,

418 
ACPI_OBJECT
 *
Obje˘s
);

420 #ifde‡
ACPI_DBG_TRACK_ALLOCATIONS


421 
UINT32


422 
	`A˝iDbGëCacheInfo
 (

423 
ACPI_MEMORY_LIST
 *
Cache
);

430 
ACPI_OBJECT_TYPE


431 
	`A˝iDbM©chArgumít
 (

432 *
U£rArgumít
,

433 
ACPI_DB_ARGUMENT_INFO
 *
Argumíts
);

436 
	`A˝iDbClo£DebugFûe
 (

440 
	`A˝iDbO≥nDebugFûe
 (

441 *
Name
);

443 
ACPI_STATUS


444 
	`A˝iDbLﬂdA˝iTabÀ
 (

445 *
Fûíame
);

447 
ACPI_STATUS


448 
	`A˝iDbGëTabÀFromFûe
 (

449 *
Fûíame
,

450 
ACPI_TABLE_HEADER
 **
TabÀ
);

457 
	`A˝iDbAddToHi°‹y
 (

458 *
Comm™dLöe
);

461 
	`A˝iDbDi•œyHi°‹y
 (

465 
	`A˝iDbGëFromHi°‹y
 (

466 *
Comm™dNumArg
);

469 
	`A˝iDbGëHi°‹yByIndex
 (

470 
UINT32
 
Comm™ddNum
);

476 
ACPI_STATUS


477 
	`A˝iDbComm™dDi•©ch
 (

478 *
I≈utBuf„r
,

479 
ACPI_WALK_STATE
 *
WÆkSèã
,

480 
ACPI_PARSE_OBJECT
 *
Op
);

482 
ACPI_SYSTEM_XFACE


483 
	`A˝iDbExecuãThªad
 (

484 *
C⁄ãxt
);

486 
ACPI_STATUS


487 
	`A˝iDbU£rComm™ds
 (

488 
Prom±
,

489 
ACPI_PARSE_OBJECT
 *
Op
);

492 
	`A˝iDbGëNextTokí
 (

493 *
Såög
,

494 **
Next
,

495 
ACPI_OBJECT_TYPE
 *
Rëu∫Ty≥
);

502 
	`A˝iDbGíî©eSèti°ics
 (

503 
ACPI_PARSE_OBJECT
 *
RoŸ
,

504 
BOOLEAN
 
IsMëhod
);

506 
ACPI_STATUS


507 
	`A˝iDbDi•œySèti°ics
 (

508 *
Ty≥Arg
);

515 
	`A˝iDbSëOuçutDe°ö©i⁄
 (

516 
UINT32
 
Whîe
);

519 
	`A˝iDbDumpExã∫ÆObje˘
 (

520 
ACPI_OBJECT
 *
ObjDesc
,

521 
UINT32
 
Levñ
);

524 
	`A˝iDbPªpName°rög
 (

525 *
Name
);

527 
ACPI_NAMESPACE_NODE
 *

528 
	`A˝iDbLoˇlNsLookup
 (

529 *
Name
);

532 
	`A˝iDbUöt32ToHexSåög
 (

533 
UINT32
 
VÆue
,

534 *
Buf„r
);

	@src/extern/acpica/source/include/acdisasm.h

116 #i‚de‡
__ACDISASM_H__


117 
	#__ACDISASM_H__


	)

119 
	~"amÃe§c.h
"

122 
	#BLOCK_NONE
 0

	)

123 
	#BLOCK_PAREN
 1

	)

124 
	#BLOCK_BRACE
 2

	)

125 
	#BLOCK_COMMA_LIST
 4

	)

126 
	#ACPI_DEFAULT_RESNAME
 *(
UINT32
 *Ë"__RD"

	)

132 
	#ACPI_RAW_TABLE_DATA_HEADER
 "Raw TabÀ D©a"

	)

135 c⁄° 
	sa˝i_dmèbÀ_öfo


137 
UINT8
 
	mOpcode
;

138 
UINT16
 
	mOff£t
;

139 *
	mName
;

140 
UINT8
 
	mFœgs
;

142 } 
	tACPI_DMTABLE_INFO
;

146 
	#DT_LENGTH
 0x01

	)

147 
	#DT_FLAG
 0x02

	)

148 
	#DT_NON_ZERO
 0x04

	)

149 
	#DT_OPTIONAL
 0x08

	)

150 
	#DT_DESCRIBES_OPTIONAL
 0x10

	)

151 
	#DT_COUNT
 0x20

	)

162 
	mACPI_DMT_FLAG0
 = 0,

163 
	mACPI_DMT_FLAG1
 = 1,

164 
	mACPI_DMT_FLAG2
 = 2,

165 
	mACPI_DMT_FLAG3
 = 3,

166 
	mACPI_DMT_FLAG4
 = 4,

167 
	mACPI_DMT_FLAG5
 = 5,

168 
	mACPI_DMT_FLAG6
 = 6,

169 
	mACPI_DMT_FLAG7
 = 7,

170 
	mACPI_DMT_FLAGS0
,

171 
	mACPI_DMT_FLAGS1
,

172 
	mACPI_DMT_FLAGS2
,

173 
	mACPI_DMT_FLAGS4
,

174 
	mACPI_DMT_UINT8
,

175 
	mACPI_DMT_UINT16
,

176 
	mACPI_DMT_UINT24
,

177 
	mACPI_DMT_UINT32
,

178 
	mACPI_DMT_UINT40
,

179 
	mACPI_DMT_UINT48
,

180 
	mACPI_DMT_UINT56
,

181 
	mACPI_DMT_UINT64
,

182 
	mACPI_DMT_BUF7
,

183 
	mACPI_DMT_BUF10
,

184 
	mACPI_DMT_BUF16
,

185 
	mACPI_DMT_BUF128
,

186 
	mACPI_DMT_SIG
,

187 
	mACPI_DMT_STRING
,

188 
	mACPI_DMT_NAME4
,

189 
	mACPI_DMT_NAME6
,

190 
	mACPI_DMT_NAME8
,

194 
	mACPI_DMT_ACCWIDTH
,

195 
	mACPI_DMT_CHKSUM
,

196 
	mACPI_DMT_GAS
,

197 
	mACPI_DMT_SPACEID
,

198 
	mACPI_DMT_UNICODE
,

199 
	mACPI_DMT_UUID
,

203 
	mACPI_DMT_BUFFER
,

204 
	mACPI_DMT_RAW_BUFFER
,

205 
	mACPI_DMT_DEVICE_PATH
,

206 
	mACPI_DMT_LABEL
,

207 
	mACPI_DMT_PCI_PATH
,

211 
	mACPI_DMT_ASF
,

212 
	mACPI_DMT_DMAR
,

213 
	mACPI_DMT_DMAR_SCOPE
,

214 
	mACPI_DMT_EINJACT
,

215 
	mACPI_DMT_EINJINST
,

216 
	mACPI_DMT_ERSTACT
,

217 
	mACPI_DMT_ERSTINST
,

218 
	mACPI_DMT_FADTPM
,

219 
	mACPI_DMT_GTDT
,

220 
	mACPI_DMT_HEST
,

221 
	mACPI_DMT_HESTNTFY
,

222 
	mACPI_DMT_HESTNTYP
,

223 
	mACPI_DMT_IVRS
,

224 
	mACPI_DMT_LPIT
,

225 
	mACPI_DMT_MADT
,

226 
	mACPI_DMT_PCCT
,

227 
	mACPI_DMT_PMTT
,

228 
	mACPI_DMT_SLIC
,

229 
	mACPI_DMT_SRAT
,

233 
	mACPI_DMT_EXTRA_TEXT
,

234 
	mACPI_DMT_EXIT


236 } 
	tACPI_ENTRY_TYPES
;

239 (*
	tACPI_DMTABLE_HANDLER
) (

240 
	tACPI_TABLE_HEADER
 *
	tTabÀ
);

243 
	$ACPI_STATUS
 (*
	tACPI_CMTABLE_HANDLER
) (

244 **
	tPFõldLi°
);

246 
	sa˝i_dmèbÀ_d©a


248 *
Sig«tuª
;

249 
ACPI_DMTABLE_INFO
 *
TabÀInfo
;

250 
ACPI_DMTABLE_HANDLER
 
TabÀH™dÀr
;

251 
ACPI_CMTABLE_HANDLER
 
CmTabÀH™dÀr
;

252 c⁄° *
Tem∂©e
;

253 *
Name
;

255 } 
	tACPI_DMTABLE_DATA
;

258 
	sa˝i_›_wÆk_öfo


260 
UINT32
 
Levñ
;

261 
UINT32
 
La°Levñ
;

262 
UINT32
 
Cou¡
;

263 
UINT32
 
BôOff£t
;

264 
UINT32
 
Fœgs
;

265 
ACPI_WALK_STATE
 *
WÆkSèã
;

266 
ACPI_PARSE_OBJECT
 *
M≠pögOp
;

268 } 
	tACPI_OP_WALK_INFO
;

273 #i‚de‡
ASL_WALK_CALLBACK_DEFINED


275 
	$ACPI_STATUS
 (*
	tASL_WALK_CALLBACK
) (

276 
	tACPI_PARSE_OBJECT
 *
	tOp
,

277 
	tUINT32
 
	tLevñ
,

278 *
	tC⁄ãxt
);

279 
	#ASL_WALK_CALLBACK_DEFINED


	)

283 (*
	tACPI_RESOURCE_HANDLER
) (

284 
	tACPI_OP_WALK_INFO
 *
	tInfo
,

285 
	tAML_RESOURCE
 *
	tResour˚
,

286 
	tUINT32
 
	tLígth
,

287 
	tUINT32
 
	tLevñ
);

289 
	sa˝i_ªsour˚_èg


291 
UINT32
 
BôIndex
;

292 *
Tag
;

294 } 
	tACPI_RESOURCE_TAG
;

298 c⁄° *
A˝iGbl_W‹dDecode
[];

299 c⁄° *
A˝iGbl_IrqDecode
[];

300 c⁄° *
A˝iGbl_LockRuÀ
[];

301 c⁄° *
A˝iGbl_Ac˚ssTy≥s
[];

302 c⁄° *
A˝iGbl_Upd©eRuÀs
[];

303 c⁄° *
A˝iGbl_M©chOps
[];

305 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoAsf0
[];

306 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoAsf1
[];

307 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoAsf1a
[];

308 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoAsf2
[];

309 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoAsf2a
[];

310 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoAsf3
[];

311 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoAsf4
[];

312 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoAsfHdr
[];

313 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoBoŸ
[];

314 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoBît
[];

315 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoBgπ
[];

316 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoC≥p
[];

317 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoC≥p0
[];

318 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoC§t0
[];

319 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoC§t1
[];

320 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoC§t2
[];

321 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDbg2
[];

322 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDbg2Devi˚
[];

323 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDbg2Addr
[];

324 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDbg2Size
[];

325 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDbg2Name
[];

326 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDbg2OemD©a
[];

327 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDbgp
[];

328 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDm¨
[];

329 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDm¨Hdr
[];

330 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDm¨Sc›e
[];

331 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDm¨0
[];

332 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDm¨1
[];

333 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDm¨2
[];

334 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDm¨3
[];

335 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDm¨4
[];

336 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoDπm
[];

337 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoEcdt
[];

338 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoEöj
[];

339 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoEöj0
[];

340 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoEr°
[];

341 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoEr°0
[];

342 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFacs
[];

343 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFadt1
[];

344 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFadt2
[];

345 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFadt3
[];

346 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFadt5
[];

347 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFpdt
[];

348 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFpdtHdr
[];

349 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFpdt0
[];

350 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoFpdt1
[];

351 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoGas
[];

352 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoGtdt
[];

353 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoGtdtHdr
[];

354 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoGtdt0
[];

355 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoGtdt0a
[];

356 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoGtdt1
[];

357 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHódî
[];

358 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°
[];

359 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°0
[];

360 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°1
[];

361 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°2
[];

362 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°6
[];

363 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°7
[];

364 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°8
[];

365 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°9
[];

366 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°NŸify
[];

367 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoHe°B™k
[];

368 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoH≥t
[];

369 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoLpôHdr
[];

370 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoLpô0
[];

371 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoLpô1
[];

372 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoIvrs
[];

373 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoIvrs0
[];

374 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoIvrs1
[];

375 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoIvrs4
[];

376 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoIvrs8a
[];

377 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoIvrs8b
[];

378 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoIvrs8c
[];

379 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoIvrsHdr
[];

380 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt
[];

381 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt0
[];

382 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt1
[];

383 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt2
[];

384 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt3
[];

385 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt4
[];

386 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt5
[];

387 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt6
[];

388 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt7
[];

389 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt8
[];

390 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt9
[];

391 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt10
[];

392 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt11
[];

393 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt12
[];

394 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt13
[];

395 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadt14
[];

396 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMadtHdr
[];

397 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMcfg
[];

398 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMcfg0
[];

399 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMchi
[];

400 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMp°
[];

401 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMp°0
[];

402 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMp°0A
[];

403 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMp°0B
[];

404 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMp°1
[];

405 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMp°2
[];

406 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMs˘
[];

407 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMs˘0
[];

408 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMtmr
[];

409 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoMtmr0
[];

410 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPmâ
[];

411 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPmâ0
[];

412 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPmâ1
[];

413 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPmâ1a
[];

414 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPmâ2
[];

415 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPmâHdr
[];

416 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPc˘
[];

417 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPc˘Hdr
[];

418 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPc˘0
[];

419 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoPc˘1
[];

420 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoRsdp1
[];

421 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoRsdp2
[];

422 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoS3±
[];

423 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoS3±Hdr
[];

424 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoS3±0
[];

425 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoS3±1
[];

426 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSb°
[];

427 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSlic
[];

428 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSlô
[];

429 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSp¸
[];

430 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSpmi
[];

431 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSøt
[];

432 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSøtHdr
[];

433 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSøt0
[];

434 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSøt1
[];

435 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSøt2
[];

436 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoSøt3
[];

437 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoT˝a
[];

438 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoTpm2
[];

439 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoUefi
[];

440 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoVπc
[];

441 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoVπc0
[];

442 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoW´t
[];

443 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoWd©
[];

444 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoWd©0
[];

445 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoWddt
[];

446 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoWdπ
[];

448 
ACPI_DMTABLE_INFO
 
A˝iDmTabÀInfoGíîic
[][2];

454 
ACPI_DMTABLE_DATA
 
A˝iDmTabÀD©a
[];

456 
UINT8


457 
	`A˝iDmGíî©eChecksum
 (

458 *
TabÀ
,

459 
UINT32
 
Lígth
,

460 
UINT8
 
OrigöÆChecksum
);

462 
ACPI_DMTABLE_DATA
 *

463 
	`A˝iDmGëTabÀD©a
 (

464 *
Sig«tuª
);

467 
	`A˝iDmDumpD©aTabÀ
 (

468 
ACPI_TABLE_HEADER
 *
TabÀ
);

470 
ACPI_STATUS


471 
	`A˝iDmDumpTabÀ
 (

472 
UINT32
 
TabÀLígth
,

473 
UINT32
 
TabÀOff£t
,

474 *
TabÀ
,

475 
UINT32
 
SubTabÀLígth
,

476 
ACPI_DMTABLE_INFO
 *
Info
);

479 
	`A˝iDmLöeHódî
 (

480 
UINT32
 
Off£t
,

481 
UINT32
 
ByãLígth
,

482 *
Name
);

485 
	`A˝iDmLöeHódî2
 (

486 
UINT32
 
Off£t
,

487 
UINT32
 
ByãLígth
,

488 *
Name
,

489 
UINT32
 
VÆue
);

496 
	`A˝iDmDumpBuf„r
 (

497 *
TabÀ
,

498 
UINT32
 
Buf„rOff£t
,

499 
UINT32
 
Lígth
,

500 
UINT32
 
AbsﬁuãOff£t
,

501 *
Hódî
,

502 
BOOLEAN
 
Mu…iLöe
);

505 
	`A˝iDmDumpAsf
 (

506 
ACPI_TABLE_HEADER
 *
TabÀ
);

509 
	`A˝iDmDumpC≥p
 (

510 
ACPI_TABLE_HEADER
 *
TabÀ
);

513 
	`A˝iDmDumpC§t
 (

514 
ACPI_TABLE_HEADER
 *
TabÀ
);

517 
	`A˝iDmDumpDbg2
 (

518 
ACPI_TABLE_HEADER
 *
TabÀ
);

521 
	`A˝iDmDumpDm¨
 (

522 
ACPI_TABLE_HEADER
 *
TabÀ
);

525 
	`A˝iDmDumpEöj
 (

526 
ACPI_TABLE_HEADER
 *
TabÀ
);

529 
	`A˝iDmDumpEr°
 (

530 
ACPI_TABLE_HEADER
 *
TabÀ
);

533 
	`A˝iDmDumpFadt
 (

534 
ACPI_TABLE_HEADER
 *
TabÀ
);

537 
	`A˝iDmDumpFpdt
 (

538 
ACPI_TABLE_HEADER
 *
TabÀ
);

541 
	`A˝iDmDumpGtdt
 (

542 
ACPI_TABLE_HEADER
 *
TabÀ
);

545 
	`A˝iDmDumpHe°
 (

546 
ACPI_TABLE_HEADER
 *
TabÀ
);

549 
	`A˝iDmDumpIvrs
 (

550 
ACPI_TABLE_HEADER
 *
TabÀ
);

553 
	`A˝iDmDumpLpô
 (

554 
ACPI_TABLE_HEADER
 *
TabÀ
);

557 
	`A˝iDmDumpMadt
 (

558 
ACPI_TABLE_HEADER
 *
TabÀ
);

561 
	`A˝iDmDumpMcfg
 (

562 
ACPI_TABLE_HEADER
 *
TabÀ
);

565 
	`A˝iDmDumpMp°
 (

566 
ACPI_TABLE_HEADER
 *
TabÀ
);

569 
	`A˝iDmDumpMs˘
 (

570 
ACPI_TABLE_HEADER
 *
TabÀ
);

573 
	`A˝iDmDumpMtmr
 (

574 
ACPI_TABLE_HEADER
 *
TabÀ
);

577 
	`A˝iDmDumpPc˘
 (

578 
ACPI_TABLE_HEADER
 *
TabÀ
);

581 
	`A˝iDmDumpPmâ
 (

582 
ACPI_TABLE_HEADER
 *
TabÀ
);

584 
UINT32


585 
	`A˝iDmDumpRsdp
 (

586 
ACPI_TABLE_HEADER
 *
TabÀ
);

589 
	`A˝iDmDumpRsdt
 (

590 
ACPI_TABLE_HEADER
 *
TabÀ
);

592 
UINT32


593 
	`A˝iDmDumpS3±
 (

594 
ACPI_TABLE_HEADER
 *
TabÀ
);

597 
	`A˝iDmDumpSlic
 (

598 
ACPI_TABLE_HEADER
 *
TabÀ
);

601 
	`A˝iDmDumpSlô
 (

602 
ACPI_TABLE_HEADER
 *
TabÀ
);

605 
	`A˝iDmDumpSøt
 (

606 
ACPI_TABLE_HEADER
 *
TabÀ
);

609 
	`A˝iDmDumpVπc
 (

610 
ACPI_TABLE_HEADER
 *
TabÀ
);

613 
	`A˝iDmDumpWd©
 (

614 
ACPI_TABLE_HEADER
 *
TabÀ
);

617 
	`A˝iDmDumpXsdt
 (

618 
ACPI_TABLE_HEADER
 *
TabÀ
);

625 
	`A˝iDmDißs£mbÀ
 (

626 
ACPI_WALK_STATE
 *
WÆkSèã
,

627 
ACPI_PARSE_OBJECT
 *
Origö
,

628 
UINT32
 
NumOpcodes
);

631 
	`A˝iDmWÆkP¨£Tªe
 (

632 
ACPI_PARSE_OBJECT
 *
Op
,

633 
ASL_WALK_CALLBACK
 
Des˚ndögCÆlback
,

634 
ASL_WALK_CALLBACK
 
As˚ndögCÆlback
,

635 *
C⁄ãxt
);

642 
	`A˝iDmDißs£mbÀO√Op
 (

643 
ACPI_WALK_STATE
 *
WÆkSèã
,

644 
ACPI_OP_WALK_INFO
 *
Info
,

645 
ACPI_PARSE_OBJECT
 *
Op
);

648 
	`A˝iDmDecodeI¡î«lObje˘
 (

649 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

651 
UINT32


652 
	`A˝iDmLi°Ty≥
 (

653 
ACPI_PARSE_OBJECT
 *
Op
);

656 
	`A˝iDmMëhodFœgs
 (

657 
ACPI_PARSE_OBJECT
 *
Op
);

660 
	`A˝iDmDi•œyT¨gëP©h«me
 (

661 
ACPI_PARSE_OBJECT
 *
Op
);

664 
	`A˝iDmNŸifyDes¸ùti⁄
 (

665 
ACPI_PARSE_OBJECT
 *
Op
);

668 
	`A˝iDmPªdeföedDes¸ùti⁄
 (

669 
ACPI_PARSE_OBJECT
 *
Op
);

672 
	`A˝iDmFõldPªdeföedDes¸ùti⁄
 (

673 
ACPI_PARSE_OBJECT
 *
Op
);

676 
	`A˝iDmFõldFœgs
 (

677 
ACPI_PARSE_OBJECT
 *
Op
);

680 
	`A˝iDmAddªssS∑˚
 (

681 
UINT8
 
S∑˚Id
);

684 
	`A˝iDmRegi⁄Fœgs
 (

685 
ACPI_PARSE_OBJECT
 *
Op
);

688 
	`A˝iDmM©chOp
 (

689 
ACPI_PARSE_OBJECT
 *
Op
);

695 
UINT32


696 
	`A˝iDmDumpName
 (

697 
UINT32
 
Name
);

699 
ACPI_STATUS


700 
	`A˝iPsDi•œyObje˘P©h«me
 (

701 
ACPI_WALK_STATE
 *
WÆkSèã
,

702 
ACPI_PARSE_OBJECT
 *
Op
);

705 
	`A˝iDmName°rög
 (

706 *
Name
);

713 
	`A˝iDmDi•œyI¡î«lObje˘
 (

714 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

715 
ACPI_WALK_STATE
 *
WÆkSèã
);

718 
	`A˝iDmDi•œyArgumíts
 (

719 
ACPI_WALK_STATE
 *
WÆkSèã
);

722 
	`A˝iDmDi•œyLoˇls
 (

723 
ACPI_WALK_STATE
 *
WÆkSèã
);

726 
	`A˝iDmDumpMëhodInfo
 (

727 
ACPI_STATUS
 
Sètus
,

728 
ACPI_WALK_STATE
 *
WÆkSèã
,

729 
ACPI_PARSE_OBJECT
 *
Op
);

736 
	`A˝iDmDißsmByãLi°
 (

737 
UINT32
 
Levñ
,

738 
UINT8
 *
ByãD©a
,

739 
UINT32
 
ByãCou¡
);

742 
	`A˝iDmByãLi°
 (

743 
ACPI_OP_WALK_INFO
 *
Info
,

744 
ACPI_PARSE_OBJECT
 *
Op
);

747 
	`A˝iDmCheckF‹H¨dw¨eId
 (

748 
ACPI_PARSE_OBJECT
 *
Op
);

751 
	`A˝iDmDecom¥essEißId
 (

752 
UINT32
 
EncodedId
);

754 
BOOLEAN


755 
	`A˝iDmIsUuidBuf„r
 (

756 
ACPI_PARSE_OBJECT
 *
Op
);

758 
BOOLEAN


759 
	`A˝iDmIsUnicodeBuf„r
 (

760 
ACPI_PARSE_OBJECT
 *
Op
);

762 
BOOLEAN


763 
	`A˝iDmIsSåögBuf„r
 (

764 
ACPI_PARSE_OBJECT
 *
Op
);

766 
BOOLEAN


767 
	`A˝iDmIsPldBuf„r
 (

768 
ACPI_PARSE_OBJECT
 *
Op
);

774 
ACPI_STATUS


775 
	`A˝iDmP¨£De„ºedOps
 (

776 
ACPI_PARSE_OBJECT
 *
RoŸ
);

782 
ACPI_STATUS


783 
	`A˝iDmAddToExã∫ÆFûeLi°
 (

784 *
P©hLi°
);

787 
	`A˝iDmCÀ¨Exã∫ÆFûeLi°
 (

791 
	`A˝iDmAddOpToExã∫ÆLi°
 (

792 
ACPI_PARSE_OBJECT
 *
Op
,

793 *
P©h
,

794 
UINT8
 
Ty≥
,

795 
UINT32
 
VÆue
,

796 
UINT16
 
Fœgs
);

799 
	`A˝iDmAddNodeToExã∫ÆLi°
 (

800 
ACPI_NAMESPACE_NODE
 *
Node
,

801 
UINT8
 
Ty≥
,

802 
UINT32
 
VÆue
,

803 
UINT16
 
Fœgs
);

806 
	`A˝iDmAddExã∫ÆsToName•a˚
 (

809 
UINT32


810 
	`A˝iDmGëExã∫ÆMëhodCou¡
 (

814 
	`A˝iDmCÀ¨Exã∫ÆLi°
 (

818 
	`A˝iDmEmôExã∫Æs
 (

822 
	`A˝iDmUƒesﬁvedW¨nög
 (

823 
UINT8
 
Ty≥
);

826 
	`A˝iDmGëExã∫ÆsFromFûe
 (

833 
	`A˝iDmDumpI¡egî8
 (

834 
UINT8
 
VÆue
,

835 *
Name
);

838 
	`A˝iDmDumpI¡egî16
 (

839 
UINT16
 
VÆue
,

840 *
Name
);

843 
	`A˝iDmDumpI¡egî32
 (

844 
UINT32
 
VÆue
,

845 *
Name
);

848 
	`A˝iDmDumpI¡egî64
 (

849 
UINT64
 
VÆue
,

850 *
Name
);

853 
	`A˝iDmResour˚Tem∂©e
 (

854 
ACPI_OP_WALK_INFO
 *
Info
,

855 
ACPI_PARSE_OBJECT
 *
Op
,

856 
UINT8
 *
ByãD©a
,

857 
UINT32
 
ByãCou¡
);

859 
ACPI_STATUS


860 
	`A˝iDmIsResour˚Tem∂©e
 (

861 
ACPI_WALK_STATE
 *
WÆkSèã
,

862 
ACPI_PARSE_OBJECT
 *
Op
);

865 
	`A˝iDmBôLi°
 (

866 
UINT16
 
Mask
);

869 
	`A˝iDmDes¸ùt‹Name
 (

877 
	`A˝iDmW‹dDes¸ùt‹
 (

878 
ACPI_OP_WALK_INFO
 *
Info
,

879 
AML_RESOURCE
 *
Resour˚
,

880 
UINT32
 
Lígth
,

881 
UINT32
 
Levñ
);

884 
	`A˝iDmDw‹dDes¸ùt‹
 (

885 
ACPI_OP_WALK_INFO
 *
Info
,

886 
AML_RESOURCE
 *
Resour˚
,

887 
UINT32
 
Lígth
,

888 
UINT32
 
Levñ
);

891 
	`A˝iDmExãndedDes¸ùt‹
 (

892 
ACPI_OP_WALK_INFO
 *
Info
,

893 
AML_RESOURCE
 *
Resour˚
,

894 
UINT32
 
Lígth
,

895 
UINT32
 
Levñ
);

898 
	`A˝iDmQw‹dDes¸ùt‹
 (

899 
ACPI_OP_WALK_INFO
 *
Info
,

900 
AML_RESOURCE
 *
Resour˚
,

901 
UINT32
 
Lígth
,

902 
UINT32
 
Levñ
);

905 
	`A˝iDmMem‹y24Des¸ùt‹
 (

906 
ACPI_OP_WALK_INFO
 *
Info
,

907 
AML_RESOURCE
 *
Resour˚
,

908 
UINT32
 
Lígth
,

909 
UINT32
 
Levñ
);

912 
	`A˝iDmMem‹y32Des¸ùt‹
 (

913 
ACPI_OP_WALK_INFO
 *
Info
,

914 
AML_RESOURCE
 *
Resour˚
,

915 
UINT32
 
Lígth
,

916 
UINT32
 
Levñ
);

919 
	`A˝iDmFixedMem‹y32Des¸ùt‹
 (

920 
ACPI_OP_WALK_INFO
 *
Info
,

921 
AML_RESOURCE
 *
Resour˚
,

922 
UINT32
 
Lígth
,

923 
UINT32
 
Levñ
);

926 
	`A˝iDmGíîicRegi°îDes¸ùt‹
 (

927 
ACPI_OP_WALK_INFO
 *
Info
,

928 
AML_RESOURCE
 *
Resour˚
,

929 
UINT32
 
Lígth
,

930 
UINT32
 
Levñ
);

933 
	`A˝iDmI¡îru±Des¸ùt‹
 (

934 
ACPI_OP_WALK_INFO
 *
Info
,

935 
AML_RESOURCE
 *
Resour˚
,

936 
UINT32
 
Lígth
,

937 
UINT32
 
Levñ
);

940 
	`A˝iDmVíd‹L¨geDes¸ùt‹
 (

941 
ACPI_OP_WALK_INFO
 *
Info
,

942 
AML_RESOURCE
 *
Resour˚
,

943 
UINT32
 
Lígth
,

944 
UINT32
 
Levñ
);

947 
	`A˝iDmGpioDes¸ùt‹
 (

948 
ACPI_OP_WALK_INFO
 *
Info
,

949 
AML_RESOURCE
 *
Resour˚
,

950 
UINT32
 
Lígth
,

951 
UINT32
 
Levñ
);

954 
	`A˝iDmSîülBusDes¸ùt‹
 (

955 
ACPI_OP_WALK_INFO
 *
Info
,

956 
AML_RESOURCE
 *
Resour˚
,

957 
UINT32
 
Lígth
,

958 
UINT32
 
Levñ
);

961 
	`A˝iDmVíd‹Comm⁄
 (

962 *
Name
,

963 
UINT8
 *
ByãD©a
,

964 
UINT32
 
Lígth
,

965 
UINT32
 
Levñ
);

972 
	`A˝iDmIrqDes¸ùt‹
 (

973 
ACPI_OP_WALK_INFO
 *
Info
,

974 
AML_RESOURCE
 *
Resour˚
,

975 
UINT32
 
Lígth
,

976 
UINT32
 
Levñ
);

979 
	`A˝iDmDmaDes¸ùt‹
 (

980 
ACPI_OP_WALK_INFO
 *
Info
,

981 
AML_RESOURCE
 *
Resour˚
,

982 
UINT32
 
Lígth
,

983 
UINT32
 
Levñ
);

986 
	`A˝iDmFixedDmaDes¸ùt‹
 (

987 
ACPI_OP_WALK_INFO
 *
Info
,

988 
AML_RESOURCE
 *
Resour˚
,

989 
UINT32
 
Lígth
,

990 
UINT32
 
Levñ
);

993 
	`A˝iDmIoDes¸ùt‹
 (

994 
ACPI_OP_WALK_INFO
 *
Info
,

995 
AML_RESOURCE
 *
Resour˚
,

996 
UINT32
 
Lígth
,

997 
UINT32
 
Levñ
);

1000 
	`A˝iDmFixedIoDes¸ùt‹
 (

1001 
ACPI_OP_WALK_INFO
 *
Info
,

1002 
AML_RESOURCE
 *
Resour˚
,

1003 
UINT32
 
Lígth
,

1004 
UINT32
 
Levñ
);

1007 
	`A˝iDmSèπDïídítDes¸ùt‹
 (

1008 
ACPI_OP_WALK_INFO
 *
Info
,

1009 
AML_RESOURCE
 *
Resour˚
,

1010 
UINT32
 
Lígth
,

1011 
UINT32
 
Levñ
);

1014 
	`A˝iDmEndDïídítDes¸ùt‹
 (

1015 
ACPI_OP_WALK_INFO
 *
Info
,

1016 
AML_RESOURCE
 *
Resour˚
,

1017 
UINT32
 
Lígth
,

1018 
UINT32
 
Levñ
);

1021 
	`A˝iDmVíd‹SmÆlDes¸ùt‹
 (

1022 
ACPI_OP_WALK_INFO
 *
Info
,

1023 
AML_RESOURCE
 *
Resour˚
,

1024 
UINT32
 
Lígth
,

1025 
UINT32
 
Levñ
);

1032 
	`A˝iDmDecodeAâribuã
 (

1033 
UINT8
 
Aâribuã
);

1036 
	`A˝iDmIndít
 (

1037 
UINT32
 
Levñ
);

1039 
BOOLEAN


1040 
	`A˝iDmCommaIfLi°Membî
 (

1041 
ACPI_PARSE_OBJECT
 *
Op
);

1044 
	`A˝iDmCommaIfFõldMembî
 (

1045 
ACPI_PARSE_OBJECT
 *
Op
);

1052 
	`A˝iDmFödResour˚s
 (

1053 
ACPI_PARSE_OBJECT
 *
RoŸ
);

1056 
	`A˝iDmCheckResour˚Re„ªn˚
 (

1057 
ACPI_PARSE_OBJECT
 *
Op
,

1058 
ACPI_WALK_STATE
 *
WÆkSèã
);

1064 
BOOLEAN


1065 
	`A˝iDmCheckF‹SymbﬁicOpcode
 (

1066 
ACPI_PARSE_OBJECT
 *
Op
,

1067 
ACPI_OP_WALK_INFO
 *
Info
);

1070 
	`A˝iDmClo£O≥øt‹
 (

1071 
ACPI_PARSE_OBJECT
 *
Op
);

1078 
	`AdDißs£mbÀrHódî
 (

1079 *
Fûíame
,

1080 
UINT8
 
TabÀTy≥
);

1082 
	#ACPI_IS_AML_TABLE
 0

	)

1083 
	#ACPI_IS_DATA_TABLE
 1

	)

	@src/extern/acpica/source/include/acdispat.h

116 #i‚de‡
_ACDISPAT_H_


117 
	#_ACDISPAT_H_


	)

120 
	#NAMEOF_LOCAL_NTE
 "__L0"

	)

121 
	#NAMEOF_ARG_NTE
 "__A0"

	)

127 
ACPI_STATUS


128 
A˝iDsGëBuf„rFõldArgumíts
 (

129 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

131 
ACPI_STATUS


132 
A˝iDsGëB™kFõldArgumíts
 (

133 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

135 
ACPI_STATUS


136 
A˝iDsGëRegi⁄Argumíts
 (

137 
ACPI_OPERAND_OBJECT
 *
RgnDesc
);

139 
ACPI_STATUS


140 
A˝iDsGëBuf„rArgumíts
 (

141 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

143 
ACPI_STATUS


144 
A˝iDsGëPackageArgumíts
 (

145 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

151 
ACPI_STATUS


152 
A˝iDsExecBegöC⁄åﬁOp
 (

153 
ACPI_WALK_STATE
 *
WÆkSèã
,

154 
ACPI_PARSE_OBJECT
 *
Op
);

156 
ACPI_STATUS


157 
A˝iDsExecEndC⁄åﬁOp
 (

158 
ACPI_WALK_STATE
 *
WÆkSèã
,

159 
ACPI_PARSE_OBJECT
 *
Op
);

165 
ACPI_STATUS


166 
A˝iDsEvÆBuf„rFõldO≥ønds
 (

167 
ACPI_WALK_STATE
 *
WÆkSèã
,

168 
ACPI_PARSE_OBJECT
 *
Op
);

170 
ACPI_STATUS


171 
A˝iDsEvÆRegi⁄O≥ønds
 (

172 
ACPI_WALK_STATE
 *
WÆkSèã
,

173 
ACPI_PARSE_OBJECT
 *
Op
);

175 
ACPI_STATUS


176 
A˝iDsEvÆTabÀRegi⁄O≥ønds
 (

177 
ACPI_WALK_STATE
 *
WÆkSèã
,

178 
ACPI_PARSE_OBJECT
 *
Op
);

180 
ACPI_STATUS


181 
A˝iDsEvÆD©aObje˘O≥ønds
 (

182 
ACPI_WALK_STATE
 *
WÆkSèã
,

183 
ACPI_PARSE_OBJECT
 *
Op
,

184 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

186 
ACPI_STATUS


187 
A˝iDsEvÆB™kFõldO≥ønds
 (

188 
ACPI_WALK_STATE
 *
WÆkSèã
,

189 
ACPI_PARSE_OBJECT
 *
Op
);

191 
ACPI_STATUS


192 
A˝iDsInôülizeRegi⁄
 (

193 
ACPI_HANDLE
 
ObjH™dÀ
);

199 
ACPI_STATUS


200 
A˝iDsGëPªdiˇãVÆue
 (

201 
ACPI_WALK_STATE
 *
WÆkSèã
,

202 
ACPI_OPERAND_OBJECT
 *
Resu…Obj
);

204 
ACPI_STATUS


205 
A˝iDsExecBegöOp
 (

206 
ACPI_WALK_STATE
 *
WÆkSèã
,

207 
ACPI_PARSE_OBJECT
 **
OutOp
);

209 
ACPI_STATUS


210 
A˝iDsExecEndOp
 (

211 
ACPI_WALK_STATE
 *
Sèã
);

217 
ACPI_STATUS


218 
A˝iDsCª©eFõld
 (

219 
ACPI_PARSE_OBJECT
 *
Op
,

220 
ACPI_NAMESPACE_NODE
 *
Regi⁄Node
,

221 
ACPI_WALK_STATE
 *
WÆkSèã
);

223 
ACPI_STATUS


224 
A˝iDsCª©eB™kFõld
 (

225 
ACPI_PARSE_OBJECT
 *
Op
,

226 
ACPI_NAMESPACE_NODE
 *
Regi⁄Node
,

227 
ACPI_WALK_STATE
 *
WÆkSèã
);

229 
ACPI_STATUS


230 
A˝iDsCª©eIndexFõld
 (

231 
ACPI_PARSE_OBJECT
 *
Op
,

232 
ACPI_NAMESPACE_NODE
 *
Regi⁄Node
,

233 
ACPI_WALK_STATE
 *
WÆkSèã
);

235 
ACPI_STATUS


236 
A˝iDsCª©eBuf„rFõld
 (

237 
ACPI_PARSE_OBJECT
 *
Op
,

238 
ACPI_WALK_STATE
 *
WÆkSèã
);

240 
ACPI_STATUS


241 
A˝iDsInôFõldObje˘s
 (

242 
ACPI_PARSE_OBJECT
 *
Op
,

243 
ACPI_WALK_STATE
 *
WÆkSèã
);

249 
ACPI_STATUS


250 
A˝iDsInôCÆlbacks
 (

251 
ACPI_WALK_STATE
 *
WÆkSèã
,

252 
UINT32
 
PassNumbî
);

256 
ACPI_STATUS


257 
A˝iDsLﬂd1BegöOp
 (

258 
ACPI_WALK_STATE
 *
WÆkSèã
,

259 
ACPI_PARSE_OBJECT
 **
OutOp
);

261 
ACPI_STATUS


262 
A˝iDsLﬂd1EndOp
 (

263 
ACPI_WALK_STATE
 *
WÆkSèã
);

268 
ACPI_STATUS


269 
A˝iDsLﬂd2BegöOp
 (

270 
ACPI_WALK_STATE
 *
WÆkSèã
,

271 
ACPI_PARSE_OBJECT
 **
OutOp
);

273 
ACPI_STATUS


274 
A˝iDsLﬂd2EndOp
 (

275 
ACPI_WALK_STATE
 *
WÆkSèã
);

281 
ACPI_STATUS


282 
A˝iDsSt‹eObje˘ToLoˇl
 (

283 
UINT8
 
Ty≥
,

284 
UINT32
 
Index
,

285 
ACPI_OPERAND_OBJECT
 *
SrcDesc
,

286 
ACPI_WALK_STATE
 *
WÆkSèã
);

288 
ACPI_STATUS


289 
A˝iDsMëhodD©aGëE¡ry
 (

290 
UINT16
 
Opcode
,

291 
UINT32
 
Index
,

292 
ACPI_WALK_STATE
 *
WÆkSèã
,

293 
ACPI_OPERAND_OBJECT
 ***
Node
);

296 
A˝iDsMëhodD©aDñëeAŒ
 (

297 
ACPI_WALK_STATE
 *
WÆkSèã
);

299 
BOOLEAN


300 
A˝iDsIsMëhodVÆue
 (

301 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

303 
ACPI_STATUS


304 
A˝iDsMëhodD©aGëVÆue
 (

305 
UINT8
 
Ty≥
,

306 
UINT32
 
Index
,

307 
ACPI_WALK_STATE
 *
WÆkSèã
,

308 
ACPI_OPERAND_OBJECT
 **
De°Desc
);

310 
ACPI_STATUS


311 
A˝iDsMëhodD©aInôArgs
 (

312 
ACPI_OPERAND_OBJECT
 **
P¨ams
,

313 
UINT32
 
MaxP¨amCou¡
,

314 
ACPI_WALK_STATE
 *
WÆkSèã
);

316 
ACPI_STATUS


317 
A˝iDsMëhodD©aGëNode
 (

318 
UINT8
 
Ty≥
,

319 
UINT32
 
Index
,

320 
ACPI_WALK_STATE
 *
WÆkSèã
,

321 
ACPI_NAMESPACE_NODE
 **
Node
);

324 
A˝iDsMëhodD©aInô
 (

325 
ACPI_WALK_STATE
 *
WÆkSèã
);

331 
ACPI_STATUS


332 
A˝iDsAutoSîülizeMëhod
 (

333 
ACPI_NAMESPACE_NODE
 *
Node
,

334 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

336 
ACPI_STATUS


337 
A˝iDsCÆlC⁄åﬁMëhod
 (

338 
ACPI_THREAD_STATE
 *
Thªad
,

339 
ACPI_WALK_STATE
 *
WÆkSèã
,

340 
ACPI_PARSE_OBJECT
 *
Op
);

342 
ACPI_STATUS


343 
A˝iDsRe°¨tC⁄åﬁMëhod
 (

344 
ACPI_WALK_STATE
 *
WÆkSèã
,

345 
ACPI_OPERAND_OBJECT
 *
Rëu∫Desc
);

348 
A˝iDsTîmö©eC⁄åﬁMëhod
 (

349 
ACPI_OPERAND_OBJECT
 *
MëhodDesc
,

350 
ACPI_WALK_STATE
 *
WÆkSèã
);

352 
ACPI_STATUS


353 
A˝iDsBegöMëhodExecuti⁄
 (

354 
ACPI_NAMESPACE_NODE
 *
MëhodNode
,

355 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

356 
ACPI_WALK_STATE
 *
WÆkSèã
);

358 
ACPI_STATUS


359 
A˝iDsMëhodEº‹
 (

360 
ACPI_STATUS
 
Sètus
,

361 
ACPI_WALK_STATE
 *
WÆkSèã
);

366 
ACPI_STATUS


367 
A˝iDsInôülizeObje˘s
 (

368 
UINT32
 
TabÀIndex
,

369 
ACPI_NAMESPACE_NODE
 *
SèπNode
);

375 
ACPI_STATUS


376 
A˝iDsBuûdI¡î«lBuf„rObj
 (

377 
ACPI_WALK_STATE
 *
WÆkSèã
,

378 
ACPI_PARSE_OBJECT
 *
Op
,

379 
UINT32
 
Buf„rLígth
,

380 
ACPI_OPERAND_OBJECT
 **
ObjDescPå
);

382 
ACPI_STATUS


383 
A˝iDsBuûdI¡î«lPackageObj
 (

384 
ACPI_WALK_STATE
 *
WÆkSèã
,

385 
ACPI_PARSE_OBJECT
 *
›
,

386 
UINT32
 
PackageLígth
,

387 
ACPI_OPERAND_OBJECT
 **
ObjDesc
);

389 
ACPI_STATUS


390 
A˝iDsInôObje˘FromOp
 (

391 
ACPI_WALK_STATE
 *
WÆkSèã
,

392 
ACPI_PARSE_OBJECT
 *
Op
,

393 
UINT16
 
Opcode
,

394 
ACPI_OPERAND_OBJECT
 **
ObjDesc
);

396 
ACPI_STATUS


397 
A˝iDsCª©eNode
 (

398 
ACPI_WALK_STATE
 *
WÆkSèã
,

399 
ACPI_NAMESPACE_NODE
 *
Node
,

400 
ACPI_PARSE_OBJECT
 *
Op
);

407 
A˝iDsCÀ¨Im∂icôRëu∫
 (

408 
ACPI_WALK_STATE
 *
WÆkSèã
);

410 
BOOLEAN


411 
A˝iDsDoIm∂icôRëu∫
 (

412 
ACPI_OPERAND_OBJECT
 *
Rëu∫Desc
,

413 
ACPI_WALK_STATE
 *
WÆkSèã
,

414 
BOOLEAN
 
AddRe„ªn˚
);

416 
BOOLEAN


417 
A˝iDsIsResu…U£d
 (

418 
ACPI_PARSE_OBJECT
 *
Op
,

419 
ACPI_WALK_STATE
 *
WÆkSèã
);

422 
A˝iDsDñëeResu…IfNŸU£d
 (

423 
ACPI_PARSE_OBJECT
 *
Op
,

424 
ACPI_OPERAND_OBJECT
 *
Resu…Obj
,

425 
ACPI_WALK_STATE
 *
WÆkSèã
);

427 
ACPI_STATUS


428 
A˝iDsCª©eO≥ønd
 (

429 
ACPI_WALK_STATE
 *
WÆkSèã
,

430 
ACPI_PARSE_OBJECT
 *
Arg
,

431 
UINT32
 
ArgsRemaöög
);

433 
ACPI_STATUS


434 
A˝iDsCª©eO≥ønds
 (

435 
ACPI_WALK_STATE
 *
WÆkSèã
,

436 
ACPI_PARSE_OBJECT
 *
Fú°Arg
);

438 
ACPI_STATUS


439 
A˝iDsResﬁveO≥ønds
 (

440 
ACPI_WALK_STATE
 *
WÆkSèã
);

443 
A˝iDsCÀ¨O≥ønds
 (

444 
ACPI_WALK_STATE
 *
WÆkSèã
);

446 
ACPI_STATUS


447 
A˝iDsEvÆu©eNameP©h
 (

448 
ACPI_WALK_STATE
 *
WÆkSèã
);

454 
ACPI_STATUS


455 
A˝iDsSc›eSèckPush
 (

456 
ACPI_NAMESPACE_NODE
 *
Node
,

457 
ACPI_OBJECT_TYPE
 
Ty≥
,

458 
ACPI_WALK_STATE
 *
WÆkSèã
);

461 
ACPI_STATUS


462 
A˝iDsSc›eSèckP›
 (

463 
ACPI_WALK_STATE
 *
WÆkSèã
);

466 
A˝iDsSc›eSèckCÀ¨
 (

467 
ACPI_WALK_STATE
 *
WÆkSèã
);

473 
ACPI_STATUS


474 
A˝iDsObjSèckPush
 (

475 *
Obje˘
,

476 
ACPI_WALK_STATE
 *
WÆkSèã
);

478 
ACPI_STATUS


479 
A˝iDsObjSèckP›
 (

480 
UINT32
 
P›Cou¡
,

481 
ACPI_WALK_STATE
 *
WÆkSèã
);

483 
ACPI_WALK_STATE
 *

484 
A˝iDsCª©eWÆkSèã
 (

485 
ACPI_OWNER_ID
 
Ow√rId
,

486 
ACPI_PARSE_OBJECT
 *
Origö
,

487 
ACPI_OPERAND_OBJECT
 *
MthDesc
,

488 
ACPI_THREAD_STATE
 *
Thªad
);

490 
ACPI_STATUS


491 
A˝iDsInôAmlWÆk
 (

492 
ACPI_WALK_STATE
 *
WÆkSèã
,

493 
ACPI_PARSE_OBJECT
 *
Op
,

494 
ACPI_NAMESPACE_NODE
 *
MëhodNode
,

495 
UINT8
 *
AmlSèπ
,

496 
UINT32
 
AmlLígth
,

497 
ACPI_EVALUATE_INFO
 *
Info
,

498 
UINT8
 
PassNumbî
);

501 
A˝iDsObjSèckP›AndDñëe
 (

502 
UINT32
 
P›Cou¡
,

503 
ACPI_WALK_STATE
 *
WÆkSèã
);

506 
A˝iDsDñëeWÆkSèã
 (

507 
ACPI_WALK_STATE
 *
WÆkSèã
);

509 
ACPI_WALK_STATE
 *

510 
A˝iDsP›WÆkSèã
 (

511 
ACPI_THREAD_STATE
 *
Thªad
);

514 
A˝iDsPushWÆkSèã
 (

515 
ACPI_WALK_STATE
 *
WÆkSèã
,

516 
ACPI_THREAD_STATE
 *
Thªad
);

518 
ACPI_STATUS


519 
A˝iDsResu…SèckCÀ¨
 (

520 
ACPI_WALK_STATE
 *
WÆkSèã
);

522 
ACPI_WALK_STATE
 *

523 
A˝iDsGëCuºítWÆkSèã
 (

524 
ACPI_THREAD_STATE
 *
Thªad
);

526 
ACPI_STATUS


527 
A˝iDsResu…P›
 (

528 
ACPI_OPERAND_OBJECT
 **
Obje˘
,

529 
ACPI_WALK_STATE
 *
WÆkSèã
);

531 
ACPI_STATUS


532 
A˝iDsResu…Push
 (

533 
ACPI_OPERAND_OBJECT
 *
Obje˘
,

534 
ACPI_WALK_STATE
 *
WÆkSèã
);

	@src/extern/acpica/source/include/acevents.h

116 #i‚de‡
__ACEVENTS_H__


117 
	#__ACEVENTS_H__


	)

123 
ACPI_STATUS


124 
A˝iEvInôülizeEvíts
 (

127 
ACPI_STATUS


128 
A˝iEvIn°ÆlXru±H™dÀrs
 (

131 
UINT32


132 
A˝iEvFixedEvítDëe˘
 (

139 
BOOLEAN


140 
A˝iEvIsNŸifyObje˘
 (

141 
ACPI_NAMESPACE_NODE
 *
Node
);

143 
UINT32


144 
A˝iEvGëG≥NumbîIndex
 (

145 
UINT32
 
G≥Numbî
);

147 
ACPI_STATUS


148 
A˝iEvQueueNŸifyReque°
 (

149 
ACPI_NAMESPACE_NODE
 *
Node
,

150 
UINT32
 
NŸifyVÆue
);

156 
ACPI_STATUS


157 
A˝iEvInôGlobÆLockH™dÀr
 (

160 
ACPI_HW_DEPENDENT_RETURN_OK
 (

161 
ACPI_STATUS


162 
	$A˝iEvAcquúeGlobÆLock
(

163 
UINT16
 
Timeout
))

165 
	`ACPI_HW_DEPENDENT_RETURN_OK
 (

166 
ACPI_STATUS


167 
	$A˝iEvRñó£GlobÆLock
(

170 
ACPI_STATUS


171 
	`A˝iEvRemoveGlobÆLockH™dÀr
 (

178 
UINT32


179 
	`A˝iEvG≥Dëe˘
 (

180 
ACPI_GPE_XRUPT_INFO
 *
G≥Xru±Li°
);

182 
ACPI_STATUS


183 
	`A˝iEvUpd©eG≥E«bÀMask
 (

184 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
);

186 
ACPI_STATUS


187 
	`A˝iEvE«bÀG≥
 (

188 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
);

190 
ACPI_STATUS


191 
	`A˝iEvAddG≥Re„ªn˚
 (

192 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
);

194 
ACPI_STATUS


195 
	`A˝iEvRemoveG≥Re„ªn˚
 (

196 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
);

198 
ACPI_GPE_EVENT_INFO
 *

199 
	`A˝iEvGëG≥EvítInfo
 (

200 
ACPI_HANDLE
 
G≥Devi˚
,

201 
UINT32
 
G≥Numbî
);

203 
ACPI_GPE_EVENT_INFO
 *

204 
	`A˝iEvLowGëG≥Info
 (

205 
UINT32
 
G≥Numbî
,

206 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
);

208 
ACPI_STATUS


209 
	`A˝iEvFöishG≥
 (

210 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
);

216 
ACPI_STATUS


217 
	`A˝iEvCª©eG≥Block
 (

218 
ACPI_NAMESPACE_NODE
 *
G≥Devi˚
,

219 
UINT64
 
Addªss
,

220 
UINT8
 
S∑˚Id
,

221 
UINT32
 
Regi°îCou¡
,

222 
UINT16
 
G≥BlockBa£Numbî
,

223 
UINT32
 
I¡îru±Numbî
,

224 
ACPI_GPE_BLOCK_INFO
 **
Rëu∫G≥Block
);

226 
ACPI_STATUS


227 
	`A˝iEvInôülizeG≥Block
 (

228 
ACPI_GPE_XRUPT_INFO
 *
G≥Xru±Info
,

229 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
,

230 *
C⁄ãxt
);

232 
	`ACPI_HW_DEPENDENT_RETURN_OK
 (

233 
ACPI_STATUS


234 
	$A˝iEvDñëeG≥Block
 (

235 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
))

237 
UINT32


238 
	`A˝iEvG≥Di•©ch
 (

239 
ACPI_NAMESPACE_NODE
 *
G≥Devi˚
,

240 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
,

241 
UINT32
 
G≥Numbî
);

247 
ACPI_STATUS


248 
	`A˝iEvG≥Inôülize
 (

251 
	`ACPI_HW_DEPENDENT_RETURN_VOID
 (

253 
	$A˝iEvUpd©eG≥s
 (

254 
ACPI_OWNER_ID
 
TabÀOw√rId
))

256 
ACPI_STATUS


257 
	`A˝iEvM©chG≥Mëhod
 (

258 
ACPI_HANDLE
 
ObjH™dÀ
,

259 
UINT32
 
Levñ
,

260 *
C⁄ãxt
,

261 **
Rëu∫VÆue
);

267 
ACPI_STATUS


268 
	`A˝iEvWÆkG≥Li°
 (

269 
ACPI_GPE_CALLBACK
 
G≥WÆkCÆlback
,

270 *
C⁄ãxt
);

272 
ACPI_STATUS


273 
	`A˝iEvGëG≥Devi˚
 (

274 
ACPI_GPE_XRUPT_INFO
 *
G≥Xru±Info
,

275 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
,

276 *
C⁄ãxt
);

278 
ACPI_STATUS


279 
	`A˝iEvGëG≥Xru±Block
 (

280 
UINT32
 
I¡îru±Numbî
,

281 
ACPI_GPE_XRUPT_INFO
 **
G≥Xru±Block
);

283 
ACPI_STATUS


284 
	`A˝iEvDñëeG≥Xru±
 (

285 
ACPI_GPE_XRUPT_INFO
 *
G≥Xru±
);

287 
ACPI_STATUS


288 
	`A˝iEvDñëeG≥H™dÀrs
 (

289 
ACPI_GPE_XRUPT_INFO
 *
G≥Xru±Info
,

290 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
,

291 *
C⁄ãxt
);

297 
BOOLEAN


298 
	`A˝iEvHasDeÁu…H™dÀr
 (

299 
ACPI_NAMESPACE_NODE
 *
Node
,

300 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
);

302 
ACPI_STATUS


303 
	`A˝iEvIn°ÆlRegi⁄H™dÀrs
 (

306 
ACPI_STATUS


307 
	`A˝iEvIn°ÆlS∑˚H™dÀr
 (

308 
ACPI_NAMESPACE_NODE
 *
Node
,

309 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
,

310 
ACPI_ADR_SPACE_HANDLER
 
H™dÀr
,

311 
ACPI_ADR_SPACE_SETUP
 
Sëup
,

312 *
C⁄ãxt
);

318 
ACPI_STATUS


319 
	`A˝iEvInôülizeOpRegi⁄s
 (

322 
ACPI_STATUS


323 
	`A˝iEvAddªssS∑˚Di•©ch
 (

324 
ACPI_OPERAND_OBJECT
 *
Regi⁄Obj
,

325 
ACPI_OPERAND_OBJECT
 *
FõldObj
,

326 
UINT32
 
Fun˘i⁄
,

327 
UINT32
 
Regi⁄Off£t
,

328 
UINT32
 
BôWidth
,

329 
UINT64
 *
VÆue
);

331 
ACPI_STATUS


332 
	`A˝iEvAâachRegi⁄
 (

333 
ACPI_OPERAND_OBJECT
 *
H™dÀrObj
,

334 
ACPI_OPERAND_OBJECT
 *
Regi⁄Obj
,

335 
BOOLEAN
 
A˝iNsIsLocked
);

338 
	`A˝iEvDëachRegi⁄
 (

339 
ACPI_OPERAND_OBJECT
 *
Regi⁄Obj
,

340 
BOOLEAN
 
A˝iNsIsLocked
);

342 
ACPI_STATUS


343 
	`A˝iEvExecuãRegMëhods
 (

344 
ACPI_NAMESPACE_NODE
 *
Node
,

345 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
);

347 
ACPI_STATUS


348 
	`A˝iEvExecuãRegMëhod
 (

349 
ACPI_OPERAND_OBJECT
 *
Regi⁄Obj
,

350 
UINT32
 
Fun˘i⁄
);

356 
ACPI_STATUS


357 
	`A˝iEvSy°emMem‹yRegi⁄Sëup
 (

358 
ACPI_HANDLE
 
H™dÀ
,

359 
UINT32
 
Fun˘i⁄
,

360 *
H™dÀrC⁄ãxt
,

361 **
Regi⁄C⁄ãxt
);

363 
ACPI_STATUS


364 
	`A˝iEvIoS∑˚Regi⁄Sëup
 (

365 
ACPI_HANDLE
 
H™dÀ
,

366 
UINT32
 
Fun˘i⁄
,

367 *
H™dÀrC⁄ãxt
,

368 **
Regi⁄C⁄ãxt
);

370 
ACPI_STATUS


371 
	`A˝iEvPciC⁄figRegi⁄Sëup
 (

372 
ACPI_HANDLE
 
H™dÀ
,

373 
UINT32
 
Fun˘i⁄
,

374 *
H™dÀrC⁄ãxt
,

375 **
Regi⁄C⁄ãxt
);

377 
ACPI_STATUS


378 
	`A˝iEvCmosRegi⁄Sëup
 (

379 
ACPI_HANDLE
 
H™dÀ
,

380 
UINT32
 
Fun˘i⁄
,

381 *
H™dÀrC⁄ãxt
,

382 **
Regi⁄C⁄ãxt
);

384 
ACPI_STATUS


385 
	`A˝iEvPciB¨Regi⁄Sëup
 (

386 
ACPI_HANDLE
 
H™dÀ
,

387 
UINT32
 
Fun˘i⁄
,

388 *
H™dÀrC⁄ãxt
,

389 **
Regi⁄C⁄ãxt
);

391 
ACPI_STATUS


392 
	`A˝iEvDeÁu…Regi⁄Sëup
 (

393 
ACPI_HANDLE
 
H™dÀ
,

394 
UINT32
 
Fun˘i⁄
,

395 *
H™dÀrC⁄ãxt
,

396 **
Regi⁄C⁄ãxt
);

398 
ACPI_STATUS


399 
	`A˝iEvInôülizeRegi⁄
 (

400 
ACPI_OPERAND_OBJECT
 *
Regi⁄Obj
,

401 
BOOLEAN
 
A˝iNsLocked
);

407 
UINT32
 
ACPI_SYSTEM_XFACE


408 
	`A˝iEvG≥Xru±H™dÀr
 (

409 *
C⁄ãxt
);

411 
UINT32


412 
	`A˝iEvSciDi•©ch
 (

415 
UINT32


416 
	`A˝iEvIn°ÆlSciH™dÀr
 (

419 
ACPI_STATUS


420 
	`A˝iEvRemoveAŒSciH™dÀrs
 (

423 
	`ACPI_HW_DEPENDENT_RETURN_VOID
 (

425 
	$A˝iEvTîmö©e
 (

	@src/extern/acpica/source/include/acexcep.h

116 #i‚de‡
__ACEXCEP_H__


117 
	#__ACEXCEP_H__


	)

125 
	#AE_CODE_ENVIRONMENTAL
 0x0000

	)

126 
	#AE_CODE_PROGRAMMER
 0x1000

	)

127 
	#AE_CODE_ACPI_TABLES
 0x2000

	)

128 
	#AE_CODE_AML
 0x3000

	)

129 
	#AE_CODE_CONTROL
 0x4000

	)

131 
	#AE_CODE_MAX
 0x4000

	)

132 
	#AE_CODE_MASK
 0xF000

	)

137 
	#EXCEP_ENV
(
code
Ë((
ACPI_STATUS
Ë(codê| 
AE_CODE_ENVIRONMENTAL
))

	)

138 
	#EXCEP_PGM
(
code
Ë((
ACPI_STATUS
Ë(codê| 
AE_CODE_PROGRAMMER
))

	)

139 
	#EXCEP_TBL
(
code
Ë((
ACPI_STATUS
Ë(codê| 
AE_CODE_ACPI_TABLES
))

	)

140 
	#EXCEP_AML
(
code
Ë((
ACPI_STATUS
Ë(codê| 
AE_CODE_AML
))

	)

141 
	#EXCEP_CTL
(
code
Ë((
ACPI_STATUS
Ë(codê| 
AE_CODE_CONTROL
))

	)

147 
	sa˝i_ex˚±i⁄_öfo


149 *
	mName
;

151 #ifde‡
ACPI_HELP_APP


152 *
	mDes¸ùti⁄
;

154 } 
	tACPI_EXCEPTION_INFO
;

156 #ifde‡
ACPI_HELP_APP


157 
	#EXCEP_TXT
(
Name
,
Des¸ùti⁄
Ë{Name, Des¸ùti⁄}

	)

159 
	#EXCEP_TXT
(
Name
,
Des¸ùti⁄
Ë{Name}

	)

166 
	#ACPI_SUCCESS
(
a
Ë(!◊))

	)

167 
	#ACPI_FAILURE
(
a
Ë◊)

	)

169 
	#AE_OK
 (
ACPI_STATUS
Ë0x0000

	)

174 
	#AE_ERROR
 
	`EXCEP_ENV
 (0x0001)

	)

175 
	#AE_NO_ACPI_TABLES
 
	`EXCEP_ENV
 (0x0002)

	)

176 
	#AE_NO_NAMESPACE
 
	`EXCEP_ENV
 (0x0003)

	)

177 
	#AE_NO_MEMORY
 
	`EXCEP_ENV
 (0x0004)

	)

178 
	#AE_NOT_FOUND
 
	`EXCEP_ENV
 (0x0005)

	)

179 
	#AE_NOT_EXIST
 
	`EXCEP_ENV
 (0x0006)

	)

180 
	#AE_ALREADY_EXISTS
 
	`EXCEP_ENV
 (0x0007)

	)

181 
	#AE_TYPE
 
	`EXCEP_ENV
 (0x0008)

	)

182 
	#AE_NULL_OBJECT
 
	`EXCEP_ENV
 (0x0009)

	)

183 
	#AE_NULL_ENTRY
 
	`EXCEP_ENV
 (0x000A)

	)

184 
	#AE_BUFFER_OVERFLOW
 
	`EXCEP_ENV
 (0x000B)

	)

185 
	#AE_STACK_OVERFLOW
 
	`EXCEP_ENV
 (0x000C)

	)

186 
	#AE_STACK_UNDERFLOW
 
	`EXCEP_ENV
 (0x000D)

	)

187 
	#AE_NOT_IMPLEMENTED
 
	`EXCEP_ENV
 (0x000E)

	)

188 
	#AE_SUPPORT
 
	`EXCEP_ENV
 (0x000F)

	)

189 
	#AE_LIMIT
 
	`EXCEP_ENV
 (0x0010)

	)

190 
	#AE_TIME
 
	`EXCEP_ENV
 (0x0011)

	)

191 
	#AE_ACQUIRE_DEADLOCK
 
	`EXCEP_ENV
 (0x0012)

	)

192 
	#AE_RELEASE_DEADLOCK
 
	`EXCEP_ENV
 (0x0013)

	)

193 
	#AE_NOT_ACQUIRED
 
	`EXCEP_ENV
 (0x0014)

	)

194 
	#AE_ALREADY_ACQUIRED
 
	`EXCEP_ENV
 (0x0015)

	)

195 
	#AE_NO_HARDWARE_RESPONSE
 
	`EXCEP_ENV
 (0x0016)

	)

196 
	#AE_NO_GLOBAL_LOCK
 
	`EXCEP_ENV
 (0x0017)

	)

197 
	#AE_ABORT_METHOD
 
	`EXCEP_ENV
 (0x0018)

	)

198 
	#AE_SAME_HANDLER
 
	`EXCEP_ENV
 (0x0019)

	)

199 
	#AE_NO_HANDLER
 
	`EXCEP_ENV
 (0x001A)

	)

200 
	#AE_OWNER_ID_LIMIT
 
	`EXCEP_ENV
 (0x001B)

	)

201 
	#AE_NOT_CONFIGURED
 
	`EXCEP_ENV
 (0x001C)

	)

202 
	#AE_ACCESS
 
	`EXCEP_ENV
 (0x001D)

	)

204 
	#AE_CODE_ENV_MAX
 0x001D

	)

210 
	#AE_BAD_PARAMETER
 
	`EXCEP_PGM
 (0x0001)

	)

211 
	#AE_BAD_CHARACTER
 
	`EXCEP_PGM
 (0x0002)

	)

212 
	#AE_BAD_PATHNAME
 
	`EXCEP_PGM
 (0x0003)

	)

213 
	#AE_BAD_DATA
 
	`EXCEP_PGM
 (0x0004)

	)

214 
	#AE_BAD_HEX_CONSTANT
 
	`EXCEP_PGM
 (0x0005)

	)

215 
	#AE_BAD_OCTAL_CONSTANT
 
	`EXCEP_PGM
 (0x0006)

	)

216 
	#AE_BAD_DECIMAL_CONSTANT
 
	`EXCEP_PGM
 (0x0007)

	)

217 
	#AE_MISSING_ARGUMENTS
 
	`EXCEP_PGM
 (0x0008)

	)

218 
	#AE_BAD_ADDRESS
 
	`EXCEP_PGM
 (0x0009)

	)

220 
	#AE_CODE_PGM_MAX
 0x0009

	)

226 
	#AE_BAD_SIGNATURE
 
	`EXCEP_TBL
 (0x0001)

	)

227 
	#AE_BAD_HEADER
 
	`EXCEP_TBL
 (0x0002)

	)

228 
	#AE_BAD_CHECKSUM
 
	`EXCEP_TBL
 (0x0003)

	)

229 
	#AE_BAD_VALUE
 
	`EXCEP_TBL
 (0x0004)

	)

230 
	#AE_INVALID_TABLE_LENGTH
 
	`EXCEP_TBL
 (0x0005)

	)

232 
	#AE_CODE_TBL_MAX
 0x0005

	)

239 
	#AE_AML_BAD_OPCODE
 
	`EXCEP_AML
 (0x0001)

	)

240 
	#AE_AML_NO_OPERAND
 
	`EXCEP_AML
 (0x0002)

	)

241 
	#AE_AML_OPERAND_TYPE
 
	`EXCEP_AML
 (0x0003)

	)

242 
	#AE_AML_OPERAND_VALUE
 
	`EXCEP_AML
 (0x0004)

	)

243 
	#AE_AML_UNINITIALIZED_LOCAL
 
	`EXCEP_AML
 (0x0005)

	)

244 
	#AE_AML_UNINITIALIZED_ARG
 
	`EXCEP_AML
 (0x0006)

	)

245 
	#AE_AML_UNINITIALIZED_ELEMENT
 
	`EXCEP_AML
 (0x0007)

	)

246 
	#AE_AML_NUMERIC_OVERFLOW
 
	`EXCEP_AML
 (0x0008)

	)

247 
	#AE_AML_REGION_LIMIT
 
	`EXCEP_AML
 (0x0009)

	)

248 
	#AE_AML_BUFFER_LIMIT
 
	`EXCEP_AML
 (0x000A)

	)

249 
	#AE_AML_PACKAGE_LIMIT
 
	`EXCEP_AML
 (0x000B)

	)

250 
	#AE_AML_DIVIDE_BY_ZERO
 
	`EXCEP_AML
 (0x000C)

	)

251 
	#AE_AML_BAD_NAME
 
	`EXCEP_AML
 (0x000D)

	)

252 
	#AE_AML_NAME_NOT_FOUND
 
	`EXCEP_AML
 (0x000E)

	)

253 
	#AE_AML_INTERNAL
 
	`EXCEP_AML
 (0x000F)

	)

254 
	#AE_AML_INVALID_SPACE_ID
 
	`EXCEP_AML
 (0x0010)

	)

255 
	#AE_AML_STRING_LIMIT
 
	`EXCEP_AML
 (0x0011)

	)

256 
	#AE_AML_NO_RETURN_VALUE
 
	`EXCEP_AML
 (0x0012)

	)

257 
	#AE_AML_METHOD_LIMIT
 
	`EXCEP_AML
 (0x0013)

	)

258 
	#AE_AML_NOT_OWNER
 
	`EXCEP_AML
 (0x0014)

	)

259 
	#AE_AML_MUTEX_ORDER
 
	`EXCEP_AML
 (0x0015)

	)

260 
	#AE_AML_MUTEX_NOT_ACQUIRED
 
	`EXCEP_AML
 (0x0016)

	)

261 
	#AE_AML_INVALID_RESOURCE_TYPE
 
	`EXCEP_AML
 (0x0017)

	)

262 
	#AE_AML_INVALID_INDEX
 
	`EXCEP_AML
 (0x0018)

	)

263 
	#AE_AML_REGISTER_LIMIT
 
	`EXCEP_AML
 (0x0019)

	)

264 
	#AE_AML_NO_WHILE
 
	`EXCEP_AML
 (0x001A)

	)

265 
	#AE_AML_ALIGNMENT
 
	`EXCEP_AML
 (0x001B)

	)

266 
	#AE_AML_NO_RESOURCE_END_TAG
 
	`EXCEP_AML
 (0x001C)

	)

267 
	#AE_AML_BAD_RESOURCE_VALUE
 
	`EXCEP_AML
 (0x001D)

	)

268 
	#AE_AML_CIRCULAR_REFERENCE
 
	`EXCEP_AML
 (0x001E)

	)

269 
	#AE_AML_BAD_RESOURCE_LENGTH
 
	`EXCEP_AML
 (0x001F)

	)

270 
	#AE_AML_ILLEGAL_ADDRESS
 
	`EXCEP_AML
 (0x0020)

	)

271 
	#AE_AML_INFINITE_LOOP
 
	`EXCEP_AML
 (0x0021)

	)

273 
	#AE_CODE_AML_MAX
 0x0021

	)

279 
	#AE_CTRL_RETURN_VALUE
 
	`EXCEP_CTL
 (0x0001)

	)

280 
	#AE_CTRL_PENDING
 
	`EXCEP_CTL
 (0x0002)

	)

281 
	#AE_CTRL_TERMINATE
 
	`EXCEP_CTL
 (0x0003)

	)

282 
	#AE_CTRL_TRUE
 
	`EXCEP_CTL
 (0x0004)

	)

283 
	#AE_CTRL_FALSE
 
	`EXCEP_CTL
 (0x0005)

	)

284 
	#AE_CTRL_DEPTH
 
	`EXCEP_CTL
 (0x0006)

	)

285 
	#AE_CTRL_END
 
	`EXCEP_CTL
 (0x0007)

	)

286 
	#AE_CTRL_TRANSFER
 
	`EXCEP_CTL
 (0x0008)

	)

287 
	#AE_CTRL_BREAK
 
	`EXCEP_CTL
 (0x0009)

	)

288 
	#AE_CTRL_CONTINUE
 
	`EXCEP_CTL
 (0x000A)

	)

289 
	#AE_CTRL_SKIP
 
	`EXCEP_CTL
 (0x000B)

	)

290 
	#AE_CTRL_PARSE_CONTINUE
 
	`EXCEP_CTL
 (0x000C)

	)

291 
	#AE_CTRL_PARSE_PENDING
 
	`EXCEP_CTL
 (0x000D)

	)

293 
	#AE_CODE_CTRL_MAX
 0x000D

	)

298 #ifde‡
ACPI_DEFINE_EXCEPTION_TABLE


304 c⁄° 
ACPI_EXCEPTION_INFO
 
	gA˝iGbl_Ex˚±i⁄Names_Env
[] =

306 
EXCEP_TXT
 ("AE_OK", "NoÉrror"),

307 
EXCEP_TXT
 ("AE_ERROR", "UnspecifiedÉrror"),

308 
EXCEP_TXT
 ("AE_NO_ACPI_TABLES", "ACPIÅables couldÇot be found"),

309 
EXCEP_TXT
 ("AE_NO_NAMESPACE", "AÇamespace hasÇot beenÜoaded"),

310 
EXCEP_TXT
 ("AE_NO_MEMORY", "Insufficient dynamic memory"),

311 
EXCEP_TXT
 ("AE_NOT_FOUND", "AÑequestedÉntity isÇot found"),

312 
EXCEP_TXT
 ("AE_NOT_EXIST", "AÑequiredÉntity doesÇotÉxist"),

313 
EXCEP_TXT
 ("AE_ALREADY_EXISTS", "AnÉntityálreadyÉxists"),

314 
EXCEP_TXT
 ("AE_TYPE", "The objectÅype is incorrect"),

315 
EXCEP_TXT
 ("AE_NULL_OBJECT", "AÑequired object was missing"),

316 
EXCEP_TXT
 ("AE_NULL_ENTRY", "TheÑequested object doesÇotÉxist"),

317 
EXCEP_TXT
 ("AE_BUFFER_OVERFLOW", "The bufferÖrovided isÅoo small"),

318 
EXCEP_TXT
 ("AE_STACK_OVERFLOW", "An internal stack overflowed"),

319 
EXCEP_TXT
 ("AE_STACK_UNDERFLOW", "An internal stack underflowed"),

320 
EXCEP_TXT
 ("AE_NOT_IMPLEMENTED", "The feature isÇot implemented"),

321 
EXCEP_TXT
 ("AE_SUPPORT", "The feature isÇot supported"),

322 
EXCEP_TXT
 ("AE_LIMIT", "AÖredefinedÜimit wasÉxceeded"),

323 
EXCEP_TXT
 ("AE_TIME", "AÅimeÜimit orÅimeoutÉxpired"),

324 
EXCEP_TXT
 ("AE_ACQUIRE_DEADLOCK", "InternalÉrror,áttempt was madeÅoácquireá mutex in improper order"),

325 
EXCEP_TXT
 ("AE_RELEASE_DEADLOCK", "InternalÉrror,áttempt was madeÅoÑeleaseá mutex in improper order"),

326 
EXCEP_TXT
 ("AE_NOT_ACQUIRED", "AnáttemptÅoÑeleaseá mutex or Global Lock withoutáÖreviousácquire"),

327 
EXCEP_TXT
 ("AE_ALREADY_ACQUIRED", "InternalÉrror,áttempt was madeÅoácquireá mutexÅwice"),

328 
EXCEP_TXT
 ("AE_NO_HARDWARE_RESPONSE", "Hardware didÇotÑespondáfterán I/O operation"),

329 
EXCEP_TXT
 ("AE_NO_GLOBAL_LOCK", "There isÇo FACS Global Lock"),

330 
EXCEP_TXT
 ("AE_ABORT_METHOD", "A control method wasáborted"),

331 
EXCEP_TXT
 ("AE_SAME_HANDLER", "Attempt was madeÅo installÅhe same handlerÅhat isálready installed"),

332 
EXCEP_TXT
 ("AE_NO_HANDLER", "A handler forÅhe operation isÇot installed"),

333 
EXCEP_TXT
 ("AE_OWNER_ID_LIMIT", "ThereáreÇo more Owner IDsávailable for ACPIÅables or control methods"),

334 
EXCEP_TXT
 ("AE_NOT_CONFIGURED", "The interface isÇotÖart ofÅhe current subsystem configuration"),

335 
EXCEP_TXT
 ("AE_ACCESS", "Permission denied forÅheÑequested operation")

338 c⁄° 
ACPI_EXCEPTION_INFO
 
	gA˝iGbl_Ex˚±i⁄Names_Pgm
[] =

340 
EXCEP_TXT
 (
NULL
, NULL),

341 
EXCEP_TXT
 ("AE_BAD_PARAMETER", "AÖarameter is out ofÑange or invalid"),

342 
EXCEP_TXT
 ("AE_BAD_CHARACTER", "An invalid character was found ináÇame"),

343 
EXCEP_TXT
 ("AE_BAD_PATHNAME", "An invalid character was found ináÖathname"),

344 
EXCEP_TXT
 ("AE_BAD_DATA", "AÖackage or buffer contained incorrect data"),

345 
EXCEP_TXT
 ("AE_BAD_HEX_CONSTANT", "Invalid character iná Hex constant"),

346 
EXCEP_TXT
 ("AE_BAD_OCTAL_CONSTANT", "Invalid character inán Octal constant"),

347 
EXCEP_TXT
 ("AE_BAD_DECIMAL_CONSTANT", "Invalid character iná Decimal constant"),

348 
EXCEP_TXT
 ("AE_MISSING_ARGUMENTS", "Too fewárguments wereÖassedÅoá control method"),

349 
EXCEP_TXT
 ("AE_BAD_ADDRESS", "An illegalÇull I/Oáddress")

352 c⁄° 
ACPI_EXCEPTION_INFO
 
	gA˝iGbl_Ex˚±i⁄Names_Tbl
[] =

354 
EXCEP_TXT
 (
NULL
, NULL),

355 
EXCEP_TXT
 ("AE_BAD_SIGNATURE", "An ACPIÅable hasán invalid signature"),

356 
EXCEP_TXT
 ("AE_BAD_HEADER", "Invalid field inán ACPIÅable header"),

357 
EXCEP_TXT
 ("AE_BAD_CHECKSUM", "An ACPIÅable checksum isÇot correct"),

358 
EXCEP_TXT
 ("AE_BAD_VALUE", "An invalid value was found ináÅable"),

359 
EXCEP_TXT
 ("AE_INVALID_TABLE_LENGTH", "The FADT or FACS has improperÜength")

362 c⁄° 
ACPI_EXCEPTION_INFO
 
	gA˝iGbl_Ex˚±i⁄Names_Aml
[] =

364 
EXCEP_TXT
 (
NULL
, NULL),

365 
EXCEP_TXT
 ("AE_AML_BAD_OPCODE", "Invalid AML opcodeÉncountered"),

366 
EXCEP_TXT
 ("AE_AML_NO_OPERAND", "AÑequired operand is missing"),

367 
EXCEP_TXT
 ("AE_AML_OPERAND_TYPE", "An operand ofán incorrectÅype wasÉncountered"),

368 
EXCEP_TXT
 ("AE_AML_OPERAND_VALUE", "The operand hadán inappropriate or invalid value"),

369 
EXCEP_TXT
 ("AE_AML_UNINITIALIZED_LOCAL", "MethodÅriedÅo useán uninitializedÜocal variable"),

370 
EXCEP_TXT
 ("AE_AML_UNINITIALIZED_ARG", "MethodÅriedÅo useán uninitializedárgument"),

371 
EXCEP_TXT
 ("AE_AML_UNINITIALIZED_ELEMENT", "MethodÅriedÅo useánÉmptyÖackageÉlement"),

372 
EXCEP_TXT
 ("AE_AML_NUMERIC_OVERFLOW", "Overflow during BCD conversion or other"),

373 
EXCEP_TXT
 ("AE_AML_REGION_LIMIT", "TriedÅoáccess beyondÅheÉnd ofán Operation Region"),

374 
EXCEP_TXT
 ("AE_AML_BUFFER_LIMIT", "TriedÅoáccess beyondÅheÉnd ofá buffer"),

375 
EXCEP_TXT
 ("AE_AML_PACKAGE_LIMIT", "TriedÅoáccess beyondÅheÉnd ofáÖackage"),

376 
EXCEP_TXT
 ("AE_AML_DIVIDE_BY_ZERO", "DuringÉxecution of AML Divide operator"),

377 
EXCEP_TXT
 ("AE_AML_BAD_NAME", "An ACPIÇame contains invalid character(s)"),

378 
EXCEP_TXT
 ("AE_AML_NAME_NOT_FOUND", "CouldÇotÑesolveáÇamedÑeference"),

379 
EXCEP_TXT
 ("AE_AML_INTERNAL", "An internalÉrror withinÅhe interprete"),

380 
EXCEP_TXT
 ("AE_AML_INVALID_SPACE_ID", "An Operation Region SpaceID is invalid"),

381 
EXCEP_TXT
 ("AE_AML_STRING_LIMIT", "String isÜongerÅhan 200 characters"),

382 
EXCEP_TXT
 ("AE_AML_NO_RETURN_VALUE", "A method didÇotÑeturnáÑequired value"),

383 
EXCEP_TXT
 ("AE_AML_METHOD_LIMIT", "A control methodÑeachedÅhe maximumÑeentrancyÜimit of 255"),

384 
EXCEP_TXT
 ("AE_AML_NOT_OWNER", "AÅhreadÅriedÅoÑeleaseá mutexÅhat it doesÇot own"),

385 
EXCEP_TXT
 ("AE_AML_MUTEX_ORDER", "Mutex SyncLevelÑelease mismatch"),

386 
EXCEP_TXT
 ("AE_AML_MUTEX_NOT_ACQUIRED", "AttemptÅoÑeleaseá mutexÅhat wasÇotÖreviouslyácquired"),

387 
EXCEP_TXT
 ("AE_AML_INVALID_RESOURCE_TYPE", "InvalidÑesourceÅype inÑesourceÜist"),

388 
EXCEP_TXT
 ("AE_AML_INVALID_INDEX", "Invalid Argx or Localx (xÅooÜarge)"),

389 
EXCEP_TXT
 ("AE_AML_REGISTER_LIMIT", "Bank value or Index value beyondÑange ofÑegister"),

390 
EXCEP_TXT
 ("AE_AML_NO_WHILE", "Break or Continue withoutá While"),

391 
EXCEP_TXT
 ("AE_AML_ALIGNMENT", "Non-aligned memoryÅransfer onÖlatformÅhat doesÇot supportÅhis"),

392 
EXCEP_TXT
 ("AE_AML_NO_RESOURCE_END_TAG", "No End Tag ináÑesourceÜist"),

393 
EXCEP_TXT
 ("AE_AML_BAD_RESOURCE_VALUE", "Invalid value ofáÑesourceÉlement"),

394 
EXCEP_TXT
 ("AE_AML_CIRCULAR_REFERENCE", "TwoÑeferencesÑeferÅoÉach other"),

395 
EXCEP_TXT
 ("AE_AML_BAD_RESOURCE_LENGTH", "TheÜength ofá Resource Descriptor inÅhe AML is incorrect"),

396 
EXCEP_TXT
 ("AE_AML_ILLEGAL_ADDRESS", "A memory, I/O, or PCI configurationáddress is invalid"),

397 
EXCEP_TXT
 ("AE_AML_INFINITE_LOOP", "Anápparent infinite AML WhileÜoop, method wasáborted")

400 c⁄° 
ACPI_EXCEPTION_INFO
 
	gA˝iGbl_Ex˚±i⁄Names_Cål
[] =

402 
EXCEP_TXT
 (
NULL
, NULL),

403 
EXCEP_TXT
 ("AE_CTRL_RETURN_VALUE", "A MethodÑeturnedá value"),

404 
EXCEP_TXT
 ("AE_CTRL_PENDING", "Method is callingánother method"),

405 
EXCEP_TXT
 ("AE_CTRL_TERMINATE", "TerminateÅheÉxecuting method"),

406 
EXCEP_TXT
 ("AE_CTRL_TRUE", "An If or WhileÖredicateÑesult"),

407 
EXCEP_TXT
 ("AE_CTRL_FALSE", "An If or WhileÖredicateÑesult"),

408 
EXCEP_TXT
 ("AE_CTRL_DEPTH", "Maximum search depth has beenÑeached"),

409 
EXCEP_TXT
 ("AE_CTRL_END", "An If or WhileÖredicate is false"),

410 
EXCEP_TXT
 ("AE_CTRL_TRANSFER", "Transfer controlÅo called method"),

411 
EXCEP_TXT
 ("AE_CTRL_BREAK", "A Break has beenÉxecuted"),

412 
EXCEP_TXT
 ("AE_CTRL_CONTINUE", "A Continue has beenÉxecuted"),

413 
EXCEP_TXT
 ("AE_CTRL_SKIP", "Not currently used"),

414 
EXCEP_TXT
 ("AE_CTRL_PARSE_CONTINUE", "UsedÅo skip over bad opcodes"),

415 
EXCEP_TXT
 ("AE_CTRL_PARSE_PENDING", "UsedÅo implement AML WhileÜoops")

	@src/extern/acpica/source/include/acglobal.h

116 #i‚de‡
__ACGLOBAL_H__


117 
	#__ACGLOBAL_H__


	)

128 
ACPI_GLOBAL
 (
ACPI_TABLE_LIST
, 
A˝iGbl_RoŸTabÀLi°
);

132 
ACPI_GLOBAL
 (
ACPI_TABLE_HEADER
 *, 
A˝iGbl_DSDT
);

133 
ACPI_GLOBAL
 (
ACPI_TABLE_HEADER
, 
A˝iGbl_OrigöÆDsdtHódî
);

135 #i‡(!
ACPI_REDUCED_HARDWARE
)

136 
ACPI_GLOBAL
 (
ACPI_TABLE_FACS
 *, 
A˝iGbl_FACS
);

142 
ACPI_GLOBAL
 (
ACPI_GENERIC_ADDRESS
, 
A˝iGbl_XPm1aSètus
);

143 
ACPI_GLOBAL
 (
ACPI_GENERIC_ADDRESS
, 
A˝iGbl_XPm1aE«bÀ
);

145 
ACPI_GLOBAL
 (
ACPI_GENERIC_ADDRESS
, 
A˝iGbl_XPm1bSètus
);

146 
ACPI_GLOBAL
 (
ACPI_GENERIC_ADDRESS
, 
A˝iGbl_XPm1bE«bÀ
);

153 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_I¡egîBôWidth
);

154 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_I¡egîByãWidth
);

155 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_I¡egîNybbÀWidth
);

169 
ACPI_GLOBAL
 (
ACPI_MUTEX_INFO
, 
A˝iGbl_MuãxInfo
[
ACPI_NUM_MUTEX
]);

176 
ACPI_GLOBAL
 (
ACPI_OPERAND_OBJECT
 *, 
A˝iGbl_GlobÆLockMuãx
);

177 
ACPI_GLOBAL
 (
ACPI_SEMAPHORE
, 
A˝iGbl_GlobÆLockSem≠h‹e
);

178 
ACPI_GLOBAL
 (
ACPI_SPINLOCK
, 
A˝iGbl_GlobÆLockPídögLock
);

179 
ACPI_GLOBAL
 (
UINT16
, 
A˝iGbl_GlobÆLockH™dÀ
);

180 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_GlobÆLockAcquúed
);

181 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_GlobÆLockPª£¡
);

182 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_GlobÆLockPídög
);

188 
ACPI_GLOBAL
 (
ACPI_SPINLOCK
, 
A˝iGbl_G≥Lock
);

189 
ACPI_GLOBAL
 (
ACPI_SPINLOCK
, 
A˝iGbl_H¨dw¨eLock
);

190 
ACPI_GLOBAL
 (
ACPI_SPINLOCK
, 
A˝iGbl_Re„ªn˚Cou¡Lock
);

194 
ACPI_GLOBAL
 (
ACPI_MUTEX
, 
A˝iGbl_OsiMuãx
);

198 
ACPI_GLOBAL
 (
ACPI_RW_LOCK
, 
A˝iGbl_Name•a˚RwLock
);

209 
ACPI_GLOBAL
 (
ACPI_CACHE_T
 *, 
A˝iGbl_Name•a˚Cache
);

210 
ACPI_GLOBAL
 (
ACPI_CACHE_T
 *, 
A˝iGbl_SèãCache
);

211 
ACPI_GLOBAL
 (
ACPI_CACHE_T
 *, 
A˝iGbl_PsNodeCache
);

212 
ACPI_GLOBAL
 (
ACPI_CACHE_T
 *, 
A˝iGbl_PsNodeExtCache
);

213 
ACPI_GLOBAL
 (
ACPI_CACHE_T
 *, 
A˝iGbl_O≥øndCache
);

217 
ACPI_INIT_GLOBAL
 (
UINT32
, 
A˝iGbl_SèπupFœgs
, 0);

218 
ACPI_INIT_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_Shutdown
, 
TRUE
);

222 
ACPI_GLOBAL
 (
ACPI_GLOBAL_NOTIFY_HANDLER
,
A˝iGbl_GlobÆNŸify
[2]);

223 
ACPI_GLOBAL
 (
ACPI_EXCEPTION_HANDLER
, 
A˝iGbl_Ex˚±i⁄H™dÀr
);

224 
ACPI_GLOBAL
 (
ACPI_INIT_HANDLER
, 
A˝iGbl_InôH™dÀr
);

225 
ACPI_GLOBAL
 (
ACPI_TABLE_HANDLER
, 
A˝iGbl_TabÀH™dÀr
);

226 
ACPI_GLOBAL
 (*, 
A˝iGbl_TabÀH™dÀrC⁄ãxt
);

227 
ACPI_GLOBAL
 (
ACPI_INTERFACE_HANDLER
, 
A˝iGbl_I¡îÁ˚H™dÀr
);

228 
ACPI_GLOBAL
 (
ACPI_SCI_HANDLER_INFO
 *, 
A˝iGbl_SciH™dÀrLi°
);

232 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_Ow√rIdMask
[
ACPI_NUM_OWNERID_MASKS
]);

233 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_La°Ow√rIdIndex
);

234 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_NextOw√rIdOff£t
);

238 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_RegMëhodsExecuãd
);

242 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_OrigöÆMode
);

243 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_NsLookupCou¡
);

244 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_PsFödCou¡
);

245 
ACPI_GLOBAL
 (
UINT16
, 
A˝iGbl_Pm1E«bÀRegi°îSave
);

246 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_DebuggîC⁄figuøti⁄
);

247 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_SãpToNextCÆl
);

248 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_A˝iH¨dw¨ePª£¡
);

249 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_EvítsInôülized
);

250 
ACPI_GLOBAL
 (
ACPI_INTERFACE_INFO
 *, 
A˝iGbl_Suµ‹ãdI¡îÁ˚s
);

251 
ACPI_GLOBAL
 (
ACPI_ADDRESS_RANGE
 *, 
A˝iGbl_AddªssR™geLi°
[
ACPI_ADDRESS_RANGE_MAX
]);

255 c⁄° *
A˝iGbl_SÀïSèãNames
[
ACPI_S_STATE_COUNT
];

256 c⁄° *
A˝iGbl_Lowe°D°©eNames
[
ACPI_NUM_SxW_METHODS
];

257 c⁄° *
A˝iGbl_Highe°D°©eNames
[
ACPI_NUM_SxD_METHODS
];

258 c⁄° *
A˝iGbl_Regi⁄Ty≥s
[
ACPI_NUM_PREDEFINED_REGIONS
];

259 c⁄° 
ACPI_OPCODE_INFO
 
A˝iGbl_AmlOpInfo
[
AML_NUM_OPCODES
];

262 #ifde‡
ACPI_DBG_TRACK_ALLOCATIONS


266 
ACPI_GLOBAL
 (
ACPI_MEMORY_LIST
 *, 
A˝iGbl_GlobÆLi°
);

267 
ACPI_GLOBAL
 (
ACPI_MEMORY_LIST
 *, 
A˝iGbl_NsNodeLi°
);

268 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_Di•œyFöÆMemSèts
);

269 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_DißbÀMemTøckög
);

279 #i‡!
deföed
 (
ACPI_NO_METHOD_EXECUTION
Ë|| deföed (
ACPI_CONSTANT_EVAL_ONLY
)

280 
	#NUM_PREDEFINED_NAMES
 10

	)

282 
	#NUM_PREDEFINED_NAMES
 9

	)

285 
ACPI_GLOBAL
 (
ACPI_NAMESPACE_NODE
, 
A˝iGbl_RoŸNodeSåu˘
);

286 
ACPI_GLOBAL
 (
ACPI_NAMESPACE_NODE
 *, 
A˝iGbl_RoŸNode
);

287 
ACPI_GLOBAL
 (
ACPI_NAMESPACE_NODE
 *, 
A˝iGbl_FadtG≥Devi˚
);

288 
ACPI_GLOBAL
 (
ACPI_OPERAND_OBJECT
 *, 
A˝iGbl_ModuÀCodeLi°
);

291 c⁄° 
UINT8
 
A˝iGbl_NsPr›îtõs
 [
ACPI_NUM_NS_TYPES
];

292 c⁄° 
ACPI_PREDEFINED_NAMES
 
A˝iGbl_PªDeföedNames
 [
NUM_PREDEFINED_NAMES
];

294 #ifde‡
ACPI_DEBUG_OUTPUT


295 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_CuºítNodeCou¡
);

296 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_CuºítNodeSize
);

297 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_MaxC⁄cuºítNodeCou¡
);

298 
ACPI_GLOBAL
 (
ACPI_SIZE
 *, 
A˝iGbl_E¡rySèckPoöãr
);

299 
ACPI_GLOBAL
 (
ACPI_SIZE
 *, 
A˝iGbl_Lowe°SèckPoöãr
);

300 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_Dì≥°Ne°ög
);

301 
ACPI_INIT_GLOBAL
 (
UINT32
, 
A˝iGbl_Ne°ögLevñ
, 0);

311 
ACPI_GLOBAL
 (
ACPI_THREAD_STATE
 *, 
A˝iGbl_CuºítWÆkLi°
);

315 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_CmSögÀSãp
);

324 
ACPI_BIT_REGISTER_INFO
 
A˝iGbl_BôRegi°îInfo
[
ACPI_NUM_BITREG
];

326 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_SÀïTy≥A
);

327 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_SÀïTy≥B
);

336 #i‡(!
ACPI_REDUCED_HARDWARE
)

338 
ACPI_GLOBAL
 (
UINT8
, 
A˝iGbl_AŒG≥sInôülized
);

339 
ACPI_GLOBAL
 (
ACPI_GPE_XRUPT_INFO
 *, 
A˝iGbl_G≥Xru±Li°Hód
);

340 
ACPI_GLOBAL
 (
ACPI_GPE_BLOCK_INFO
 *, 
A˝iGbl_G≥FadtBlocks
[
ACPI_MAX_GPE_BLOCKS
]);

341 
ACPI_GLOBAL
 (
ACPI_GBL_EVENT_HANDLER
, 
A˝iGbl_GlobÆEvítH™dÀr
);

342 
ACPI_GLOBAL
 (*, 
A˝iGbl_GlobÆEvítH™dÀrC⁄ãxt
);

343 
ACPI_GLOBAL
 (
ACPI_FIXED_EVENT_HANDLER
, 
A˝iGbl_FixedEvítH™dÀrs
[
ACPI_NUM_FIXED_EVENTS
]);

345 
ACPI_FIXED_EVENT_INFO
 
A˝iGbl_FixedEvítInfo
[
ACPI_NUM_FIXED_EVENTS
];

357 
ACPI_GLOBAL
 (
UINT32
, 
A˝iMëhodCou¡
);

358 
ACPI_GLOBAL
 (
UINT32
, 
A˝iG≥Cou¡
);

359 
ACPI_GLOBAL
 (
UINT32
, 
A˝iSciCou¡
);

360 
ACPI_GLOBAL
 (
UINT32
, 
A˝iFixedEvítCou¡
[
ACPI_NUM_FIXED_EVENTS
]);

364 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_OrigöÆDbgLevñ
);

365 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_OrigöÆDbgLayî
);

366 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_Tø˚DbgLevñ
);

367 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_Tø˚DbgLayî
);

376 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_DbOuçutFœgs
, 
ACPI_DB_CONSOLE_OUTPUT
);

378 #ifde‡
ACPI_DISASSEMBLER


382 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_NoResour˚Dißs£mbly
, 
FALSE
);

383 
ACPI_INIT_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_Ign‹eNo›O≥øt‹
, 
FALSE
);

384 
ACPI_INIT_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_C°yÀDißs£mbly
, 
TRUE
);

385 
ACPI_INIT_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_F‹˚AmlDißs£mbly
, 
FALSE
);

387 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_DbO±_Dißsm
);

388 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_DbO±_Vîbo£
);

389 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_NumExã∫ÆMëhods
);

390 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_ResﬁvedExã∫ÆMëhods
);

391 
ACPI_GLOBAL
 (
ACPI_EXTERNAL_LIST
 *, 
A˝iGbl_Exã∫ÆLi°
);

392 
ACPI_GLOBAL
 (
ACPI_EXTERNAL_FILE
 *, 
A˝iGbl_Exã∫ÆFûeLi°
);

395 #ifde‡
ACPI_DEBUGGER


397 
ACPI_INIT_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_DbTîmö©eThªads
, 
FALSE
);

398 
ACPI_INIT_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_Ab‹tMëhod
, 
FALSE
);

399 
ACPI_INIT_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_MëhodExecutög
, 
FALSE
);

401 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_DbO±_NoIniMëhods
);

402 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_DbO±_NoRegi⁄Suµ‹t
);

403 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_DbOuçutToFûe
);

404 
ACPI_GLOBAL
 (*, 
A˝iGbl_DbBuf„r
);

405 
ACPI_GLOBAL
 (*, 
A˝iGbl_DbFûíame
);

406 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_DbDebugLevñ
);

407 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_DbC⁄sﬁeDebugLevñ
);

408 
ACPI_GLOBAL
 (
ACPI_NAMESPACE_NODE
 *, 
A˝iGbl_DbSc›eNode
);

410 
ACPI_GLOBAL
 (*, 
A˝iGbl_DbArgs
[
ACPI_DEBUGGER_MAX_ARGS
]);

411 
ACPI_GLOBAL
 (
ACPI_OBJECT_TYPE
, 
A˝iGbl_DbArgTy≥s
[
ACPI_DEBUGGER_MAX_ARGS
]);

415 
ACPI_GLOBAL
 (, 
A˝iGbl_DbLöeBuf
[
ACPI_DB_LINE_BUFFER_SIZE
]);

416 
ACPI_GLOBAL
 (, 
A˝iGbl_DbP¨£dBuf
[
ACPI_DB_LINE_BUFFER_SIZE
]);

417 
ACPI_GLOBAL
 (, 
A˝iGbl_DbSc›eBuf
[
ACPI_DB_LINE_BUFFER_SIZE
]);

418 
ACPI_GLOBAL
 (, 
A˝iGbl_DbDebugFûíame
[
ACPI_DB_LINE_BUFFER_SIZE
]);

423 
ACPI_GLOBAL
 (
UINT16
, 
A˝iGbl_ObjTy≥Cou¡
[
ACPI_TYPE_NS_NODE_MAX
+1]);

424 
ACPI_GLOBAL
 (
UINT16
, 
A˝iGbl_NodeTy≥Cou¡
[
ACPI_TYPE_NS_NODE_MAX
+1]);

425 
ACPI_GLOBAL
 (
UINT16
, 
A˝iGbl_ObjTy≥Cou¡Misc
);

426 
ACPI_GLOBAL
 (
UINT16
, 
A˝iGbl_NodeTy≥Cou¡Misc
);

427 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_NumNodes
);

428 
ACPI_GLOBAL
 (
UINT32
, 
A˝iGbl_NumObje˘s
);

439 #ifde‡
ACPI_APPLICATION


441 
ACPI_INIT_GLOBAL
 (
ACPI_FILE
, 
A˝iGbl_DebugFûe
, 
NULL
);

442 
ACPI_INIT_GLOBAL
 (
ACPI_FILE
, 
A˝iGbl_OuçutFûe
, 
NULL
);

446 
ACPI_GLOBAL
 (
ACPI_SPINLOCK
, 
A˝iGbl_PrötLock
);

447 
ACPI_GLOBAL
 (, 
A˝iGbl_PrötBuf„r
[1024]);

458 c⁄° 
AH_PREDEFINED_NAME
 
A¶PªdeföedInfo
[];

459 c⁄° 
AH_DEVICE_ID
 
A¶Devi˚Ids
[];

	@src/extern/acpica/source/include/achware.h

116 #i‚de‡
__ACHWARE_H__


117 
	#__ACHWARE_H__


	)

122 
	#ACPI_SST_INDICATOR_OFF
 0

	)

123 
	#ACPI_SST_WORKING
 1

	)

124 
	#ACPI_SST_WAKING
 2

	)

125 
	#ACPI_SST_SLEEPING
 3

	)

126 
	#ACPI_SST_SLEEP_CONTEXT
 4

	)

132 
ACPI_STATUS


133 
A˝iHwSëMode
 (

134 
UINT32
 
Mode
);

136 
UINT32


137 
A˝iHwGëMode
 (

144 
ACPI_STATUS


145 
A˝iHwVÆid©eRegi°î
 (

146 
ACPI_GENERIC_ADDRESS
 *
Reg
,

147 
UINT8
 
MaxBôWidth
,

148 
UINT64
 *
Addªss
);

150 
ACPI_STATUS


151 
A˝iHwRód
 (

152 
UINT32
 *
VÆue
,

153 
ACPI_GENERIC_ADDRESS
 *
Reg
);

155 
ACPI_STATUS


156 
A˝iHwWrôe
 (

157 
UINT32
 
VÆue
,

158 
ACPI_GENERIC_ADDRESS
 *
Reg
);

160 
ACPI_BIT_REGISTER_INFO
 *

161 
A˝iHwGëBôRegi°îInfo
 (

162 
UINT32
 
Regi°îId
);

164 
ACPI_STATUS


165 
A˝iHwWrôePm1C⁄åﬁ
 (

166 
UINT32
 
Pm1aC⁄åﬁ
,

167 
UINT32
 
Pm1bC⁄åﬁ
);

169 
ACPI_STATUS


170 
A˝iHwRegi°îRód
 (

171 
UINT32
 
Regi°îId
,

172 
UINT32
 *
Rëu∫VÆue
);

174 
ACPI_STATUS


175 
A˝iHwRegi°îWrôe
 (

176 
UINT32
 
Regi°îId
,

177 
UINT32
 
VÆue
);

179 
ACPI_STATUS


180 
A˝iHwCÀ¨A˝iSètus
 (

187 
ACPI_STATUS


188 
A˝iHwLegacySÀï
 (

189 
UINT8
 
SÀïSèã
);

191 
ACPI_STATUS


192 
A˝iHwLegacyWakePªp
 (

193 
UINT8
 
SÀïSèã
);

195 
ACPI_STATUS


196 
A˝iHwLegacyWake
 (

197 
UINT8
 
SÀïSèã
);

204 
A˝iHwExecuãSÀïMëhod
 (

205 *
MëhodName
,

206 
UINT32
 
I¡egîArgumít
);

208 
ACPI_STATUS


209 
A˝iHwExãndedSÀï
 (

210 
UINT8
 
SÀïSèã
);

212 
ACPI_STATUS


213 
A˝iHwExãndedWakePªp
 (

214 
UINT8
 
SÀïSèã
);

216 
ACPI_STATUS


217 
A˝iHwExãndedWake
 (

218 
UINT8
 
SÀïSèã
);

224 
ACPI_STATUS


225 
A˝iHwRódP‹t
 (

226 
ACPI_IO_ADDRESS
 
Addªss
,

227 
UINT32
 *
VÆue
,

228 
UINT32
 
Width
);

230 
ACPI_STATUS


231 
A˝iHwWrôeP‹t
 (

232 
ACPI_IO_ADDRESS
 
Addªss
,

233 
UINT32
 
VÆue
,

234 
UINT32
 
Width
);

240 
UINT32


241 
A˝iHwGëG≥Regi°îBô
 (

242 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
);

244 
ACPI_STATUS


245 
A˝iHwLowSëG≥
 (

246 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
,

247 
UINT32
 
A˘i⁄
);

249 
ACPI_STATUS


250 
A˝iHwDißbÀG≥Block
 (

251 
ACPI_GPE_XRUPT_INFO
 *
G≥Xru±Info
,

252 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
,

253 *
C⁄ãxt
);

255 
ACPI_STATUS


256 
A˝iHwCÀ¨G≥
 (

257 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
);

259 
ACPI_STATUS


260 
A˝iHwCÀ¨G≥Block
 (

261 
ACPI_GPE_XRUPT_INFO
 *
G≥Xru±Info
,

262 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
,

263 *
C⁄ãxt
);

265 
ACPI_STATUS


266 
A˝iHwGëG≥Sètus
 (

267 
ACPI_GPE_EVENT_INFO
 *
G≥EvítInfo
,

268 
ACPI_EVENT_STATUS
 *
EvítSètus
);

270 
ACPI_STATUS


271 
A˝iHwDißbÀAŒG≥s
 (

274 
ACPI_STATUS


275 
A˝iHwE«bÀAŒRu¡imeG≥s
 (

278 
ACPI_STATUS


279 
A˝iHwE«bÀAŒWakeupG≥s
 (

282 
ACPI_STATUS


283 
A˝iHwE«bÀRu¡imeG≥Block
 (

284 
ACPI_GPE_XRUPT_INFO
 *
G≥Xru±Info
,

285 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
,

286 *
C⁄ãxt
);

292 
ACPI_STATUS


293 
A˝iHwDîivePciId
 (

294 
ACPI_PCI_ID
 *
PciId
,

295 
ACPI_HANDLE
 
RoŸPciDevi˚
,

296 
ACPI_HANDLE
 
PciRegi⁄
);

	@src/extern/acpica/source/include/acinterp.h

116 #i‚de‡
__ACINTERP_H__


117 
	#__ACINTERP_H__


	)

120 
	#ACPI_WALK_OPERANDS
 (&(
WÆkSèã
->
O≥ønds
 [WÆkSèã->
NumO≥ønds
 -1]))

	)

124 
	#ACPI_EXD_OFFSET
(
f
Ë(
UINT8
Ë
	`ACPI_OFFSET
 (
ACPI_OPERAND_OBJECT
,f)

	)

125 
	#ACPI_EXD_NSOFFSET
(
f
Ë(
UINT8
Ë
	`ACPI_OFFSET
 (
ACPI_NAMESPACE_NODE
,f)

	)

126 
	#ACPI_EXD_TABLE_SIZE
(
«me
Ë(“ameË/  (
ACPI_EXDUMP_INFO
))

	)

136 #i‡(!
deföed
(
ACPI_MISALIGNMENT_NOT_SUPPORTED
Ë&& !deföed(
ACPI_PACKED_POINTERS_NOT_SUPPORTED
))

137 #¥agm®
∑ck
(1)

140 c⁄° 
	sa˝i_exdump_öfo


142 
UINT8
 
	mOpcode
;

143 
UINT8
 
	mOff£t
;

144 *
	mName
;

146 } 
	tACPI_EXDUMP_INFO
;

150 
	#ACPI_EXD_INIT
 0

	)

151 
	#ACPI_EXD_TYPE
 1

	)

152 
	#ACPI_EXD_UINT8
 2

	)

153 
	#ACPI_EXD_UINT16
 3

	)

154 
	#ACPI_EXD_UINT32
 4

	)

155 
	#ACPI_EXD_UINT64
 5

	)

156 
	#ACPI_EXD_LITERAL
 6

	)

157 
	#ACPI_EXD_POINTER
 7

	)

158 
	#ACPI_EXD_ADDRESS
 8

	)

159 
	#ACPI_EXD_STRING
 9

	)

160 
	#ACPI_EXD_BUFFER
 10

	)

161 
	#ACPI_EXD_PACKAGE
 11

	)

162 
	#ACPI_EXD_FIELD
 12

	)

163 
	#ACPI_EXD_REFERENCE
 13

	)

164 
	#ACPI_EXD_LIST
 14

	)

165 
	#ACPI_EXD_HDLR_LIST
 15

	)

166 
	#ACPI_EXD_RGN_LIST
 16

	)

167 
	#ACPI_EXD_NODE
 17

	)

171 #¥agm®
∑ck
()

177 
ACPI_STATUS


178 
A˝iExC⁄vîtToI¡egî
 (

179 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

180 
ACPI_OPERAND_OBJECT
 **
Resu…Desc
,

181 
UINT32
 
Fœgs
);

183 
ACPI_STATUS


184 
A˝iExC⁄vîtToBuf„r
 (

185 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

186 
ACPI_OPERAND_OBJECT
 **
Resu…Desc
);

188 
ACPI_STATUS


189 
A˝iExC⁄vîtToSåög
 (

190 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

191 
ACPI_OPERAND_OBJECT
 **
Resu…Desc
,

192 
UINT32
 
Ty≥
);

196 
	#ACPI_EXPLICIT_BYTE_COPY
 0x00000000

	)

197 
	#ACPI_EXPLICIT_CONVERT_HEX
 0x00000001

	)

198 
	#ACPI_IMPLICIT_CONVERT_HEX
 0x00000002

	)

199 
	#ACPI_EXPLICIT_CONVERT_DECIMAL
 0x00000003

	)

201 
ACPI_STATUS


202 
A˝iExC⁄vîtToT¨gëTy≥
 (

203 
ACPI_OBJECT_TYPE
 
De°ö©i⁄Ty≥
,

204 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

205 
ACPI_OPERAND_OBJECT
 **
Resu…Desc
,

206 
ACPI_WALK_STATE
 *
WÆkSèã
);

213 
A˝iExDoDebugObje˘
 (

214 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

215 
UINT32
 
Levñ
,

216 
UINT32
 
Index
);

222 
ACPI_STATUS


223 
A˝iExComm⁄Buf„rSëup
 (

224 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

225 
UINT32
 
Buf„rLígth
,

226 
UINT32
 *
D©umCou¡
);

228 
ACPI_STATUS


229 
A˝iExWrôeWôhUpd©eRuÀ
 (

230 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

231 
UINT64
 
Mask
,

232 
UINT64
 
FõldVÆue
,

233 
UINT32
 
FõldD©umByãOff£t
);

236 
A˝iExGëBuf„rD©um
(

237 
UINT64
 *
D©um
,

238 *
Buf„r
,

239 
UINT32
 
Buf„rLígth
,

240 
UINT32
 
ByãGønuœrôy
,

241 
UINT32
 
Buf„rOff£t
);

244 
A˝iExSëBuf„rD©um
 (

245 
UINT64
 
MîgedD©um
,

246 *
Buf„r
,

247 
UINT32
 
Buf„rLígth
,

248 
UINT32
 
ByãGønuœrôy
,

249 
UINT32
 
Buf„rOff£t
);

251 
ACPI_STATUS


252 
A˝iExRódD©aFromFõld
 (

253 
ACPI_WALK_STATE
 *
WÆkSèã
,

254 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

255 
ACPI_OPERAND_OBJECT
 **
RëBuf„rDesc
);

257 
ACPI_STATUS


258 
A˝iExWrôeD©aToFõld
 (

259 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

260 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

261 
ACPI_OPERAND_OBJECT
 **
Resu…Desc
);

267 
ACPI_STATUS


268 
A˝iExExåa˘FromFõld
 (

269 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

270 *
Buf„r
,

271 
UINT32
 
Buf„rLígth
);

273 
ACPI_STATUS


274 
A˝iExIn£πI¡oFõld
 (

275 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

276 *
Buf„r
,

277 
UINT32
 
Buf„rLígth
);

279 
ACPI_STATUS


280 
A˝iExAc˚ssRegi⁄
 (

281 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

282 
UINT32
 
FõldD©umByãOff£t
,

283 
UINT64
 *
VÆue
,

284 
UINT32
 
RódWrôe
);

290 
ACPI_STATUS


291 
A˝iExGëObje˘Re„ªn˚
 (

292 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

293 
ACPI_OPERAND_OBJECT
 **
Rëu∫Desc
,

294 
ACPI_WALK_STATE
 *
WÆkSèã
);

296 
ACPI_STATUS


297 
A˝iExC⁄ˇtTem∂©e
 (

298 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

299 
ACPI_OPERAND_OBJECT
 *
ObjDesc2
,

300 
ACPI_OPERAND_OBJECT
 **
A˘uÆRëu∫Desc
,

301 
ACPI_WALK_STATE
 *
WÆkSèã
);

303 
ACPI_STATUS


304 
A˝iExDoC⁄ˇã«ã
 (

305 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

306 
ACPI_OPERAND_OBJECT
 *
ObjDesc2
,

307 
ACPI_OPERAND_OBJECT
 **
A˘uÆRëu∫Desc
,

308 
ACPI_WALK_STATE
 *
WÆkSèã
);

310 
ACPI_STATUS


311 
A˝iExDoLogiˇlNumîicOp
 (

312 
UINT16
 
Opcode
,

313 
UINT64
 
I¡egî0
,

314 
UINT64
 
I¡egî1
,

315 
BOOLEAN
 *
LogiˇlResu…
);

317 
ACPI_STATUS


318 
A˝iExDoLogiˇlOp
 (

319 
UINT16
 
Opcode
,

320 
ACPI_OPERAND_OBJECT
 *
O≥ønd0
,

321 
ACPI_OPERAND_OBJECT
 *
O≥ønd1
,

322 
BOOLEAN
 *
LogiˇlResu…
);

324 
UINT64


325 
A˝iExDoM©hOp
 (

326 
UINT16
 
Opcode
,

327 
UINT64
 
O≥ønd0
,

328 
UINT64
 
O≥ønd1
);

330 
ACPI_STATUS


331 
A˝iExCª©eMuãx
 (

332 
ACPI_WALK_STATE
 *
WÆkSèã
);

334 
ACPI_STATUS


335 
A˝iExCª©ePro˚ss‹
 (

336 
ACPI_WALK_STATE
 *
WÆkSèã
);

338 
ACPI_STATUS


339 
A˝iExCª©ePowîResour˚
 (

340 
ACPI_WALK_STATE
 *
WÆkSèã
);

342 
ACPI_STATUS


343 
A˝iExCª©eRegi⁄
 (

344 
UINT8
 *
AmlSèπ
,

345 
UINT32
 
AmlLígth
,

346 
UINT8
 
Regi⁄S∑˚
,

347 
ACPI_WALK_STATE
 *
WÆkSèã
);

349 
ACPI_STATUS


350 
A˝iExCª©eEvít
 (

351 
ACPI_WALK_STATE
 *
WÆkSèã
);

353 
ACPI_STATUS


354 
A˝iExCª©eAlüs
 (

355 
ACPI_WALK_STATE
 *
WÆkSèã
);

357 
ACPI_STATUS


358 
A˝iExCª©eMëhod
 (

359 
UINT8
 *
AmlSèπ
,

360 
UINT32
 
AmlLígth
,

361 
ACPI_WALK_STATE
 *
WÆkSèã
);

367 
ACPI_STATUS


368 
A˝iExLﬂdOp
 (

369 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

370 
ACPI_OPERAND_OBJECT
 *
T¨gë
,

371 
ACPI_WALK_STATE
 *
WÆkSèã
);

373 
ACPI_STATUS


374 
A˝iExLﬂdTabÀOp
 (

375 
ACPI_WALK_STATE
 *
WÆkSèã
,

376 
ACPI_OPERAND_OBJECT
 **
Rëu∫Desc
);

378 
ACPI_STATUS


379 
A˝iExU∆ﬂdTabÀ
 (

380 
ACPI_OPERAND_OBJECT
 *
DdbH™dÀ
);

386 
ACPI_STATUS


387 
A˝iExAcquúeMuãx
 (

388 
ACPI_OPERAND_OBJECT
 *
TimeDesc
,

389 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

390 
ACPI_WALK_STATE
 *
WÆkSèã
);

392 
ACPI_STATUS


393 
A˝iExAcquúeMuãxObje˘
 (

394 
UINT16
 
Timeout
,

395 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

396 
ACPI_THREAD_ID
 
ThªadId
);

398 
ACPI_STATUS


399 
A˝iExRñó£Muãx
 (

400 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

401 
ACPI_WALK_STATE
 *
WÆkSèã
);

403 
ACPI_STATUS


404 
A˝iExRñó£MuãxObje˘
 (

405 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

408 
A˝iExRñó£AŒMuãxes
 (

409 
ACPI_THREAD_STATE
 *
Thªad
);

412 
A˝iExU∆ökMuãx
 (

413 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

419 
ACPI_STATUS


420 
A˝iExPªpComm⁄FõldObje˘
 (

421 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

422 
UINT8
 
FõldFœgs
,

423 
UINT8
 
FõldAâribuã
,

424 
UINT32
 
FõldBôPosôi⁄
,

425 
UINT32
 
FõldBôLígth
);

427 
ACPI_STATUS


428 
A˝iExPªpFõldVÆue
 (

429 
ACPI_CREATE_FIELD_INFO
 *
Info
);

435 
ACPI_STATUS


436 
A˝iExSy°emDoNŸifyOp
 (

437 
ACPI_OPERAND_OBJECT
 *
VÆue
,

438 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

440 
ACPI_STATUS


441 
A˝iExSy°emDoSÀï
(

442 
UINT64
 
Time
);

444 
ACPI_STATUS


445 
A˝iExSy°emDoSèŒ
 (

446 
UINT32
 
Time
);

448 
ACPI_STATUS


449 
A˝iExSy°emSig«lEvít
(

450 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

452 
ACPI_STATUS


453 
A˝iExSy°emWaôEvít
(

454 
ACPI_OPERAND_OBJECT
 *
Time
,

455 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

457 
ACPI_STATUS


458 
A˝iExSy°emRe£tEvít
(

459 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

461 
ACPI_STATUS


462 
A˝iExSy°emWaôSem≠h‹e
 (

463 
ACPI_SEMAPHORE
 
Sem≠h‹e
,

464 
UINT16
 
Timeout
);

466 
ACPI_STATUS


467 
A˝iExSy°emWaôMuãx
 (

468 
ACPI_MUTEX
 
Muãx
,

469 
UINT16
 
Timeout
);

474 
ACPI_STATUS


475 
A˝iExOpcode_0A_0T_1R
 (

476 
ACPI_WALK_STATE
 *
WÆkSèã
);

478 
ACPI_STATUS


479 
A˝iExOpcode_1A_0T_0R
 (

480 
ACPI_WALK_STATE
 *
WÆkSèã
);

482 
ACPI_STATUS


483 
A˝iExOpcode_1A_0T_1R
 (

484 
ACPI_WALK_STATE
 *
WÆkSèã
);

486 
ACPI_STATUS


487 
A˝iExOpcode_1A_1T_1R
 (

488 
ACPI_WALK_STATE
 *
WÆkSèã
);

490 
ACPI_STATUS


491 
A˝iExOpcode_1A_1T_0R
 (

492 
ACPI_WALK_STATE
 *
WÆkSèã
);

497 
ACPI_STATUS


498 
A˝iExOpcode_2A_0T_0R
 (

499 
ACPI_WALK_STATE
 *
WÆkSèã
);

501 
ACPI_STATUS


502 
A˝iExOpcode_2A_0T_1R
 (

503 
ACPI_WALK_STATE
 *
WÆkSèã
);

505 
ACPI_STATUS


506 
A˝iExOpcode_2A_1T_1R
 (

507 
ACPI_WALK_STATE
 *
WÆkSèã
);

509 
ACPI_STATUS


510 
A˝iExOpcode_2A_2T_1R
 (

511 
ACPI_WALK_STATE
 *
WÆkSèã
);

517 
ACPI_STATUS


518 
A˝iExOpcode_3A_0T_0R
 (

519 
ACPI_WALK_STATE
 *
WÆkSèã
);

521 
ACPI_STATUS


522 
A˝iExOpcode_3A_1T_1R
 (

523 
ACPI_WALK_STATE
 *
WÆkSèã
);

529 
ACPI_STATUS


530 
A˝iExOpcode_6A_0T_1R
 (

531 
ACPI_WALK_STATE
 *
WÆkSèã
);

537 
ACPI_STATUS


538 
A˝iExResﬁveToVÆue
 (

539 
ACPI_OPERAND_OBJECT
 **
SèckPå
,

540 
ACPI_WALK_STATE
 *
WÆkSèã
);

542 
ACPI_STATUS


543 
A˝iExResﬁveMu…ùÀ
 (

544 
ACPI_WALK_STATE
 *
WÆkSèã
,

545 
ACPI_OPERAND_OBJECT
 *
O≥ønd
,

546 
ACPI_OBJECT_TYPE
 *
Rëu∫Ty≥
,

547 
ACPI_OPERAND_OBJECT
 **
Rëu∫Desc
);

553 
ACPI_STATUS


554 
A˝iExResﬁveNodeToVÆue
 (

555 
ACPI_NAMESPACE_NODE
 **
SèckPå
,

556 
ACPI_WALK_STATE
 *
WÆkSèã
);

562 
ACPI_STATUS


563 
A˝iExResﬁveO≥ønds
 (

564 
UINT16
 
Opcode
,

565 
ACPI_OPERAND_OBJECT
 **
SèckPå
,

566 
ACPI_WALK_STATE
 *
WÆkSèã
);

573 
A˝iExDumpO≥ønd
 (

574 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

575 
UINT32
 
Dïth
);

578 
A˝iExDumpO≥ønds
 (

579 
ACPI_OPERAND_OBJECT
 **
O≥ønds
,

580 c⁄° *
OpcodeName
,

581 
UINT32
 
NumOpcodes
);

584 
A˝iExDumpObje˘Des¸ùt‹
 (

585 
ACPI_OPERAND_OBJECT
 *
Obje˘
,

586 
UINT32
 
Fœgs
);

589 
A˝iExDumpName•a˚Node
 (

590 
ACPI_NAMESPACE_NODE
 *
Node
,

591 
UINT32
 
Fœgs
);

597 
ACPI_STATUS


598 
A˝iExGëNameSåög
 (

599 
ACPI_OBJECT_TYPE
 
D©aTy≥
,

600 
UINT8
 *
InAmlAddªss
,

601 **
OutNameSåög
,

602 
UINT32
 *
OutNameLígth
);

608 
ACPI_STATUS


609 
A˝iExSt‹e
 (

610 
ACPI_OPERAND_OBJECT
 *
VÆDesc
,

611 
ACPI_OPERAND_OBJECT
 *
De°Desc
,

612 
ACPI_WALK_STATE
 *
WÆkSèã
);

614 
ACPI_STATUS


615 
A˝iExSt‹eObje˘ToNode
 (

616 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

617 
ACPI_NAMESPACE_NODE
 *
Node
,

618 
ACPI_WALK_STATE
 *
WÆkSèã
,

619 
UINT8
 
Im∂icôC⁄vîsi⁄
);

621 
	#ACPI_IMPLICIT_CONVERSION
 
TRUE


	)

622 
	#ACPI_NO_IMPLICIT_CONVERSION
 
FALSE


	)

628 
ACPI_STATUS


629 
A˝iExResﬁveObje˘
 (

630 
ACPI_OPERAND_OBJECT
 **
Sour˚DescPå
,

631 
ACPI_OBJECT_TYPE
 
T¨gëTy≥
,

632 
ACPI_WALK_STATE
 *
WÆkSèã
);

634 
ACPI_STATUS


635 
A˝iExSt‹eObje˘ToObje˘
 (

636 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

637 
ACPI_OPERAND_OBJECT
 *
De°Desc
,

638 
ACPI_OPERAND_OBJECT
 **
NewDesc
,

639 
ACPI_WALK_STATE
 *
WÆkSèã
);

645 
ACPI_STATUS


646 
A˝iExSt‹eBuf„rToBuf„r
 (

647 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

648 
ACPI_OPERAND_OBJECT
 *
T¨gëDesc
);

650 
ACPI_STATUS


651 
A˝iExSt‹eSåögToSåög
 (

652 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

653 
ACPI_OPERAND_OBJECT
 *
T¨gëDesc
);

659 
ACPI_STATUS


660 
A˝iExC›yI¡egîToIndexFõld
 (

661 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

662 
ACPI_OPERAND_OBJECT
 *
T¨gëDesc
);

664 
ACPI_STATUS


665 
A˝iExC›yI¡egîToB™kFõld
 (

666 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

667 
ACPI_OPERAND_OBJECT
 *
T¨gëDesc
);

669 
ACPI_STATUS


670 
A˝iExC›yD©aToNamedFõld
 (

671 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

672 
ACPI_NAMESPACE_NODE
 *
Node
);

674 
ACPI_STATUS


675 
A˝iExC›yI¡egîToBuf„rFõld
 (

676 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

677 
ACPI_OPERAND_OBJECT
 *
T¨gëDesc
);

684 
A˝iExE¡îI¡î¥ëî
 (

688 
A˝iExExôI¡î¥ëî
 (

691 
BOOLEAN


692 
A˝iExTrunˇãF‹32bôTabÀ
 (

693 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

696 
A˝iExAcquúeGlobÆLock
 (

697 
UINT32
 
RuÀ
);

700 
A˝iExRñó£GlobÆLock
 (

701 
UINT32
 
RuÀ
);

704 
A˝iExEißIdToSåög
 (

705 *
De°
,

706 
UINT64
 
Com¥es£dId
);

709 
A˝iExI¡egîToSåög
 (

710 *
De°
,

711 
UINT64
 
VÆue
);

713 
BOOLEAN


714 
A˝iIsVÆidS∑˚Id
 (

715 
UINT8
 
S∑˚Id
);

721 
ACPI_STATUS


722 
A˝iExSy°emMem‹yS∑˚H™dÀr
 (

723 
UINT32
 
Fun˘i⁄
,

724 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

725 
UINT32
 
BôWidth
,

726 
UINT64
 *
VÆue
,

727 *
H™dÀrC⁄ãxt
,

728 *
Regi⁄C⁄ãxt
);

730 
ACPI_STATUS


731 
A˝iExSy°emIoS∑˚H™dÀr
 (

732 
UINT32
 
Fun˘i⁄
,

733 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

734 
UINT32
 
BôWidth
,

735 
UINT64
 *
VÆue
,

736 *
H™dÀrC⁄ãxt
,

737 *
Regi⁄C⁄ãxt
);

739 
ACPI_STATUS


740 
A˝iExPciC⁄figS∑˚H™dÀr
 (

741 
UINT32
 
Fun˘i⁄
,

742 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

743 
UINT32
 
BôWidth
,

744 
UINT64
 *
VÆue
,

745 *
H™dÀrC⁄ãxt
,

746 *
Regi⁄C⁄ãxt
);

748 
ACPI_STATUS


749 
A˝iExCmosS∑˚H™dÀr
 (

750 
UINT32
 
Fun˘i⁄
,

751 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

752 
UINT32
 
BôWidth
,

753 
UINT64
 *
VÆue
,

754 *
H™dÀrC⁄ãxt
,

755 *
Regi⁄C⁄ãxt
);

757 
ACPI_STATUS


758 
A˝iExPciB¨S∑˚H™dÀr
 (

759 
UINT32
 
Fun˘i⁄
,

760 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

761 
UINT32
 
BôWidth
,

762 
UINT64
 *
VÆue
,

763 *
H™dÀrC⁄ãxt
,

764 *
Regi⁄C⁄ãxt
);

766 
ACPI_STATUS


767 
A˝iExEmbeddedC⁄åﬁÀrS∑˚H™dÀr
 (

768 
UINT32
 
Fun˘i⁄
,

769 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

770 
UINT32
 
BôWidth
,

771 
UINT64
 *
VÆue
,

772 *
H™dÀrC⁄ãxt
,

773 *
Regi⁄C⁄ãxt
);

775 
ACPI_STATUS


776 
A˝iExSmBusS∑˚H™dÀr
 (

777 
UINT32
 
Fun˘i⁄
,

778 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

779 
UINT32
 
BôWidth
,

780 
UINT64
 *
VÆue
,

781 *
H™dÀrC⁄ãxt
,

782 *
Regi⁄C⁄ãxt
);

785 
ACPI_STATUS


786 
A˝iExD©aTabÀS∑˚H™dÀr
 (

787 
UINT32
 
Fun˘i⁄
,

788 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

789 
UINT32
 
BôWidth
,

790 
UINT64
 *
VÆue
,

791 *
H™dÀrC⁄ãxt
,

792 *
Regi⁄C⁄ãxt
);

	@src/extern/acpica/source/include/aclocal.h

116 #i‚de‡
__ACLOCAL_H__


117 
	#__ACLOCAL_H__


	)

122 
	#ACPI_SERIALIZED
 0xFF

	)

124 
UINT32
 
	tACPI_MUTEX_HANDLE
;

125 
	#ACPI_GLOBAL_LOCK
 (
ACPI_SEMAPHORE
Ë(-1)

	)

129 
	#AML_NUM_OPCODES
 0x82

	)

134 
	ga˝i_wÆk_°©e
;

135 
	ga˝i_obj_muãx
;

136 
	ga˝i_∑r£_obje˘
;

156 
	#ACPI_MTX_INTERPRETER
 0

	)

157 
	#ACPI_MTX_NAMESPACE
 1

	)

158 
	#ACPI_MTX_TABLES
 2

	)

159 
	#ACPI_MTX_EVENTS
 3

	)

160 
	#ACPI_MTX_CACHES
 4

	)

161 
	#ACPI_MTX_MEMORY
 5

	)

162 
	#ACPI_MTX_DEBUG_CMD_COMPLETE
 6

	)

163 
	#ACPI_MTX_DEBUG_CMD_READY
 7

	)

165 
	#ACPI_MAX_MUTEX
 7

	)

166 
	#ACPI_NUM_MUTEX
 
ACPI_MAX_MUTEX
+1

	)

171 
	sa˝i_rw_lock


173 
ACPI_MUTEX
 
	mWrôîMuãx
;

174 
ACPI_MUTEX
 
	mRódîMuãx
;

175 
UINT32
 
	mNumRódîs
;

177 } 
	tACPI_RW_LOCK
;

184 
	#ACPI_LOCK_GPES
 0

	)

185 
	#ACPI_LOCK_HARDWARE
 1

	)

187 
	#ACPI_MAX_LOCK
 1

	)

188 
	#ACPI_NUM_LOCK
 
ACPI_MAX_LOCK
+1

	)

193 
	#ACPI_MUTEX_NOT_ACQUIRED
 (
ACPI_THREAD_ID
Ë-1

	)

197 
	sa˝i_muãx_öfo


199 
ACPI_MUTEX
 
	mMuãx
;

200 
UINT32
 
	mU£Cou¡
;

201 
ACPI_THREAD_ID
 
	mThªadId
;

203 } 
	tACPI_MUTEX_INFO
;

208 
	#ACPI_MTX_DO_NOT_LOCK
 0

	)

209 
	#ACPI_MTX_LOCK
 1

	)

214 
	#ACPI_FIELD_BYTE_GRANULARITY
 1

	)

215 
	#ACPI_FIELD_WORD_GRANULARITY
 2

	)

216 
	#ACPI_FIELD_DWORD_GRANULARITY
 4

	)

217 
	#ACPI_FIELD_QWORD_GRANULARITY
 8

	)

220 
	#ACPI_ENTRY_NOT_FOUND
 
NULL


	)

233 
	mACPI_IMODE_LOAD_PASS1
 = 0x01,

234 
	mACPI_IMODE_LOAD_PASS2
 = 0x02,

235 
	mACPI_IMODE_EXECUTE
 = 0x03

237 } 
	tACPI_INTERPRETER_MODE
;

251 
	sa˝i_«me•a˚_node


253 
a˝i_›î™d_obje˘
 *
	mObje˘
;

254 
UINT8
 
	mDes¸ùt‹Ty≥
;

255 
UINT8
 
	mTy≥
;

256 
UINT8
 
	mFœgs
;

257 
ACPI_OWNER_ID
 
	mOw√rId
;

258 
ACPI_NAME_UNION
 
	mName
;

259 
a˝i_«me•a˚_node
 *
	mP¨ít
;

260 
a˝i_«me•a˚_node
 *
	mChûd
;

261 
a˝i_«me•a˚_node
 *
	mPìr
;

266 #ifde‡
ACPI_LARGE_NAMESPACE_NODE


267 
a˝i_∑r£_obje˘
 *
	mOp
;

268 
UINT32
 
	mVÆue
;

269 
UINT32
 
	mLígth
;

272 } 
	tACPI_NAMESPACE_NODE
;

277 
	#ANOBJ_RESERVED
 0x01

	)

278 
	#ANOBJ_TEMPORARY
 0x02

	)

279 
	#ANOBJ_METHOD_ARG
 0x04

	)

280 
	#ANOBJ_METHOD_LOCAL
 0x08

	)

281 
	#ANOBJ_SUBTREE_HAS_INI
 0x10

	)

282 
	#ANOBJ_EVALUATED
 0x20

	)

283 
	#ANOBJ_ALLOCATED_BUFFER
 0x40

	)

285 
	#ANOBJ_IS_EXTERNAL
 0x08

	)

286 
	#ANOBJ_METHOD_NO_RETVAL
 0x10

	)

287 
	#ANOBJ_METHOD_SOME_NO_RETVAL
 0x20

	)

288 
	#ANOBJ_IS_REFERENCED
 0x80

	)

293 
	sa˝i_èbÀ_li°


295 
ACPI_TABLE_DESC
 *
	mTabÀs
;

296 
UINT32
 
	mCuºítTabÀCou¡
;

297 
UINT32
 
	mMaxTabÀCou¡
;

298 
UINT8
 
	mFœgs
;

300 } 
	tACPI_TABLE_LIST
;

304 
	#ACPI_ROOT_ORIGIN_UNKNOWN
 (0Ë

	)

305 
	#ACPI_ROOT_ORIGIN_ALLOCATED
 (1)

	)

306 
	#ACPI_ROOT_ALLOW_RESIZE
 (2)

	)

311 
	#ACPI_TABLE_INDEX_DSDT
 (0)

	)

312 
	#ACPI_TABLE_INDEX_FACS
 (1)

	)

315 
	sa˝i_föd_c⁄ãxt


317 *
	mSórchF‹
;

318 
ACPI_HANDLE
 *
	mLi°
;

319 
UINT32
 *
	mCou¡
;

321 } 
	tACPI_FIND_CONTEXT
;

324 
	sa˝i_ns_£¨ch_d©a


326 
ACPI_NAMESPACE_NODE
 *
	mNode
;

328 } 
	tACPI_NS_SEARCH_DATA
;

333 
	#ACPI_COPY_TYPE_SIMPLE
 0

	)

334 
	#ACPI_COPY_TYPE_PACKAGE
 1

	)

339 
	sa˝i_«me°rög_öfo


341 c⁄° *
	mExã∫ÆName
;

342 c⁄° *
	mNextExã∫ÆCh¨
;

343 *
	mI¡î«lName
;

344 
UINT32
 
	mLígth
;

345 
UINT32
 
	mNumSegmíts
;

346 
UINT32
 
	mNumC¨©s
;

347 
BOOLEAN
 
	mFuŒyQuÆifõd
;

349 } 
	tACPI_NAMESTRING_INFO
;

354 
	sa˝i_¸óã_fõld_öfo


356 
ACPI_NAMESPACE_NODE
 *
	mRegi⁄Node
;

357 
ACPI_NAMESPACE_NODE
 *
	mFõldNode
;

358 
ACPI_NAMESPACE_NODE
 *
	mRegi°îNode
;

359 
ACPI_NAMESPACE_NODE
 *
	mD©aRegi°îNode
;

360 
ACPI_NAMESPACE_NODE
 *
	mC⁄√˘i⁄Node
;

361 
UINT8
 *
	mResour˚Buf„r
;

362 
UINT32
 
	mB™kVÆue
;

363 
UINT32
 
	mFõldBôPosôi⁄
;

364 
UINT32
 
	mFõldBôLígth
;

365 
UINT16
 
	mResour˚Lígth
;

366 
UINT16
 
	mPöNumbîIndex
;

367 
UINT8
 
	mFõldFœgs
;

368 
UINT8
 
	mAâribuã
;

369 
UINT8
 
	mFõldTy≥
;

370 
UINT8
 
	mAc˚ssLígth
;

372 } 
	tACPI_CREATE_FIELD_INFO
;

376 
	$ACPI_STATUS
 (*
	tACPI_INTERNAL_METHOD
) (

377 
	ta˝i_wÆk_°©e
 *
	tWÆkSèã
);

383 
	#ACPI_BTYPE_ANY
 0x00000000

	)

384 
	#ACPI_BTYPE_INTEGER
 0x00000001

	)

385 
	#ACPI_BTYPE_STRING
 0x00000002

	)

386 
	#ACPI_BTYPE_BUFFER
 0x00000004

	)

387 
	#ACPI_BTYPE_PACKAGE
 0x00000008

	)

388 
	#ACPI_BTYPE_FIELD_UNIT
 0x00000010

	)

389 
	#ACPI_BTYPE_DEVICE
 0x00000020

	)

390 
	#ACPI_BTYPE_EVENT
 0x00000040

	)

391 
	#ACPI_BTYPE_METHOD
 0x00000080

	)

392 
	#ACPI_BTYPE_MUTEX
 0x00000100

	)

393 
	#ACPI_BTYPE_REGION
 0x00000200

	)

394 
	#ACPI_BTYPE_POWER
 0x00000400

	)

395 
	#ACPI_BTYPE_PROCESSOR
 0x00000800

	)

396 
	#ACPI_BTYPE_THERMAL
 0x00001000

	)

397 
	#ACPI_BTYPE_BUFFER_FIELD
 0x00002000

	)

398 
	#ACPI_BTYPE_DDB_HANDLE
 0x00004000

	)

399 
	#ACPI_BTYPE_DEBUG_OBJECT
 0x00008000

	)

400 
	#ACPI_BTYPE_REFERENCE
 0x00010000

	)

401 
	#ACPI_BTYPE_RESOURCE
 0x00020000

	)

403 
	#ACPI_BTYPE_COMPUTE_DATA
 (
ACPI_BTYPE_INTEGER
 | 
ACPI_BTYPE_STRING
 | 
ACPI_BTYPE_BUFFER
)

	)

405 
	#ACPI_BTYPE_DATA
 (
ACPI_BTYPE_COMPUTE_DATA
 | 
ACPI_BTYPE_PACKAGE
)

	)

406 
	#ACPI_BTYPE_DATA_REFERENCE
 (
ACPI_BTYPE_DATA
 | 
ACPI_BTYPE_REFERENCE
 | 
ACPI_BTYPE_DDB_HANDLE
)

	)

407 
	#ACPI_BTYPE_DEVICE_OBJECTS
 (
ACPI_BTYPE_DEVICE
 | 
ACPI_BTYPE_THERMAL
 | 
ACPI_BTYPE_PROCESSOR
)

	)

408 
	#ACPI_BTYPE_OBJECTS_AND_REFS
 0x0001FFFF

	)

409 
	#ACPI_BTYPE_ALL_OBJECTS
 0x0000FFFF

	)

411 #¥agm®
	`∑ck
(1)

421 
	sa˝i_«me_öfo


423 
Name
[
ACPI_NAME_SIZE
];

424 
UINT16
 
ArgumítLi°
;

425 
UINT8
 
Ex≥˘edBty≥s
;

427 } 
	tACPI_NAME_INFO
;

442 
	sa˝i_∑ckage_öfo


444 
UINT8
 
Ty≥
;

445 
UINT8
 
Obje˘Ty≥1
;

446 
UINT8
 
Cou¡1
;

447 
UINT8
 
Obje˘Ty≥2
;

448 
UINT8
 
Cou¡2
;

449 
UINT16
 
Re£rved
;

451 } 
	tACPI_PACKAGE_INFO
;

455 
	sa˝i_∑ckage_öfo2


457 
UINT8
 
Ty≥
;

458 
UINT8
 
Cou¡
;

459 
UINT8
 
Obje˘Ty≥
[4];

460 
UINT8
 
Re£rved
;

462 } 
	tACPI_PACKAGE_INFO2
;

466 
	sa˝i_∑ckage_öfo3


468 
UINT8
 
Ty≥
;

469 
UINT8
 
Cou¡
;

470 
UINT8
 
Obje˘Ty≥
[2];

471 
UINT8
 
TaûObje˘Ty≥
;

472 
UINT16
 
Re£rved
;

474 } 
	tACPI_PACKAGE_INFO3
;

476 
	ua˝i_¥edeföed_öfo


478 
ACPI_NAME_INFO
 
Info
;

479 
ACPI_PACKAGE_INFO
 
RëInfo
;

480 
ACPI_PACKAGE_INFO2
 
RëInfo2
;

481 
ACPI_PACKAGE_INFO3
 
RëInfo3
;

483 } 
	tACPI_PREDEFINED_INFO
;

487 #¥agm®
	`∑ck
()

492 
	$ACPI_STATUS
 (*
	tACPI_OBJECT_CONVERTER
) (

493 
	ta˝i_›î™d_obje˘
 *
	tOrigöÆObje˘
,

494 
	ta˝i_›î™d_obje˘
 **
	tC⁄vîãdObje˘
);

496 
	sa˝i_sim∂e_ª∑ú_öfo


498 
Name
[
ACPI_NAME_SIZE
];

499 
UINT32
 
U√x≥˘edBty≥s
;

500 
UINT32
 
PackageIndex
;

501 
ACPI_OBJECT_CONVERTER
 
Obje˘C⁄vîãr
;

503 } 
	tACPI_SIMPLE_REPAIR_INFO
;

511 
	#ACPI_RTYPE_ANY
 0x00

	)

512 
	#ACPI_RTYPE_NONE
 0x01

	)

513 
	#ACPI_RTYPE_INTEGER
 0x02

	)

514 
	#ACPI_RTYPE_STRING
 0x04

	)

515 
	#ACPI_RTYPE_BUFFER
 0x08

	)

516 
	#ACPI_RTYPE_PACKAGE
 0x10

	)

517 
	#ACPI_RTYPE_REFERENCE
 0x20

	)

518 
	#ACPI_RTYPE_ALL
 0x3F

	)

520 
	#ACPI_NUM_RTYPES
 5

	)

531 
	sa˝i_sci_h™dÀr_öfo


533 
a˝i_sci_h™dÀr_öfo
 *
Next
;

534 
ACPI_SCI_HANDLER
 
Addªss
;

535 *
C⁄ãxt
;

537 } 
	tACPI_SCI_HANDLER_INFO
;

541 
	sa˝i_g≥_h™dÀr_öfo


543 
ACPI_GPE_HANDLER
 
Addªss
;

544 *
C⁄ãxt
;

545 
ACPI_NAMESPACE_NODE
 *
MëhodNode
;

546 
UINT8
 
OrigöÆFœgs
;

547 
BOOLEAN
 
OrigöÆlyE«bÀd
;

549 } 
	tACPI_GPE_HANDLER_INFO
;

553 
	sa˝i_g≥_nŸify_öfo


555 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
;

556 
a˝i_g≥_nŸify_öfo
 *
Next
;

558 } 
	tACPI_GPE_NOTIFY_INFO
;

564 
	ua˝i_g≥_di•©ch_öfo


566 
ACPI_NAMESPACE_NODE
 *
MëhodNode
;

567 
ACPI_GPE_HANDLER_INFO
 *
H™dÀr
;

568 
ACPI_GPE_NOTIFY_INFO
 *
NŸifyLi°
;

570 } 
	tACPI_GPE_DISPATCH_INFO
;

576 
	sa˝i_g≥_evít_öfo


578 
a˝i_g≥_di•©ch_öfo
 
Di•©ch
;

579 
a˝i_g≥_ªgi°î_öfo
 *
Regi°îInfo
;

580 
UINT8
 
Fœgs
;

581 
UINT8
 
G≥Numbî
;

582 
UINT8
 
Ru¡imeCou¡
;

584 } 
	tACPI_GPE_EVENT_INFO
;

588 
	sa˝i_g≥_ªgi°î_öfo


590 
ACPI_GENERIC_ADDRESS
 
SètusAddªss
;

591 
ACPI_GENERIC_ADDRESS
 
E«bÀAddªss
;

592 
UINT16
 
Ba£G≥Numbî
;

593 
UINT8
 
E«bÀF‹Wake
;

594 
UINT8
 
E«bÀF‹Run
;

595 
UINT8
 
E«bÀMask
;

597 } 
	tACPI_GPE_REGISTER_INFO
;

603 
	sa˝i_g≥_block_öfo


605 
ACPI_NAMESPACE_NODE
 *
Node
;

606 
a˝i_g≥_block_öfo
 *
Pªvious
;

607 
a˝i_g≥_block_öfo
 *
Next
;

608 
a˝i_g≥_xru±_öfo
 *
Xru±Block
;

609 
ACPI_GPE_REGISTER_INFO
 *
Regi°îInfo
;

610 
ACPI_GPE_EVENT_INFO
 *
EvítInfo
;

611 
UINT64
 
Addªss
;

612 
UINT32
 
Regi°îCou¡
;

613 
UINT16
 
G≥Cou¡
;

614 
UINT16
 
BlockBa£Numbî
;

615 
UINT8
 
S∑˚Id
;

616 
BOOLEAN
 
Inôülized
;

618 } 
	tACPI_GPE_BLOCK_INFO
;

622 
	sa˝i_g≥_xru±_öfo


624 
a˝i_g≥_xru±_öfo
 *
Pªvious
;

625 
a˝i_g≥_xru±_öfo
 *
Next
;

626 
ACPI_GPE_BLOCK_INFO
 *
G≥BlockLi°Hód
;

627 
UINT32
 
I¡îru±Numbî
;

629 } 
	tACPI_GPE_XRUPT_INFO
;

631 
	sa˝i_g≥_wÆk_öfo


633 
ACPI_NAMESPACE_NODE
 *
G≥Devi˚
;

634 
ACPI_GPE_BLOCK_INFO
 *
G≥Block
;

635 
UINT16
 
Cou¡
;

636 
ACPI_OWNER_ID
 
Ow√rId
;

637 
BOOLEAN
 
ExecuãByOw√rId
;

639 } 
	tACPI_GPE_WALK_INFO
;

641 
	sa˝i_g≥_devi˚_öfo


643 
UINT32
 
Index
;

644 
UINT32
 
NextBlockBa£Index
;

645 
ACPI_STATUS
 
Sètus
;

646 
ACPI_NAMESPACE_NODE
 *
G≥Devi˚
;

648 } 
	tACPI_GPE_DEVICE_INFO
;

650 
	$ACPI_STATUS
 (*
	tACPI_GPE_CALLBACK
) (

651 
	tACPI_GPE_XRUPT_INFO
 *
	tG≥Xru±Info
,

652 
	tACPI_GPE_BLOCK_INFO
 *
	tG≥Block
,

653 *
	tC⁄ãxt
);

658 
	sa˝i_fixed_evít_h™dÀr


660 
ACPI_EVENT_HANDLER
 
H™dÀr
;

661 *
C⁄ãxt
;

663 } 
	tACPI_FIXED_EVENT_HANDLER
;

665 
	sa˝i_fixed_evít_öfo


667 
UINT8
 
SètusRegi°îId
;

668 
UINT8
 
E«bÀRegi°îId
;

669 
UINT16
 
SètusBôMask
;

670 
UINT16
 
E«bÀBôMask
;

672 } 
	tACPI_FIXED_EVENT_INFO
;

676 
	sa˝i_fõld_öfo


678 
UINT8
 
SkùFõld
;

679 
UINT8
 
FõldFœg
;

680 
UINT32
 
PkgLígth
;

682 } 
	tACPI_FIELD_INFO
;

691 
	#ACPI_CONTROL_NORMAL
 0xC0

	)

692 
	#ACPI_CONTROL_CONDITIONAL_EXECUTING
 0xC1

	)

693 
	#ACPI_CONTROL_PREDICATE_EXECUTING
 0xC2

	)

694 
	#ACPI_CONTROL_PREDICATE_FALSE
 0xC3

	)

695 
	#ACPI_CONTROL_PREDICATE_TRUE
 0xC4

	)

698 
	#ACPI_STATE_COMMON
 \

699 *
Next
; \

700 
UINT8
 
Des¸ùt‹Ty≥
; \

701 
UINT8
 
Fœgs
; \

702 
UINT16
 
VÆue
; \

703 
UINT16
 
Sèã
;

	)

707 
	sa˝i_comm⁄_°©e


709 
ACPI_STATE_COMMON


710 } 
	tACPI_COMMON_STATE
;

716 
	sa˝i_upd©e_°©e


718 
ACPI_STATE_COMMON


719 
a˝i_›î™d_obje˘
 *
Obje˘
;

721 } 
	tACPI_UPDATE_STATE
;

727 
	sa˝i_pkg_°©e


729 
ACPI_STATE_COMMON


730 
UINT16
 
Index
;

731 
a˝i_›î™d_obje˘
 *
Sour˚Obje˘
;

732 
a˝i_›î™d_obje˘
 *
De°Obje˘
;

733 
a˝i_wÆk_°©e
 *
WÆkSèã
;

734 *
ThisT¨gëObj
;

735 
UINT32
 
NumPackages
;

737 } 
	tACPI_PKG_STATE
;

744 
	sa˝i_c⁄åﬁ_°©e


746 
ACPI_STATE_COMMON


747 
UINT16
 
Opcode
;

748 
a˝i_∑r£_obje˘
 *
PªdiˇãOp
;

749 
UINT8
 *
AmlPªdiˇãSèπ
;

750 
UINT8
 *
PackageEnd
;

751 
UINT32
 
Lo›Cou¡
;

753 } 
	tACPI_CONTROL_STATE
;

759 
	sa˝i_sc›e_°©e


761 
ACPI_STATE_COMMON


762 
ACPI_NAMESPACE_NODE
 *
Node
;

764 } 
	tACPI_SCOPE_STATE
;

767 
	sa˝i_psc›e_°©e


769 
ACPI_STATE_COMMON


770 
UINT32
 
ArgCou¡
;

771 
a˝i_∑r£_obje˘
 *
Op
;

772 
UINT8
 *
ArgEnd
;

773 
UINT8
 *
PkgEnd
;

774 
UINT32
 
ArgLi°
;

776 } 
	tACPI_PSCOPE_STATE
;

783 
	sa˝i_thªad_°©e


785 
ACPI_STATE_COMMON


786 
UINT8
 
CuºítSyncLevñ
;

787 
a˝i_wÆk_°©e
 *
WÆkSèãLi°
;

788 
a˝i_›î™d_obje˘
 *
AcquúedMuãxLi°
;

789 
ACPI_THREAD_ID
 
ThªadId
;

791 } 
	tACPI_THREAD_STATE
;

798 
	sa˝i_ªsu…_vÆues


800 
ACPI_STATE_COMMON


801 
a˝i_›î™d_obje˘
 *
ObjDesc
 [
ACPI_RESULTS_FRAME_OBJ_NUM
];

803 } 
	tACPI_RESULT_VALUES
;

807 
	$ACPI_STATUS
 (*
	tACPI_PARSE_DOWNWARDS
) (

808 
	ta˝i_wÆk_°©e
 *
	tWÆkSèã
,

809 
	ta˝i_∑r£_obje˘
 **
	tOutOp
);

812 
	$ACPI_STATUS
 (*
	tACPI_PARSE_UPWARDS
) (

813 
	ta˝i_wÆk_°©e
 *
	tWÆkSèã
);

818 
	sa˝i_globÆ_nŸify_h™dÀr


820 
ACPI_NOTIFY_HANDLER
 
H™dÀr
;

821 *
C⁄ãxt
;

823 } 
	tACPI_GLOBAL_NOTIFY_HANDLER
;

829 
	sa˝i_nŸify_öfo


831 
ACPI_STATE_COMMON


832 
UINT8
 
H™dÀrLi°Id
;

833 
ACPI_NAMESPACE_NODE
 *
Node
;

834 
a˝i_›î™d_obje˘
 *
H™dÀrLi°Hód
;

835 
ACPI_GLOBAL_NOTIFY_HANDLER
 *
GlobÆ
;

837 } 
	tACPI_NOTIFY_INFO
;

842 
	ua˝i_gíîic_°©e


844 
ACPI_COMMON_STATE
 
Comm⁄
;

845 
ACPI_CONTROL_STATE
 
C⁄åﬁ
;

846 
ACPI_UPDATE_STATE
 
Upd©e
;

847 
ACPI_SCOPE_STATE
 
Sc›e
;

848 
ACPI_PSCOPE_STATE
 
P¨£Sc›e
;

849 
ACPI_PKG_STATE
 
Pkg
;

850 
ACPI_THREAD_STATE
 
Thªad
;

851 
ACPI_RESULT_VALUES
 
Resu…s
;

852 
ACPI_NOTIFY_INFO
 
NŸify
;

854 } 
	tACPI_GENERIC_STATE
;

864 
	$ACPI_STATUS
 (*
	tACPI_EXECUTE_OP
) (

865 
	ta˝i_wÆk_°©e
 *
	tWÆkSèã
);

869 
	sa˝i_addªss_ønge


871 
a˝i_addªss_ønge
 *
Next
;

872 
ACPI_NAMESPACE_NODE
 *
Regi⁄Node
;

873 
ACPI_PHYSICAL_ADDRESS
 
SèπAddªss
;

874 
ACPI_PHYSICAL_ADDRESS
 
EndAddªss
;

876 } 
	tACPI_ADDRESS_RANGE
;

888 
	sa˝i_›code_öfo


890 #i‡
	`deföed
(
ACPI_DISASSEMBLER
Ë|| deföed(
ACPI_DEBUG_OUTPUT
)

891 *
Name
;

893 
UINT32
 
P¨£Args
;

894 
UINT32
 
Ru¡imeArgs
;

895 
UINT16
 
Fœgs
;

896 
UINT8
 
Obje˘Ty≥
;

897 
UINT8
 
Cœss
;

898 
UINT8
 
Ty≥
;

900 } 
	tACPI_OPCODE_INFO
;

904 
	sa˝i_èg_öfo


906 
UINT32
 
BôOff£t
;

907 
UINT32
 
BôLígth
;

909 } 
	tACPI_TAG_INFO
;

913 
	ua˝i_∑r£_vÆue


915 
UINT64
 
I¡egî
;

916 
UINT32
 
Size
;

917 *
Såög
;

918 
UINT8
 *
Buf„r
;

919 *
Name
;

920 
a˝i_∑r£_obje˘
 *
Arg
;

921 
ACPI_TAG_INFO
 
Tag
;

923 } 
	tACPI_PARSE_VALUE
;

926 #ifde‡
ACPI_DISASSEMBLER


927 
	#ACPI_DISASM_ONLY_MEMBERS
(
a
Ëa;

	)

929 
	#ACPI_DISASM_ONLY_MEMBERS
(
a
)

	)

932 
	#ACPI_PARSE_COMMON
 \

933 
a˝i_∑r£_obje˘
 *
P¨ít
; \

934 
UINT8
 
Des¸ùt‹Ty≥
; \

935 
UINT8
 
Fœgs
; \

936 
UINT16
 
AmlOpcode
; \

937 
UINT32
 
AmlOff£t
; \

938 
a˝i_∑r£_obje˘
 *
Next
; \

939 
ACPI_NAMESPACE_NODE
 *
Node
; \

940 
ACPI_PARSE_VALUE
 
VÆue
; \

941 
UINT8
 
ArgLi°Lígth
; \

942 
	`ACPI_DISASM_ONLY_MEMBERS
 (\

943 
UINT8
 
DißsmFœgs
; \

944 
UINT8
 
DißsmOpcode
; \

945 *
O≥øt‹Symbﬁ
; \

946 
AmlOpName
[16]Ë

	)

951 
	#ACPI_DASM_BUFFER
 0x00

	)

952 
	#ACPI_DASM_RESOURCE
 0x01

	)

953 
	#ACPI_DASM_STRING
 0x02

	)

954 
	#ACPI_DASM_UNICODE
 0x03

	)

955 
	#ACPI_DASM_PLD_METHOD
 0x04

	)

956 
	#ACPI_DASM_UUID
 0x05

	)

957 
	#ACPI_DASM_EISAID
 0x06

	)

958 
	#ACPI_DASM_MATCHOP
 0x07

	)

959 
	#ACPI_DASM_LNOT_PREFIX
 0x08

	)

960 
	#ACPI_DASM_LNOT_SUFFIX
 0x09

	)

961 
	#ACPI_DASM_HID_STRING
 0x0A

	)

962 
	#ACPI_DASM_IGNORE
 0x0B

	)

967 
	sa˝i_∑r£_obj_comm⁄


969 
ACPI_PARSE_COMMON


970 } 
	tACPI_PARSE_OBJ_COMMON
;

977 
	sa˝i_∑r£_obj_«med


979 
ACPI_PARSE_COMMON


980 
UINT8
 *
P©h
;

981 
UINT8
 *
D©a
;

982 
UINT32
 
Lígth
;

983 
UINT32
 
Name
;

985 } 
	tACPI_PARSE_OBJ_NAMED
;

990 
	#ACPI_MAX_PARSEOP_NAME
 20

	)

992 
	sa˝i_∑r£_obj_a¶


994 
ACPI_PARSE_COMMON


995 
a˝i_∑r£_obje˘
 *
Chûd
;

996 
a˝i_∑r£_obje˘
 *
P¨ítMëhod
;

997 *
Fûíame
;

998 *
Exã∫ÆName
;

999 *
Namï©h
;

1000 
NameSeg
[4];

1001 
UINT32
 
ExåaVÆue
;

1002 
UINT32
 
Cﬁumn
;

1003 
UINT32
 
LöeNumbî
;

1004 
UINT32
 
LogiˇlLöeNumbî
;

1005 
UINT32
 
LogiˇlByãOff£t
;

1006 
UINT32
 
EndLöe
;

1007 
UINT32
 
EndLogiˇlLöe
;

1008 
UINT32
 
A˝iBty≥
;

1009 
UINT32
 
AmlLígth
;

1010 
UINT32
 
AmlSubåìLígth
;

1011 
UINT32
 
FöÆAmlLígth
;

1012 
UINT32
 
FöÆAmlOff£t
;

1013 
UINT32
 
CompûeFœgs
;

1014 
UINT16
 
P¨£Opcode
;

1015 
UINT8
 
AmlOpcodeLígth
;

1016 
UINT8
 
AmlPkgLíByãs
;

1017 
UINT8
 
Exåa
;

1018 
P¨£OpName
[
ACPI_MAX_PARSEOP_NAME
];

1020 } 
	tACPI_PARSE_OBJ_ASL
;

1022 
	ua˝i_∑r£_obje˘


1024 
ACPI_PARSE_OBJ_COMMON
 
Comm⁄
;

1025 
ACPI_PARSE_OBJ_NAMED
 
Named
;

1026 
ACPI_PARSE_OBJ_ASL
 
A¶
;

1028 } 
	tACPI_PARSE_OBJECT
;

1035 
	sa˝i_∑r£_°©e


1037 
UINT8
 *
AmlSèπ
;

1038 
UINT8
 *
Aml
;

1039 
UINT8
 *
AmlEnd
;

1040 
UINT8
 *
PkgSèπ
;

1041 
UINT8
 *
PkgEnd
;

1042 
a˝i_∑r£_obje˘
 *
SèπOp
;

1043 
a˝i_«me•a˚_node
 *
SèπNode
;

1044 
a˝i_gíîic_°©e
 *
Sc›e
;

1045 
a˝i_∑r£_obje˘
 *
SèπSc›e
;

1046 
UINT32
 
AmlSize
;

1048 } 
	tACPI_PARSE_STATE
;

1053 
	#ACPI_PARSEOP_GENERIC
 0x01

	)

1054 
	#ACPI_PARSEOP_NAMED
 0x02

	)

1055 
	#ACPI_PARSEOP_DEFERRED
 0x04

	)

1056 
	#ACPI_PARSEOP_BYTELIST
 0x08

	)

1057 
	#ACPI_PARSEOP_IN_STACK
 0x10

	)

1058 
	#ACPI_PARSEOP_TARGET
 0x20

	)

1059 
	#ACPI_PARSEOP_IN_CACHE
 0x80

	)

1063 
	#ACPI_PARSEOP_IGNORE
 0x01

	)

1064 
	#ACPI_PARSEOP_PARAMLIST
 0x02

	)

1065 
	#ACPI_PARSEOP_EMPTY_TERMLIST
 0x04

	)

1066 
	#ACPI_PARSEOP_PREDEF_CHECKED
 0x08

	)

1067 
	#ACPI_PARSEOP_SPECIAL
 0x10

	)

1068 
	#ACPI_PARSEOP_COMPOUND
 0x20

	)

1069 
	#ACPI_PARSEOP_ASSIGNMENT
 0x40

	)

1078 
	sa˝i_bô_ªgi°î_öfo


1080 
UINT8
 
P¨ítRegi°î
;

1081 
UINT8
 
BôPosôi⁄
;

1082 
UINT16
 
Ac˚ssBôMask
;

1084 } 
	tACPI_BIT_REGISTER_INFO
;

1091 
	#ACPI_PM1_STATUS_PRESERVED_BITS
 0x0800

	)

1095 
	#ACPI_PM1_CONTROL_WRITEONLY_BITS
 0x2004

	)

1107 
	#ACPI_PM1_CONTROL_IGNORED_BITS
 0x0200

	)

1108 
	#ACPI_PM1_CONTROL_RESERVED_BITS
 0xC1F8

	)

1109 
	#ACPI_PM1_CONTROL_PRESERVED_BITS
 \

1110 (
ACPI_PM1_CONTROL_IGNORED_BITS
 | 
ACPI_PM1_CONTROL_RESERVED_BITS
)

	)

1112 
	#ACPI_PM2_CONTROL_PRESERVED_BITS
 0xFFFFFFFE

	)

1118 
	#ACPI_REGISTER_PM1_STATUS
 0x01

	)

1119 
	#ACPI_REGISTER_PM1_ENABLE
 0x02

	)

1120 
	#ACPI_REGISTER_PM1_CONTROL
 0x03

	)

1121 
	#ACPI_REGISTER_PM2_CONTROL
 0x04

	)

1122 
	#ACPI_REGISTER_PM_TIMER
 0x05

	)

1123 
	#ACPI_REGISTER_PROCESSOR_BLOCK
 0x06

	)

1124 
	#ACPI_REGISTER_SMI_COMMAND_BLOCK
 0x07

	)

1129 
	#ACPI_BITMASK_TIMER_STATUS
 0x0001

	)

1130 
	#ACPI_BITMASK_BUS_MASTER_STATUS
 0x0010

	)

1131 
	#ACPI_BITMASK_GLOBAL_LOCK_STATUS
 0x0020

	)

1132 
	#ACPI_BITMASK_POWER_BUTTON_STATUS
 0x0100

	)

1133 
	#ACPI_BITMASK_SLEEP_BUTTON_STATUS
 0x0200

	)

1134 
	#ACPI_BITMASK_RT_CLOCK_STATUS
 0x0400

	)

1135 
	#ACPI_BITMASK_PCIEXP_WAKE_STATUS
 0x4000

	)

1136 
	#ACPI_BITMASK_WAKE_STATUS
 0x8000

	)

1138 
	#ACPI_BITMASK_ALL_FIXED_STATUS
 (\

1139 
ACPI_BITMASK_TIMER_STATUS
 | \

1140 
ACPI_BITMASK_BUS_MASTER_STATUS
 | \

1141 
ACPI_BITMASK_GLOBAL_LOCK_STATUS
 | \

1142 
ACPI_BITMASK_POWER_BUTTON_STATUS
 | \

1143 
ACPI_BITMASK_SLEEP_BUTTON_STATUS
 | \

1144 
ACPI_BITMASK_RT_CLOCK_STATUS
 | \

1145 
ACPI_BITMASK_PCIEXP_WAKE_STATUS
 | \

1146 
ACPI_BITMASK_WAKE_STATUS
)

	)

1148 
	#ACPI_BITMASK_TIMER_ENABLE
 0x0001

	)

1149 
	#ACPI_BITMASK_GLOBAL_LOCK_ENABLE
 0x0020

	)

1150 
	#ACPI_BITMASK_POWER_BUTTON_ENABLE
 0x0100

	)

1151 
	#ACPI_BITMASK_SLEEP_BUTTON_ENABLE
 0x0200

	)

1152 
	#ACPI_BITMASK_RT_CLOCK_ENABLE
 0x0400

	)

1153 
	#ACPI_BITMASK_PCIEXP_WAKE_DISABLE
 0x4000

	)

1155 
	#ACPI_BITMASK_SCI_ENABLE
 0x0001

	)

1156 
	#ACPI_BITMASK_BUS_MASTER_RLD
 0x0002

	)

1157 
	#ACPI_BITMASK_GLOBAL_LOCK_RELEASE
 0x0004

	)

1158 
	#ACPI_BITMASK_SLEEP_TYPE
 0x1C00

	)

1159 
	#ACPI_BITMASK_SLEEP_ENABLE
 0x2000

	)

1161 
	#ACPI_BITMASK_ARB_DISABLE
 0x0001

	)

1166 
	#ACPI_BITPOSITION_TIMER_STATUS
 0x00

	)

1167 
	#ACPI_BITPOSITION_BUS_MASTER_STATUS
 0x04

	)

1168 
	#ACPI_BITPOSITION_GLOBAL_LOCK_STATUS
 0x05

	)

1169 
	#ACPI_BITPOSITION_POWER_BUTTON_STATUS
 0x08

	)

1170 
	#ACPI_BITPOSITION_SLEEP_BUTTON_STATUS
 0x09

	)

1171 
	#ACPI_BITPOSITION_RT_CLOCK_STATUS
 0x0A

	)

1172 
	#ACPI_BITPOSITION_PCIEXP_WAKE_STATUS
 0x0E

	)

1173 
	#ACPI_BITPOSITION_WAKE_STATUS
 0x0F

	)

1175 
	#ACPI_BITPOSITION_TIMER_ENABLE
 0x00

	)

1176 
	#ACPI_BITPOSITION_GLOBAL_LOCK_ENABLE
 0x05

	)

1177 
	#ACPI_BITPOSITION_POWER_BUTTON_ENABLE
 0x08

	)

1178 
	#ACPI_BITPOSITION_SLEEP_BUTTON_ENABLE
 0x09

	)

1179 
	#ACPI_BITPOSITION_RT_CLOCK_ENABLE
 0x0A

	)

1180 
	#ACPI_BITPOSITION_PCIEXP_WAKE_DISABLE
 0x0E

	)

1182 
	#ACPI_BITPOSITION_SCI_ENABLE
 0x00

	)

1183 
	#ACPI_BITPOSITION_BUS_MASTER_RLD
 0x01

	)

1184 
	#ACPI_BITPOSITION_GLOBAL_LOCK_RELEASE
 0x02

	)

1185 
	#ACPI_BITPOSITION_SLEEP_TYPE
 0x0A

	)

1186 
	#ACPI_BITPOSITION_SLEEP_ENABLE
 0x0D

	)

1188 
	#ACPI_BITPOSITION_ARB_DISABLE
 0x00

	)

1193 
	#ACPI_ALWAYS_ILLEGAL
 0x00

	)

1195 
	sa˝i_öãrÁ˚_öfo


1197 *
Name
;

1198 
a˝i_öãrÁ˚_öfo
 *
Next
;

1199 
UINT8
 
Fœgs
;

1200 
UINT8
 
VÆue
;

1202 } 
	tACPI_INTERFACE_INFO
;

1204 
	#ACPI_OSI_INVALID
 0x01

	)

1205 
	#ACPI_OSI_DYNAMIC
 0x02

	)

1206 
	#ACPI_OSI_FEATURE
 0x04

	)

1207 
	#ACPI_OSI_DEFAULT_INVALID
 0x08

	)

1208 
	#ACPI_OSI_OPTIONAL_FEATURE
 (
ACPI_OSI_FEATURE
 | 
ACPI_OSI_DEFAULT_INVALID
 | 
ACPI_OSI_INVALID
)

	)

1210 
	sa˝i_p‹t_öfo


1212 *
Name
;

1213 
UINT16
 
Sèπ
;

1214 
UINT16
 
End
;

1215 
UINT8
 
OsiDïídícy
;

1217 } 
	tACPI_PORT_INFO
;

1228 
	#ACPI_ADDRESS_TYPE_MEMORY_RANGE
 0

	)

1229 
	#ACPI_ADDRESS_TYPE_IO_RANGE
 1

	)

1230 
	#ACPI_ADDRESS_TYPE_BUS_NUMBER_RANGE
 2

	)

1234 
	#ACPI_RESOURCE_NAME_LARGE
 0x80

	)

1235 
	#ACPI_RESOURCE_NAME_SMALL
 0x00

	)

1237 
	#ACPI_RESOURCE_NAME_SMALL_MASK
 0x78

	)

1238 
	#ACPI_RESOURCE_NAME_SMALL_LENGTH_MASK
 0x07

	)

1239 
	#ACPI_RESOURCE_NAME_LARGE_MASK
 0x7F

	)

1246 
	#ACPI_RESOURCE_NAME_IRQ
 0x20

	)

1247 
	#ACPI_RESOURCE_NAME_DMA
 0x28

	)

1248 
	#ACPI_RESOURCE_NAME_START_DEPENDENT
 0x30

	)

1249 
	#ACPI_RESOURCE_NAME_END_DEPENDENT
 0x38

	)

1250 
	#ACPI_RESOURCE_NAME_IO
 0x40

	)

1251 
	#ACPI_RESOURCE_NAME_FIXED_IO
 0x48

	)

1252 
	#ACPI_RESOURCE_NAME_FIXED_DMA
 0x50

	)

1253 
	#ACPI_RESOURCE_NAME_RESERVED_S2
 0x58

	)

1254 
	#ACPI_RESOURCE_NAME_RESERVED_S3
 0x60

	)

1255 
	#ACPI_RESOURCE_NAME_RESERVED_S4
 0x68

	)

1256 
	#ACPI_RESOURCE_NAME_VENDOR_SMALL
 0x70

	)

1257 
	#ACPI_RESOURCE_NAME_END_TAG
 0x78

	)

1263 
	#ACPI_RESOURCE_NAME_MEMORY24
 0x81

	)

1264 
	#ACPI_RESOURCE_NAME_GENERIC_REGISTER
 0x82

	)

1265 
	#ACPI_RESOURCE_NAME_RESERVED_L1
 0x83

	)

1266 
	#ACPI_RESOURCE_NAME_VENDOR_LARGE
 0x84

	)

1267 
	#ACPI_RESOURCE_NAME_MEMORY32
 0x85

	)

1268 
	#ACPI_RESOURCE_NAME_FIXED_MEMORY32
 0x86

	)

1269 
	#ACPI_RESOURCE_NAME_ADDRESS32
 0x87

	)

1270 
	#ACPI_RESOURCE_NAME_ADDRESS16
 0x88

	)

1271 
	#ACPI_RESOURCE_NAME_EXTENDED_IRQ
 0x89

	)

1272 
	#ACPI_RESOURCE_NAME_ADDRESS64
 0x8A

	)

1273 
	#ACPI_RESOURCE_NAME_EXTENDED_ADDRESS64
 0x8B

	)

1274 
	#ACPI_RESOURCE_NAME_GPIO
 0x8C

	)

1275 
	#ACPI_RESOURCE_NAME_SERIAL_BUS
 0x8E

	)

1276 
	#ACPI_RESOURCE_NAME_LARGE_MAX
 0x8E

	)

1285 
	#ACPI_ASCII_ZERO
 0x30

	)

1294 
	sa˝i_exã∫Æ_li°


1296 *
P©h
;

1297 *
I¡î«lP©h
;

1298 
a˝i_exã∫Æ_li°
 *
Next
;

1299 
UINT32
 
VÆue
;

1300 
UINT16
 
Lígth
;

1301 
UINT16
 
Fœgs
;

1302 
UINT8
 
Ty≥
;

1304 } 
	tACPI_EXTERNAL_LIST
;

1308 
	#ACPI_EXT_RESOLVED_REFERENCE
 0x01

	)

1309 
	#ACPI_EXT_ORIGIN_FROM_FILE
 0x02

	)

1310 
	#ACPI_EXT_INTERNAL_PATH_ALLOCATED
 0x04

	)

1311 
	#ACPI_EXT_EXTERNAL_EMITTED
 0x08

	)

1314 
	sa˝i_exã∫Æ_fûe


1316 *
P©h
;

1317 
a˝i_exã∫Æ_fûe
 *
Next
;

1319 } 
	tACPI_EXTERNAL_FILE
;

1328 
	sa˝i_db_mëhod_öfo


1330 
ACPI_HANDLE
 
Mëhod
;

1331 
ACPI_HANDLE
 
MaöThªadG©e
;

1332 
ACPI_HANDLE
 
ThªadCom∂ëeG©e
;

1333 
ACPI_HANDLE
 
InfoG©e
;

1334 
ACPI_THREAD_ID
 *
Thªads
;

1335 
UINT32
 
NumThªads
;

1336 
UINT32
 
NumCª©ed
;

1337 
UINT32
 
NumCom∂ëed
;

1339 *
Name
;

1340 
UINT32
 
Fœgs
;

1341 
UINT32
 
NumLo›s
;

1342 
P©h«me
[
ACPI_DB_LINE_BUFFER_SIZE
];

1343 **
Args
;

1344 
ACPI_OBJECT_TYPE
 *
Ty≥s
;

1352 
InôArgs
;

1353 
ACPI_OBJECT_TYPE
 
ArgTy≥s
[4];

1354 *
Argumíts
[4];

1355 
NumThªadsSå
[11];

1356 
IdOfThªadSå
[11];

1357 
IndexOfThªadSå
[11];

1359 } 
	tACPI_DB_METHOD_INFO
;

1361 
	sa˝i_öãgrôy_öfo


1363 
UINT32
 
Nodes
;

1364 
UINT32
 
Obje˘s
;

1366 } 
	tACPI_INTEGRITY_INFO
;

1369 
	#ACPI_DB_DISABLE_OUTPUT
 0x00

	)

1370 
	#ACPI_DB_REDIRECTABLE_OUTPUT
 0x01

	)

1371 
	#ACPI_DB_CONSOLE_OUTPUT
 0x02

	)

1372 
	#ACPI_DB_DUPLICATE_OUTPUT
 0x03

	)

1383 
	#ACPI_MEM_MALLOC
 0

	)

1384 
	#ACPI_MEM_CALLOC
 1

	)

1385 
	#ACPI_MAX_MODULE_NAME
 16

	)

1387 
	#ACPI_COMMON_DEBUG_MEM_HEADER
 \

1388 
a˝i_debug_mem_block
 *
Pªvious
; \

1389 
a˝i_debug_mem_block
 *
Next
; \

1390 
UINT32
 
Size
; \

1391 
UINT32
 
Comp⁄ít
; \

1392 
UINT32
 
Löe
; \

1393 
ModuÀ
[
ACPI_MAX_MODULE_NAME
]; \

1394 
UINT8
 
AŒocTy≥
;

	)

1396 
	sa˝i_debug_mem_hódî


1398 
ACPI_COMMON_DEBUG_MEM_HEADER


1400 } 
	tACPI_DEBUG_MEM_HEADER
;

1402 
	sa˝i_debug_mem_block


1404 
ACPI_COMMON_DEBUG_MEM_HEADER


1405 
UINT64
 
U£rS∑˚
;

1407 } 
	tACPI_DEBUG_MEM_BLOCK
;

1410 
	#ACPI_MEM_LIST_GLOBAL
 0

	)

1411 
	#ACPI_MEM_LIST_NSNODE
 1

	)

1412 
	#ACPI_MEM_LIST_MAX
 1

	)

1413 
	#ACPI_NUM_MEM_LISTS
 2

	)

1422 
	sah_¥edeföed_«me


1424 *
Name
;

1425 *
Des¸ùti⁄
;

1426 #i‚de‡
ACPI_ASL_COMPILER


1427 *
A˘i⁄
;

1430 } 
	tAH_PREDEFINED_NAME
;

1432 
	sah_devi˚_id


1434 *
Name
;

1435 *
Des¸ùti⁄
;

1437 } 
	tAH_DEVICE_ID
;

1439 
	sah_uuid


1441 *
Des¸ùti⁄
;

1442 *
Såög
;

1444 } 
	tAH_UUID
;

	@src/extern/acpica/source/include/acmacros.h

116 #i‚de‡
__ACMACROS_H__


117 
	#__ACMACROS_H__


	)

125 
	#ACPI_CAST8
(
±r
Ë
	`ACPI_CAST_PTR
 (
UINT8
, (±r))

	)

126 
	#ACPI_CAST16
(
±r
Ë
	`ACPI_CAST_PTR
 (
UINT16
, (±r))

	)

127 
	#ACPI_CAST32
(
±r
Ë
	`ACPI_CAST_PTR
 (
UINT32
, (±r))

	)

128 
	#ACPI_CAST64
(
±r
Ë
	`ACPI_CAST_PTR
 (
UINT64
, (±r))

	)

129 
	#ACPI_GET8
(
±r
Ë(*
	`ACPI_CAST8
 (±r))

	)

130 
	#ACPI_GET16
(
±r
Ë(*
	`ACPI_CAST16
 (±r))

	)

131 
	#ACPI_GET32
(
±r
Ë(*
	`ACPI_CAST32
 (±r))

	)

132 
	#ACPI_GET64
(
±r
Ë(*
	`ACPI_CAST64
 (±r))

	)

133 
	#ACPI_SET8
(
±r
, 
vÆ
Ë(*
	`ACPI_CAST8
 (±rË(
UINT8
Ë(vÆ))

	)

134 
	#ACPI_SET16
(
±r
, 
vÆ
Ë(*
	`ACPI_CAST16
 (±rË(
UINT16
Ë(vÆ))

	)

135 
	#ACPI_SET32
(
±r
, 
vÆ
Ë(*
	`ACPI_CAST32
 (±rË(
UINT32
Ë(vÆ))

	)

136 
	#ACPI_SET64
(
±r
, 
vÆ
Ë(*
	`ACPI_CAST64
 (±rË(
UINT64
Ë(vÆ))

	)

143 
	#ACPI_FORMAT_UINT64
(
i
Ë
	`ACPI_HIDWORD
(i), 
	`ACPI_LODWORD
(i)

	)

151 #ifde‡
ACPI_BIG_ENDIAN


162 
	#ACPI_MOVE_16_TO_16
(
d
, 
s
Ë{(–
UINT8
 *)(*)(d))[0] = ((UINT8 *)(*)(s))[1];\

163 (–
UINT8
 *)(*)(
d
))[1] = ((UINT8 *)(*)(
s
))[0];}

	)

165 
	#ACPI_MOVE_16_TO_32
(
d
, 
s
Ë{(*(
UINT32
 *)(*)(d))=0;\

166 ((
UINT8
 *)(*)(
d
))[2] = ((UINT8 *)(*)(
s
))[1];\

167 ((
UINT8
 *)(*)(
d
))[3] = ((UINT8 *)(*)(
s
))[0];}

	)

169 
	#ACPI_MOVE_16_TO_64
(
d
, 
s
Ë{(*(
UINT64
 *)(*)(d))=0;\

170 ((
UINT8
 *)(*)(
d
))[6] = ((UINT8 *)(*)(
s
))[1];\

171 ((
UINT8
 *)(*)(
d
))[7] = ((UINT8 *)(*)(
s
))[0];}

	)

175 
	#ACPI_MOVE_32_TO_16
(
d
, 
s
Ë
	`ACPI_MOVE_16_TO_16
(d, sË

	)

177 
	#ACPI_MOVE_32_TO_32
(
d
, 
s
Ë{(–
UINT8
 *)(*)(d))[0] = ((UINT8 *)(*)(s))[3];\

178 (–
UINT8
 *)(*)(
d
))[1] = ((UINT8 *)(*)(
s
))[2];\

179 (–
UINT8
 *)(*)(
d
))[2] = ((UINT8 *)(*)(
s
))[1];\

180 (–
UINT8
 *)(*)(
d
))[3] = ((UINT8 *)(*)(
s
))[0];}

	)

182 
	#ACPI_MOVE_32_TO_64
(
d
, 
s
Ë{(*(
UINT64
 *)(*)(d))=0;\

183 ((
UINT8
 *)(*)(
d
))[4] = ((UINT8 *)(*)(
s
))[3];\

184 ((
UINT8
 *)(*)(
d
))[5] = ((UINT8 *)(*)(
s
))[2];\

185 ((
UINT8
 *)(*)(
d
))[6] = ((UINT8 *)(*)(
s
))[1];\

186 ((
UINT8
 *)(*)(
d
))[7] = ((UINT8 *)(*)(
s
))[0];}

	)

190 
	#ACPI_MOVE_64_TO_16
(
d
, 
s
Ë
	`ACPI_MOVE_16_TO_16
(d, sË

	)

192 
	#ACPI_MOVE_64_TO_32
(
d
, 
s
Ë
	`ACPI_MOVE_32_TO_32
(d, sË

	)

194 
	#ACPI_MOVE_64_TO_64
(
d
, 
s
Ë{(–
UINT8
 *)(*)(d))[0] = ((UINT8 *)(*)(s))[7];\

195 (–
UINT8
 *)(*)(
d
))[1] = ((UINT8 *)(*)(
s
))[6];\

196 (–
UINT8
 *)(*)(
d
))[2] = ((UINT8 *)(*)(
s
))[5];\

197 (–
UINT8
 *)(*)(
d
))[3] = ((UINT8 *)(*)(
s
))[4];\

198 (–
UINT8
 *)(*)(
d
))[4] = ((UINT8 *)(*)(
s
))[3];\

199 (–
UINT8
 *)(*)(
d
))[5] = ((UINT8 *)(*)(
s
))[2];\

200 (–
UINT8
 *)(*)(
d
))[6] = ((UINT8 *)(*)(
s
))[1];\

201 (–
UINT8
 *)(*)(
d
))[7] = ((UINT8 *)(*)(
s
))[0];}

	)

207 #i‚de‡
ACPI_MISALIGNMENT_NOT_SUPPORTED


213 
	#ACPI_MOVE_16_TO_16
(
d
, 
s
Ë*(
UINT16
 *)(*)(dË*(UINT16 *)(*)(s)

	)

214 
	#ACPI_MOVE_16_TO_32
(
d
, 
s
Ë*(
UINT32
 *)(*)(dË*(
UINT16
 *)(*)(s)

	)

215 
	#ACPI_MOVE_16_TO_64
(
d
, 
s
Ë*(
UINT64
 *)(*)(dË*(
UINT16
 *)(*)(s)

	)

219 
	#ACPI_MOVE_32_TO_16
(
d
, 
s
Ë
	`ACPI_MOVE_16_TO_16
(d, sË

	)

220 
	#ACPI_MOVE_32_TO_32
(
d
, 
s
Ë*(
UINT32
 *)(*)(dË*(UINT32 *)(*)(s)

	)

221 
	#ACPI_MOVE_32_TO_64
(
d
, 
s
Ë*(
UINT64
 *)(*)(dË*(
UINT32
 *)(*)(s)

	)

225 
	#ACPI_MOVE_64_TO_16
(
d
, 
s
Ë
	`ACPI_MOVE_16_TO_16
(d, sË

	)

226 
	#ACPI_MOVE_64_TO_32
(
d
, 
s
Ë
	`ACPI_MOVE_32_TO_32
(d, sË

	)

227 
	#ACPI_MOVE_64_TO_64
(
d
, 
s
Ë*(
UINT64
 *)(*)(dË*(UINT64 *)(*)(s)

	)

238 
	#ACPI_MOVE_16_TO_16
(
d
, 
s
Ë{(–
UINT8
 *)(*)(d))[0] = ((UINT8 *)(*)(s))[0];\

239 (–
UINT8
 *)(*)(
d
))[1] = ((UINT8 *)(*)(
s
))[1];}

	)

241 
	#ACPI_MOVE_16_TO_32
(
d
, 
s
Ë{(*(
UINT32
 *)(*)(d)Ë0; 
	`ACPI_MOVE_16_TO_16
(d, s);}

	)

242 
	#ACPI_MOVE_16_TO_64
(
d
, 
s
Ë{(*(
UINT64
 *)(*)(d)Ë0; 
	`ACPI_MOVE_16_TO_16
(d, s);}

	)

246 
	#ACPI_MOVE_32_TO_16
(
d
, 
s
Ë
	`ACPI_MOVE_16_TO_16
(d, sË

	)

248 
	#ACPI_MOVE_32_TO_32
(
d
, 
s
Ë{(–
UINT8
 *)(*)(d))[0] = ((UINT8 *)(*)(s))[0];\

249 (–
UINT8
 *)(*)(
d
))[1] = ((UINT8 *)(*)(
s
))[1];\

250 (–
UINT8
 *)(*)(
d
))[2] = ((UINT8 *)(*)(
s
))[2];\

251 (–
UINT8
 *)(*)(
d
))[3] = ((UINT8 *)(*)(
s
))[3];}

	)

253 
	#ACPI_MOVE_32_TO_64
(
d
, 
s
Ë{(*(
UINT64
 *)(*)(d)Ë0; 
	`ACPI_MOVE_32_TO_32
(d, s);}

	)

257 
	#ACPI_MOVE_64_TO_16
(
d
, 
s
Ë
	`ACPI_MOVE_16_TO_16
(d, sË

	)

258 
	#ACPI_MOVE_64_TO_32
(
d
, 
s
Ë
	`ACPI_MOVE_32_TO_32
(d, sË

	)

259 
	#ACPI_MOVE_64_TO_64
(
d
, 
s
Ë{(–
UINT8
 *)(*)(d))[0] = ((UINT8 *)(*)(s))[0];\

260 (–
UINT8
 *)(*)(
d
))[1] = ((UINT8 *)(*)(
s
))[1];\

261 (–
UINT8
 *)(*)(
d
))[2] = ((UINT8 *)(*)(
s
))[2];\

262 (–
UINT8
 *)(*)(
d
))[3] = ((UINT8 *)(*)(
s
))[3];\

263 (–
UINT8
 *)(*)(
d
))[4] = ((UINT8 *)(*)(
s
))[4];\

264 (–
UINT8
 *)(*)(
d
))[5] = ((UINT8 *)(*)(
s
))[5];\

265 (–
UINT8
 *)(*)(
d
))[6] = ((UINT8 *)(*)(
s
))[6];\

266 (–
UINT8
 *)(*)(
d
))[7] = ((UINT8 *)(*)(
s
))[7];}

	)

274 
	#_ACPI_DIV
(
vÆue
, 
PowîOf2
Ë((
UINT32
Ë((vÆueË>> (PowîOf2)))

	)

275 
	#_ACPI_MUL
(
vÆue
, 
PowîOf2
Ë((
UINT32
Ë((vÆueË<< (PowîOf2)))

	)

276 
	#_ACPI_MOD
(
vÆue
, 
Divis‹
Ë((
UINT32
Ë((vÆueË& ((Divis‹Ë-1)))

	)

278 
	#ACPI_DIV_2
(
a
Ë
	`_ACPI_DIV
◊, 1)

	)

279 
	#ACPI_MUL_2
(
a
Ë
	`_ACPI_MUL
◊, 1)

	)

280 
	#ACPI_MOD_2
(
a
Ë
	`_ACPI_MOD
◊, 2)

	)

282 
	#ACPI_DIV_4
(
a
Ë
	`_ACPI_DIV
◊, 2)

	)

283 
	#ACPI_MUL_4
(
a
Ë
	`_ACPI_MUL
◊, 2)

	)

284 
	#ACPI_MOD_4
(
a
Ë
	`_ACPI_MOD
◊, 4)

	)

286 
	#ACPI_DIV_8
(
a
Ë
	`_ACPI_DIV
◊, 3)

	)

287 
	#ACPI_MUL_8
(
a
Ë
	`_ACPI_MUL
◊, 3)

	)

288 
	#ACPI_MOD_8
(
a
Ë
	`_ACPI_MOD
◊, 8)

	)

290 
	#ACPI_DIV_16
(
a
Ë
	`_ACPI_DIV
◊, 4)

	)

291 
	#ACPI_MUL_16
(
a
Ë
	`_ACPI_MUL
◊, 4)

	)

292 
	#ACPI_MOD_16
(
a
Ë
	`_ACPI_MOD
◊, 16)

	)

294 
	#ACPI_DIV_32
(
a
Ë
	`_ACPI_DIV
◊, 5)

	)

295 
	#ACPI_MUL_32
(
a
Ë
	`_ACPI_MUL
◊, 5)

	)

296 
	#ACPI_MOD_32
(
a
Ë
	`_ACPI_MOD
◊, 32)

	)

301 
	#ACPI_ROUND_DOWN
(
vÆue
, 
bound¨y
Ë(((
ACPI_SIZE
)(value)) & \

302 (~(((
ACPI_SIZE
Ë
bound¨y
)-1)))

	)

304 
	#ACPI_ROUND_UP
(
vÆue
, 
bound¨y
Ë((((
ACPI_SIZE
)(value)) + \

305 (((
ACPI_SIZE
Ë
bound¨y
)-1)) & \

306 (~(((
ACPI_SIZE
Ë
bound¨y
)-1)))

	)

310 
	#ACPI_ROUND_DOWN_TO_32BIT
(
a
Ë
	`ACPI_ROUND_DOWN
◊, 4)

	)

311 
	#ACPI_ROUND_DOWN_TO_64BIT
(
a
Ë
	`ACPI_ROUND_DOWN
◊, 8)

	)

312 
	#ACPI_ROUND_DOWN_TO_NATIVE_WORD
(
a
Ë
	`ACPI_ROUND_DOWN
◊, (
ACPI_SIZE
))

	)

314 
	#ACPI_ROUND_UP_TO_32BIT
(
a
Ë
	`ACPI_ROUND_UP
◊, 4)

	)

315 
	#ACPI_ROUND_UP_TO_64BIT
(
a
Ë
	`ACPI_ROUND_UP
◊, 8)

	)

316 
	#ACPI_ROUND_UP_TO_NATIVE_WORD
(
a
Ë
	`ACPI_ROUND_UP
◊, (
ACPI_SIZE
))

	)

318 
	#ACPI_ROUND_BITS_UP_TO_BYTES
(
a
Ë
	`ACPI_DIV_8
(◊Ë+ 7)

	)

319 
	#ACPI_ROUND_BITS_DOWN_TO_BYTES
(
a
Ë
	`ACPI_DIV_8
(◊))

	)

321 
	#ACPI_ROUND_UP_TO_1K
(
a
Ë((◊Ë+ 1023Ë>> 10)

	)

325 
	#ACPI_ROUND_UP_TO
(
vÆue
, 
bound¨y
Ë(((vÆueË+ ((bound¨y)-1)Ë/ (bound¨y))

	)

327 
	#ACPI_IS_MISALIGNED
(
vÆue
Ë(((
ACPI_SIZE
ËvÆueË& ((ACPI_SIZE)-1))

	)

335 
	#ACPI_MASK_BITS_ABOVE
(
posôi⁄
Ë(~((
ACPI_UINT64_MAX
Ë<< ((
UINT32
Ë’osôi⁄))))

	)

336 
	#ACPI_MASK_BITS_BELOW
(
posôi⁄
Ë((
ACPI_UINT64_MAX
Ë<< ((
UINT32
Ë’osôi⁄)))

	)

340 
	#ACPI_REGISTER_PREPARE_BITS
(
VÆ
, 
Pos
, 
Mask
) \

341 ((
VÆ
 << 
Pos
Ë& 
Mask
)

	)

343 
	#ACPI_REGISTER_INSERT_VALUE
(
Reg
, 
Pos
, 
Mask
, 
VÆ
) \

344 
Reg
 = (Reg & (~(
Mask
))Ë| 
	`ACPI_REGISTER_PREPARE_BITS
(
VÆ
, 
Pos
, Mask)

	)

346 
	#ACPI_INSERT_BITS
(
T¨gë
, 
Mask
, 
Sour˚
) \

347 
T¨gë
 = ((T¨gë & (~(
Mask
))Ë| (
Sour˚
 & Mask))

	)

351 
	#ACPI_GET_BITS
(
Sour˚På
, 
Posôi⁄
, 
Mask
) \

352 ((*
Sour˚På
 >> 
Posôi⁄
Ë& 
Mask
)

	)

354 
	#ACPI_SET_BITS
(
T¨gëPå
, 
Posôi⁄
, 
Mask
, 
VÆue
) \

355 (*
T¨gëPå
 |((
VÆue
 & 
Mask
Ë<< 
Posôi⁄
))

	)

357 
	#ACPI_1BIT_MASK
 0x00000001

	)

358 
	#ACPI_2BIT_MASK
 0x00000003

	)

359 
	#ACPI_3BIT_MASK
 0x00000007

	)

360 
	#ACPI_4BIT_MASK
 0x0000000F

	)

361 
	#ACPI_5BIT_MASK
 0x0000001F

	)

362 
	#ACPI_6BIT_MASK
 0x0000003F

	)

363 
	#ACPI_7BIT_MASK
 0x0000007F

	)

364 
	#ACPI_8BIT_MASK
 0x000000FF

	)

365 
	#ACPI_16BIT_MASK
 0x0000FFFF

	)

366 
	#ACPI_24BIT_MASK
 0x00FFFFFF

	)

370 
	#ACPI_GET_1BIT_FLAG
(
VÆue
Ë((VÆueË& 
ACPI_1BIT_MASK
)

	)

371 
	#ACPI_GET_2BIT_FLAG
(
VÆue
Ë((VÆueË& 
ACPI_2BIT_MASK
)

	)

372 
	#ACPI_GET_3BIT_FLAG
(
VÆue
Ë((VÆueË& 
ACPI_3BIT_MASK
)

	)

373 
	#ACPI_GET_4BIT_FLAG
(
VÆue
Ë((VÆueË& 
ACPI_4BIT_MASK
)

	)

377 
	#ACPI_EXTRACT_1BIT_FLAG
(
Fõld
, 
Posôi⁄
Ë(
	`ACPI_GET_1BIT_FLAG
 ((FõldË>> Posôi⁄))

	)

378 
	#ACPI_EXTRACT_2BIT_FLAG
(
Fõld
, 
Posôi⁄
Ë(
	`ACPI_GET_2BIT_FLAG
 ((FõldË>> Posôi⁄))

	)

379 
	#ACPI_EXTRACT_3BIT_FLAG
(
Fõld
, 
Posôi⁄
Ë(
	`ACPI_GET_3BIT_FLAG
 ((FõldË>> Posôi⁄))

	)

380 
	#ACPI_EXTRACT_4BIT_FLAG
(
Fõld
, 
Posôi⁄
Ë(
	`ACPI_GET_4BIT_FLAG
 ((FõldË>> Posôi⁄))

	)

384 
	#ACPI_IS_ROOT_PREFIX
(
c
Ë((cË=(
UINT8
Ë0x5CË

	)

385 
	#ACPI_IS_PARENT_PREFIX
(
c
Ë((cË=(
UINT8
Ë0x5EË

	)

386 
	#ACPI_IS_PATH_SEPARATOR
(
c
Ë((cË=(
UINT8
Ë0x2EË

	)

395 
	#ACPI_GET_DESCRIPTOR_PTR
(
d
Ë(((
ACPI_DESCRIPTOR
 *)(*)(d))->
Comm⁄
.
Comm⁄Poöãr
)

	)

396 
	#ACPI_SET_DESCRIPTOR_PTR
(
d
, 
p
Ë(((
ACPI_DESCRIPTOR
 *)(*)(d))->
Comm⁄
.
Comm⁄Poöãr
 = (p))

	)

397 
	#ACPI_GET_DESCRIPTOR_TYPE
(
d
Ë(((
ACPI_DESCRIPTOR
 *)(*)(d))->
Comm⁄
.
Des¸ùt‹Ty≥
)

	)

398 
	#ACPI_SET_DESCRIPTOR_TYPE
(
d
, 
t
Ë(((
ACPI_DESCRIPTOR
 *)(*)(d))->
Comm⁄
.
Des¸ùt‹Ty≥
 = (t))

	)

403 #i‡
deföed
 (
ACPI_DISASSEMBLER
Ë|| deföed (
ACPI_DEBUG_OUTPUT
)

404 
	#ACPI_OP
(
Name
, 
PArgs
, 
IArgs
, 
ObjTy≥
, 
Cœss
, 
Ty≥
, 
Fœgs
) \

405 {
Name
, (
UINT32
)(
PArgs
), (UINT32)(
IArgs
), (UINT32)(
Fœgs
), 
ObjTy≥
, 
Cœss
, 
Ty≥
}

	)

407 
	#ACPI_OP
(
Name
, 
PArgs
, 
IArgs
, 
ObjTy≥
, 
Cœss
, 
Ty≥
, 
Fœgs
) \

408 {(
UINT32
)(
PArgs
), (UINT32)(
IArgs
), (UINT32)(
Fœgs
), 
ObjTy≥
, 
Cœss
, 
Ty≥
}

	)

411 
	#ARG_TYPE_WIDTH
 5

	)

412 
	#ARG_1
(
x
Ë((
UINT32
)(x))

	)

413 
	#ARG_2
(
x
Ë((
UINT32
)(xË<< (1 * 
ARG_TYPE_WIDTH
))

	)

414 
	#ARG_3
(
x
Ë((
UINT32
)(xË<< (2 * 
ARG_TYPE_WIDTH
))

	)

415 
	#ARG_4
(
x
Ë((
UINT32
)(xË<< (3 * 
ARG_TYPE_WIDTH
))

	)

416 
	#ARG_5
(
x
Ë((
UINT32
)(xË<< (4 * 
ARG_TYPE_WIDTH
))

	)

417 
	#ARG_6
(
x
Ë((
UINT32
)(xË<< (5 * 
ARG_TYPE_WIDTH
))

	)

419 
	#ARGI_LIST1
(
a
Ë(
	`ARG_1
◊))

	)

420 
	#ARGI_LIST2
(
a
, 
b
Ë(
	`ARG_1
(b)|
	`ARG_2
◊))

	)

421 
	#ARGI_LIST3
(
a
, 
b
, 
c
Ë(
	`ARG_1
(c)|
	`ARG_2
(b)|
	`ARG_3
◊))

	)

422 
	#ARGI_LIST4
(
a
, 
b
, 
c
, 
d
Ë(
	`ARG_1
(d)|
	`ARG_2
(c)|
	`ARG_3
(b)|
	`ARG_4
◊))

	)

423 
	#ARGI_LIST5
(
a
, 
b
, 
c
, 
d
, 
e
Ë(
	`ARG_1
”)|
	`ARG_2
(d)|
	`ARG_3
(c)|
	`ARG_4
(b)|
	`ARG_5
◊))

	)

424 
	#ARGI_LIST6
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ë(
	`ARG_1
(f)|
	`ARG_2
”)|
	`ARG_3
(d)|
	`ARG_4
(c)|
	`ARG_5
(b)|
	`ARG_6
◊))

	)

426 
	#ARGP_LIST1
(
a
Ë(
	`ARG_1
◊))

	)

427 
	#ARGP_LIST2
(
a
, 
b
Ë(
	`ARG_1
◊)|
	`ARG_2
(b))

	)

428 
	#ARGP_LIST3
(
a
, 
b
, 
c
Ë(
	`ARG_1
◊)|
	`ARG_2
(b)|
	`ARG_3
(c))

	)

429 
	#ARGP_LIST4
(
a
, 
b
, 
c
, 
d
Ë(
	`ARG_1
◊)|
	`ARG_2
(b)|
	`ARG_3
(c)|
	`ARG_4
(d))

	)

430 
	#ARGP_LIST5
(
a
, 
b
, 
c
, 
d
, 
e
Ë(
	`ARG_1
◊)|
	`ARG_2
(b)|
	`ARG_3
(c)|
	`ARG_4
(d)|
	`ARG_5
”))

	)

431 
	#ARGP_LIST6
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
Ë(
	`ARG_1
◊)|
	`ARG_2
(b)|
	`ARG_3
(c)|
	`ARG_4
(d)|
	`ARG_5
”)|
	`ARG_6
(f))

	)

433 
	#GET_CURRENT_ARG_TYPE
(
Li°
Ë(Li° & ((
UINT32
Ë0x1F))

	)

434 
	#INCREMENT_ARG_LIST
(
Li°
Ë(Li° >>((
UINT32
Ë
ARG_TYPE_WIDTH
))

	)

439 #i‚de‡
ACPI_NO_ERROR_MESSAGES


445 
	#ACPI_ERROR_NAMESPACE
(
s
, 
e
Ë
	`A˝iUtName•a˚Eº‹
 (
AE_INFO
, s,É);

	)

446 
	#ACPI_ERROR_METHOD
(
s
, 
n
, 
p
, 
e
Ë
	`A˝iUtMëhodEº‹
 (
AE_INFO
, s,Ç,Ö,É);

	)

447 
	#ACPI_WARN_PREDEFINED
(
∂i°
Ë
A˝iUtPªdeföedW¨nög
 
	)
plist

448 
	#ACPI_INFO_PREDEFINED
(
∂i°
Ë
A˝iUtPªdeföedInfo
 
	)
plist

449 
	#ACPI_BIOS_ERROR_PREDEFINED
(
∂i°
Ë
A˝iUtPªdeföedBiosEº‹
 
	)
plist

455 
	#ACPI_ERROR_NAMESPACE
(
s
, 
e
)

	)

456 
	#ACPI_ERROR_METHOD
(
s
, 
n
, 
p
, 
e
)

	)

457 
	#ACPI_WARN_PREDEFINED
(
∂i°
)

	)

458 
	#ACPI_INFO_PREDEFINED
(
∂i°
)

	)

459 
	#ACPI_BIOS_ERROR_PREDEFINED
(
∂i°
)

	)

463 #i‡(!
ACPI_REDUCED_HARDWARE
)

464 
	#ACPI_HW_OPTIONAL_FUNCTION
(
addr
Ë
	)
addr

466 
	#ACPI_HW_OPTIONAL_FUNCTION
(
addr
Ë
NULL


	)

475 #ifde‡
ACPI_DEBUGGER


476 
	#ACPI_DEBUGGER_EXEC
(
a
Ë
	)
a

478 
	#ACPI_DEBUGGER_EXEC
(
a
)

	)

488 
	#ACPI_INIT_UUID
(
a
, 
b
, 
c
, 
d0
, 
d1
, 
d2
, 
d3
, 
d4
, 
d5
, 
d6
, 
d7
) \

489 (
a
) & 0xFF, ((a) >> 8) & 0xFF, ((a) >> 16) & 0xFF, ((a) >> 24) & 0xFF, \

490 (
b
) & 0xFF, ((b) >> 8) & 0xFF, \

491 (
c
) & 0xFF, ((c) >> 8) & 0xFF, \

492 (
d0
), (
d1
), (
d2
), (
d3
), (
d4
), (
d5
), (
d6
), (
d7
)

	)

494 
	#ACPI_IS_OCTAL_DIGIT
(
d
Ë((()(dË>'0'Ë&& (()(dË<'7'))

	)

	@src/extern/acpica/source/include/acnames.h

116 #i‚de‡
__ACNAMES_H__


117 
	#__ACNAMES_H__


	)

121 
	#METHOD_NAME__ADR
 "_ADR"

	)

122 
	#METHOD_NAME__AEI
 "_AEI"

	)

123 
	#METHOD_NAME__BBN
 "_BBN"

	)

124 
	#METHOD_NAME__CBA
 "_CBA"

	)

125 
	#METHOD_NAME__CID
 "_CID"

	)

126 
	#METHOD_NAME__CRS
 "_CRS"

	)

127 
	#METHOD_NAME__DDN
 "_DDN"

	)

128 
	#METHOD_NAME__HID
 "_HID"

	)

129 
	#METHOD_NAME__INI
 "_INI"

	)

130 
	#METHOD_NAME__PLD
 "_PLD"

	)

131 
	#METHOD_NAME__DSD
 "_DSD"

	)

132 
	#METHOD_NAME__PRS
 "_PRS"

	)

133 
	#METHOD_NAME__PRT
 "_PRT"

	)

134 
	#METHOD_NAME__PRW
 "_PRW"

	)

135 
	#METHOD_NAME__PS0
 "_PS0"

	)

136 
	#METHOD_NAME__PS1
 "_PS1"

	)

137 
	#METHOD_NAME__PS2
 "_PS2"

	)

138 
	#METHOD_NAME__PS3
 "_PS3"

	)

139 
	#METHOD_NAME__REG
 "_REG"

	)

140 
	#METHOD_NAME__SB_
 "_SB_"

	)

141 
	#METHOD_NAME__SEG
 "_SEG"

	)

142 
	#METHOD_NAME__SRS
 "_SRS"

	)

143 
	#METHOD_NAME__STA
 "_STA"

	)

144 
	#METHOD_NAME__SUB
 "_SUB"

	)

145 
	#METHOD_NAME__UID
 "_UID"

	)

149 
	#METHOD_PATHNAME__PTS
 "\\_PTS"

	)

150 
	#METHOD_PATHNAME__SST
 "\\_SI._SST"

	)

151 
	#METHOD_PATHNAME__WAK
 "\\_WAK"

	)

155 
	#ACPI_UNKNOWN_NAME
 (
UINT32
Ë0x3F3F3F3F

	)

156 
	#ACPI_ROOT_NAME
 (
UINT32
Ë0x5F5F5F5C

	)

158 
	#ACPI_PREFIX_MIXED
 (
UINT32
Ë0x69706341

	)

159 
	#ACPI_PREFIX_LOWER
 (
UINT32
Ë0x69706361

	)

161 
	#ACPI_NS_ROOT_PATH
 "\\"

	)

	@src/extern/acpica/source/include/acnamesp.h

116 #i‚de‡
__ACNAMESP_H__


117 
	#__ACNAMESP_H__


	)

122 
	#ACPI_NS_ALL
 ((
ACPI_HANDLE
)0)

	)

128 
	#ACPI_NS_NORMAL
 0

	)

129 
	#ACPI_NS_NEWSCOPE
 1

	)

130 
	#ACPI_NS_LOCAL
 2

	)

134 
	#ACPI_NS_NO_UPSEARCH
 0

	)

135 
	#ACPI_NS_SEARCH_PARENT
 0x01

	)

136 
	#ACPI_NS_DONT_OPEN_SCOPE
 0x02

	)

137 
	#ACPI_NS_NO_PEER_SEARCH
 0x04

	)

138 
	#ACPI_NS_ERROR_IF_FOUND
 0x08

	)

139 
	#ACPI_NS_PREFIX_IS_SCOPE
 0x10

	)

140 
	#ACPI_NS_EXTERNAL
 0x20

	)

141 
	#ACPI_NS_TEMPORARY
 0x40

	)

145 
	#ACPI_NS_WALK_NO_UNLOCK
 0

	)

146 
	#ACPI_NS_WALK_UNLOCK
 0x01

	)

147 
	#ACPI_NS_WALK_TEMP_NODES
 0x02

	)

151 
	#ACPI_NOT_PACKAGE_ELEMENT
 
ACPI_UINT32_MAX


	)

155 
	#ACPI_WARN_ALWAYS
 0

	)

161 
ACPI_STATUS


162 
A˝iNsInôülizeObje˘s
 (

165 
ACPI_STATUS


166 
A˝iNsInôülizeDevi˚s
 (

173 
ACPI_STATUS


174 
A˝iNsLﬂdName•a˚
 (

177 
ACPI_STATUS


178 
A˝iNsLﬂdTabÀ
 (

179 
UINT32
 
TabÀIndex
,

180 
ACPI_NAMESPACE_NODE
 *
Node
);

186 
ACPI_STATUS


187 
A˝iNsWÆkName•a˚
 (

188 
ACPI_OBJECT_TYPE
 
Ty≥
,

189 
ACPI_HANDLE
 
SèπObje˘
,

190 
UINT32
 
MaxDïth
,

191 
UINT32
 
Fœgs
,

192 
ACPI_WALK_CALLBACK
 
Des˚ndögCÆlback
,

193 
ACPI_WALK_CALLBACK
 
As˚ndögCÆlback
,

194 *
C⁄ãxt
,

195 **
Rëu∫VÆue
);

197 
ACPI_NAMESPACE_NODE
 *

198 
A˝iNsGëNextNode
 (

199 
ACPI_NAMESPACE_NODE
 *
P¨ít
,

200 
ACPI_NAMESPACE_NODE
 *
Chûd
);

202 
ACPI_NAMESPACE_NODE
 *

203 
A˝iNsGëNextNodeTy≥d
 (

204 
ACPI_OBJECT_TYPE
 
Ty≥
,

205 
ACPI_NAMESPACE_NODE
 *
P¨ít
,

206 
ACPI_NAMESPACE_NODE
 *
Chûd
);

211 
ACPI_STATUS


212 
A˝iNsP¨£TabÀ
 (

213 
UINT32
 
TabÀIndex
,

214 
ACPI_NAMESPACE_NODE
 *
SèπNode
);

216 
ACPI_STATUS


217 
A˝iNsO√Com∂ëeP¨£
 (

218 
UINT32
 
PassNumbî
,

219 
UINT32
 
TabÀIndex
,

220 
ACPI_NAMESPACE_NODE
 *
SèπNode
);

226 
ACPI_STATUS


227 
A˝iNsRoŸInôülize
 (

230 
ACPI_STATUS


231 
A˝iNsLookup
 (

232 
ACPI_GENERIC_STATE
 *
Sc›eInfo
,

233 *
Name
,

234 
ACPI_OBJECT_TYPE
 
Ty≥
,

235 
ACPI_INTERPRETER_MODE
 
I¡î¥ëîMode
,

236 
UINT32
 
Fœgs
,

237 
ACPI_WALK_STATE
 *
WÆkSèã
,

238 
ACPI_NAMESPACE_NODE
 **
RëNode
);

244 
ACPI_NAMESPACE_NODE
 *

245 
A˝iNsCª©eNode
 (

246 
UINT32
 
Name
);

249 
A˝iNsDñëeNode
 (

250 
ACPI_NAMESPACE_NODE
 *
Node
);

253 
A˝iNsRemoveNode
 (

254 
ACPI_NAMESPACE_NODE
 *
Node
);

257 
A˝iNsDñëeName•a˚Subåì
 (

258 
ACPI_NAMESPACE_NODE
 *
P¨ítH™dÀ
);

261 
A˝iNsDñëeName•a˚ByOw√r
 (

262 
ACPI_OWNER_ID
 
Ow√rId
);

265 
A˝iNsDëachObje˘
 (

266 
ACPI_NAMESPACE_NODE
 *
Node
);

269 
A˝iNsDñëeChûdªn
 (

270 
ACPI_NAMESPACE_NODE
 *
P¨ít
);

273 
A˝iNsCom∑ªNames
 (

274 *
Name1
,

275 *
Name2
);

281 
ACPI_STATUS


282 
A˝iNsC⁄vîtToI¡egî
 (

283 
ACPI_OPERAND_OBJECT
 *
OrigöÆObje˘
,

284 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘
);

286 
ACPI_STATUS


287 
A˝iNsC⁄vîtToSåög
 (

288 
ACPI_OPERAND_OBJECT
 *
OrigöÆObje˘
,

289 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘
);

291 
ACPI_STATUS


292 
A˝iNsC⁄vîtToBuf„r
 (

293 
ACPI_OPERAND_OBJECT
 *
OrigöÆObje˘
,

294 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘
);

296 
ACPI_STATUS


297 
A˝iNsC⁄vîtToUnicode
 (

298 
ACPI_OPERAND_OBJECT
 *
OrigöÆObje˘
,

299 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘
);

301 
ACPI_STATUS


302 
A˝iNsC⁄vîtToResour˚
 (

303 
ACPI_OPERAND_OBJECT
 *
OrigöÆObje˘
,

304 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘
);

311 
A˝iNsDumpTabÀs
 (

312 
ACPI_HANDLE
 
SórchBa£
,

313 
UINT32
 
MaxDïth
);

316 
A˝iNsDumpE¡ry
 (

317 
ACPI_HANDLE
 
H™dÀ
,

318 
UINT32
 
DebugLevñ
);

321 
A˝iNsDumpP©h«me
 (

322 
ACPI_HANDLE
 
H™dÀ
,

323 *
Msg
,

324 
UINT32
 
Levñ
,

325 
UINT32
 
Comp⁄ít
);

328 
A˝iNsPrötP©h«me
 (

329 
UINT32
 
NumSegmíts
,

330 *
P©h«me
);

332 
ACPI_STATUS


333 
A˝iNsDumpO√Obje˘
 (

334 
ACPI_HANDLE
 
ObjH™dÀ
,

335 
UINT32
 
Levñ
,

336 *
C⁄ãxt
,

337 **
Rëu∫VÆue
);

340 
A˝iNsDumpObje˘s
 (

341 
ACPI_OBJECT_TYPE
 
Ty≥
,

342 
UINT8
 
Di•œyTy≥
,

343 
UINT32
 
MaxDïth
,

344 
ACPI_OWNER_ID
 
Ow√rId
,

345 
ACPI_HANDLE
 
SèπH™dÀ
);

348 
A˝iNsDumpObje˘P©hs
 (

349 
ACPI_OBJECT_TYPE
 
Ty≥
,

350 
UINT8
 
Di•œyTy≥
,

351 
UINT32
 
MaxDïth
,

352 
ACPI_OWNER_ID
 
Ow√rId
,

353 
ACPI_HANDLE
 
SèπH™dÀ
);

359 
ACPI_STATUS


360 
A˝iNsEvÆu©e
 (

361 
ACPI_EVALUATE_INFO
 *
Info
);

364 
A˝iNsExecModuÀCodeLi°
 (

372 
A˝iNsCheckArgumítCou¡
 (

373 *
P©h«me
,

374 
ACPI_NAMESPACE_NODE
 *
Node
,

375 
UINT32
 
U£rP¨amCou¡
,

376 c⁄° 
ACPI_PREDEFINED_INFO
 *
Info
);

379 
A˝iNsCheckA˝iCom∂ün˚
 (

380 *
P©h«me
,

381 
ACPI_NAMESPACE_NODE
 *
Node
,

382 c⁄° 
ACPI_PREDEFINED_INFO
 *
Pªdeföed
);

385 
A˝iNsCheckArgumítTy≥s
 (

386 
ACPI_EVALUATE_INFO
 *
Info
);

392 
ACPI_STATUS


393 
A˝iNsCheckRëu∫VÆue
 (

394 
ACPI_NAMESPACE_NODE
 *
Node
,

395 
ACPI_EVALUATE_INFO
 *
Info
,

396 
UINT32
 
U£rP¨amCou¡
,

397 
ACPI_STATUS
 
Rëu∫Sètus
,

398 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘
);

400 
ACPI_STATUS


401 
A˝iNsCheckObje˘Ty≥
 (

402 
ACPI_EVALUATE_INFO
 *
Info
,

403 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘På
,

404 
UINT32
 
Ex≥˘edBty≥s
,

405 
UINT32
 
PackageIndex
);

411 
ACPI_STATUS


412 
A˝iNsCheckPackage
 (

413 
ACPI_EVALUATE_INFO
 *
Info
,

414 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘På
);

420 
UINT32


421 
A˝iNsO≥nsSc›e
 (

422 
ACPI_OBJECT_TYPE
 
Ty≥
);

424 
ACPI_STATUS


425 
A˝iNsBuûdExã∫ÆP©h
 (

426 
ACPI_NAMESPACE_NODE
 *
Node
,

427 
ACPI_SIZE
 
Size
,

428 *
NameBuf„r
);

431 
A˝iNsGëExã∫ÆP©h«me
 (

432 
ACPI_NAMESPACE_NODE
 *
Node
);

435 
A˝iNsNameOfCuºítSc›e
 (

436 
ACPI_WALK_STATE
 *
WÆkSèã
);

438 
ACPI_STATUS


439 
A˝iNsH™dÀToP©h«me
 (

440 
ACPI_HANDLE
 
T¨gëH™dÀ
,

441 
ACPI_BUFFER
 *
Buf„r
);

443 
BOOLEAN


444 
A˝iNsP©ã∫M©ch
 (

445 
ACPI_NAMESPACE_NODE
 *
ObjNode
,

446 *
SórchF‹
);

448 
ACPI_STATUS


449 
A˝iNsGëNode
 (

450 
ACPI_NAMESPACE_NODE
 *
PªfixNode
,

451 c⁄° *
Exã∫ÆP©h«me
,

452 
UINT32
 
Fœgs
,

453 
ACPI_NAMESPACE_NODE
 **
OutNode
);

455 
ACPI_SIZE


456 
A˝iNsGëP©h«meLígth
 (

457 
ACPI_NAMESPACE_NODE
 *
Node
);

463 
ACPI_STATUS


464 
A˝iNsAâachObje˘
 (

465 
ACPI_NAMESPACE_NODE
 *
Node
,

466 
ACPI_OPERAND_OBJECT
 *
Obje˘
,

467 
ACPI_OBJECT_TYPE
 
Ty≥
);

469 
ACPI_OPERAND_OBJECT
 *

470 
A˝iNsGëAâachedObje˘
 (

471 
ACPI_NAMESPACE_NODE
 *
Node
);

473 
ACPI_OPERAND_OBJECT
 *

474 
A˝iNsGëSec⁄d¨yObje˘
 (

475 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

477 
ACPI_STATUS


478 
A˝iNsAâachD©a
 (

479 
ACPI_NAMESPACE_NODE
 *
Node
,

480 
ACPI_OBJECT_HANDLER
 
H™dÀr
,

481 *
D©a
);

483 
ACPI_STATUS


484 
A˝iNsDëachD©a
 (

485 
ACPI_NAMESPACE_NODE
 *
Node
,

486 
ACPI_OBJECT_HANDLER
 
H™dÀr
);

488 
ACPI_STATUS


489 
A˝iNsGëAâachedD©a
 (

490 
ACPI_NAMESPACE_NODE
 *
Node
,

491 
ACPI_OBJECT_HANDLER
 
H™dÀr
,

492 **
D©a
);

499 
ACPI_STATUS


500 
A˝iNsSim∂eRïaú
 (

501 
ACPI_EVALUATE_INFO
 *
Info
,

502 
UINT32
 
Ex≥˘edBty≥s
,

503 
UINT32
 
PackageIndex
,

504 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘På
);

506 
ACPI_STATUS


507 
A˝iNsWøpWôhPackage
 (

508 
ACPI_EVALUATE_INFO
 *
Info
,

509 
ACPI_OPERAND_OBJECT
 *
OrigöÆObje˘
,

510 
ACPI_OPERAND_OBJECT
 **
ObjDescPå
);

512 
ACPI_STATUS


513 
A˝iNsRïaúNuŒEÀmít
 (

514 
ACPI_EVALUATE_INFO
 *
Info
,

515 
UINT32
 
Ex≥˘edBty≥s
,

516 
UINT32
 
PackageIndex
,

517 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘På
);

520 
A˝iNsRemoveNuŒEÀmíts
 (

521 
ACPI_EVALUATE_INFO
 *
Info
,

522 
UINT8
 
PackageTy≥
,

523 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

530 
ACPI_STATUS


531 
A˝iNsCom∂exRïaús
 (

532 
ACPI_EVALUATE_INFO
 *
Info
,

533 
ACPI_NAMESPACE_NODE
 *
Node
,

534 
ACPI_STATUS
 
VÆid©eSètus
,

535 
ACPI_OPERAND_OBJECT
 **
Rëu∫Obje˘På
);

541 
ACPI_STATUS


542 
A˝iNsSórchAndE¡î
 (

543 
UINT32
 
E¡ryName
,

544 
ACPI_WALK_STATE
 *
WÆkSèã
,

545 
ACPI_NAMESPACE_NODE
 *
Node
,

546 
ACPI_INTERPRETER_MODE
 
I¡î¥ëîMode
,

547 
ACPI_OBJECT_TYPE
 
Ty≥
,

548 
UINT32
 
Fœgs
,

549 
ACPI_NAMESPACE_NODE
 **
RëNode
);

551 
ACPI_STATUS


552 
A˝iNsSórchO√Sc›e
 (

553 
UINT32
 
E¡ryName
,

554 
ACPI_NAMESPACE_NODE
 *
Node
,

555 
ACPI_OBJECT_TYPE
 
Ty≥
,

556 
ACPI_NAMESPACE_NODE
 **
RëNode
);

559 
A˝iNsIn°ÆlNode
 (

560 
ACPI_WALK_STATE
 *
WÆkSèã
,

561 
ACPI_NAMESPACE_NODE
 *
P¨ítNode
,

562 
ACPI_NAMESPACE_NODE
 *
Node
,

563 
ACPI_OBJECT_TYPE
 
Ty≥
);

569 
ACPI_OBJECT_TYPE


570 
A˝iNsGëTy≥
 (

571 
ACPI_NAMESPACE_NODE
 *
Node
);

573 
UINT32


574 
A˝iNsLoˇl
 (

575 
ACPI_OBJECT_TYPE
 
Ty≥
);

578 
A˝iNsPrötNodeP©h«me
 (

579 
ACPI_NAMESPACE_NODE
 *
Node
,

580 c⁄° *
Msg
);

582 
ACPI_STATUS


583 
A˝iNsBuûdI¡î«lName
 (

584 
ACPI_NAMESTRING_INFO
 *
Info
);

587 
A˝iNsGëI¡î«lNameLígth
 (

588 
ACPI_NAMESTRING_INFO
 *
Info
);

590 
ACPI_STATUS


591 
A˝iNsI¡î«lizeName
 (

592 c⁄° *
DŸãdName
,

593 **
C⁄vîãdName
);

595 
ACPI_STATUS


596 
A˝iNsExã∫ÆizeName
 (

597 
UINT32
 
I¡î«lNameLígth
,

598 c⁄° *
I¡î«lName
,

599 
UINT32
 *
C⁄vîãdNameLígth
,

600 **
C⁄vîãdName
);

602 
ACPI_NAMESPACE_NODE
 *

603 
A˝iNsVÆid©eH™dÀ
 (

604 
ACPI_HANDLE
 
H™dÀ
);

607 
A˝iNsTîmö©e
 (

	@src/extern/acpica/source/include/acobject.h

116 #i‚de‡
_ACOBJECT_H


117 
	#_ACOBJECT_H


	)

131 #i‡
ACPI_MACHINE_WIDTH
 == 64

132 #¥agm®
∑ck
(8)

134 #¥agm®
∑ck
(4)

153 
	#ACPI_OBJECT_COMMON_HEADER
 \

154 
a˝i_›î™d_obje˘
 *
NextObje˘
; \

155 
UINT8
 
Des¸ùt‹Ty≥
; \

156 
UINT8
 
Ty≥
; \

157 
UINT16
 
Re„ªn˚Cou¡
; \

158 
UINT8
 
Fœgs
;

	)

166 
	#AOPOBJ_AML_CONSTANT
 0x01

	)

167 
	#AOPOBJ_STATIC_POINTER
 0x02

	)

168 
	#AOPOBJ_DATA_VALID
 0x04

	)

169 
	#AOPOBJ_OBJECT_INITIALIZED
 0x08

	)

170 
	#AOPOBJ_SETUP_COMPLETE
 0x10

	)

171 
	#AOPOBJ_INVALID
 0x20

	)

180 
	sa˝i_obje˘_comm⁄


182 
	mACPI_OBJECT_COMMON_HEADER


184 } 
	tACPI_OBJECT_COMMON
;

187 
	sa˝i_obje˘_öãgî


189 
ACPI_OBJECT_COMMON_HEADER


190 
UINT8
 
	mFûl
[3];

191 
UINT64
 
	mVÆue
;

193 } 
	tACPI_OBJECT_INTEGER
;

202 
	#ACPI_COMMON_BUFFER_INFO
(
_Ty≥
) \

203 
_Ty≥
 *
Poöãr
; \

204 
UINT32
 
Lígth
;

	)

207 
	sa˝i_obje˘_°rög


209 
ACPI_OBJECT_COMMON_HEADER


210 
ACPI_COMMON_BUFFER_INFO
 ()

212 } 
	tACPI_OBJECT_STRING
;

215 
	sa˝i_obje˘_buf„r


217 
ACPI_OBJECT_COMMON_HEADER


218 
ACPI_COMMON_BUFFER_INFO
 (
UINT8
)

219 
UINT32
 
	mAmlLígth
;

220 
UINT8
 *
	mAmlSèπ
;

221 
ACPI_NAMESPACE_NODE
 *
	mNode
;

223 } 
	tACPI_OBJECT_BUFFER
;

226 
	sa˝i_obje˘_∑ckage


228 
ACPI_OBJECT_COMMON_HEADER


229 
ACPI_NAMESPACE_NODE
 *
	mNode
;

230 
a˝i_›î™d_obje˘
 **
	mEÀmíts
;

231 
UINT8
 *
	mAmlSèπ
;

232 
UINT32
 
	mAmlLígth
;

233 
UINT32
 
	mCou¡
;

235 } 
	tACPI_OBJECT_PACKAGE
;

244 
	sa˝i_obje˘_evít


246 
ACPI_OBJECT_COMMON_HEADER


247 
ACPI_SEMAPHORE
 
	mOsSem≠h‹e
;

249 } 
	tACPI_OBJECT_EVENT
;

252 
	sa˝i_obje˘_muãx


254 
ACPI_OBJECT_COMMON_HEADER


255 
UINT8
 
	mSyncLevñ
;

256 
UINT16
 
	mAcquisôi⁄Dïth
;

257 
ACPI_MUTEX
 
	mOsMuãx
;

258 
ACPI_THREAD_ID
 
	mThªadId
;

259 
a˝i_thªad_°©e
 *
	mOw√rThªad
;

260 
a˝i_›î™d_obje˘
 *
	mPªv
;

261 
a˝i_›î™d_obje˘
 *
	mNext
;

262 
ACPI_NAMESPACE_NODE
 *
	mNode
;

263 
UINT8
 
	mOrigöÆSyncLevñ
;

265 } 
	tACPI_OBJECT_MUTEX
;

268 
	sa˝i_obje˘_ªgi⁄


270 
ACPI_OBJECT_COMMON_HEADER


271 
UINT8
 
	mS∑˚Id
;

272 
ACPI_NAMESPACE_NODE
 *
	mNode
;

273 
a˝i_›î™d_obje˘
 *
	mH™dÀr
;

274 
a˝i_›î™d_obje˘
 *
	mNext
;

275 
ACPI_PHYSICAL_ADDRESS
 
	mAddªss
;

276 
UINT32
 
	mLígth
;

278 } 
	tACPI_OBJECT_REGION
;

281 
	sa˝i_obje˘_mëhod


283 
ACPI_OBJECT_COMMON_HEADER


284 
UINT8
 
	mInfoFœgs
;

285 
UINT8
 
	mP¨amCou¡
;

286 
UINT8
 
	mSyncLevñ
;

287 
a˝i_›î™d_obje˘
 *
	mMuãx
;

288 
UINT8
 *
	mAmlSèπ
;

291 
ACPI_INTERNAL_METHOD
 
	mIm∂emíèti⁄
;

292 
a˝i_›î™d_obje˘
 *
	mH™dÀr
;

293 } 
	mDi•©ch
;

295 
UINT32
 
	mAmlLígth
;

296 
UINT8
 
	mThªadCou¡
;

297 
ACPI_OWNER_ID
 
	mOw√rId
;

299 } 
	tACPI_OBJECT_METHOD
;

303 
	#ACPI_METHOD_MODULE_LEVEL
 0x01

	)

304 
	#ACPI_METHOD_INTERNAL_ONLY
 0x02

	)

305 
	#ACPI_METHOD_SERIALIZED
 0x04

	)

306 
	#ACPI_METHOD_SERIALIZED_PENDING
 0x08

	)

307 
	#ACPI_METHOD_IGNORE_SYNC_LEVEL
 0x10

	)

308 
	#ACPI_METHOD_MODIFIED_NAMESPACE
 0x20

	)

320 
	#ACPI_COMMON_NOTIFY_INFO
 \

321 
a˝i_›î™d_obje˘
 *
NŸifyLi°
[2]; \

322 
a˝i_›î™d_obje˘
 *
H™dÀr
;

	)

325 
	sa˝i_obje˘_nŸify_comm⁄


327 
ACPI_OBJECT_COMMON_HEADER


328 
	mACPI_COMMON_NOTIFY_INFO


330 } 
	tACPI_OBJECT_NOTIFY_COMMON
;

333 
	sa˝i_obje˘_devi˚


335 
ACPI_OBJECT_COMMON_HEADER


336 
ACPI_COMMON_NOTIFY_INFO


337 
ACPI_GPE_BLOCK_INFO
 *
	mG≥Block
;

339 } 
	tACPI_OBJECT_DEVICE
;

342 
	sa˝i_obje˘_powî_ªsour˚


344 
ACPI_OBJECT_COMMON_HEADER


345 
ACPI_COMMON_NOTIFY_INFO


346 
UINT32
 
	mSy°emLevñ
;

347 
UINT32
 
	mResour˚Ordî
;

349 } 
	tACPI_OBJECT_POWER_RESOURCE
;

352 
	sa˝i_obje˘_¥o˚ss‹


354 
ACPI_OBJECT_COMMON_HEADER


358 
UINT8
 
	mProcId
;

359 
UINT8
 
	mLígth
;

360 
ACPI_COMMON_NOTIFY_INFO


361 
ACPI_IO_ADDRESS
 
	mAddªss
;

363 } 
	tACPI_OBJECT_PROCESSOR
;

366 
	sa˝i_obje˘_thîmÆ_z⁄e


368 
ACPI_OBJECT_COMMON_HEADER


369 
	mACPI_COMMON_NOTIFY_INFO


371 } 
	tACPI_OBJECT_THERMAL_ZONE
;

385 
	#ACPI_COMMON_FIELD_INFO
 \

386 
UINT8
 
FõldFœgs
; \

387 
UINT8
 
Aâribuã
; \

388 
UINT8
 
Ac˚ssByãWidth
; \

389 
ACPI_NAMESPACE_NODE
 *
Node
; \

390 
UINT32
 
BôLígth
; \

391 
UINT32
 
Ba£ByãOff£t
; \

392 
UINT32
 
VÆue
; \

393 
UINT8
 
SèπFõldBôOff£t
; \

394 
UINT8
 
Ac˚ssLígth
;

	)

397 
	sa˝i_obje˘_fõld_comm⁄


399 
ACPI_OBJECT_COMMON_HEADER


400 
ACPI_COMMON_FIELD_INFO


401 
a˝i_›î™d_obje˘
 *
	mRegi⁄Obj
;

403 } 
	tACPI_OBJECT_FIELD_COMMON
;

406 
	sa˝i_obje˘_ªgi⁄_fõld


408 
ACPI_OBJECT_COMMON_HEADER


409 
ACPI_COMMON_FIELD_INFO


410 
UINT16
 
	mResour˚Lígth
;

411 
a˝i_›î™d_obje˘
 *
	mRegi⁄Obj
;

412 
UINT8
 *
	mResour˚Buf„r
;

413 
UINT16
 
	mPöNumbîIndex
;

415 } 
	tACPI_OBJECT_REGION_FIELD
;

418 
	sa˝i_obje˘_b™k_fõld


420 
ACPI_OBJECT_COMMON_HEADER


421 
ACPI_COMMON_FIELD_INFO


422 
a˝i_›î™d_obje˘
 *
	mRegi⁄Obj
;

423 
a˝i_›î™d_obje˘
 *
	mB™kObj
;

425 } 
	tACPI_OBJECT_BANK_FIELD
;

428 
	sa˝i_obje˘_ödex_fõld


430 
ACPI_OBJECT_COMMON_HEADER


431 
ACPI_COMMON_FIELD_INFO


437 
a˝i_›î™d_obje˘
 *
	mIndexObj
;

438 
a˝i_›î™d_obje˘
 *
	mD©aObj
;

440 } 
	tACPI_OBJECT_INDEX_FIELD
;

445 
	sa˝i_obje˘_buf„r_fõld


447 
ACPI_OBJECT_COMMON_HEADER


448 
ACPI_COMMON_FIELD_INFO


449 
a˝i_›î™d_obje˘
 *
	mBuf„rObj
;

451 } 
	tACPI_OBJECT_BUFFER_FIELD
;

460 
	sa˝i_obje˘_nŸify_h™dÀr


462 
ACPI_OBJECT_COMMON_HEADER


463 
ACPI_NAMESPACE_NODE
 *
	mNode
;

464 
UINT32
 
	mH™dÀrTy≥
;

465 
ACPI_NOTIFY_HANDLER
 
	mH™dÀr
;

466 *
	mC⁄ãxt
;

467 
a˝i_›î™d_obje˘
 *
	mNext
[2];

469 } 
	tACPI_OBJECT_NOTIFY_HANDLER
;

472 
	sa˝i_obje˘_addr_h™dÀr


474 
ACPI_OBJECT_COMMON_HEADER


475 
UINT8
 
	mS∑˚Id
;

476 
UINT8
 
	mH™dÀrFœgs
;

477 
ACPI_ADR_SPACE_HANDLER
 
	mH™dÀr
;

478 
ACPI_NAMESPACE_NODE
 *
	mNode
;

479 *
	mC⁄ãxt
;

480 
ACPI_ADR_SPACE_SETUP
 
	mSëup
;

481 
a˝i_›î™d_obje˘
 *
	mRegi⁄Li°
;

482 
a˝i_›î™d_obje˘
 *
	mNext
;

484 } 
	tACPI_OBJECT_ADDR_HANDLER
;

488 
	#ACPI_ADDR_HANDLER_DEFAULT_INSTALLED
 0x01

	)

502 
	sa˝i_obje˘_ª„ªn˚


504 
ACPI_OBJECT_COMMON_HEADER


505 
UINT8
 
	mCœss
;

506 
UINT8
 
	mT¨gëTy≥
;

507 
UINT8
 
	mRe£rved
;

508 *
	mObje˘
;

509 
ACPI_NAMESPACE_NODE
 *
	mNode
;

510 
a˝i_›î™d_obje˘
 **
	mWhîe
;

511 
UINT32
 
	mVÆue
;

513 } 
	tACPI_OBJECT_REFERENCE
;

519 
	mACPI_REFCLASS_LOCAL
 = 0,

520 
	mACPI_REFCLASS_ARG
 = 1,

521 
	mACPI_REFCLASS_REFOF
 = 2,

522 
	mACPI_REFCLASS_INDEX
 = 3,

523 
	mACPI_REFCLASS_TABLE
 = 4,

524 
	mACPI_REFCLASS_NAME
 = 5,

525 
	mACPI_REFCLASS_DEBUG
 = 6,

527 
	mACPI_REFCLASS_MAX
 = 6

529 } 
	tACPI_REFERENCE_CLASSES
;

539 
	sa˝i_obje˘_exåa


541 
ACPI_OBJECT_COMMON_HEADER


542 
ACPI_NAMESPACE_NODE
 *
	mMëhod_REG
;

543 
ACPI_NAMESPACE_NODE
 *
	mSc›eNode
;

544 *
	mRegi⁄C⁄ãxt
;

545 
UINT8
 *
	mAmlSèπ
;

546 
UINT32
 
	mAmlLígth
;

548 } 
	tACPI_OBJECT_EXTRA
;

553 
	sa˝i_obje˘_d©a


555 
ACPI_OBJECT_COMMON_HEADER


556 
ACPI_OBJECT_HANDLER
 
	mH™dÀr
;

557 *
	mPoöãr
;

559 } 
	tACPI_OBJECT_DATA
;

564 
	sa˝i_obje˘_ˇche_li°


566 
ACPI_OBJECT_COMMON_HEADER


567 
a˝i_›î™d_obje˘
 *
	mNext
;

569 } 
	tACPI_OBJECT_CACHE_LIST
;

578 
	ua˝i_›î™d_obje˘


580 
ACPI_OBJECT_COMMON
 
	mComm⁄
;

581 
ACPI_OBJECT_INTEGER
 
	mI¡egî
;

582 
ACPI_OBJECT_STRING
 
	mSåög
;

583 
ACPI_OBJECT_BUFFER
 
	mBuf„r
;

584 
ACPI_OBJECT_PACKAGE
 
	mPackage
;

585 
ACPI_OBJECT_EVENT
 
	mEvít
;

586 
ACPI_OBJECT_METHOD
 
	mMëhod
;

587 
ACPI_OBJECT_MUTEX
 
	mMuãx
;

588 
ACPI_OBJECT_REGION
 
	mRegi⁄
;

589 
ACPI_OBJECT_NOTIFY_COMMON
 
	mComm⁄NŸify
;

590 
ACPI_OBJECT_DEVICE
 
	mDevi˚
;

591 
ACPI_OBJECT_POWER_RESOURCE
 
	mPowîResour˚
;

592 
ACPI_OBJECT_PROCESSOR
 
	mPro˚ss‹
;

593 
ACPI_OBJECT_THERMAL_ZONE
 
	mThîmÆZ⁄e
;

594 
ACPI_OBJECT_FIELD_COMMON
 
	mComm⁄Fõld
;

595 
ACPI_OBJECT_REGION_FIELD
 
	mFõld
;

596 
ACPI_OBJECT_BUFFER_FIELD
 
	mBuf„rFõld
;

597 
ACPI_OBJECT_BANK_FIELD
 
	mB™kFõld
;

598 
ACPI_OBJECT_INDEX_FIELD
 
	mIndexFõld
;

599 
ACPI_OBJECT_NOTIFY_HANDLER
 
	mNŸify
;

600 
ACPI_OBJECT_ADDR_HANDLER
 
	mAddªssS∑˚
;

601 
ACPI_OBJECT_REFERENCE
 
	mRe„ªn˚
;

602 
ACPI_OBJECT_EXTRA
 
	mExåa
;

603 
ACPI_OBJECT_DATA
 
	mD©a
;

604 
ACPI_OBJECT_CACHE_LIST
 
	mCache
;

611 
ACPI_NAMESPACE_NODE
 
	mNode
;

613 } 
	tACPI_OPERAND_OBJECT
;

624 
	#ACPI_DESC_TYPE_CACHED
 0x01

	)

625 
	#ACPI_DESC_TYPE_STATE
 0x02

	)

626 
	#ACPI_DESC_TYPE_STATE_UPDATE
 0x03

	)

627 
	#ACPI_DESC_TYPE_STATE_PACKAGE
 0x04

	)

628 
	#ACPI_DESC_TYPE_STATE_CONTROL
 0x05

	)

629 
	#ACPI_DESC_TYPE_STATE_RPSCOPE
 0x06

	)

630 
	#ACPI_DESC_TYPE_STATE_PSCOPE
 0x07

	)

631 
	#ACPI_DESC_TYPE_STATE_WSCOPE
 0x08

	)

632 
	#ACPI_DESC_TYPE_STATE_RESULT
 0x09

	)

633 
	#ACPI_DESC_TYPE_STATE_NOTIFY
 0x0A

	)

634 
	#ACPI_DESC_TYPE_STATE_THREAD
 0x0B

	)

635 
	#ACPI_DESC_TYPE_WALK
 0x0C

	)

636 
	#ACPI_DESC_TYPE_PARSER
 0x0D

	)

637 
	#ACPI_DESC_TYPE_OPERAND
 0x0E

	)

638 
	#ACPI_DESC_TYPE_NAMED
 0x0F

	)

639 
	#ACPI_DESC_TYPE_MAX
 0x0F

	)

642 
	sa˝i_comm⁄_des¸ùt‹


644 *
	mComm⁄Poöãr
;

645 
UINT8
 
	mDes¸ùt‹Ty≥
;

647 } 
	tACPI_COMMON_DESCRIPTOR
;

649 
	ua˝i_des¸ùt‹


651 
ACPI_COMMON_DESCRIPTOR
 
	mComm⁄
;

652 
ACPI_OPERAND_OBJECT
 
	mObje˘
;

653 
ACPI_NAMESPACE_NODE
 
	mNode
;

654 
ACPI_PARSE_OBJECT
 
	mOp
;

656 } 
	tACPI_DESCRIPTOR
;

658 #¥agm®
∑ck
()

	@src/extern/acpica/source/include/acopcode.h

116 #i‚de‡
__ACOPCODE_H__


117 
	#__ACOPCODE_H__


	)

119 
	#MAX_EXTENDED_OPCODE
 0x88

	)

120 
	#NUM_EXTENDED_OPCODE
 (
MAX_EXTENDED_OPCODE
 + 1)

	)

121 
	#MAX_INTERNAL_OPCODE


	)

122 
	#NUM_INTERNAL_OPCODE
 (
MAX_INTERNAL_OPCODE
 + 1)

	)

126 
	#_UNK
 0x6B

	)

133 
	#_ASC
 0x6C

	)

134 
	#_NAM
 0x6C

	)

135 
	#_PFX
 0x6D

	)

143 
	#ARGP_ACCESSFIELD_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

144 
	#ARGP_ACQUIRE_OP
 
	`ARGP_LIST2
 (
ARGP_SUPERNAME
, 
ARGP_WORDDATA
)

	)

145 
	#ARGP_ADD_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

146 
	#ARGP_ALIAS_OP
 
	`ARGP_LIST2
 (
ARGP_NAMESTRING
, 
ARGP_NAME
)

	)

147 
	#ARGP_ARG0
 
ARG_NONE


	)

148 
	#ARGP_ARG1
 
ARG_NONE


	)

149 
	#ARGP_ARG2
 
ARG_NONE


	)

150 
	#ARGP_ARG3
 
ARG_NONE


	)

151 
	#ARGP_ARG4
 
ARG_NONE


	)

152 
	#ARGP_ARG5
 
ARG_NONE


	)

153 
	#ARGP_ARG6
 
ARG_NONE


	)

154 
	#ARGP_BANK_FIELD_OP
 
	`ARGP_LIST6
 (
ARGP_PKGLENGTH
, 
ARGP_NAMESTRING
, ARGP_NAMESTRING,
ARGP_TERMARG
, 
ARGP_BYTEDATA
, 
ARGP_FIELDLIST
)

	)

155 
	#ARGP_BIT_AND_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

156 
	#ARGP_BIT_NAND_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

157 
	#ARGP_BIT_NOR_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

158 
	#ARGP_BIT_NOT_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

159 
	#ARGP_BIT_OR_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

160 
	#ARGP_BIT_XOR_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

161 
	#ARGP_BREAK_OP
 
ARG_NONE


	)

162 
	#ARGP_BREAK_POINT_OP
 
ARG_NONE


	)

163 
	#ARGP_BUFFER_OP
 
	`ARGP_LIST3
 (
ARGP_PKGLENGTH
, 
ARGP_TERMARG
, 
ARGP_BYTELIST
)

	)

164 
	#ARGP_BYTE_OP
 
	`ARGP_LIST1
 (
ARGP_BYTEDATA
)

	)

165 
	#ARGP_BYTELIST_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

166 
	#ARGP_CONCAT_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

167 
	#ARGP_CONCAT_RES_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

168 
	#ARGP_COND_REF_OF_OP
 
	`ARGP_LIST2
 (
ARGP_SUPERNAME
, ARGP_SUPERNAME)

	)

169 
	#ARGP_CONNECTFIELD_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

170 
	#ARGP_CONTINUE_OP
 
ARG_NONE


	)

171 
	#ARGP_COPY_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_SIMPLENAME
)

	)

172 
	#ARGP_CREATE_BIT_FIELD_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_NAME
)

	)

173 
	#ARGP_CREATE_BYTE_FIELD_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_NAME
)

	)

174 
	#ARGP_CREATE_DWORD_FIELD_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_NAME
)

	)

175 
	#ARGP_CREATE_FIELD_OP
 
	`ARGP_LIST4
 (
ARGP_TERMARG
, ARGP_TERMARG, ARGP_TERMARG, 
ARGP_NAME
)

	)

176 
	#ARGP_CREATE_QWORD_FIELD_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_NAME
)

	)

177 
	#ARGP_CREATE_WORD_FIELD_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_NAME
)

	)

178 
	#ARGP_DATA_REGION_OP
 
	`ARGP_LIST4
 (
ARGP_NAME
, 
ARGP_TERMARG
, ARGP_TERMARG, ARGP_TERMARG)

	)

179 
	#ARGP_DEBUG_OP
 
ARG_NONE


	)

180 
	#ARGP_DECREMENT_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

181 
	#ARGP_DEREF_OF_OP
 
	`ARGP_LIST1
 (
ARGP_TERMARG
)

	)

182 
	#ARGP_DEVICE_OP
 
	`ARGP_LIST3
 (
ARGP_PKGLENGTH
, 
ARGP_NAME
, 
ARGP_OBJLIST
)

	)

183 
	#ARGP_DIVIDE_OP
 
	`ARGP_LIST4
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
, ARGP_TARGET)

	)

184 
	#ARGP_DWORD_OP
 
	`ARGP_LIST1
 (
ARGP_DWORDDATA
)

	)

185 
	#ARGP_ELSE_OP
 
	`ARGP_LIST2
 (
ARGP_PKGLENGTH
, 
ARGP_TERMLIST
)

	)

186 
	#ARGP_EVENT_OP
 
	`ARGP_LIST1
 (
ARGP_NAME
)

	)

187 
	#ARGP_EXTERNAL_OP
 
	`ARGP_LIST3
 (
ARGP_NAMESTRING
, 
ARGP_BYTEDATA
, ARGP_BYTEDATA)

	)

188 
	#ARGP_FATAL_OP
 
	`ARGP_LIST3
 (
ARGP_BYTEDATA
, 
ARGP_DWORDDATA
, 
ARGP_TERMARG
)

	)

189 
	#ARGP_FIELD_OP
 
	`ARGP_LIST4
 (
ARGP_PKGLENGTH
, 
ARGP_NAMESTRING
, 
ARGP_BYTEDATA
, 
ARGP_FIELDLIST
)

	)

190 
	#ARGP_FIND_SET_LEFT_BIT_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

191 
	#ARGP_FIND_SET_RIGHT_BIT_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

192 
	#ARGP_FROM_BCD_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

193 
	#ARGP_IF_OP
 
	`ARGP_LIST3
 (
ARGP_PKGLENGTH
, 
ARGP_TERMARG
, 
ARGP_TERMLIST
)

	)

194 
	#ARGP_INCREMENT_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

195 
	#ARGP_INDEX_FIELD_OP
 
	`ARGP_LIST5
 (
ARGP_PKGLENGTH
, 
ARGP_NAMESTRING
, ARGP_NAMESTRING,
ARGP_BYTEDATA
, 
ARGP_FIELDLIST
)

	)

196 
	#ARGP_INDEX_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

197 
	#ARGP_LAND_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, ARGP_TERMARG)

	)

198 
	#ARGP_LEQUAL_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, ARGP_TERMARG)

	)

199 
	#ARGP_LGREATER_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, ARGP_TERMARG)

	)

200 
	#ARGP_LGREATEREQUAL_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, ARGP_TERMARG)

	)

201 
	#ARGP_LLESS_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, ARGP_TERMARG)

	)

202 
	#ARGP_LLESSEQUAL_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, ARGP_TERMARG)

	)

203 
	#ARGP_LNOT_OP
 
	`ARGP_LIST1
 (
ARGP_TERMARG
)

	)

204 
	#ARGP_LNOTEQUAL_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, ARGP_TERMARG)

	)

205 
	#ARGP_LOAD_OP
 
	`ARGP_LIST2
 (
ARGP_NAMESTRING
, 
ARGP_SUPERNAME
)

	)

206 
	#ARGP_LOAD_TABLE_OP
 
	`ARGP_LIST6
 (
ARGP_TERMARG
, ARGP_TERMARG, ARGP_TERMARG, ARGP_TERMARG, ARGP_TERMARG, ARGP_TERMARG)

	)

207 
	#ARGP_LOCAL0
 
ARG_NONE


	)

208 
	#ARGP_LOCAL1
 
ARG_NONE


	)

209 
	#ARGP_LOCAL2
 
ARG_NONE


	)

210 
	#ARGP_LOCAL3
 
ARG_NONE


	)

211 
	#ARGP_LOCAL4
 
ARG_NONE


	)

212 
	#ARGP_LOCAL5
 
ARG_NONE


	)

213 
	#ARGP_LOCAL6
 
ARG_NONE


	)

214 
	#ARGP_LOCAL7
 
ARG_NONE


	)

215 
	#ARGP_LOR_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, ARGP_TERMARG)

	)

216 
	#ARGP_MATCH_OP
 
	`ARGP_LIST6
 (
ARGP_TERMARG
, 
ARGP_BYTEDATA
, ARGP_TERMARG, ARGP_BYTEDATA, ARGP_TERMARG, ARGP_TERMARG)

	)

217 
	#ARGP_METHOD_OP
 
	`ARGP_LIST4
 (
ARGP_PKGLENGTH
, 
ARGP_NAME
, 
ARGP_BYTEDATA
, 
ARGP_TERMLIST
)

	)

218 
	#ARGP_METHODCALL_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

219 
	#ARGP_MID_OP
 
	`ARGP_LIST4
 (
ARGP_TERMARG
, ARGP_TERMARG, ARGP_TERMARG, 
ARGP_TARGET
)

	)

220 
	#ARGP_MOD_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

221 
	#ARGP_MULTIPLY_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

222 
	#ARGP_MUTEX_OP
 
	`ARGP_LIST2
 (
ARGP_NAME
, 
ARGP_BYTEDATA
)

	)

223 
	#ARGP_NAME_OP
 
	`ARGP_LIST2
 (
ARGP_NAME
, 
ARGP_DATAOBJ
)

	)

224 
	#ARGP_NAMEDFIELD_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

225 
	#ARGP_NAMEPATH_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

226 
	#ARGP_NOOP_OP
 
ARG_NONE


	)

227 
	#ARGP_NOTIFY_OP
 
	`ARGP_LIST2
 (
ARGP_SUPERNAME
, 
ARGP_TERMARG
)

	)

228 
	#ARGP_ONE_OP
 
ARG_NONE


	)

229 
	#ARGP_ONES_OP
 
ARG_NONE


	)

230 
	#ARGP_PACKAGE_OP
 
	`ARGP_LIST3
 (
ARGP_PKGLENGTH
, 
ARGP_BYTEDATA
, 
ARGP_DATAOBJLIST
)

	)

231 
	#ARGP_POWER_RES_OP
 
	`ARGP_LIST5
 (
ARGP_PKGLENGTH
, 
ARGP_NAME
, 
ARGP_BYTEDATA
, 
ARGP_WORDDATA
, 
ARGP_OBJLIST
)

	)

232 
	#ARGP_PROCESSOR_OP
 
	`ARGP_LIST6
 (
ARGP_PKGLENGTH
, 
ARGP_NAME
, 
ARGP_BYTEDATA
, 
ARGP_DWORDDATA
, ARGP_BYTEDATA, 
ARGP_OBJLIST
)

	)

233 
	#ARGP_QWORD_OP
 
	`ARGP_LIST1
 (
ARGP_QWORDDATA
)

	)

234 
	#ARGP_REF_OF_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

235 
	#ARGP_REGION_OP
 
	`ARGP_LIST4
 (
ARGP_NAME
, 
ARGP_BYTEDATA
, 
ARGP_TERMARG
, ARGP_TERMARG)

	)

236 
	#ARGP_RELEASE_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

237 
	#ARGP_RESERVEDFIELD_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

238 
	#ARGP_RESET_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

239 
	#ARGP_RETURN_OP
 
	`ARGP_LIST1
 (
ARGP_TERMARG
)

	)

240 
	#ARGP_REVISION_OP
 
ARG_NONE


	)

241 
	#ARGP_SCOPE_OP
 
	`ARGP_LIST3
 (
ARGP_PKGLENGTH
, 
ARGP_NAME
, 
ARGP_TERMLIST
)

	)

242 
	#ARGP_SERIALFIELD_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

243 
	#ARGP_SHIFT_LEFT_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

244 
	#ARGP_SHIFT_RIGHT_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

245 
	#ARGP_SIGNAL_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

246 
	#ARGP_SIZE_OF_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

247 
	#ARGP_SLEEP_OP
 
	`ARGP_LIST1
 (
ARGP_TERMARG
)

	)

248 
	#ARGP_STALL_OP
 
	`ARGP_LIST1
 (
ARGP_TERMARG
)

	)

249 
	#ARGP_STATICSTRING_OP
 
	`ARGP_LIST1
 (
ARGP_NAMESTRING
)

	)

250 
	#ARGP_STORE_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_SUPERNAME
)

	)

251 
	#ARGP_STRING_OP
 
	`ARGP_LIST1
 (
ARGP_CHARLIST
)

	)

252 
	#ARGP_SUBTRACT_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

253 
	#ARGP_THERMAL_ZONE_OP
 
	`ARGP_LIST3
 (
ARGP_PKGLENGTH
, 
ARGP_NAME
, 
ARGP_OBJLIST
)

	)

254 
	#ARGP_TIMER_OP
 
ARG_NONE


	)

255 
	#ARGP_TO_BCD_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

256 
	#ARGP_TO_BUFFER_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

257 
	#ARGP_TO_DEC_STR_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

258 
	#ARGP_TO_HEX_STR_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

259 
	#ARGP_TO_INTEGER_OP
 
	`ARGP_LIST2
 (
ARGP_TERMARG
, 
ARGP_TARGET
)

	)

260 
	#ARGP_TO_STRING_OP
 
	`ARGP_LIST3
 (
ARGP_TERMARG
, ARGP_TERMARG, 
ARGP_TARGET
)

	)

261 
	#ARGP_TYPE_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

262 
	#ARGP_UNLOAD_OP
 
	`ARGP_LIST1
 (
ARGP_SUPERNAME
)

	)

263 
	#ARGP_VAR_PACKAGE_OP
 
	`ARGP_LIST3
 (
ARGP_PKGLENGTH
, 
ARGP_TERMARG
, 
ARGP_DATAOBJLIST
)

	)

264 
	#ARGP_WAIT_OP
 
	`ARGP_LIST2
 (
ARGP_SUPERNAME
, 
ARGP_TERMARG
)

	)

265 
	#ARGP_WHILE_OP
 
	`ARGP_LIST3
 (
ARGP_PKGLENGTH
, 
ARGP_TERMARG
, 
ARGP_TERMLIST
)

	)

266 
	#ARGP_WORD_OP
 
	`ARGP_LIST1
 (
ARGP_WORDDATA
)

	)

267 
	#ARGP_ZERO_OP
 
ARG_NONE


	)

277 
	#ARGI_ACCESSFIELD_OP
 
ARGI_INVALID_OPCODE


	)

278 
	#ARGI_ACQUIRE_OP
 
	`ARGI_LIST2
 (
ARGI_MUTEX
, 
ARGI_INTEGER
)

	)

279 
	#ARGI_ADD_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

280 
	#ARGI_ALIAS_OP
 
ARGI_INVALID_OPCODE


	)

281 
	#ARGI_ARG0
 
ARG_NONE


	)

282 
	#ARGI_ARG1
 
ARG_NONE


	)

283 
	#ARGI_ARG2
 
ARG_NONE


	)

284 
	#ARGI_ARG3
 
ARG_NONE


	)

285 
	#ARGI_ARG4
 
ARG_NONE


	)

286 
	#ARGI_ARG5
 
ARG_NONE


	)

287 
	#ARGI_ARG6
 
ARG_NONE


	)

288 
	#ARGI_BANK_FIELD_OP
 
ARGI_INVALID_OPCODE


	)

289 
	#ARGI_BIT_AND_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

290 
	#ARGI_BIT_NAND_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

291 
	#ARGI_BIT_NOR_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

292 
	#ARGI_BIT_NOT_OP
 
	`ARGI_LIST2
 (
ARGI_INTEGER
, 
ARGI_TARGETREF
)

	)

293 
	#ARGI_BIT_OR_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

294 
	#ARGI_BIT_XOR_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

295 
	#ARGI_BREAK_OP
 
ARG_NONE


	)

296 
	#ARGI_BREAK_POINT_OP
 
ARG_NONE


	)

297 
	#ARGI_BUFFER_OP
 
	`ARGI_LIST1
 (
ARGI_INTEGER
)

	)

298 
	#ARGI_BYTE_OP
 
ARGI_INVALID_OPCODE


	)

299 
	#ARGI_BYTELIST_OP
 
ARGI_INVALID_OPCODE


	)

300 
	#ARGI_CONCAT_OP
 
	`ARGI_LIST3
 (
ARGI_COMPUTEDATA
,ARGI_COMPUTEDATA, 
ARGI_TARGETREF
)

	)

301 
	#ARGI_CONCAT_RES_OP
 
	`ARGI_LIST3
 (
ARGI_BUFFER
, ARGI_BUFFER, 
ARGI_TARGETREF
)

	)

302 
	#ARGI_COND_REF_OF_OP
 
	`ARGI_LIST2
 (
ARGI_OBJECT_REF
, 
ARGI_TARGETREF
)

	)

303 
	#ARGI_CONNECTFIELD_OP
 
ARGI_INVALID_OPCODE


	)

304 
	#ARGI_CONTINUE_OP
 
ARGI_INVALID_OPCODE


	)

305 
	#ARGI_COPY_OP
 
	`ARGI_LIST2
 (
ARGI_ANYTYPE
, 
ARGI_SIMPLE_TARGET
)

	)

306 
	#ARGI_CREATE_BIT_FIELD_OP
 
	`ARGI_LIST3
 (
ARGI_BUFFER
, 
ARGI_INTEGER
, 
ARGI_REFERENCE
)

	)

307 
	#ARGI_CREATE_BYTE_FIELD_OP
 
	`ARGI_LIST3
 (
ARGI_BUFFER
, 
ARGI_INTEGER
, 
ARGI_REFERENCE
)

	)

308 
	#ARGI_CREATE_DWORD_FIELD_OP
 
	`ARGI_LIST3
 (
ARGI_BUFFER
, 
ARGI_INTEGER
, 
ARGI_REFERENCE
)

	)

309 
	#ARGI_CREATE_FIELD_OP
 
	`ARGI_LIST4
 (
ARGI_BUFFER
, 
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_REFERENCE
)

	)

310 
	#ARGI_CREATE_QWORD_FIELD_OP
 
	`ARGI_LIST3
 (
ARGI_BUFFER
, 
ARGI_INTEGER
, 
ARGI_REFERENCE
)

	)

311 
	#ARGI_CREATE_WORD_FIELD_OP
 
	`ARGI_LIST3
 (
ARGI_BUFFER
, 
ARGI_INTEGER
, 
ARGI_REFERENCE
)

	)

312 
	#ARGI_DATA_REGION_OP
 
	`ARGI_LIST3
 (
ARGI_STRING
, ARGI_STRING, ARGI_STRING)

	)

313 
	#ARGI_DEBUG_OP
 
ARG_NONE


	)

314 
	#ARGI_DECREMENT_OP
 
	`ARGI_LIST1
 (
ARGI_TARGETREF
)

	)

315 
	#ARGI_DEREF_OF_OP
 
	`ARGI_LIST1
 (
ARGI_REF_OR_STRING
)

	)

316 
	#ARGI_DEVICE_OP
 
ARGI_INVALID_OPCODE


	)

317 
	#ARGI_DIVIDE_OP
 
	`ARGI_LIST4
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
, ARGI_TARGETREF)

	)

318 
	#ARGI_DWORD_OP
 
ARGI_INVALID_OPCODE


	)

319 
	#ARGI_ELSE_OP
 
ARGI_INVALID_OPCODE


	)

320 
	#ARGI_EVENT_OP
 
ARGI_INVALID_OPCODE


	)

321 
	#ARGI_EXTERNAL_OP
 
	`ARGI_LIST3
 (
ARGI_STRING
, 
ARGI_INTEGER
, ARGI_INTEGER)

	)

322 
	#ARGI_FATAL_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, ARGI_INTEGER)

	)

323 
	#ARGI_FIELD_OP
 
ARGI_INVALID_OPCODE


	)

324 
	#ARGI_FIND_SET_LEFT_BIT_OP
 
	`ARGI_LIST2
 (
ARGI_INTEGER
, 
ARGI_TARGETREF
)

	)

325 
	#ARGI_FIND_SET_RIGHT_BIT_OP
 
	`ARGI_LIST2
 (
ARGI_INTEGER
, 
ARGI_TARGETREF
)

	)

326 
	#ARGI_FROM_BCD_OP
 
	`ARGI_LIST2
 (
ARGI_INTEGER
, 
ARGI_FIXED_TARGET
)

	)

327 
	#ARGI_IF_OP
 
ARGI_INVALID_OPCODE


	)

328 
	#ARGI_INCREMENT_OP
 
	`ARGI_LIST1
 (
ARGI_TARGETREF
)

	)

329 
	#ARGI_INDEX_FIELD_OP
 
ARGI_INVALID_OPCODE


	)

330 
	#ARGI_INDEX_OP
 
	`ARGI_LIST3
 (
ARGI_COMPLEXOBJ
, 
ARGI_INTEGER
, 
ARGI_TARGETREF
)

	)

331 
	#ARGI_LAND_OP
 
	`ARGI_LIST2
 (
ARGI_INTEGER
, ARGI_INTEGER)

	)

332 
	#ARGI_LEQUAL_OP
 
	`ARGI_LIST2
 (
ARGI_COMPUTEDATA
,ARGI_COMPUTEDATA)

	)

333 
	#ARGI_LGREATER_OP
 
	`ARGI_LIST2
 (
ARGI_COMPUTEDATA
,ARGI_COMPUTEDATA)

	)

334 
	#ARGI_LGREATEREQUAL_OP
 
ARGI_INVALID_OPCODE


	)

335 
	#ARGI_LLESS_OP
 
	`ARGI_LIST2
 (
ARGI_COMPUTEDATA
,ARGI_COMPUTEDATA)

	)

336 
	#ARGI_LLESSEQUAL_OP
 
ARGI_INVALID_OPCODE


	)

337 
	#ARGI_LNOT_OP
 
	`ARGI_LIST1
 (
ARGI_INTEGER
)

	)

338 
	#ARGI_LNOTEQUAL_OP
 
ARGI_INVALID_OPCODE


	)

339 
	#ARGI_LOAD_OP
 
	`ARGI_LIST2
 (
ARGI_REGION_OR_BUFFER
,
ARGI_TARGETREF
)

	)

340 
	#ARGI_LOAD_TABLE_OP
 
	`ARGI_LIST6
 (
ARGI_STRING
, ARGI_STRING, ARGI_STRING, ARGI_STRING, ARGI_STRING, 
ARGI_ANYTYPE
)

	)

341 
	#ARGI_LOCAL0
 
ARG_NONE


	)

342 
	#ARGI_LOCAL1
 
ARG_NONE


	)

343 
	#ARGI_LOCAL2
 
ARG_NONE


	)

344 
	#ARGI_LOCAL3
 
ARG_NONE


	)

345 
	#ARGI_LOCAL4
 
ARG_NONE


	)

346 
	#ARGI_LOCAL5
 
ARG_NONE


	)

347 
	#ARGI_LOCAL6
 
ARG_NONE


	)

348 
	#ARGI_LOCAL7
 
ARG_NONE


	)

349 
	#ARGI_LOR_OP
 
	`ARGI_LIST2
 (
ARGI_INTEGER
, ARGI_INTEGER)

	)

350 
	#ARGI_MATCH_OP
 
	`ARGI_LIST6
 (
ARGI_PACKAGE
, 
ARGI_INTEGER
, 
ARGI_COMPUTEDATA
, ARGI_INTEGER,ARGI_COMPUTEDATA,ARGI_INTEGER)

	)

351 
	#ARGI_METHOD_OP
 
ARGI_INVALID_OPCODE


	)

352 
	#ARGI_METHODCALL_OP
 
ARGI_INVALID_OPCODE


	)

353 
	#ARGI_MID_OP
 
	`ARGI_LIST4
 (
ARGI_BUFFER_OR_STRING
,
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

354 
	#ARGI_MOD_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

355 
	#ARGI_MULTIPLY_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

356 
	#ARGI_MUTEX_OP
 
ARGI_INVALID_OPCODE


	)

357 
	#ARGI_NAME_OP
 
ARGI_INVALID_OPCODE


	)

358 
	#ARGI_NAMEDFIELD_OP
 
ARGI_INVALID_OPCODE


	)

359 
	#ARGI_NAMEPATH_OP
 
ARGI_INVALID_OPCODE


	)

360 
	#ARGI_NOOP_OP
 
ARG_NONE


	)

361 
	#ARGI_NOTIFY_OP
 
	`ARGI_LIST2
 (
ARGI_DEVICE_REF
, 
ARGI_INTEGER
)

	)

362 
	#ARGI_ONE_OP
 
ARG_NONE


	)

363 
	#ARGI_ONES_OP
 
ARG_NONE


	)

364 
	#ARGI_PACKAGE_OP
 
	`ARGI_LIST1
 (
ARGI_INTEGER
)

	)

365 
	#ARGI_POWER_RES_OP
 
ARGI_INVALID_OPCODE


	)

366 
	#ARGI_PROCESSOR_OP
 
ARGI_INVALID_OPCODE


	)

367 
	#ARGI_QWORD_OP
 
ARGI_INVALID_OPCODE


	)

368 
	#ARGI_REF_OF_OP
 
	`ARGI_LIST1
 (
ARGI_OBJECT_REF
)

	)

369 
	#ARGI_REGION_OP
 
	`ARGI_LIST2
 (
ARGI_INTEGER
, ARGI_INTEGER)

	)

370 
	#ARGI_RELEASE_OP
 
	`ARGI_LIST1
 (
ARGI_MUTEX
)

	)

371 
	#ARGI_RESERVEDFIELD_OP
 
ARGI_INVALID_OPCODE


	)

372 
	#ARGI_RESET_OP
 
	`ARGI_LIST1
 (
ARGI_EVENT
)

	)

373 
	#ARGI_RETURN_OP
 
ARGI_INVALID_OPCODE


	)

374 
	#ARGI_REVISION_OP
 
ARG_NONE


	)

375 
	#ARGI_SCOPE_OP
 
ARGI_INVALID_OPCODE


	)

376 
	#ARGI_SERIALFIELD_OP
 
ARGI_INVALID_OPCODE


	)

377 
	#ARGI_SHIFT_LEFT_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

378 
	#ARGI_SHIFT_RIGHT_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

379 
	#ARGI_SIGNAL_OP
 
	`ARGI_LIST1
 (
ARGI_EVENT
)

	)

380 
	#ARGI_SIZE_OF_OP
 
	`ARGI_LIST1
 (
ARGI_DATAOBJECT
)

	)

381 
	#ARGI_SLEEP_OP
 
	`ARGI_LIST1
 (
ARGI_INTEGER
)

	)

382 
	#ARGI_STALL_OP
 
	`ARGI_LIST1
 (
ARGI_INTEGER
)

	)

383 
	#ARGI_STATICSTRING_OP
 
ARGI_INVALID_OPCODE


	)

384 
	#ARGI_STORE_OP
 
	`ARGI_LIST2
 (
ARGI_DATAREFOBJ
, 
ARGI_TARGETREF
)

	)

385 
	#ARGI_STRING_OP
 
ARGI_INVALID_OPCODE


	)

386 
	#ARGI_SUBTRACT_OP
 
	`ARGI_LIST3
 (
ARGI_INTEGER
, ARGI_INTEGER, 
ARGI_TARGETREF
)

	)

387 
	#ARGI_THERMAL_ZONE_OP
 
ARGI_INVALID_OPCODE


	)

388 
	#ARGI_TIMER_OP
 
ARG_NONE


	)

389 
	#ARGI_TO_BCD_OP
 
	`ARGI_LIST2
 (
ARGI_INTEGER
, 
ARGI_FIXED_TARGET
)

	)

390 
	#ARGI_TO_BUFFER_OP
 
	`ARGI_LIST2
 (
ARGI_COMPUTEDATA
,
ARGI_FIXED_TARGET
)

	)

391 
	#ARGI_TO_DEC_STR_OP
 
	`ARGI_LIST2
 (
ARGI_COMPUTEDATA
,
ARGI_FIXED_TARGET
)

	)

392 
	#ARGI_TO_HEX_STR_OP
 
	`ARGI_LIST2
 (
ARGI_COMPUTEDATA
,
ARGI_FIXED_TARGET
)

	)

393 
	#ARGI_TO_INTEGER_OP
 
	`ARGI_LIST2
 (
ARGI_COMPUTEDATA
,
ARGI_FIXED_TARGET
)

	)

394 
	#ARGI_TO_STRING_OP
 
	`ARGI_LIST3
 (
ARGI_BUFFER
, 
ARGI_INTEGER
, 
ARGI_FIXED_TARGET
)

	)

395 
	#ARGI_TYPE_OP
 
	`ARGI_LIST1
 (
ARGI_ANYTYPE
)

	)

396 
	#ARGI_UNLOAD_OP
 
	`ARGI_LIST1
 (
ARGI_DDBHANDLE
)

	)

397 
	#ARGI_VAR_PACKAGE_OP
 
	`ARGI_LIST1
 (
ARGI_INTEGER
)

	)

398 
	#ARGI_WAIT_OP
 
	`ARGI_LIST2
 (
ARGI_EVENT
, 
ARGI_INTEGER
)

	)

399 
	#ARGI_WHILE_OP
 
ARGI_INVALID_OPCODE


	)

400 
	#ARGI_WORD_OP
 
ARGI_INVALID_OPCODE


	)

401 
	#ARGI_ZERO_OP
 
ARG_NONE


	)

	@src/extern/acpica/source/include/acoutput.h

116 #i‚de‡
__ACOUTPUT_H__


117 
	#__ACOUTPUT_H__


	)

127 
	#ACPI_UTILITIES
 0x00000001

	)

128 
	#ACPI_HARDWARE
 0x00000002

	)

129 
	#ACPI_EVENTS
 0x00000004

	)

130 
	#ACPI_TABLES
 0x00000008

	)

131 
	#ACPI_NAMESPACE
 0x00000010

	)

132 
	#ACPI_PARSER
 0x00000020

	)

133 
	#ACPI_DISPATCHER
 0x00000040

	)

134 
	#ACPI_EXECUTER
 0x00000080

	)

135 
	#ACPI_RESOURCES
 0x00000100

	)

136 
	#ACPI_CA_DEBUGGER
 0x00000200

	)

137 
	#ACPI_OS_SERVICES
 0x00000400

	)

138 
	#ACPI_CA_DISASSEMBLER
 0x00000800

	)

142 
	#ACPI_COMPILER
 0x00001000

	)

143 
	#ACPI_TOOLS
 0x00002000

	)

144 
	#ACPI_EXAMPLE
 0x00004000

	)

145 
	#ACPI_DRIVER
 0x00008000

	)

146 
	#DT_COMPILER
 0x00010000

	)

147 
	#ASL_PREPROCESSOR
 0x00020000

	)

149 
	#ACPI_ALL_COMPONENTS
 0x0001FFFF

	)

150 
	#ACPI_COMPONENT_DEFAULT
 (
ACPI_ALL_COMPONENTS
)

	)

154 
	#ACPI_ALL_DRIVERS
 0xFFFF0000

	)

160 
	#ACPI_LV_INIT
 0x00000001

	)

161 
	#ACPI_LV_DEBUG_OBJECT
 0x00000002

	)

162 
	#ACPI_LV_INFO
 0x00000004

	)

163 
	#ACPI_LV_REPAIR
 0x00000008

	)

164 
	#ACPI_LV_ALL_EXCEPTIONS
 0x0000000F

	)

168 
	#ACPI_LV_INIT_NAMES
 0x00000020

	)

169 
	#ACPI_LV_PARSE
 0x00000040

	)

170 
	#ACPI_LV_LOAD
 0x00000080

	)

171 
	#ACPI_LV_DISPATCH
 0x00000100

	)

172 
	#ACPI_LV_EXEC
 0x00000200

	)

173 
	#ACPI_LV_NAMES
 0x00000400

	)

174 
	#ACPI_LV_OPREGION
 0x00000800

	)

175 
	#ACPI_LV_BFIELD
 0x00001000

	)

176 
	#ACPI_LV_TABLES
 0x00002000

	)

177 
	#ACPI_LV_VALUES
 0x00004000

	)

178 
	#ACPI_LV_OBJECTS
 0x00008000

	)

179 
	#ACPI_LV_RESOURCES
 0x00010000

	)

180 
	#ACPI_LV_USER_REQUESTS
 0x00020000

	)

181 
	#ACPI_LV_PACKAGE
 0x00040000

	)

182 
	#ACPI_LV_VERBOSITY1
 0x0007FF40 | 
ACPI_LV_ALL_EXCEPTIONS


	)

186 
	#ACPI_LV_ALLOCATIONS
 0x00100000

	)

187 
	#ACPI_LV_FUNCTIONS
 0x00200000

	)

188 
	#ACPI_LV_OPTIMIZATIONS
 0x00400000

	)

189 
	#ACPI_LV_VERBOSITY2
 0x00700000 | 
ACPI_LV_VERBOSITY1


	)

190 
	#ACPI_LV_ALL
 
ACPI_LV_VERBOSITY2


	)

194 
	#ACPI_LV_MUTEX
 0x01000000

	)

195 
	#ACPI_LV_THREADS
 0x02000000

	)

196 
	#ACPI_LV_IO
 0x04000000

	)

197 
	#ACPI_LV_INTERRUPTS
 0x08000000

	)

198 
	#ACPI_LV_VERBOSITY3
 0x0F000000 | 
ACPI_LV_VERBOSITY2


	)

202 
	#ACPI_LV_AML_DISASSEMBLE
 0x10000000

	)

203 
	#ACPI_LV_VERBOSE_INFO
 0x20000000

	)

204 
	#ACPI_LV_FULL_TABLES
 0x40000000

	)

205 
	#ACPI_LV_EVENTS
 0x80000000

	)

206 
	#ACPI_LV_VERBOSE
 0xF0000000

	)

212 
	#ACPI_DEBUG_LEVEL
(
dl
Ë(
UINT32
Ëdl,
ACPI_DEBUG_PARAMETERS


	)

220 
	#ACPI_DB_INIT
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_INIT
)

	)

221 
	#ACPI_DB_DEBUG_OBJECT
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_DEBUG_OBJECT
)

	)

222 
	#ACPI_DB_INFO
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_INFO
)

	)

223 
	#ACPI_DB_REPAIR
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_REPAIR
)

	)

224 
	#ACPI_DB_ALL_EXCEPTIONS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_ALL_EXCEPTIONS
)

	)

228 
	#ACPI_DB_INIT_NAMES
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_INIT_NAMES
)

	)

229 
	#ACPI_DB_THREADS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_THREADS
)

	)

230 
	#ACPI_DB_PARSE
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_PARSE
)

	)

231 
	#ACPI_DB_DISPATCH
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_DISPATCH
)

	)

232 
	#ACPI_DB_LOAD
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_LOAD
)

	)

233 
	#ACPI_DB_EXEC
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_EXEC
)

	)

234 
	#ACPI_DB_NAMES
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_NAMES
)

	)

235 
	#ACPI_DB_OPREGION
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_OPREGION
)

	)

236 
	#ACPI_DB_BFIELD
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_BFIELD
)

	)

237 
	#ACPI_DB_TABLES
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_TABLES
)

	)

238 
	#ACPI_DB_FUNCTIONS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_FUNCTIONS
)

	)

239 
	#ACPI_DB_OPTIMIZATIONS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_OPTIMIZATIONS
)

	)

240 
	#ACPI_DB_VALUES
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_VALUES
)

	)

241 
	#ACPI_DB_OBJECTS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_OBJECTS
)

	)

242 
	#ACPI_DB_ALLOCATIONS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_ALLOCATIONS
)

	)

243 
	#ACPI_DB_RESOURCES
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_RESOURCES
)

	)

244 
	#ACPI_DB_IO
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_IO
)

	)

245 
	#ACPI_DB_INTERRUPTS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_INTERRUPTS
)

	)

246 
	#ACPI_DB_USER_REQUESTS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_USER_REQUESTS
)

	)

247 
	#ACPI_DB_PACKAGE
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_PACKAGE
)

	)

248 
	#ACPI_DB_MUTEX
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_MUTEX
)

	)

249 
	#ACPI_DB_EVENTS
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_EVENTS
)

	)

251 
	#ACPI_DB_ALL
 
	`ACPI_DEBUG_LEVEL
 (
ACPI_LV_ALL
)

	)

255 
	#ACPI_DEBUG_DEFAULT
 (
ACPI_LV_INIT
 | 
ACPI_LV_DEBUG_OBJECT
 | 
ACPI_LV_REPAIR
)

	)

256 
	#ACPI_NORMAL_DEFAULT
 (
ACPI_LV_INIT
 | 
ACPI_LV_DEBUG_OBJECT
 | 
ACPI_LV_REPAIR
)

	)

257 
	#ACPI_DEBUG_ALL
 (
ACPI_LV_AML_DISASSEMBLE
 | 
ACPI_LV_ALL_EXCEPTIONS
 | 
ACPI_LV_ALL
)

	)

260 #i‡
deföed
 (
ACPI_DEBUG_OUTPUT
Ë|| !deföed (
ACPI_NO_ERROR_MESSAGES
)

267 
	#ACPI_MODULE_NAME
(
Name
Ëc⁄° 
ACPI_UNUSED_VAR
 
_A˝iModuÀName
[] = Name;

	)

273 
	#ACPI_MODULE_NAME
(
Name
)

	)

274 
	#_A˝iModuÀName
 ""

	)

280 #i‚de‡
ACPI_NO_ERROR_MESSAGES


281 
	#AE_INFO
 
_A˝iModuÀName
, 
__LINE__


	)

288 
	#ACPI_INFO
(
∂i°
Ë
A˝iInfo
 
	)
plist

289 
	#ACPI_WARNING
(
∂i°
Ë
A˝iW¨nög
 
	)
plist

290 
	#ACPI_EXCEPTION
(
∂i°
Ë
A˝iEx˚±i⁄
 
	)
plist

291 
	#ACPI_ERROR
(
∂i°
Ë
A˝iEº‹
 
	)
plist

292 
	#ACPI_BIOS_WARNING
(
∂i°
Ë
A˝iBiosW¨nög
 
	)
plist

293 
	#ACPI_BIOS_ERROR
(
∂i°
Ë
A˝iBiosEº‹
 
	)
plist

294 
	#ACPI_DEBUG_OBJECT
(
obj
,
l
,
i
Ë
	`A˝iExDoDebugObje˘
(obj,l,i)

	)

300 
	#ACPI_INFO
(
∂i°
)

	)

301 
	#ACPI_WARNING
(
∂i°
)

	)

302 
	#ACPI_EXCEPTION
(
∂i°
)

	)

303 
	#ACPI_ERROR
(
∂i°
)

	)

304 
	#ACPI_BIOS_WARNING
(
∂i°
)

	)

305 
	#ACPI_BIOS_ERROR
(
∂i°
)

	)

306 
	#ACPI_DEBUG_OBJECT
(
obj
,
l
,
i
)

	)

314 #ifde‡
ACPI_DEBUG_OUTPUT


321 #i‚de‡
ACPI_GET_FUNCTION_NAME


322 
	#ACPI_GET_FUNCTION_NAME
 
_A˝iFun˘i⁄Name


	)

330 
	#ACPI_FUNCTION_NAME
(
Name
Ëc⁄° 
_A˝iFun˘i⁄Name
[] = #Name;

	)

335 
	#ACPI_FUNCTION_NAME
(
Name
)

	)

342 
	#ACPI_DEBUG_PARAMETERS
 \

343 
__LINE__
, 
ACPI_GET_FUNCTION_NAME
, 
_A˝iModuÀName
, 
_COMPONENT


	)

347 
	#ACPI_IS_DEBUG_ENABLED
(
Levñ
, 
Comp⁄ít
) \

348 ((
Levñ
 & 
A˝iDbgLevñ
Ë&& (
Comp⁄ít
 & 
A˝iDbgLayî
))

	)

365 #ifde‡
ACPI_USE_DO_WHILE_0


366 
	#ACPI_DO_WHILE0
(
a
Ëdÿ®0)

	)

368 
	#ACPI_DO_WHILE0
(
a
Ë
	)
a

373 
	#ACPI_DEBUG_PRINT
(
∂i°
Ë
ACPI_ACTUAL_DEBUG
 
	)
plist

374 
	#ACPI_DEBUG_PRINT_RAW
(
∂i°
Ë
ACPI_ACTUAL_DEBUG_RAW
 
	)
plist

378 
	#ACPI_DO_DEBUG_PRINT
(
Fun˘i⁄
, 
Levñ
, 
Löe
, 
Fûíame
, 
ModuÀ«me
, 
Comp⁄ít
, ...) \

379 
	`ACPI_DO_WHILE0
 ({ \

380 i‡(
	`ACPI_IS_DEBUG_ENABLED
 (
Levñ
, 
Comp⁄ít
)) \

382 
	`Fun˘i⁄
 (
Levñ
, 
Löe
, 
Fûíame
, 
ModuÀ«me
, 
Comp⁄ít
, 
__VA_ARGS__
); \

384 })

	)

386 
	#ACPI_ACTUAL_DEBUG
(
Levñ
, 
Löe
, 
Fûíame
, 
ModuÀ«me
, 
Comp⁄ít
, ...) \

387 
	`ACPI_DO_DEBUG_PRINT
 (
A˝iDebugPröt
, 
Levñ
, 
Löe
, \

388 
Fûíame
, 
ModuÀ«me
, 
Comp⁄ít
, 
__VA_ARGS__
)

	)

390 
	#ACPI_ACTUAL_DEBUG_RAW
(
Levñ
, 
Löe
, 
Fûíame
, 
ModuÀ«me
, 
Comp⁄ít
, ...) \

391 
	`ACPI_DO_DEBUG_PRINT
 (
A˝iDebugPrötRaw
, 
Levñ
, 
Löe
, \

392 
Fûíame
, 
ModuÀ«me
, 
Comp⁄ít
, 
__VA_ARGS__
)

	)

404 
	#ACPI_TRACE_ENTRY
(
Name
, 
Fun˘i⁄
, 
Ty≥
, 
P¨am
) \

405 
	`ACPI_FUNCTION_NAME
 (
Name
) \

406 
	`Fun˘i⁄
 (
ACPI_DEBUG_PARAMETERS
, (
Ty≥
Ë(
P¨am
))

	)

410 
	#ACPI_FUNCTION_TRACE
(
Name
) \

411 
	`ACPI_FUNCTION_NAME
(
Name
) \

412 
	`A˝iUtTø˚
 (
ACPI_DEBUG_PARAMETERS
)

	)

414 
	#ACPI_FUNCTION_TRACE_PTR
(
Name
, 
Poöãr
) \

415 
	`ACPI_TRACE_ENTRY
 (
Name
, 
A˝iUtTø˚På
, *, 
Poöãr
)

	)

417 
	#ACPI_FUNCTION_TRACE_U32
(
Name
, 
VÆue
) \

418 
	`ACPI_TRACE_ENTRY
 (
Name
, 
A˝iUtTø˚U32
, 
UINT32
, 
VÆue
)

	)

420 
	#ACPI_FUNCTION_TRACE_STR
(
Name
, 
Såög
) \

421 
	`ACPI_TRACE_ENTRY
 (
Name
, 
A˝iUtTø˚Så
, *, 
Såög
)

	)

423 
	#ACPI_FUNCTION_ENTRY
() \

424 
	`A˝iUtTøckSèckPå
()

	)

448 #i‚de‡
ACPI_SIMPLE_RETURN_MACROS


450 
	#ACPI_TRACE_EXIT
(
Fun˘i⁄
, 
Ty≥
, 
P¨am
) \

451 
	`ACPI_DO_WHILE0
 ({ \

452 
Ty≥
 
_P¨am
 = (Ty≥Ë(
P¨am
); \

453 
	`Fun˘i⁄
 (
ACPI_DEBUG_PARAMETERS
, 
_P¨am
); \

454  (
_P¨am
); \

455 })

	)

459 
	#ACPI_TRACE_EXIT
(
Fun˘i⁄
, 
Ty≥
, 
P¨am
) \

460 
	`ACPI_DO_WHILE0
 ({ \

461 
	`Fun˘i⁄
 (
ACPI_DEBUG_PARAMETERS
, (
Ty≥
Ë(
P¨am
)); \

462  (
P¨am
); \

463 })

	)

469 
	#ªtu∫_VOID
 \

470 
	`ACPI_DO_WHILE0
 ({ \

471 
	`A˝iUtExô
 (
ACPI_DEBUG_PARAMETERS
); \

473 })

	)

475 
	#ªtu∫_ACPI_STATUS
(
Sètus
) \

476 
	`ACPI_TRACE_EXIT
 (
A˝iUtSètusExô
, 
ACPI_STATUS
, 
Sètus
)

	)

478 
	#ªtu∫_PTR
(
Poöãr
) \

479 
	`ACPI_TRACE_EXIT
 (
A˝iUtPåExô
, *, 
Poöãr
)

	)

481 
	#ªtu∫_VALUE
(
VÆue
) \

482 
	`ACPI_TRACE_EXIT
 (
A˝iUtVÆueExô
, 
UINT64
, 
VÆue
)

	)

484 
	#ªtu∫_UINT32
(
VÆue
) \

485 
	`ACPI_TRACE_EXIT
 (
A˝iUtVÆueExô
, 
UINT32
, 
VÆue
)

	)

487 
	#ªtu∫_UINT8
(
VÆue
) \

488 
	`ACPI_TRACE_EXIT
 (
A˝iUtVÆueExô
, 
UINT8
, 
VÆue
)

	)

492 
	#ACPI_DEBUG_EXEC
(
a
Ë
	)
a

493 
	#ACPI_DEBUG_ONLY_MEMBERS
(
a
Ëa;

	)

494 
	#_VERBOSE_STRUCTURES


	)

499 
	#ACPI_DUMP_STACK_ENTRY
(
a
Ë
	`A˝iExDumpO≥ønd
(◊), 0)

	)

500 
	#ACPI_DUMP_OPERANDS
(
a
, 
b
 ,
c
Ë
	`A˝iExDumpO≥ønds
◊, b, c)

	)

501 
	#ACPI_DUMP_ENTRY
(
a
, 
b
Ë
	`A˝iNsDumpE¡ry
 (a, b)

	)

502 
	#ACPI_DUMP_PATHNAME
(
a
, 
b
, 
c
, 
d
Ë
	`A˝iNsDumpP©h«me
◊, b, c, d)

	)

503 
	#ACPI_DUMP_BUFFER
(
a
, 
b
Ë
	`A˝iUtDebugDumpBuf„r
((
UINT8
 *Ëa, b, 
DB_BYTE_DISPLAY
, 
_COMPONENT
)

	)

510 
	#ACPI_DEBUG_PRINT
(
∂
)

	)

511 
	#ACPI_DEBUG_PRINT_RAW
(
∂
)

	)

512 
	#ACPI_DEBUG_EXEC
(
a
)

	)

513 
	#ACPI_DEBUG_ONLY_MEMBERS
(
a
)

	)

514 
	#ACPI_FUNCTION_NAME
(
a
)

	)

515 
	#ACPI_FUNCTION_TRACE
(
a
)

	)

516 
	#ACPI_FUNCTION_TRACE_PTR
(
a
, 
b
)

	)

517 
	#ACPI_FUNCTION_TRACE_U32
(
a
, 
b
)

	)

518 
	#ACPI_FUNCTION_TRACE_STR
(
a
, 
b
)

	)

519 
	#ACPI_FUNCTION_ENTRY
()

	)

520 
	#ACPI_DUMP_STACK_ENTRY
(
a
)

	)

521 
	#ACPI_DUMP_OPERANDS
(
a
, 
b
, 
c
)

	)

522 
	#ACPI_DUMP_ENTRY
(
a
, 
b
)

	)

523 
	#ACPI_DUMP_PATHNAME
(
a
, 
b
, 
c
, 
d
)

	)

524 
	#ACPI_DUMP_BUFFER
(
a
, 
b
)

	)

525 
	#ACPI_IS_DEBUG_ENABLED
(
Levñ
, 
Comp⁄ít
Ë0

	)

529 
	#ªtu∫_VOID
 

	)

530 
	#ªtu∫_ACPI_STATUS
(
s
Ë(s)

	)

531 
	#ªtu∫_PTR
(
s
Ë(s)

	)

532 
	#ªtu∫_VALUE
(
s
Ë(s)

	)

533 
	#ªtu∫_UINT8
(
s
Ë(s)

	)

534 
	#ªtu∫_UINT32
(
s
Ë(s)

	)

	@src/extern/acpica/source/include/acparser.h

116 #i‚de‡
__ACPARSER_H__


117 
	#__ACPARSER_H__


	)

120 
	#OP_HAS_RETURN_VALUE
 1

	)

124 
	#ACPI_VAR_ARGS
 
ACPI_UINT32_MAX


	)

127 
	#ACPI_PARSE_DELETE_TREE
 0x0001

	)

128 
	#ACPI_PARSE_NO_TREE_DELETE
 0x0000

	)

129 
	#ACPI_PARSE_TREE_MASK
 0x0001

	)

131 
	#ACPI_PARSE_LOAD_PASS1
 0x0010

	)

132 
	#ACPI_PARSE_LOAD_PASS2
 0x0020

	)

133 
	#ACPI_PARSE_EXECUTE
 0x0030

	)

134 
	#ACPI_PARSE_MODE_MASK
 0x0030

	)

136 
	#ACPI_PARSE_DEFERRED_OP
 0x0100

	)

137 
	#ACPI_PARSE_DISASSEMBLE
 0x0200

	)

139 
	#ACPI_PARSE_MODULE_LEVEL
 0x0400

	)

151 
ACPI_STATUS


152 
A˝iPsExecuãMëhod
 (

153 
ACPI_EVALUATE_INFO
 *
Info
);

159 
UINT8
 *

160 
A˝iPsGëNextPackageEnd
 (

161 
ACPI_PARSE_STATE
 *
P¨£rSèã
);

164 
A˝iPsGëNextName°rög
 (

165 
ACPI_PARSE_STATE
 *
P¨£rSèã
);

168 
A˝iPsGëNextSim∂eArg
 (

169 
ACPI_PARSE_STATE
 *
P¨£rSèã
,

170 
UINT32
 
ArgTy≥
,

171 
ACPI_PARSE_OBJECT
 *
Arg
);

173 
ACPI_STATUS


174 
A˝iPsGëNextNamï©h
 (

175 
ACPI_WALK_STATE
 *
WÆkSèã
,

176 
ACPI_PARSE_STATE
 *
P¨£rSèã
,

177 
ACPI_PARSE_OBJECT
 *
Arg
,

178 
BOOLEAN
 
MëhodCÆl
);

180 
ACPI_STATUS


181 
A˝iPsGëNextArg
 (

182 
ACPI_WALK_STATE
 *
WÆkSèã
,

183 
ACPI_PARSE_STATE
 *
P¨£rSèã
,

184 
UINT32
 
ArgTy≥
,

185 
ACPI_PARSE_OBJECT
 **
Rëu∫Arg
);

191 
ACPI_PARSE_OBJECT
 *

192 
A˝iPsFödName
 (

193 
ACPI_PARSE_OBJECT
 *
Sc›e
,

194 
UINT32
 
Name
,

195 
UINT32
 
Opcode
);

197 
ACPI_PARSE_OBJECT
*

198 
A˝iPsGëP¨ít
 (

199 
ACPI_PARSE_OBJECT
 *
Op
);

205 
ACPI_STATUS


206 
A˝iPsBuûdNamedOp
 (

207 
ACPI_WALK_STATE
 *
WÆkSèã
,

208 
UINT8
 *
AmlOpSèπ
,

209 
ACPI_PARSE_OBJECT
 *
U¬amedOp
,

210 
ACPI_PARSE_OBJECT
 **
Op
);

212 
ACPI_STATUS


213 
A˝iPsCª©eOp
 (

214 
ACPI_WALK_STATE
 *
WÆkSèã
,

215 
UINT8
 *
AmlOpSèπ
,

216 
ACPI_PARSE_OBJECT
 **
NewOp
);

218 
ACPI_STATUS


219 
A˝iPsCom∂ëeOp
 (

220 
ACPI_WALK_STATE
 *
WÆkSèã
,

221 
ACPI_PARSE_OBJECT
 **
Op
,

222 
ACPI_STATUS
 
Sètus
);

224 
ACPI_STATUS


225 
A˝iPsCom∂ëeFöÆOp
 (

226 
ACPI_WALK_STATE
 *
WÆkSèã
,

227 
ACPI_PARSE_OBJECT
 *
Op
,

228 
ACPI_STATUS
 
Sètus
);

234 c⁄° 
ACPI_OPCODE_INFO
 *

235 
A˝iPsGëOpcodeInfo
 (

236 
UINT16
 
Opcode
);

239 
A˝iPsGëOpcodeName
 (

240 
UINT16
 
Opcode
);

242 
UINT8


243 
A˝iPsGëArgumítCou¡
 (

244 
UINT32
 
OpTy≥
);

250 
ACPI_STATUS


251 
A˝iPsP¨£Aml
 (

252 
ACPI_WALK_STATE
 *
WÆkSèã
);

254 
UINT32


255 
A˝iPsGëOpcodeSize
 (

256 
UINT32
 
Opcode
);

258 
UINT16


259 
A˝iPsPìkOpcode
 (

260 
ACPI_PARSE_STATE
 *
°©e
);

262 
ACPI_STATUS


263 
A˝iPsCom∂ëeThisOp
 (

264 
ACPI_WALK_STATE
 *
WÆkSèã
,

265 
ACPI_PARSE_OBJECT
 *
Op
);

267 
ACPI_STATUS


268 
A˝iPsNextP¨£Sèã
 (

269 
ACPI_WALK_STATE
 *
WÆkSèã
,

270 
ACPI_PARSE_OBJECT
 *
Op
,

271 
ACPI_STATUS
 
CÆlbackSètus
);

277 
ACPI_STATUS


278 
A˝iPsP¨£Lo›
 (

279 
ACPI_WALK_STATE
 *
WÆkSèã
);

285 
ACPI_STATUS


286 
A˝iPsInôSc›e
 (

287 
ACPI_PARSE_STATE
 *
P¨£rSèã
,

288 
ACPI_PARSE_OBJECT
 *
RoŸ
);

290 
ACPI_PARSE_OBJECT
 *

291 
A˝iPsGëP¨ítSc›e
 (

292 
ACPI_PARSE_STATE
 *
°©e
);

294 
BOOLEAN


295 
A˝iPsHasCom∂ëedSc›e
 (

296 
ACPI_PARSE_STATE
 *
P¨£rSèã
);

299 
A˝iPsP›Sc›e
 (

300 
ACPI_PARSE_STATE
 *
P¨£rSèã
,

301 
ACPI_PARSE_OBJECT
 **
Op
,

302 
UINT32
 *
ArgLi°
,

303 
UINT32
 *
ArgCou¡
);

305 
ACPI_STATUS


306 
A˝iPsPushSc›e
 (

307 
ACPI_PARSE_STATE
 *
P¨£rSèã
,

308 
ACPI_PARSE_OBJECT
 *
Op
,

309 
UINT32
 
RemaöögArgs
,

310 
UINT32
 
ArgCou¡
);

313 
A˝iPsCÀ™upSc›e
 (

314 
ACPI_PARSE_STATE
 *
°©e
);

321 
A˝iPsAµídArg
(

322 
ACPI_PARSE_OBJECT
 *
›
,

323 
ACPI_PARSE_OBJECT
 *
¨g
);

325 
ACPI_PARSE_OBJECT
*

326 
A˝iPsFöd
 (

327 
ACPI_PARSE_OBJECT
 *
Sc›e
,

328 *
P©h
,

329 
UINT16
 
Opcode
,

330 
UINT32
 
Cª©e
);

332 
ACPI_PARSE_OBJECT
 *

333 
A˝iPsGëArg
(

334 
ACPI_PARSE_OBJECT
 *
›
,

335 
UINT32
 
¨gn
);

337 
ACPI_PARSE_OBJECT
 *

338 
A˝iPsGëDïthNext
 (

339 
ACPI_PARSE_OBJECT
 *
Origö
,

340 
ACPI_PARSE_OBJECT
 *
Op
);

346 
ACPI_STATUS


347 
A˝iPsWÆkP¨£dAml
 (

348 
ACPI_PARSE_OBJECT
 *
SèπOp
,

349 
ACPI_PARSE_OBJECT
 *
EndOp
,

350 
ACPI_OPERAND_OBJECT
 *
MthDesc
,

351 
ACPI_NAMESPACE_NODE
 *
SèπNode
,

352 
ACPI_OPERAND_OBJECT
 **
P¨ams
,

353 
ACPI_OPERAND_OBJECT
 **
CÆÀrRëu∫Desc
,

354 
ACPI_OWNER_ID
 
Ow√rId
,

355 
ACPI_PARSE_DOWNWARDS
 
Des˚ndögCÆlback
,

356 
ACPI_PARSE_UPWARDS
 
As˚ndögCÆlback
);

358 
ACPI_STATUS


359 
A˝iPsGëNextWÆkOp
 (

360 
ACPI_WALK_STATE
 *
WÆkSèã
,

361 
ACPI_PARSE_OBJECT
 *
Op
,

362 
ACPI_PARSE_UPWARDS
 
As˚ndögCÆlback
);

364 
ACPI_STATUS


365 
A˝iPsDñëeCom∂ëedOp
 (

366 
ACPI_WALK_STATE
 *
WÆkSèã
);

369 
A˝iPsDñëeP¨£Tªe
 (

370 
ACPI_PARSE_OBJECT
 *
roŸ
);

376 
ACPI_PARSE_OBJECT
 *

377 
A˝iPsCª©eSc›eOp
 (

381 
A˝iPsInôOp
 (

382 
ACPI_PARSE_OBJECT
 *
›
,

383 
UINT16
 
›code
);

385 
ACPI_PARSE_OBJECT
 *

386 
A˝iPsAŒocOp
 (

387 
UINT16
 
›code
);

390 
A˝iPsFªeOp
 (

391 
ACPI_PARSE_OBJECT
 *
Op
);

393 
BOOLEAN


394 
A˝iPsIsLódögCh¨
 (

395 
UINT32
 
c
);

397 
UINT32


398 
A˝iPsGëName
(

399 
ACPI_PARSE_OBJECT
 *
›
);

402 
A˝iPsSëName
(

403 
ACPI_PARSE_OBJECT
 *
›
,

404 
UINT32
 
«me
);

410 
UINT32


411 
A˝iPsS¥ötP©h
 (

412 *
Buf„rSèπ
,

413 
UINT32
 
Buf„rSize
,

414 
ACPI_PARSE_OBJECT
 *
Op
);

416 
UINT32


417 
A˝iPsS¥ötOp
 (

418 *
Buf„rSèπ
,

419 
UINT32
 
Buf„rSize
,

420 
ACPI_PARSE_OBJECT
 *
Op
);

423 
A˝iPsShow
 (

424 
ACPI_PARSE_OBJECT
 *
›
);

	@src/extern/acpica/source/include/acpi.h

116 #i‚de‡
__ACPI_H__


117 
	#__ACPI_H__


	)

128 
	~"∂©f‹m/a˚nv.h
"

129 
	~"a˙ames.h
"

130 
	~"a˘y≥s.h
"

131 
	~"a˚x˚p.h
"

132 
	~"a˘bl.h
"

133 
	~"acouçut.h
"

134 
	~"a¸e°yp.h
"

135 
	~"a˝iosxf.h
"

136 
	~"a˝ixf.h
"

137 
	~"∂©f‹m/a˚nvex.h
"

	@src/extern/acpica/source/include/acpiosxf.h

118 #i‚de‡
__ACPIOSXF_H__


119 
	#__ACPIOSXF_H__


	)

121 
	~"∂©f‹m/a˚nv.h
"

122 
	~"a˘y≥s.h
"

129 
	mOSL_GLOBAL_LOCK_HANDLER
,

130 
	mOSL_NOTIFY_HANDLER
,

131 
	mOSL_GPE_HANDLER
,

132 
	mOSL_DEBUGGER_THREAD
,

133 
	mOSL_EC_POLL_HANDLER
,

134 
	mOSL_EC_BURST_HANDLER


136 } 
	tACPI_EXECUTE_TYPE
;

138 
	#ACPI_NO_UNIT_LIMIT
 ((
UINT32
Ë-1)

	)

139 
	#ACPI_MUTEX_SEM
 1

	)

144 
	#ACPI_SIGNAL_FATAL
 0

	)

145 
	#ACPI_SIGNAL_BREAKPOINT
 1

	)

147 
	sa˝i_sig«l_Áèl_öfo


149 
UINT32
 
	mTy≥
;

150 
UINT32
 
	mCode
;

151 
UINT32
 
	mArgumít
;

153 } 
	tACPI_SIGNAL_FATAL_INFO
;

159 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsInôülize


160 
ACPI_STATUS


161 
A˝iOsInôülize
 (

165 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsTîmö©e


166 
ACPI_STATUS


167 
A˝iOsTîmö©e
 (

175 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëRoŸPoöãr


176 
ACPI_PHYSICAL_ADDRESS


177 
A˝iOsGëRoŸPoöãr
 (

181 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsPªdeföedOvîride


182 
ACPI_STATUS


183 
A˝iOsPªdeföedOvîride
 (

184 c⁄° 
ACPI_PREDEFINED_NAMES
 *
InôVÆ
,

185 
ACPI_STRING
 *
NewVÆ
);

188 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsTabÀOvîride


189 
ACPI_STATUS


190 
A˝iOsTabÀOvîride
 (

191 
ACPI_TABLE_HEADER
 *
Exi°ögTabÀ
,

192 
ACPI_TABLE_HEADER
 **
NewTabÀ
);

195 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsPhysiˇlTabÀOvîride


196 
ACPI_STATUS


197 
A˝iOsPhysiˇlTabÀOvîride
 (

198 
ACPI_TABLE_HEADER
 *
Exi°ögTabÀ
,

199 
ACPI_PHYSICAL_ADDRESS
 *
NewAddªss
,

200 
UINT32
 *
NewTabÀLígth
);

207 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsCª©eLock


208 
ACPI_STATUS


209 
A˝iOsCª©eLock
 (

210 
ACPI_SPINLOCK
 *
OutH™dÀ
);

213 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsDñëeLock


215 
A˝iOsDñëeLock
 (

216 
ACPI_SPINLOCK
 
H™dÀ
);

219 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAcquúeLock


220 
ACPI_CPU_FLAGS


221 
A˝iOsAcquúeLock
 (

222 
ACPI_SPINLOCK
 
H™dÀ
);

225 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRñó£Lock


227 
A˝iOsRñó£Lock
 (

228 
ACPI_SPINLOCK
 
H™dÀ
,

229 
ACPI_CPU_FLAGS
 
Fœgs
);

236 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsCª©eSem≠h‹e


237 
ACPI_STATUS


238 
A˝iOsCª©eSem≠h‹e
 (

239 
UINT32
 
MaxUnôs
,

240 
UINT32
 
InôülUnôs
,

241 
ACPI_SEMAPHORE
 *
OutH™dÀ
);

244 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsDñëeSem≠h‹e


245 
ACPI_STATUS


246 
A˝iOsDñëeSem≠h‹e
 (

247 
ACPI_SEMAPHORE
 
H™dÀ
);

250 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWaôSem≠h‹e


251 
ACPI_STATUS


252 
A˝iOsWaôSem≠h‹e
 (

253 
ACPI_SEMAPHORE
 
H™dÀ
,

254 
UINT32
 
Unôs
,

255 
UINT16
 
Timeout
);

258 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsSig«lSem≠h‹e


259 
ACPI_STATUS


260 
A˝iOsSig«lSem≠h‹e
 (

261 
ACPI_SEMAPHORE
 
H™dÀ
,

262 
UINT32
 
Unôs
);

270 #i‡(
ACPI_MUTEX_TYPE
 !
ACPI_BINARY_SEMAPHORE
)

272 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsCª©eMuãx


273 
ACPI_STATUS


274 
A˝iOsCª©eMuãx
 (

275 
ACPI_MUTEX
 *
OutH™dÀ
);

278 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsDñëeMuãx


280 
A˝iOsDñëeMuãx
 (

281 
ACPI_MUTEX
 
H™dÀ
);

284 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAcquúeMuãx


285 
ACPI_STATUS


286 
A˝iOsAcquúeMuãx
 (

287 
ACPI_MUTEX
 
H™dÀ
,

288 
UINT16
 
Timeout
);

291 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRñó£Muãx


293 
A˝iOsRñó£Muãx
 (

294 
ACPI_MUTEX
 
H™dÀ
);

303 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAŒoˇã


305 
A˝iOsAŒoˇã
 (

306 
ACPI_SIZE
 
Size
);

309 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAŒoˇãZî€d


311 
A˝iOsAŒoˇãZî€d
 (

312 
ACPI_SIZE
 
Size
);

315 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsFªe


317 
A˝iOsFªe
 (

318 * 
Mem‹y
);

321 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsM≠Mem‹y


323 
A˝iOsM≠Mem‹y
 (

324 
ACPI_PHYSICAL_ADDRESS
 
Whîe
,

325 
ACPI_SIZE
 
Lígth
);

328 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsUnm≠Mem‹y


330 
A˝iOsUnm≠Mem‹y
 (

331 *
LogiˇlAddªss
,

332 
ACPI_SIZE
 
Size
);

335 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëPhysiˇlAddªss


336 
ACPI_STATUS


337 
A˝iOsGëPhysiˇlAddªss
 (

338 *
LogiˇlAddªss
,

339 
ACPI_PHYSICAL_ADDRESS
 *
PhysiˇlAddªss
);

346 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsCª©eCache


347 
ACPI_STATUS


348 
A˝iOsCª©eCache
 (

349 *
CacheName
,

350 
UINT16
 
Obje˘Size
,

351 
UINT16
 
MaxDïth
,

352 
ACPI_CACHE_T
 **
Rëu∫Cache
);

355 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsDñëeCache


356 
ACPI_STATUS


357 
A˝iOsDñëeCache
 (

358 
ACPI_CACHE_T
 *
Cache
);

361 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsPurgeCache


362 
ACPI_STATUS


363 
A˝iOsPurgeCache
 (

364 
ACPI_CACHE_T
 *
Cache
);

367 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAcquúeObje˘


369 
A˝iOsAcquúeObje˘
 (

370 
ACPI_CACHE_T
 *
Cache
);

373 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRñó£Obje˘


374 
ACPI_STATUS


375 
A˝iOsRñó£Obje˘
 (

376 
ACPI_CACHE_T
 *
Cache
,

377 *
Obje˘
);

384 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsIn°ÆlI¡îru±H™dÀr


385 
ACPI_STATUS


386 
A˝iOsIn°ÆlI¡îru±H™dÀr
 (

387 
UINT32
 
I¡îru±Numbî
,

388 
ACPI_OSD_HANDLER
 
Sîvi˚Routöe
,

389 *
C⁄ãxt
);

392 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRemoveI¡îru±H™dÀr


393 
ACPI_STATUS


394 
A˝iOsRemoveI¡îru±H™dÀr
 (

395 
UINT32
 
I¡îru±Numbî
,

396 
ACPI_OSD_HANDLER
 
Sîvi˚Routöe
);

403 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëThªadId


404 
ACPI_THREAD_ID


405 
A˝iOsGëThªadId
 (

409 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsExecuã


410 
ACPI_STATUS


411 
A˝iOsExecuã
 (

412 
ACPI_EXECUTE_TYPE
 
Ty≥
,

413 
ACPI_OSD_EXEC_CALLBACK
 
Fun˘i⁄
,

414 *
C⁄ãxt
);

417 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWaôEvítsCom∂ëe


419 
A˝iOsWaôEvítsCom∂ëe
 (

423 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsSÀï


425 
A˝iOsSÀï
 (

426 
UINT64
 
Mûli£c⁄ds
);

429 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsSèŒ


431 
A˝iOsSèŒ
 (

432 
UINT32
 
Mi¸o£c⁄ds
);

439 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRódP‹t


440 
ACPI_STATUS


441 
A˝iOsRódP‹t
 (

442 
ACPI_IO_ADDRESS
 
Addªss
,

443 
UINT32
 *
VÆue
,

444 
UINT32
 
Width
);

447 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWrôeP‹t


448 
ACPI_STATUS


449 
A˝iOsWrôeP‹t
 (

450 
ACPI_IO_ADDRESS
 
Addªss
,

451 
UINT32
 
VÆue
,

452 
UINT32
 
Width
);

459 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRódMem‹y


460 
ACPI_STATUS


461 
A˝iOsRódMem‹y
 (

462 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

463 
UINT64
 *
VÆue
,

464 
UINT32
 
Width
);

467 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWrôeMem‹y


468 
ACPI_STATUS


469 
A˝iOsWrôeMem‹y
 (

470 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

471 
UINT64
 
VÆue
,

472 
UINT32
 
Width
);

481 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRódPciC⁄figuøti⁄


482 
ACPI_STATUS


483 
A˝iOsRódPciC⁄figuøti⁄
 (

484 
ACPI_PCI_ID
 *
PciId
,

485 
UINT32
 
Reg
,

486 
UINT64
 *
VÆue
,

487 
UINT32
 
Width
);

490 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWrôePciC⁄figuøti⁄


491 
ACPI_STATUS


492 
A˝iOsWrôePciC⁄figuøti⁄
 (

493 
ACPI_PCI_ID
 *
PciId
,

494 
UINT32
 
Reg
,

495 
UINT64
 
VÆue
,

496 
UINT32
 
Width
);

503 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRódabÀ


504 
BOOLEAN


505 
A˝iOsRódabÀ
 (

506 *
Poöãr
,

507 
ACPI_SIZE
 
Lígth
);

510 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWrôabÀ


511 
BOOLEAN


512 
A˝iOsWrôabÀ
 (

513 *
Poöãr
,

514 
ACPI_SIZE
 
Lígth
);

517 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëTimî


518 
UINT64


519 
A˝iOsGëTimî
 (

523 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsSig«l


524 
ACPI_STATUS


525 
A˝iOsSig«l
 (

526 
UINT32
 
Fun˘i⁄
,

527 *
Info
);

534 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsPrötf


535 
ACPI_INTERNAL_VAR_XFACE


536 
A˝iOsPrötf
 (

537 c⁄° *
F‹m©
,

541 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsV¥ötf


543 
A˝iOsV¥ötf
 (

544 c⁄° *
F‹m©
,

545 
va_li°
 
Args
);

548 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRedúe˘Ouçut


550 
A˝iOsRedúe˘Ouçut
 (

551 *
De°ö©i⁄
);

558 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëLöe


559 
ACPI_STATUS


560 
A˝iOsGëLöe
 (

561 *
Buf„r
,

562 
UINT32
 
Buf„rLígth
,

563 
UINT32
 *
ByãsRód
);

570 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëTabÀByName


571 
ACPI_STATUS


572 
A˝iOsGëTabÀByName
 (

573 *
Sig«tuª
,

574 
UINT32
 
In°™˚
,

575 
ACPI_TABLE_HEADER
 **
TabÀ
,

576 
ACPI_PHYSICAL_ADDRESS
 *
Addªss
);

579 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëTabÀByIndex


580 
ACPI_STATUS


581 
A˝iOsGëTabÀByIndex
 (

582 
UINT32
 
Index
,

583 
ACPI_TABLE_HEADER
 **
TabÀ
,

584 
UINT32
 *
In°™˚
,

585 
ACPI_PHYSICAL_ADDRESS
 *
Addªss
);

588 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëTabÀByAddªss


589 
ACPI_STATUS


590 
A˝iOsGëTabÀByAddªss
 (

591 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

592 
ACPI_TABLE_HEADER
 **
TabÀ
);

599 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsO≥nDúe˘‹y


601 
A˝iOsO≥nDúe˘‹y
 (

602 *
P©h«me
,

603 *
WûdˇrdS≥c
,

604 
Reque°edFûeTy≥
);

609 
	#REQUEST_FILE_ONLY
 0

	)

610 
	#REQUEST_DIR_ONLY
 1

	)

613 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëNextFûíame


615 
A˝iOsGëNextFûíame
 (

616 *
DúH™dÀ
);

619 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsClo£Dúe˘‹y


621 
A˝iOsClo£Dúe˘‹y
 (

622 *
DúH™dÀ
);

629 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsO≥nFûe


630 
ACPI_FILE


631 
A˝iOsO≥nFûe
 (

632 c⁄° *
P©h
,

633 
UINT8
 
Modes
);

636 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsClo£Fûe


638 
A˝iOsClo£Fûe
 (

639 
ACPI_FILE
 
Fûe
);

642 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRódFûe


644 
A˝iOsRódFûe
 (

645 
ACPI_FILE
 
Fûe
,

646 *
Buf„r
,

647 
ACPI_SIZE
 
Size
,

648 
ACPI_SIZE
 
Cou¡
);

651 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWrôeFûe


653 
A˝iOsWrôeFûe
 (

654 
ACPI_FILE
 
Fûe
,

655 *
Buf„r
,

656 
ACPI_SIZE
 
Size
,

657 
ACPI_SIZE
 
Cou¡
);

660 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëFûeOff£t


662 
A˝iOsGëFûeOff£t
 (

663 
ACPI_FILE
 
Fûe
);

666 #i‚de‡
ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsSëFûeOff£t


667 
ACPI_STATUS


668 
A˝iOsSëFûeOff£t
 (

669 
ACPI_FILE
 
Fûe
,

670 
Off£t
,

671 
UINT8
 
From
);

	@src/extern/acpica/source/include/acpixf.h

116 #i‚de‡
__ACXFACE_H__


117 
	#__ACXFACE_H__


	)

121 
	#ACPI_CA_VERSION
 0x20150410

	)

123 
	~"acc⁄fig.h
"

124 
	~"a˘y≥s.h
"

125 
	~"a˘bl.h
"

126 
	~"acbuf„r.h
"

141 #ifde‡
DEFINE_ACPI_GLOBALS


142 
	#ACPI_GLOBAL
(
ty≥
,
«me
) \

143 
ty≥
 
«me
; \

144 
ty≥
 
«me


	)

146 
	#ACPI_INIT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

147 
ty≥
 
«me
=
vÆue


	)

150 #i‚de‡
ACPI_GLOBAL


151 
	#ACPI_GLOBAL
(
ty≥
,
«me
) \

152 
ty≥
 
«me


	)

155 #i‚de‡
ACPI_INIT_GLOBAL


156 
	#ACPI_INIT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

157 
ty≥
 
«me


	)

166 #i‚de‡
ACPI_EXTERNAL_RETURN_STATUS


167 
	#ACPI_EXTERNAL_RETURN_STATUS
(
PrŸŸy≥
) \

168 
PrŸŸy≥
;

	)

171 #i‚de‡
ACPI_EXTERNAL_RETURN_OK


172 
	#ACPI_EXTERNAL_RETURN_OK
(
PrŸŸy≥
) \

173 
PrŸŸy≥
;

	)

176 #i‚de‡
ACPI_EXTERNAL_RETURN_VOID


177 
	#ACPI_EXTERNAL_RETURN_VOID
(
PrŸŸy≥
) \

178 
PrŸŸy≥
;

	)

181 #i‚de‡
ACPI_EXTERNAL_RETURN_UINT32


182 
	#ACPI_EXTERNAL_RETURN_UINT32
(
PrŸŸy≥
) \

183 
PrŸŸy≥
;

	)

186 #i‚de‡
ACPI_EXTERNAL_RETURN_PTR


187 
	#ACPI_EXTERNAL_RETURN_PTR
(
PrŸŸy≥
) \

188 
PrŸŸy≥
;

	)

212 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_E«bÀI¡î¥ëîSœck
, 
FALSE
);

221 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_AutoSîülizeMëhods
, 
TRUE
);

228 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_Cª©eOsiMëhod
, 
TRUE
);

234 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_U£DeÁu…Regi°îWidths
, 
TRUE
);

243 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_VîifyTabÀChecksum
, 
TRUE
);

248 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_E«bÀAmlDebugObje˘
, 
FALSE
);

256 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_C›yDsdtLoˇŒy
, 
FALSE
);

264 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_DoNŸU£Xsdt
, 
FALSE
);

274 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_U£32BôFadtAddªs£s
, 
FALSE
);

282 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_TrunˇãIoAddªs£s
, 
FALSE
);

288 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_DißbÀAutoRïaú
, 
FALSE
);

294 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_DißbÀSsdtTabÀIn°Æl
, 
FALSE
);

300 
ACPI_INIT_GLOBAL
 (
UINT8
, 
A˝iGbl_OsiD©a
, 0);

307 
ACPI_INIT_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_Redu˚dH¨dw¨e
, 
FALSE
);

313 
ACPI_INIT_GLOBAL
 (
UINT32
, 
A˝iGbl_Tø˚Fœgs
, 0);

314 
ACPI_INIT_GLOBAL
 (
ACPI_NAME
, 
A˝iGbl_Tø˚MëhodName
, 0);

321 #ifde‡
ACPI_DEBUG_OUTPUT


322 
ACPI_INIT_GLOBAL
 (
UINT32
, 
A˝iDbgLevñ
, 
ACPI_DEBUG_DEFAULT
);

324 
ACPI_INIT_GLOBAL
 (
UINT32
, 
A˝iDbgLevñ
, 
ACPI_NORMAL_DEFAULT
);

326 
ACPI_INIT_GLOBAL
 (
UINT32
, 
A˝iDbgLayî
, 
ACPI_COMPONENT_DEFAULT
);

331 
ACPI_GLOBAL
 (
ACPI_TABLE_FADT
, 
A˝iGbl_FADT
);

332 
ACPI_GLOBAL
 (
UINT32
, 
A˝iCuºítG≥Cou¡
);

333 
ACPI_GLOBAL
 (
BOOLEAN
, 
A˝iGbl_Sy°emAwakeAndRu¬ög
);

359 #i‡(!
ACPI_REDUCED_HARDWARE
)

360 
	#ACPI_HW_DEPENDENT_RETURN_STATUS
(
PrŸŸy≥
) \

361 
	`ACPI_EXTERNAL_RETURN_STATUS
(
PrŸŸy≥
)

	)

363 
	#ACPI_HW_DEPENDENT_RETURN_OK
(
PrŸŸy≥
) \

364 
	`ACPI_EXTERNAL_RETURN_OK
(
PrŸŸy≥
)

	)

366 
	#ACPI_HW_DEPENDENT_RETURN_VOID
(
PrŸŸy≥
) \

367 
	`ACPI_EXTERNAL_RETURN_VOID
(
PrŸŸy≥
)

	)

370 
	#ACPI_HW_DEPENDENT_RETURN_STATUS
(
PrŸŸy≥
) \

371 
ACPI_INLINE
 
PrŸŸy≥
 {(
AE_NOT_CONFIGURED
);}

	)

373 
	#ACPI_HW_DEPENDENT_RETURN_OK
(
PrŸŸy≥
) \

374 
ACPI_INLINE
 
PrŸŸy≥
 {(
AE_OK
);}

	)

376 
	#ACPI_HW_DEPENDENT_RETURN_VOID
(
PrŸŸy≥
) \

377 
ACPI_INLINE
 
PrŸŸy≥
 {;}

	)

389 #i‚de‡
ACPI_NO_ERROR_MESSAGES


390 
	#ACPI_MSG_DEPENDENT_RETURN_VOID
(
PrŸŸy≥
) \

391 
PrŸŸy≥
;

	)

394 
	#ACPI_MSG_DEPENDENT_RETURN_VOID
(
PrŸŸy≥
) \

395 
ACPI_INLINE
 
PrŸŸy≥
 {;}

	)

407 #ifde‡
ACPI_DEBUG_OUTPUT


408 
	#ACPI_DBG_DEPENDENT_RETURN_VOID
(
PrŸŸy≥
) \

409 
PrŸŸy≥
;

	)

412 
	#ACPI_DBG_DEPENDENT_RETURN_VOID
(
PrŸŸy≥
) \

413 
ACPI_INLINE
 
PrŸŸy≥
 {;}

	)

425 #ifde‡
ACPI_APPLICATION


426 
	#ACPI_APP_DEPENDENT_RETURN_VOID
(
PrŸŸy≥
) \

427 
PrŸŸy≥
;

	)

430 
	#ACPI_APP_DEPENDENT_RETURN_VOID
(
PrŸŸy≥
) \

431 
ACPI_INLINE
 
PrŸŸy≥
 {;}

	)

445 
ACPI_EXTERNAL_RETURN_STATUS
 (

446 
ACPI_STATUS


447 
	$A˝iInôülizeTabÀs
 (

448 
ACPI_TABLE_DESC
 *
InôülSt‹age
,

449 
UINT32
 
InôülTabÀCou¡
,

450 
BOOLEAN
 
AŒowResize
))

452 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

453 
ACPI_STATUS


454 
	$A˝iInôülizeSubsy°em
 (

457 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

458 
ACPI_STATUS


459 
	$A˝iE«bÀSubsy°em
 (

460 
UINT32
 
Fœgs
))

462 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

463 
ACPI_STATUS


464 
	$A˝iInôülizeObje˘s
 (

465 
UINT32
 
Fœgs
))

467 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

468 
ACPI_STATUS


469 
	$A˝iTîmö©e
 (

476 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

477 
ACPI_STATUS


478 
	$A˝iE«bÀ
 (

481 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

482 
ACPI_STATUS


483 
	$A˝iDißbÀ
 (

486 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

487 
ACPI_STATUS


488 
	$A˝iSubsy°emSètus
 (

491 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

492 
ACPI_STATUS


493 
	$A˝iGëSy°emInfo
 (

494 
ACPI_BUFFER
 *
RëBuf„r
))

496 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

497 
ACPI_STATUS


498 
	$A˝iGëSèti°ics
 (

499 
ACPI_STATISTICS
 *
Sèts
))

501 
	`ACPI_EXTERNAL_RETURN_PTR
 (

503 
	$A˝iF‹m©Ex˚±i⁄
 (

504 
ACPI_STATUS
 
Ex˚±i⁄
))

506 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

507 
ACPI_STATUS


508 
	$A˝iPurgeCachedObje˘s
 (

511 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

512 
ACPI_STATUS


513 
	$A˝iIn°ÆlI¡îÁ˚
 (

514 
ACPI_STRING
 
I¡îÁ˚Name
))

516 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

517 
ACPI_STATUS


518 
	$A˝iRemoveI¡îÁ˚
 (

519 
ACPI_STRING
 
I¡îÁ˚Name
))

521 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

522 
ACPI_STATUS


523 
	$A˝iUpd©eI¡îÁ˚s
 (

524 
UINT8
 
A˘i⁄
))

526 
	`ACPI_EXTERNAL_RETURN_UINT32
 (

527 
UINT32


528 
	$A˝iCheckAddªssR™ge
 (

529 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
,

530 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

531 
ACPI_SIZE
 
Lígth
,

532 
BOOLEAN
 
W¨n
))

534 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

535 
ACPI_STATUS


536 
	$A˝iDecodePldBuf„r
 (

537 
UINT8
 *
InBuf„r
,

538 
ACPI_SIZE
 
Lígth
,

539 
ACPI_PLD_INFO
 **
Rëu∫Buf„r
))

545 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

546 
ACPI_STATUS


547 
	$A˝iIn°ÆlTabÀ
 (

548 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

549 
BOOLEAN
 
Physiˇl
))

551 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

552 
ACPI_STATUS


553 
	$A˝iLﬂdTabÀ
 (

554 
ACPI_TABLE_HEADER
 *
TabÀ
))

556 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

557 
ACPI_STATUS


558 
	$A˝iU∆ﬂdP¨ítTabÀ
 (

559 
ACPI_HANDLE
 
Obje˘
))

561 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

562 
ACPI_STATUS


563 
	$A˝iLﬂdTabÀs
 (

570 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

571 
ACPI_STATUS


572 
	$A˝iRóŒoˇãRoŸTabÀ
 (

575 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

576 
ACPI_STATUS


577 
	$A˝iFödRoŸPoöãr
 (

578 
ACPI_PHYSICAL_ADDRESS
 *
RsdpAddªss
))

580 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

581 
ACPI_STATUS


582 
	$A˝iGëTabÀHódî
 (

583 
ACPI_STRING
 
Sig«tuª
,

584 
UINT32
 
In°™˚
,

585 
ACPI_TABLE_HEADER
 *
OutTabÀHódî
))

587 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

588 
ACPI_STATUS


589 
	$A˝iGëTabÀ
 (

590 
ACPI_STRING
 
Sig«tuª
,

591 
UINT32
 
In°™˚
,

592 
ACPI_TABLE_HEADER
 **
OutTabÀ
))

594 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

595 
ACPI_STATUS


596 
	$A˝iGëTabÀByIndex
 (

597 
UINT32
 
TabÀIndex
,

598 
ACPI_TABLE_HEADER
 **
OutTabÀ
))

600 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

601 
ACPI_STATUS


602 
	$A˝iIn°ÆlTabÀH™dÀr
 (

603 
ACPI_TABLE_HANDLER
 
H™dÀr
,

604 *
C⁄ãxt
))

606 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

607 
ACPI_STATUS


608 
	$A˝iRemoveTabÀH™dÀr
 (

609 
ACPI_TABLE_HANDLER
 
H™dÀr
))

615 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

616 
ACPI_STATUS


617 
	$A˝iWÆkName•a˚
 (

618 
ACPI_OBJECT_TYPE
 
Ty≥
,

619 
ACPI_HANDLE
 
SèπObje˘
,

620 
UINT32
 
MaxDïth
,

621 
ACPI_WALK_CALLBACK
 
Des˚ndögCÆlback
,

622 
ACPI_WALK_CALLBACK
 
As˚ndögCÆlback
,

623 *
C⁄ãxt
,

624 **
Rëu∫VÆue
))

626 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

627 
ACPI_STATUS


628 
	$A˝iGëDevi˚s
 (

629 *
HID
,

630 
ACPI_WALK_CALLBACK
 
U£rFun˘i⁄
,

631 *
C⁄ãxt
,

632 **
Rëu∫VÆue
))

634 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

635 
ACPI_STATUS


636 
	$A˝iGëName
 (

637 
ACPI_HANDLE
 
Obje˘
,

638 
UINT32
 
NameTy≥
,

639 
ACPI_BUFFER
 *
RëP©hPå
))

641 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

642 
ACPI_STATUS


643 
	$A˝iGëH™dÀ
 (

644 
ACPI_HANDLE
 
P¨ít
,

645 
ACPI_STRING
 
P©h«me
,

646 
ACPI_HANDLE
 *
RëH™dÀ
))

648 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

649 
ACPI_STATUS


650 
	$A˝iAâachD©a
 (

651 
ACPI_HANDLE
 
Obje˘
,

652 
ACPI_OBJECT_HANDLER
 
H™dÀr
,

653 *
D©a
))

655 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

656 
ACPI_STATUS


657 
	$A˝iDëachD©a
 (

658 
ACPI_HANDLE
 
Obje˘
,

659 
ACPI_OBJECT_HANDLER
 
H™dÀr
))

661 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

662 
ACPI_STATUS


663 
	$A˝iGëD©a
 (

664 
ACPI_HANDLE
 
Obje˘
,

665 
ACPI_OBJECT_HANDLER
 
H™dÀr
,

666 **
D©a
))

668 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

669 
ACPI_STATUS


670 
	$A˝iDebugTø˚
 (

671 *
Name
,

672 
UINT32
 
DebugLevñ
,

673 
UINT32
 
DebugLayî
,

674 
UINT32
 
Fœgs
))

680 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

681 
ACPI_STATUS


682 
	$A˝iEvÆu©eObje˘
 (

683 
ACPI_HANDLE
 
Obje˘
,

684 
ACPI_STRING
 
P©h«me
,

685 
ACPI_OBJECT_LIST
 *
P¨amëîObje˘s
,

686 
ACPI_BUFFER
 *
Rëu∫Obje˘Buf„r
))

688 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

689 
ACPI_STATUS


690 
	$A˝iEvÆu©eObje˘Ty≥d
 (

691 
ACPI_HANDLE
 
Obje˘
,

692 
ACPI_STRING
 
P©h«me
,

693 
ACPI_OBJECT_LIST
 *
Exã∫ÆP¨ams
,

694 
ACPI_BUFFER
 *
Rëu∫Buf„r
,

695 
ACPI_OBJECT_TYPE
 
Rëu∫Ty≥
))

697 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

698 
ACPI_STATUS


699 
	$A˝iGëObje˘Info
 (

700 
ACPI_HANDLE
 
Obje˘
,

701 
ACPI_DEVICE_INFO
 **
Rëu∫Buf„r
))

703 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

704 
ACPI_STATUS


705 
	$A˝iIn°ÆlMëhod
 (

706 
UINT8
 *
Buf„r
))

708 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

709 
ACPI_STATUS


710 
	$A˝iGëNextObje˘
 (

711 
ACPI_OBJECT_TYPE
 
Ty≥
,

712 
ACPI_HANDLE
 
P¨ít
,

713 
ACPI_HANDLE
 
Chûd
,

714 
ACPI_HANDLE
 *
OutH™dÀ
))

716 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

717 
ACPI_STATUS


718 
	$A˝iGëTy≥
 (

719 
ACPI_HANDLE
 
Obje˘
,

720 
ACPI_OBJECT_TYPE
 *
OutTy≥
))

722 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

723 
ACPI_STATUS


724 
	$A˝iGëP¨ít
 (

725 
ACPI_HANDLE
 
Obje˘
,

726 
ACPI_HANDLE
 *
OutH™dÀ
))

732 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

733 
ACPI_STATUS


734 
	$A˝iIn°ÆlInôüliz©i⁄H™dÀr
 (

735 
ACPI_INIT_HANDLER
 
H™dÀr
,

736 
UINT32
 
Fun˘i⁄
))

738 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

739 
ACPI_STATUS


740 
	$A˝iIn°ÆlSciH™dÀr
 (

741 
ACPI_SCI_HANDLER
 
Addªss
,

742 *
C⁄ãxt
))

744 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

745 
ACPI_STATUS


746 
	$A˝iRemoveSciH™dÀr
 (

747 
ACPI_SCI_HANDLER
 
Addªss
))

749 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

750 
ACPI_STATUS


751 
	$A˝iIn°ÆlGlobÆEvítH™dÀr
 (

752 
ACPI_GBL_EVENT_HANDLER
 
H™dÀr
,

753 *
C⁄ãxt
))

755 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

756 
ACPI_STATUS


757 
	$A˝iIn°ÆlFixedEvítH™dÀr
 (

758 
UINT32
 
A˝iEvít
,

759 
ACPI_EVENT_HANDLER
 
H™dÀr
,

760 *
C⁄ãxt
))

762 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

763 
ACPI_STATUS


764 
	$A˝iRemoveFixedEvítH™dÀr
 (

765 
UINT32
 
A˝iEvít
,

766 
ACPI_EVENT_HANDLER
 
H™dÀr
))

768 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

769 
ACPI_STATUS


770 
	$A˝iIn°ÆlG≥H™dÀr
 (

771 
ACPI_HANDLE
 
G≥Devi˚
,

772 
UINT32
 
G≥Numbî
,

773 
UINT32
 
Ty≥
,

774 
ACPI_GPE_HANDLER
 
Addªss
,

775 *
C⁄ãxt
))

777 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

778 
ACPI_STATUS


779 
	$A˝iIn°ÆlG≥RawH™dÀr
 (

780 
ACPI_HANDLE
 
G≥Devi˚
,

781 
UINT32
 
G≥Numbî
,

782 
UINT32
 
Ty≥
,

783 
ACPI_GPE_HANDLER
 
Addªss
,

784 *
C⁄ãxt
))

786 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

787 
ACPI_STATUS


788 
	$A˝iRemoveG≥H™dÀr
 (

789 
ACPI_HANDLE
 
G≥Devi˚
,

790 
UINT32
 
G≥Numbî
,

791 
ACPI_GPE_HANDLER
 
Addªss
))

793 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

794 
ACPI_STATUS


795 
	$A˝iIn°ÆlNŸifyH™dÀr
 (

796 
ACPI_HANDLE
 
Devi˚
,

797 
UINT32
 
H™dÀrTy≥
,

798 
ACPI_NOTIFY_HANDLER
 
H™dÀr
,

799 *
C⁄ãxt
))

801 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

802 
ACPI_STATUS


803 
	$A˝iRemoveNŸifyH™dÀr
 (

804 
ACPI_HANDLE
 
Devi˚
,

805 
UINT32
 
H™dÀrTy≥
,

806 
ACPI_NOTIFY_HANDLER
 
H™dÀr
))

808 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

809 
ACPI_STATUS


810 
	$A˝iIn°ÆlAddªssS∑˚H™dÀr
 (

811 
ACPI_HANDLE
 
Devi˚
,

812 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
,

813 
ACPI_ADR_SPACE_HANDLER
 
H™dÀr
,

814 
ACPI_ADR_SPACE_SETUP
 
Sëup
,

815 *
C⁄ãxt
))

817 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

818 
ACPI_STATUS


819 
	$A˝iRemoveAddªssS∑˚H™dÀr
 (

820 
ACPI_HANDLE
 
Devi˚
,

821 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
,

822 
ACPI_ADR_SPACE_HANDLER
 
H™dÀr
))

824 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

825 
ACPI_STATUS


826 
	$A˝iIn°ÆlEx˚±i⁄H™dÀr
 (

827 
ACPI_EXCEPTION_HANDLER
 
H™dÀr
))

829 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

830 
ACPI_STATUS


831 
	$A˝iIn°ÆlI¡îÁ˚H™dÀr
 (

832 
ACPI_INTERFACE_HANDLER
 
H™dÀr
))

838 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

839 
ACPI_STATUS


840 
	$A˝iAcquúeGlobÆLock
 (

841 
UINT16
 
Timeout
,

842 
UINT32
 *
H™dÀ
))

844 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

845 
ACPI_STATUS


846 
	$A˝iRñó£GlobÆLock
 (

847 
UINT32
 
H™dÀ
))

853 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

854 
ACPI_STATUS


855 
	$A˝iAcquúeMuãx
 (

856 
ACPI_HANDLE
 
H™dÀ
,

857 
ACPI_STRING
 
P©h«me
,

858 
UINT16
 
Timeout
))

860 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

861 
ACPI_STATUS


862 
	$A˝iRñó£Muãx
 (

863 
ACPI_HANDLE
 
H™dÀ
,

864 
ACPI_STRING
 
P©h«me
))

870 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

871 
ACPI_STATUS


872 
	$A˝iE«bÀEvít
 (

873 
UINT32
 
Evít
,

874 
UINT32
 
Fœgs
))

876 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

877 
ACPI_STATUS


878 
	$A˝iDißbÀEvít
 (

879 
UINT32
 
Evít
,

880 
UINT32
 
Fœgs
))

882 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

883 
ACPI_STATUS


884 
	$A˝iCÀ¨Evít
 (

885 
UINT32
 
Evít
))

887 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

888 
ACPI_STATUS


889 
	$A˝iGëEvítSètus
 (

890 
UINT32
 
Evít
,

891 
ACPI_EVENT_STATUS
 *
EvítSètus
))

897 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

898 
ACPI_STATUS


899 
	$A˝iUpd©eAŒG≥s
 (

902 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

903 
ACPI_STATUS


904 
	$A˝iE«bÀG≥
 (

905 
ACPI_HANDLE
 
G≥Devi˚
,

906 
UINT32
 
G≥Numbî
))

908 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

909 
ACPI_STATUS


910 
	$A˝iDißbÀG≥
 (

911 
ACPI_HANDLE
 
G≥Devi˚
,

912 
UINT32
 
G≥Numbî
))

914 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

915 
ACPI_STATUS


916 
	$A˝iCÀ¨G≥
 (

917 
ACPI_HANDLE
 
G≥Devi˚
,

918 
UINT32
 
G≥Numbî
))

920 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

921 
ACPI_STATUS


922 
	$A˝iSëG≥
 (

923 
ACPI_HANDLE
 
G≥Devi˚
,

924 
UINT32
 
G≥Numbî
,

925 
UINT8
 
A˘i⁄
))

927 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

928 
ACPI_STATUS


929 
	$A˝iFöishG≥
 (

930 
ACPI_HANDLE
 
G≥Devi˚
,

931 
UINT32
 
G≥Numbî
))

933 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

934 
ACPI_STATUS


935 
	$A˝iM¨kG≥F‹Wake
 (

936 
ACPI_HANDLE
 
G≥Devi˚
,

937 
UINT32
 
G≥Numbî
))

939 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

940 
ACPI_STATUS


941 
	$A˝iSëupG≥F‹Wake
 (

942 
ACPI_HANDLE
 
P¨ítDevi˚
,

943 
ACPI_HANDLE
 
G≥Devi˚
,

944 
UINT32
 
G≥Numbî
))

946 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

947 
ACPI_STATUS


948 
	$A˝iSëG≥WakeMask
 (

949 
ACPI_HANDLE
 
G≥Devi˚
,

950 
UINT32
 
G≥Numbî
,

951 
UINT8
 
A˘i⁄
))

953 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

954 
ACPI_STATUS


955 
	$A˝iGëG≥Sètus
 (

956 
ACPI_HANDLE
 
G≥Devi˚
,

957 
UINT32
 
G≥Numbî
,

958 
ACPI_EVENT_STATUS
 *
EvítSètus
))

960 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

961 
ACPI_STATUS


962 
	$A˝iDißbÀAŒG≥s
 (

965 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

966 
ACPI_STATUS


967 
	$A˝iE«bÀAŒRu¡imeG≥s
 (

970 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

971 
ACPI_STATUS


972 
	$A˝iE«bÀAŒWakeupG≥s
 (

975 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

976 
ACPI_STATUS


977 
	$A˝iGëG≥Devi˚
 (

978 
UINT32
 
G≥Index
,

979 
ACPI_HANDLE
 *
G≥Devi˚
))

981 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

982 
ACPI_STATUS


983 
	$A˝iIn°ÆlG≥Block
 (

984 
ACPI_HANDLE
 
G≥Devi˚
,

985 
ACPI_GENERIC_ADDRESS
 *
G≥BlockAddªss
,

986 
UINT32
 
Regi°îCou¡
,

987 
UINT32
 
I¡îru±Numbî
))

989 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

990 
ACPI_STATUS


991 
	$A˝iRemoveG≥Block
 (

992 
ACPI_HANDLE
 
G≥Devi˚
))

999 
	$ACPI_STATUS
 (*
	tACPI_WALK_RESOURCE_CALLBACK
) (

1000 
	tACPI_RESOURCE
 *
	tResour˚
,

1001 *
	tC⁄ãxt
);

1003 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1004 
ACPI_STATUS


1005 
	$A˝iGëVíd‹Resour˚
 (

1006 
ACPI_HANDLE
 
Devi˚
,

1007 *
Name
,

1008 
ACPI_VENDOR_UUID
 *
Uuid
,

1009 
ACPI_BUFFER
 *
RëBuf„r
))

1011 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1012 
ACPI_STATUS


1013 
	$A˝iGëCuºítResour˚s
 (

1014 
ACPI_HANDLE
 
Devi˚
,

1015 
ACPI_BUFFER
 *
RëBuf„r
))

1017 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1018 
ACPI_STATUS


1019 
	$A˝iGëPossibÀResour˚s
 (

1020 
ACPI_HANDLE
 
Devi˚
,

1021 
ACPI_BUFFER
 *
RëBuf„r
))

1023 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1024 
ACPI_STATUS


1025 
	$A˝iGëEvítResour˚s
 (

1026 
ACPI_HANDLE
 
Devi˚H™dÀ
,

1027 
ACPI_BUFFER
 *
RëBuf„r
))

1029 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1030 
ACPI_STATUS


1031 
	$A˝iWÆkResour˚Buf„r
 (

1032 
ACPI_BUFFER
 *
Buf„r
,

1033 
ACPI_WALK_RESOURCE_CALLBACK
 
U£rFun˘i⁄
,

1034 *
C⁄ãxt
))

1036 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1037 
ACPI_STATUS


1038 
	$A˝iWÆkResour˚s
 (

1039 
ACPI_HANDLE
 
Devi˚
,

1040 *
Name
,

1041 
ACPI_WALK_RESOURCE_CALLBACK
 
U£rFun˘i⁄
,

1042 *
C⁄ãxt
))

1044 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1045 
ACPI_STATUS


1046 
	$A˝iSëCuºítResour˚s
 (

1047 
ACPI_HANDLE
 
Devi˚
,

1048 
ACPI_BUFFER
 *
InBuf„r
))

1050 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1051 
ACPI_STATUS


1052 
	$A˝iGëIrqRoutögTabÀ
 (

1053 
ACPI_HANDLE
 
Devi˚
,

1054 
ACPI_BUFFER
 *
RëBuf„r
))

1056 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1057 
ACPI_STATUS


1058 
	$A˝iResour˚ToAddªss64
 (

1059 
ACPI_RESOURCE
 *
Resour˚
,

1060 
ACPI_RESOURCE_ADDRESS64
 *
Out
))

1062 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1063 
ACPI_STATUS


1064 
	$A˝iBuf„rToResour˚
 (

1065 
UINT8
 *
AmlBuf„r
,

1066 
UINT16
 
AmlBuf„rLígth
,

1067 
ACPI_RESOURCE
 **
Resour˚På
))

1073 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1074 
ACPI_STATUS


1075 
	$A˝iRe£t
 (

1078 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1079 
ACPI_STATUS


1080 
	$A˝iRód
 (

1081 
UINT64
 *
VÆue
,

1082 
ACPI_GENERIC_ADDRESS
 *
Reg
))

1084 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1085 
ACPI_STATUS


1086 
	$A˝iWrôe
 (

1087 
UINT64
 
VÆue
,

1088 
ACPI_GENERIC_ADDRESS
 *
Reg
))

1090 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

1091 
ACPI_STATUS


1092 
	$A˝iRódBôRegi°î
 (

1093 
UINT32
 
Regi°îId
,

1094 
UINT32
 *
Rëu∫VÆue
))

1096 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

1097 
ACPI_STATUS


1098 
	$A˝iWrôeBôRegi°î
 (

1099 
UINT32
 
Regi°îId
,

1100 
UINT32
 
VÆue
))

1106 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1107 
ACPI_STATUS


1108 
	$A˝iGëSÀïTy≥D©a
 (

1109 
UINT8
 
SÀïSèã
,

1110 
UINT8
 *
SÕ_TypA
,

1111 
UINT8
 *
SÕ_TypB
))

1113 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1114 
ACPI_STATUS


1115 
	$A˝iE¡îSÀïSèãPªp
 (

1116 
UINT8
 
SÀïSèã
))

1118 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1119 
ACPI_STATUS


1120 
	$A˝iE¡îSÀïSèã
 (

1121 
UINT8
 
SÀïSèã
))

1123 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

1124 
ACPI_STATUS


1125 
	$A˝iE¡îSÀïSèãS4bios
 (

1128 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1129 
ACPI_STATUS


1130 
	$A˝iLóveSÀïSèãPªp
 (

1131 
UINT8
 
SÀïSèã
))

1133 
	`ACPI_EXTERNAL_RETURN_STATUS
 (

1134 
ACPI_STATUS


1135 
	$A˝iLóveSÀïSèã
 (

1136 
UINT8
 
SÀïSèã
))

1138 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

1139 
ACPI_STATUS


1140 
	$A˝iSëFúmw¨eWakögVe˘‹
 (

1141 
UINT32
 
PhysiˇlAddªss
))

1143 #i‡
ACPI_MACHINE_WIDTH
 == 64

1144 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

1145 
ACPI_STATUS


1146 
	$A˝iSëFúmw¨eWakögVe˘‹64
 (

1147 
UINT64
 
PhysiˇlAddªss
))

1154 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

1155 
ACPI_STATUS


1156 
	$A˝iGëTimîResﬁuti⁄
 (

1157 
UINT32
 *
Resﬁuti⁄
))

1159 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

1160 
ACPI_STATUS


1161 
	$A˝iGëTimî
 (

1162 
UINT32
 *
Ticks
))

1164 
	`ACPI_HW_DEPENDENT_RETURN_STATUS
 (

1165 
ACPI_STATUS


1166 
	$A˝iGëTimîDuøti⁄
 (

1167 
UINT32
 
SèπTicks
,

1168 
UINT32
 
EndTicks
,

1169 
UINT32
 *
TimeEœp£d
))

1175 
	`ACPI_MSG_DEPENDENT_RETURN_VOID
 (

1176 
	$ACPI_PRINTF_LIKE
(3)

1177 
ACPI_INTERNAL_VAR_XFACE


1178 
	$A˝iEº‹
 (

1179 c⁄° *
ModuÀName
,

1180 
UINT32
 
LöeNumbî
,

1181 c⁄° *
F‹m©
,

1184 
	`ACPI_MSG_DEPENDENT_RETURN_VOID
 (

1185 
	$ACPI_PRINTF_LIKE
(4)

1186 
ACPI_INTERNAL_VAR_XFACE


1187 
	$A˝iEx˚±i⁄
 (

1188 c⁄° *
ModuÀName
,

1189 
UINT32
 
LöeNumbî
,

1190 
ACPI_STATUS
 
Sètus
,

1191 c⁄° *
F‹m©
,

1194 
	`ACPI_MSG_DEPENDENT_RETURN_VOID
 (

1195 
	$ACPI_PRINTF_LIKE
(3)

1196 
ACPI_INTERNAL_VAR_XFACE


1197 
	$A˝iW¨nög
 (

1198 c⁄° *
ModuÀName
,

1199 
UINT32
 
LöeNumbî
,

1200 c⁄° *
F‹m©
,

1203 
	`ACPI_MSG_DEPENDENT_RETURN_VOID
 (

1204 
	$ACPI_PRINTF_LIKE
(3)

1205 
ACPI_INTERNAL_VAR_XFACE


1206 
	$A˝iInfo
 (

1207 c⁄° *
ModuÀName
,

1208 
UINT32
 
LöeNumbî
,

1209 c⁄° *
F‹m©
,

1212 
	`ACPI_MSG_DEPENDENT_RETURN_VOID
 (

1213 
	$ACPI_PRINTF_LIKE
(3)

1214 
ACPI_INTERNAL_VAR_XFACE


1215 
	$A˝iBiosEº‹
 (

1216 c⁄° *
ModuÀName
,

1217 
UINT32
 
LöeNumbî
,

1218 c⁄° *
F‹m©
,

1221 
	`ACPI_MSG_DEPENDENT_RETURN_VOID
 (

1222 
	$ACPI_PRINTF_LIKE
(3)

1223 
ACPI_INTERNAL_VAR_XFACE


1224 
	$A˝iBiosW¨nög
 (

1225 c⁄° *
ModuÀName
,

1226 
UINT32
 
LöeNumbî
,

1227 c⁄° *
F‹m©
,

1234 
	`ACPI_DBG_DEPENDENT_RETURN_VOID
 (

1235 
	$ACPI_PRINTF_LIKE
(6)

1236 
ACPI_INTERNAL_VAR_XFACE


1237 
	$A˝iDebugPröt
 (

1238 
UINT32
 
Reque°edDebugLevñ
,

1239 
UINT32
 
LöeNumbî
,

1240 c⁄° *
Fun˘i⁄Name
,

1241 c⁄° *
ModuÀName
,

1242 
UINT32
 
Comp⁄ítId
,

1243 c⁄° *
F‹m©
,

1246 
	`ACPI_DBG_DEPENDENT_RETURN_VOID
 (

1247 
	$ACPI_PRINTF_LIKE
(6)

1248 
ACPI_INTERNAL_VAR_XFACE


1249 
	$A˝iDebugPrötRaw
 (

1250 
UINT32
 
Reque°edDebugLevñ
,

1251 
UINT32
 
LöeNumbî
,

1252 c⁄° *
Fun˘i⁄Name
,

1253 c⁄° *
ModuÀName
,

1254 
UINT32
 
Comp⁄ítId
,

1255 c⁄° *
F‹m©
,

1258 
	`ACPI_APP_DEPENDENT_RETURN_VOID
 (

1259 
	$ACPI_PRINTF_LIKE
(1)

1260 
ACPI_INTERNAL_VAR_XFACE


1261 
	$A˝iLogEº‹
 (

1262 c⁄° *
F‹m©
,

	@src/extern/acpica/source/include/acpredef.h

116 #i‚de‡
__ACPREDEF_H__


117 
	#__ACPREDEF_H__


	)

188 
	eA˝iRëu∫PackageTy≥s


190 
	mACPI_PTYPE1_FIXED
 = 1,

191 
	mACPI_PTYPE1_VAR
 = 2,

192 
	mACPI_PTYPE1_OPTION
 = 3,

193 
	mACPI_PTYPE2
 = 4,

194 
	mACPI_PTYPE2_COUNT
 = 5,

195 
	mACPI_PTYPE2_PKG_COUNT
 = 6,

196 
	mACPI_PTYPE2_FIXED
 = 7,

197 
	mACPI_PTYPE2_MIN
 = 8,

198 
	mACPI_PTYPE2_REV_FIXED
 = 9,

199 
	mACPI_PTYPE2_FIX_VAR
 = 10,

200 
	mACPI_PTYPE2_UUID_PAIR
 = 11

206 
	#METHOD_PREDEF_ARGS_MAX
 4

	)

207 
	#METHOD_ARG_BIT_WIDTH
 3

	)

208 
	#METHOD_ARG_MASK
 0x0007

	)

209 
	#ARG_COUNT_IS_MINIMUM
 0x8000

	)

210 
	#METHOD_MAX_ARG_TYPE
 
ACPI_TYPE_PACKAGE


	)

212 
	#METHOD_GET_ARG_COUNT
(
ArgLi°
Ë((ArgLi°Ë& 
METHOD_ARG_MASK
)

	)

213 
	#METHOD_GET_NEXT_TYPE
(
ArgLi°
Ë(((ArgLi°Ë>>
METHOD_ARG_BIT_WIDTH
Ë& 
METHOD_ARG_MASK
)

	)

217 
	#METHOD_0ARGS
 0

	)

218 
	#METHOD_1ARGS
(
a1
Ë(1 | (a1 << 3))

	)

219 
	#METHOD_2ARGS
(
a1
,
a2
Ë(2 | (a1 << 3Ë| (a2 << 6))

	)

220 
	#METHOD_3ARGS
(
a1
,
a2
,
a3
Ë(3 | (a1 << 3Ë| (a2 << 6Ë| (a3 << 9))

	)

221 
	#METHOD_4ARGS
(
a1
,
a2
,
a3
,
a4
Ë(4 | (a1 << 3Ë| (a2 << 6Ë| (a3 << 9Ë| (a4 << 12))

	)

223 
	#METHOD_RETURNS
(
ty≥
Ë—y≥)

	)

224 
	#METHOD_NO_RETURN_VALUE
 0

	)

226 
	#PACKAGE_INFO
(
a
,
b
,
c
,
d
,
e
,
f
Ë{{{◊),(b),(c),(d)}, ((((
UINT16
)(f)Ë<< 8Ë| (e)), 0}}

	)

231 
	#WIDTH_1
 0x0001

	)

232 
	#WIDTH_2
 0x0002

	)

233 
	#WIDTH_3
 0x0004

	)

234 
	#WIDTH_8
 0x0008

	)

235 
	#WIDTH_16
 0x0010

	)

236 
	#WIDTH_32
 0x0020

	)

237 
	#WIDTH_64
 0x0040

	)

238 
	#VARIABLE_DATA
 0x0080

	)

239 
	#NUM_RESOURCE_WIDTHS
 8

	)

241 
	#WIDTH_ADDRESS
 
WIDTH_16
 | 
WIDTH_32
 | 
WIDTH_64


	)

244 #ifde‡
ACPI_CREATE_PREDEFINED_TABLE


290 c⁄° 
ACPI_PREDEFINED_INFO
 
	gA˝iGbl_PªdeföedMëhods
[] =

292 {{"_AC0", 
METHOD_0ARGS
,

293 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

295 {{"_AC1", 
METHOD_0ARGS
,

296 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

298 {{"_AC2", 
METHOD_0ARGS
,

299 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

301 {{"_AC3", 
METHOD_0ARGS
,

302 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

304 {{"_AC4", 
METHOD_0ARGS
,

305 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

307 {{"_AC5", 
METHOD_0ARGS
,

308 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

310 {{"_AC6", 
METHOD_0ARGS
,

311 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

313 {{"_AC7", 
METHOD_0ARGS
,

314 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

316 {{"_AC8", 
METHOD_0ARGS
,

317 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

319 {{"_AC9", 
METHOD_0ARGS
,

320 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

322 {{"_ADR", 
METHOD_0ARGS
,

323 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

325 {{"_AEI", 
METHOD_0ARGS
,

326 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

328 {{"_AL0", 
METHOD_0ARGS
,

329 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

330 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

332 {{"_AL1", 
METHOD_0ARGS
,

333 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

334 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

336 {{"_AL2", 
METHOD_0ARGS
,

337 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

338 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

340 {{"_AL3", 
METHOD_0ARGS
,

341 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

342 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

344 {{"_AL4", 
METHOD_0ARGS
,

345 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

346 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

348 {{"_AL5", 
METHOD_0ARGS
,

349 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

350 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

352 {{"_AL6", 
METHOD_0ARGS
,

353 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

354 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

356 {{"_AL7", 
METHOD_0ARGS
,

357 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

358 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

360 {{"_AL8", 
METHOD_0ARGS
,

361 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

362 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

364 {{"_AL9", 
METHOD_0ARGS
,

365 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

366 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

368 {{"_ALC", 
METHOD_0ARGS
,

369 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

371 {{"_ALI", 
METHOD_0ARGS
,

372 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

374 {{"_ALP", 
METHOD_0ARGS
,

375 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

377 {{"_ALR", 
METHOD_0ARGS
,

378 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

379 
PACKAGE_INFO
 (
ACPI_PTYPE2
, 
ACPI_RTYPE_INTEGER
, 2,0,0,0),

381 {{"_ALT", 
METHOD_0ARGS
,

382 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

384 {{"_ART", 
METHOD_0ARGS
,

385 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

386 
PACKAGE_INFO
 (
ACPI_PTYPE2_REV_FIXED
, 
ACPI_RTYPE_REFERENCE
, 2, 
ACPI_RTYPE_INTEGER
, 11,0),

388 {{"_BBN", 
METHOD_0ARGS
,

389 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

391 {{"_BCL", 
METHOD_0ARGS
,

392 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

393 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 0,0,0,0),

395 {{"_BCM", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

396 
METHOD_NO_RETURN_VALUE
}},

398 {{"_BCT", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

399 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

401 {{"_BDN", 
METHOD_0ARGS
,

402 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

404 {{"_BFS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

405 
METHOD_NO_RETURN_VALUE
}},

407 {{"_BIF", 
METHOD_0ARGS
,

408 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

409 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 9, 
ACPI_RTYPE_STRING
, 4,0),

411 {{"_BIX", 
METHOD_0ARGS
,

412 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

413 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 16, 
ACPI_RTYPE_STRING
, 4,0),

415 {{"_BLT", 
METHOD_3ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER, ACPI_TYPE_INTEGER),

416 
METHOD_NO_RETURN_VALUE
}},

418 {{"_BMA", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

419 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

421 {{"_BMC", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

422 
METHOD_NO_RETURN_VALUE
}},

424 {{"_BMD", 
METHOD_0ARGS
,

425 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

426 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 5,0,0,0),

428 {{"_BMS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

429 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

431 {{"_BQC", 
METHOD_0ARGS
,

432 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

434 {{"_BST", 
METHOD_0ARGS
,

435 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

436 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 4,0,0,0),

438 {{"_BTM", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

439 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

441 {{"_BTP", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

442 
METHOD_NO_RETURN_VALUE
}},

444 {{"_CBA", 
METHOD_0ARGS
,

445 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

447 {{"_CCA", 
METHOD_0ARGS
,

448 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

450 {{"_CDM", 
METHOD_0ARGS
,

451 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

453 {{"_CID", 
METHOD_0ARGS
,

454 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_STRING
 | 
ACPI_RTYPE_PACKAGE
)}},

455 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_STRING
, 0,0,0,0),

457 {{"_CLS", 
METHOD_0ARGS
,

458 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

459 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 3,0,0,0),

461 {{"_CPC", 
METHOD_0ARGS
,

462 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

463 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_BUFFER
, 0,0,0,0),

465 {{"_CRS", 
METHOD_0ARGS
,

466 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

468 {{"_CRT", 
METHOD_0ARGS
,

469 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

471 {{"_CSD", 
METHOD_0ARGS
,

472 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

473 
PACKAGE_INFO
 (
ACPI_PTYPE2_COUNT
, 
ACPI_RTYPE_INTEGER
, 0,0,0,0),

475 {{"_CST", 
METHOD_0ARGS
,

476 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

477 
PACKAGE_INFO
 (
ACPI_PTYPE2_PKG_COUNT
,
ACPI_RTYPE_BUFFER
, 1, 
ACPI_RTYPE_INTEGER
, 3,0),

479 {{"_CWS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

480 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

482 {{"_DCK", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

483 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

485 {{"_DCS", 
METHOD_0ARGS
,

486 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

488 {{"_DDC", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

489 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_BUFFER
)}},

491 {{"_DDN", 
METHOD_0ARGS
,

492 
METHOD_RETURNS
 (
ACPI_RTYPE_STRING
)}},

494 {{"_DEP", 
METHOD_0ARGS
,

495 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

496 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

498 {{"_DGS", 
METHOD_0ARGS
,

499 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

501 {{"_DIS", 
METHOD_0ARGS
,

502 
METHOD_NO_RETURN_VALUE
}},

504 {{"_DLM", 
METHOD_0ARGS
,

505 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

506 
PACKAGE_INFO
 (
ACPI_PTYPE2_FIX_VAR
, 
ACPI_RTYPE_REFERENCE
, 1, ACPI_RTYPE_REFERENCE | 
ACPI_RTYPE_BUFFER
, 0,0),

508 {{"_DMA", 
METHOD_0ARGS
,

509 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

511 {{"_DOD", 
METHOD_0ARGS
,

512 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

513 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 0,0,0,0),

515 {{"_DOS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

516 
METHOD_NO_RETURN_VALUE
}},

518 {{"_DSD", 
METHOD_0ARGS
,

519 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

520 
PACKAGE_INFO
 (
ACPI_PTYPE2_UUID_PAIR
, 
ACPI_RTYPE_BUFFER
, 1, 
ACPI_RTYPE_PACKAGE
, 1,0),

522 {{"_DSM", 
METHOD_4ARGS
 (
ACPI_TYPE_BUFFER
, 
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER, 
ACPI_TYPE_PACKAGE
),

523 
METHOD_RETURNS
 (
ACPI_RTYPE_ALL
)}},

525 {{"_DSS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

526 
METHOD_NO_RETURN_VALUE
}},

528 {{"_DSW", 
METHOD_3ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER, ACPI_TYPE_INTEGER),

529 
METHOD_NO_RETURN_VALUE
}},

531 {{"_DTI", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

532 
METHOD_NO_RETURN_VALUE
}},

534 {{"_EC_", 
METHOD_0ARGS
,

535 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

537 {{"_EDL", 
METHOD_0ARGS
,

538 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

539 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

541 {{"_EJ0", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

542 
METHOD_NO_RETURN_VALUE
}},

544 {{"_EJ1", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

545 
METHOD_NO_RETURN_VALUE
}},

547 {{"_EJ2", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

548 
METHOD_NO_RETURN_VALUE
}},

550 {{"_EJ3", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

551 
METHOD_NO_RETURN_VALUE
}},

553 {{"_EJ4", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

554 
METHOD_NO_RETURN_VALUE
}},

556 {{"_EJD", 
METHOD_0ARGS
,

557 
METHOD_RETURNS
 (
ACPI_RTYPE_STRING
)}},

559 {{"_ERR", 
METHOD_3ARGS
 (
ACPI_TYPE_INTEGER
, 
ACPI_TYPE_STRING
, ACPI_TYPE_INTEGER),

560 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

562 {{"_EVT", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

563 
METHOD_NO_RETURN_VALUE
}},

565 {{"_FDE", 
METHOD_0ARGS
,

566 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

568 {{"_FDI", 
METHOD_0ARGS
,

569 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

570 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 16,0,0,0),

572 {{"_FDM", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

573 
METHOD_NO_RETURN_VALUE
}},

575 {{"_FIF", 
METHOD_0ARGS
,

576 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

577 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 4,0,0,0),

579 {{"_FIX", 
METHOD_0ARGS
,

580 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

581 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 0,0,0,0),

583 {{"_FPS", 
METHOD_0ARGS
,

584 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

585 
PACKAGE_INFO
 (
ACPI_PTYPE2_REV_FIXED
,
ACPI_RTYPE_INTEGER
, 5, 0,0,0),

587 {{"_FSL", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

588 
METHOD_NO_RETURN_VALUE
}},

590 {{"_FST", 
METHOD_0ARGS
,

591 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

592 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 3,0,0,0),

594 {{"_GAI", 
METHOD_0ARGS
,

595 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

597 {{"_GCP", 
METHOD_0ARGS
,

598 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

600 {{"_GHL", 
METHOD_0ARGS
,

601 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

603 {{"_GLK", 
METHOD_0ARGS
,

604 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

606 {{"_GPD", 
METHOD_0ARGS
,

607 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

609 {{"_GPE", 
METHOD_0ARGS
,

610 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

612 {{"_GRT", 
METHOD_0ARGS
,

613 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

615 {{"_GSB", 
METHOD_0ARGS
,

616 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

618 {{"_GTF", 
METHOD_0ARGS
,

619 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

621 {{"_GTM", 
METHOD_0ARGS
,

622 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

624 {{"_GTS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

625 
METHOD_NO_RETURN_VALUE
}},

627 {{"_GWS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

628 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

630 {{"_HID", 
METHOD_0ARGS
,

631 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_STRING
)}},

633 {{"_HOT", 
METHOD_0ARGS
,

634 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

636 {{"_HPP", 
METHOD_0ARGS
,

637 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

638 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 4,0,0,0),

646 {{"_HPX", 
METHOD_0ARGS
,

647 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

648 
PACKAGE_INFO
 (
ACPI_PTYPE2_MIN
, 
ACPI_RTYPE_INTEGER
, 5,0,0,0),

650 {{"_HRV", 
METHOD_0ARGS
,

651 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

653 {{"_IFT", 
METHOD_0ARGS
,

654 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

656 {{"_INI", 
METHOD_0ARGS
,

657 
METHOD_NO_RETURN_VALUE
}},

659 {{"_IRC", 
METHOD_0ARGS
,

660 
METHOD_NO_RETURN_VALUE
}},

662 {{"_LCK", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

663 
METHOD_NO_RETURN_VALUE
}},

665 {{"_LID", 
METHOD_0ARGS
,

666 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

668 {{"_LPD", 
METHOD_0ARGS
,

669 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

670 
PACKAGE_INFO
 (
ACPI_PTYPE2_REV_FIXED
, 
ACPI_RTYPE_INTEGER
, 2,0,0,0),

672 {{"_MAT", 
METHOD_0ARGS
,

673 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

675 {{"_MBM", 
METHOD_0ARGS
,

676 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

677 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 8,0,0,0),

679 {{"_MLS", 
METHOD_0ARGS
,

680 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

681 
PACKAGE_INFO
 (
ACPI_PTYPE2
, 
ACPI_RTYPE_STRING
, 1, 
ACPI_RTYPE_BUFFER
, 1,0),

683 {{"_MSG", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

684 
METHOD_NO_RETURN_VALUE
}},

686 {{"_MSM", 
METHOD_4ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER, ACPI_TYPE_INTEGER, ACPI_TYPE_INTEGER),

687 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

689 {{"_NTT", 
METHOD_0ARGS
,

690 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

692 {{"_OFF", 
METHOD_0ARGS
,

693 
METHOD_NO_RETURN_VALUE
}},

695 {{"_ON_", 
METHOD_0ARGS
,

696 
METHOD_NO_RETURN_VALUE
}},

698 {{"_OS_", 
METHOD_0ARGS
,

699 
METHOD_RETURNS
 (
ACPI_RTYPE_STRING
)}},

701 {{"_OSC", 
METHOD_4ARGS
 (
ACPI_TYPE_BUFFER
, 
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER, ACPI_TYPE_BUFFER),

702 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

704 {{"_OST", 
METHOD_3ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER, 
ACPI_TYPE_BUFFER
),

705 
METHOD_NO_RETURN_VALUE
}},

707 {{"_PAI", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

708 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

710 {{"_PCL", 
METHOD_0ARGS
,

711 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

712 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

714 {{"_PCT", 
METHOD_0ARGS
,

715 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

716 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_BUFFER
, 2,0,0,0),

718 {{"_PDC", 
METHOD_1ARGS
 (
ACPI_TYPE_BUFFER
),

719 
METHOD_NO_RETURN_VALUE
}},

721 {{"_PDL", 
METHOD_0ARGS
,

722 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

724 {{"_PIC", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

725 
METHOD_NO_RETURN_VALUE
}},

727 {{"_PIF", 
METHOD_0ARGS
,

728 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

729 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 3, 
ACPI_RTYPE_STRING
, 3,0),

731 {{"_PLD", 
METHOD_0ARGS
,

732 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

733 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_BUFFER
, 0,0,0,0),

735 {{"_PMC", 
METHOD_0ARGS
,

736 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

737 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 11, 
ACPI_RTYPE_STRING
, 3,0),

739 {{"_PMD", 
METHOD_0ARGS
,

740 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

741 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

743 {{"_PMM", 
METHOD_0ARGS
,

744 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

746 {{"_PPC", 
METHOD_0ARGS
,

747 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

749 {{"_PPE", 
METHOD_0ARGS
,

750 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

752 {{"_PR0", 
METHOD_0ARGS
,

753 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

754 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

756 {{"_PR1", 
METHOD_0ARGS
,

757 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

758 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

760 {{"_PR2", 
METHOD_0ARGS
,

761 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

762 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

764 {{"_PR3", 
METHOD_0ARGS
,

765 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

766 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

768 {{"_PRE", 
METHOD_0ARGS
,

769 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

770 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

772 {{"_PRL", 
METHOD_0ARGS
,

773 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

774 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

776 {{"_PRS", 
METHOD_0ARGS
,

777 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

787 {{"_PRT", 
METHOD_0ARGS
,

788 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

789 
PACKAGE_INFO
 (
ACPI_PTYPE2_FIXED
, 4, 
ACPI_RTYPE_INTEGER
, ACPI_RTYPE_INTEGER,

790 
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_REFERENCE
, ACPI_RTYPE_INTEGER),

792 {{"_PRW", 
METHOD_0ARGS
,

793 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

794 
PACKAGE_INFO
 (
ACPI_PTYPE1_OPTION
, 2, 
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_PACKAGE
,

795 
ACPI_RTYPE_INTEGER
, 
ACPI_RTYPE_REFERENCE
, 0),

797 {{"_PS0", 
METHOD_0ARGS
,

798 
METHOD_NO_RETURN_VALUE
}},

800 {{"_PS1", 
METHOD_0ARGS
,

801 
METHOD_NO_RETURN_VALUE
}},

803 {{"_PS2", 
METHOD_0ARGS
,

804 
METHOD_NO_RETURN_VALUE
}},

806 {{"_PS3", 
METHOD_0ARGS
,

807 
METHOD_NO_RETURN_VALUE
}},

809 {{"_PSC", 
METHOD_0ARGS
,

810 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

812 {{"_PSD", 
METHOD_0ARGS
,

813 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

814 
PACKAGE_INFO
 (
ACPI_PTYPE2_COUNT
, 
ACPI_RTYPE_INTEGER
, 0,0,0,0),

816 {{"_PSE", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

817 
METHOD_NO_RETURN_VALUE
}},

819 {{"_PSL", 
METHOD_0ARGS
,

820 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

821 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

823 {{"_PSR", 
METHOD_0ARGS
,

824 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

826 {{"_PSS", 
METHOD_0ARGS
,

827 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

828 
PACKAGE_INFO
 (
ACPI_PTYPE2
, 
ACPI_RTYPE_INTEGER
, 6,0,0,0),

830 {{"_PSV", 
METHOD_0ARGS
,

831 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

833 {{"_PSW", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

834 
METHOD_NO_RETURN_VALUE
}},

836 {{"_PTC", 
METHOD_0ARGS
,

837 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

838 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_BUFFER
, 2,0,0,0),

840 {{"_PTP", 
METHOD_2ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER),

841 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

843 {{"_PTS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

844 
METHOD_NO_RETURN_VALUE
}},

846 {{"_PUR", 
METHOD_0ARGS
,

847 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

848 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 2,0,0,0),

850 {{"_PXM", 
METHOD_0ARGS
,

851 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

853 {{"_REG", 
METHOD_2ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER),

854 
METHOD_NO_RETURN_VALUE
}},

856 {{"_REV", 
METHOD_0ARGS
,

857 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

859 {{"_RMV", 
METHOD_0ARGS
,

860 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

862 {{"_ROM", 
METHOD_2ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER),

863 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

865 {{"_RTV", 
METHOD_0ARGS
,

866 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

874 {{"_S0_", 
METHOD_0ARGS
,

875 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

876 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 1,0,0,0),

878 {{"_S1_", 
METHOD_0ARGS
,

879 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

880 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 1,0,0,0),

882 {{"_S2_", 
METHOD_0ARGS
,

883 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

884 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 1,0,0,0),

886 {{"_S3_", 
METHOD_0ARGS
,

887 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

888 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 1,0,0,0),

890 {{"_S4_", 
METHOD_0ARGS
,

891 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

892 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 1,0,0,0),

894 {{"_S5_", 
METHOD_0ARGS
,

895 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

896 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_INTEGER
, 1,0,0,0),

898 {{"_S1D", 
METHOD_0ARGS
,

899 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

901 {{"_S2D", 
METHOD_0ARGS
,

902 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

904 {{"_S3D", 
METHOD_0ARGS
,

905 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

907 {{"_S4D", 
METHOD_0ARGS
,

908 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

910 {{"_S0W", 
METHOD_0ARGS
,

911 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

913 {{"_S1W", 
METHOD_0ARGS
,

914 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

916 {{"_S2W", 
METHOD_0ARGS
,

917 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

919 {{"_S3W", 
METHOD_0ARGS
,

920 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

922 {{"_S4W", 
METHOD_0ARGS
,

923 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

925 {{"_SBS", 
METHOD_0ARGS
,

926 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

928 {{"_SCP", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
Ë| 
ARG_COUNT_IS_MINIMUM
,

929 
METHOD_NO_RETURN_VALUE
}},

931 {{"_SDD", 
METHOD_1ARGS
 (
ACPI_TYPE_BUFFER
),

932 
METHOD_NO_RETURN_VALUE
}},

934 {{"_SEG", 
METHOD_0ARGS
,

935 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

937 {{"_SHL", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

938 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

940 {{"_SLI", 
METHOD_0ARGS
,

941 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

943 {{"_SPD", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

944 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

946 {{"_SRS", 
METHOD_1ARGS
 (
ACPI_TYPE_BUFFER
),

947 
METHOD_NO_RETURN_VALUE
}},

949 {{"_SRT", 
METHOD_1ARGS
 (
ACPI_TYPE_BUFFER
),

950 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

952 {{"_SRV", 
METHOD_0ARGS
,

953 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

955 {{"_SST", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

956 
METHOD_NO_RETURN_VALUE
}},

958 {{"_STA", 
METHOD_0ARGS
,

959 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

961 {{"_STM", 
METHOD_3ARGS
 (
ACPI_TYPE_BUFFER
, ACPI_TYPE_BUFFER, ACPI_TYPE_BUFFER),

962 
METHOD_NO_RETURN_VALUE
}},

964 {{"_STP", 
METHOD_2ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER),

965 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

967 {{"_STR", 
METHOD_0ARGS
,

968 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

970 {{"_STV", 
METHOD_2ARGS
 (
ACPI_TYPE_INTEGER
, ACPI_TYPE_INTEGER),

971 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

973 {{"_SUB", 
METHOD_0ARGS
,

974 
METHOD_RETURNS
 (
ACPI_RTYPE_STRING
)}},

976 {{"_SUN", 
METHOD_0ARGS
,

977 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

979 {{"_SWS", 
METHOD_0ARGS
,

980 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

982 {{"_TC1", 
METHOD_0ARGS
,

983 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

985 {{"_TC2", 
METHOD_0ARGS
,

986 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

988 {{"_TDL", 
METHOD_0ARGS
,

989 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

991 {{"_TIP", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

992 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

994 {{"_TIV", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

995 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

997 {{"_TMP", 
METHOD_0ARGS
,

998 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

1000 {{"_TPC", 
METHOD_0ARGS
,

1001 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

1003 {{"_TPT", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

1004 
METHOD_NO_RETURN_VALUE
}},

1006 {{"_TRT", 
METHOD_0ARGS
,

1007 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

1008 
PACKAGE_INFO
 (
ACPI_PTYPE2
, 
ACPI_RTYPE_REFERENCE
, 2, 
ACPI_RTYPE_INTEGER
, 6, 0),

1010 {{"_TSD", 
METHOD_0ARGS
,

1011 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

1012 
PACKAGE_INFO
 (
ACPI_PTYPE2_COUNT
,
ACPI_RTYPE_INTEGER
, 5,0,0,0),

1014 {{"_TSP", 
METHOD_0ARGS
,

1015 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

1017 {{"_TSS", 
METHOD_0ARGS
,

1018 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

1019 
PACKAGE_INFO
 (
ACPI_PTYPE2
, 
ACPI_RTYPE_INTEGER
, 5,0,0,0),

1021 {{"_TST", 
METHOD_0ARGS
,

1022 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

1024 {{"_TTS", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

1025 
METHOD_NO_RETURN_VALUE
}},

1027 {{"_TZD", 
METHOD_0ARGS
,

1028 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

1029 
PACKAGE_INFO
 (
ACPI_PTYPE1_VAR
, 
ACPI_RTYPE_REFERENCE
, 0,0,0,0),

1031 {{"_TZM", 
METHOD_0ARGS
,

1032 
METHOD_RETURNS
 (
ACPI_RTYPE_REFERENCE
)}},

1034 {{"_TZP", 
METHOD_0ARGS
,

1035 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

1037 {{"_UID", 
METHOD_0ARGS
,

1038 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_STRING
)}},

1040 {{"_UPC", 
METHOD_0ARGS
,

1041 
METHOD_RETURNS
 (
ACPI_RTYPE_PACKAGE
)}},

1042 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 4,0,0,0),

1044 {{"_UPD", 
METHOD_0ARGS
,

1045 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

1047 {{"_UPP", 
METHOD_0ARGS
,

1048 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

1050 {{"_VPO", 
METHOD_0ARGS
,

1051 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
)}},

1055 {{"_WAK", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

1056 
METHOD_RETURNS
 (
ACPI_RTYPE_NONE
 | 
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_PACKAGE
)}},

1057 
PACKAGE_INFO
 (
ACPI_PTYPE1_FIXED
, 
ACPI_RTYPE_INTEGER
, 2,0,0,0),

1061 {{"_WDG", 
METHOD_0ARGS
,

1062 
METHOD_RETURNS
 (
ACPI_RTYPE_BUFFER
)}},

1064 {{"_WED", 
METHOD_1ARGS
 (
ACPI_TYPE_INTEGER
),

1065 
METHOD_RETURNS
 (
ACPI_RTYPE_INTEGER
 | 
ACPI_RTYPE_STRING
 | 
ACPI_RTYPE_BUFFER
)}},

1067 
PACKAGE_INFO
 (0,0,0,0,0,0)

1070 c⁄° 
ACPI_PREDEFINED_INFO
 
A˝iGbl_PªdeföedMëhods
[];

1074 #i‡(
deföed
 
ACPI_CREATE_RESOURCE_TABLE
 && deföed 
ACPI_APPLICATION
)

1085 c⁄° 
ACPI_PREDEFINED_INFO
 
	gA˝iGbl_Resour˚Names
[] =

1087 {{"_ADR", 
WIDTH_16
 | 
WIDTH_64
, 0}},

1088 {{"_ALN", 
WIDTH_8
 | 
WIDTH_16
 | 
WIDTH_32
, 0}},

1089 {{"_ASI", 
WIDTH_8
, 0}},

1090 {{"_ASZ", 
WIDTH_8
, 0}},

1091 {{"_ATT", 
WIDTH_64
, 0}},

1092 {{"_BAS", 
WIDTH_16
 | 
WIDTH_32
, 0}},

1093 {{"_BM_", 
WIDTH_1
, 0}},

1094 {{"_DBT", 
WIDTH_16
, 0}},

1095 {{"_DEC", 
WIDTH_1
, 0}},

1096 {{"_DMA", 
WIDTH_8
, 0}},

1097 {{"_DPL", 
WIDTH_1
, 0}},

1098 {{"_DRS", 
WIDTH_16
, 0}},

1099 {{"_END", 
WIDTH_1
, 0}},

1100 {{"_FLC", 
WIDTH_2
, 0}},

1101 {{"_GRA", 
WIDTH_ADDRESS
, 0}},

1102 {{"_HE_", 
WIDTH_1
, 0}},

1103 {{"_INT", 
WIDTH_16
 | 
WIDTH_32
, 0}},

1104 {{"_IOR", 
WIDTH_2
, 0}},

1105 {{"_LEN", 
WIDTH_8
 | 
WIDTH_ADDRESS
, 0}},

1106 {{"_LIN", 
WIDTH_8
, 0}},

1107 {{"_LL_", 
WIDTH_1
, 0}},

1108 {{"_MAF", 
WIDTH_1
, 0}},

1109 {{"_MAX", 
WIDTH_ADDRESS
, 0}},

1110 {{"_MEM", 
WIDTH_2
, 0}},

1111 {{"_MIF", 
WIDTH_1
, 0}},

1112 {{"_MIN", 
WIDTH_ADDRESS
, 0}},

1113 {{"_MOD", 
WIDTH_1
, 0}},

1114 {{"_MTP", 
WIDTH_2
, 0}},

1115 {{"_PAR", 
WIDTH_8
, 0}},

1116 {{"_PHA", 
WIDTH_1
, 0}},

1117 {{"_PIN", 
WIDTH_16
, 0}},

1118 {{"_PPI", 
WIDTH_8
, 0}},

1119 {{"_POL", 
WIDTH_1
 | 
WIDTH_2
, 0}},

1120 {{"_RBO", 
WIDTH_8
, 0}},

1121 {{"_RBW", 
WIDTH_8
, 0}},

1122 {{"_RNG", 
WIDTH_1
, 0}},

1123 {{"_RT_", 
WIDTH_8
, 0}},

1124 {{"_RW_", 
WIDTH_1
, 0}},

1125 {{"_RXL", 
WIDTH_16
, 0}},

1126 {{"_SHR", 
WIDTH_2
, 0}},

1127 {{"_SIZ", 
WIDTH_2
, 0}},

1128 {{"_SLV", 
WIDTH_1
, 0}},

1129 {{"_SPE", 
WIDTH_32
, 0}},

1130 {{"_STB", 
WIDTH_2
, 0}},

1131 {{"_TRA", 
WIDTH_ADDRESS
, 0}},

1132 {{"_TRS", 
WIDTH_1
, 0}},

1133 {{"_TSF", 
WIDTH_8
, 0}},

1134 {{"_TTP", 
WIDTH_1
, 0}},

1135 {{"_TXL", 
WIDTH_16
, 0}},

1136 {{"_TYP", 
WIDTH_2
 | 
WIDTH_16
, 0}},

1137 {{"_VEN", 
VARIABLE_DATA
, 0}},

1138 
PACKAGE_INFO
 (0,0,0,0,0,0)

1141 c⁄° 
ACPI_PREDEFINED_INFO
 
	gA˝iGbl_Sc›eNames
[] = {

1147 
PACKAGE_INFO
 (0,0,0,0,0,0)

1150 c⁄° 
ACPI_PREDEFINED_INFO
 
A˝iGbl_Resour˚Names
[];

	@src/extern/acpica/source/include/acresrc.h

117 #i‚de‡
__ACRESRC_H__


118 
	#__ACRESRC_H__


	)

122 
	~"amÃe§c.h
"

133 #i‡(!
deföed
(
ACPI_MISALIGNMENT_NOT_SUPPORTED
Ë&& !deföed(
ACPI_PACKED_POINTERS_NOT_SUPPORTED
))

134 #¥agm®
∑ck
(1)

140 c⁄° 
	sa˝i_rsc⁄vît_öfo


142 
UINT8
 
	mOpcode
;

143 
UINT8
 
	mResour˚Off£t
;

144 
UINT8
 
	mAmlOff£t
;

145 
UINT8
 
	mVÆue
;

147 } 
	tACPI_RSCONVERT_INFO
;

153 
	mACPI_RSC_INITGET
 = 0,

154 
	mACPI_RSC_INITSET
,

155 
	mACPI_RSC_FLAGINIT
,

156 
	mACPI_RSC_1BITFLAG
,

157 
	mACPI_RSC_2BITFLAG
,

158 
	mACPI_RSC_3BITFLAG
,

159 
	mACPI_RSC_ADDRESS
,

160 
	mACPI_RSC_BITMASK
,

161 
	mACPI_RSC_BITMASK16
,

162 
	mACPI_RSC_COUNT
,

163 
	mACPI_RSC_COUNT16
,

164 
	mACPI_RSC_COUNT_GPIO_PIN
,

165 
	mACPI_RSC_COUNT_GPIO_RES
,

166 
	mACPI_RSC_COUNT_GPIO_VEN
,

167 
	mACPI_RSC_COUNT_SERIAL_RES
,

168 
	mACPI_RSC_COUNT_SERIAL_VEN
,

169 
	mACPI_RSC_DATA8
,

170 
	mACPI_RSC_EXIT_EQ
,

171 
	mACPI_RSC_EXIT_LE
,

172 
	mACPI_RSC_EXIT_NE
,

173 
	mACPI_RSC_LENGTH
,

174 
	mACPI_RSC_MOVE_GPIO_PIN
,

175 
	mACPI_RSC_MOVE_GPIO_RES
,

176 
	mACPI_RSC_MOVE_SERIAL_RES
,

177 
	mACPI_RSC_MOVE_SERIAL_VEN
,

178 
	mACPI_RSC_MOVE8
,

179 
	mACPI_RSC_MOVE16
,

180 
	mACPI_RSC_MOVE32
,

181 
	mACPI_RSC_MOVE64
,

182 
	mACPI_RSC_SET8
,

183 
	mACPI_RSC_SOURCE
,

184 
	mACPI_RSC_SOURCEX


186 } 
	tACPI_RSCONVERT_OPCODES
;

190 
	#ACPI_RSC_COMPARE_AML_LENGTH
 0

	)

191 
	#ACPI_RSC_COMPARE_VALUE
 1

	)

193 
	#ACPI_RSC_TABLE_SIZE
(
d
Ë( (dË/  (
ACPI_RSCONVERT_INFO
))

	)

195 
	#ACPI_RS_OFFSET
(
f
Ë(
UINT8
Ë
	`ACPI_OFFSET
 (
ACPI_RESOURCE
,f)

	)

196 
	#AML_OFFSET
(
f
Ë(
UINT8
Ë
	`ACPI_OFFSET
 (
AML_RESOURCE
,f)

	)

202 c⁄° 
	sa˝i_rsdump_öfo


204 
UINT8
 
	mOpcode
;

205 
UINT8
 
	mOff£t
;

206 *
	mName
;

207 c⁄° **
	mPoöãr
;

209 } 
	tACPI_RSDUMP_INFO
;

215 
	mACPI_RSD_TITLE
 = 0,

216 
	mACPI_RSD_1BITFLAG
,

217 
	mACPI_RSD_2BITFLAG
,

218 
	mACPI_RSD_3BITFLAG
,

219 
	mACPI_RSD_ADDRESS
,

220 
	mACPI_RSD_DWORDLIST
,

221 
	mACPI_RSD_LITERAL
,

222 
	mACPI_RSD_LONGLIST
,

223 
	mACPI_RSD_SHORTLIST
,

224 
	mACPI_RSD_SHORTLISTX
,

225 
	mACPI_RSD_SOURCE
,

226 
	mACPI_RSD_STRING
,

227 
	mACPI_RSD_UINT8
,

228 
	mACPI_RSD_UINT16
,

229 
	mACPI_RSD_UINT32
,

230 
	mACPI_RSD_UINT64
,

231 
	mACPI_RSD_WORDLIST


233 } 
	tACPI_RSDUMP_OPCODES
;

237 #¥agm®
∑ck
()

242 c⁄° 
UINT8
 
A˝iGbl_AmlResour˚Sizes
[];

243 c⁄° 
UINT8
 
A˝iGbl_AmlResour˚SîülBusSizes
[];

244 
ACPI_RSCONVERT_INFO
 *
A˝iGbl_SëResour˚Di•©ch
[];

248 c⁄° 
UINT8
 
A˝iGbl_Resour˚Såu˘Sizes
[];

249 c⁄° 
UINT8
 
A˝iGbl_Resour˚Såu˘SîülBusSizes
[];

250 
ACPI_RSCONVERT_INFO
 *
A˝iGbl_GëResour˚Di•©ch
[];

252 
ACPI_RSCONVERT_INFO
 *
A˝iGbl_C⁄vîtResour˚SîülBusDi•©ch
[];

254 
	sa˝i_víd‹_wÆk_öfo


256 
ACPI_VENDOR_UUID
 *
	mUuid
;

257 
ACPI_BUFFER
 *
	mBuf„r
;

258 
ACPI_STATUS
 
	mSètus
;

260 } 
	tACPI_VENDOR_WALK_INFO
;

266 
ACPI_STATUS


267 
A˝iRsCª©eResour˚Li°
 (

268 
ACPI_OPERAND_OBJECT
 *
AmlBuf„r
,

269 
ACPI_BUFFER
 *
OuçutBuf„r
);

271 
ACPI_STATUS


272 
A˝iRsCª©eAmlResour˚s
 (

273 
ACPI_BUFFER
 *
Resour˚Li°
,

274 
ACPI_BUFFER
 *
OuçutBuf„r
);

276 
ACPI_STATUS


277 
A˝iRsCª©ePciRoutögTabÀ
 (

278 
ACPI_OPERAND_OBJECT
 *
PackageObje˘
,

279 
ACPI_BUFFER
 *
OuçutBuf„r
);

285 
ACPI_STATUS


286 
A˝iRsGëPπMëhodD©a
 (

287 
ACPI_NAMESPACE_NODE
 *
Node
,

288 
ACPI_BUFFER
 *
RëBuf„r
);

290 
ACPI_STATUS


291 
A˝iRsGëCrsMëhodD©a
 (

292 
ACPI_NAMESPACE_NODE
 *
Node
,

293 
ACPI_BUFFER
 *
RëBuf„r
);

295 
ACPI_STATUS


296 
A˝iRsGëPrsMëhodD©a
 (

297 
ACPI_NAMESPACE_NODE
 *
Node
,

298 
ACPI_BUFFER
 *
RëBuf„r
);

300 
ACPI_STATUS


301 
A˝iRsGëMëhodD©a
 (

302 
ACPI_HANDLE
 
H™dÀ
,

303 *
P©h
,

304 
ACPI_BUFFER
 *
RëBuf„r
);

306 
ACPI_STATUS


307 
A˝iRsSëSrsMëhodD©a
 (

308 
ACPI_NAMESPACE_NODE
 *
Node
,

309 
ACPI_BUFFER
 *
RëBuf„r
);

311 
ACPI_STATUS


312 
A˝iRsGëAeiMëhodD©a
 (

313 
ACPI_NAMESPACE_NODE
 *
Node
,

314 
ACPI_BUFFER
 *
RëBuf„r
);

319 
ACPI_STATUS


320 
A˝iRsGëLi°Lígth
 (

321 
UINT8
 *
AmlBuf„r
,

322 
UINT32
 
AmlBuf„rLígth
,

323 
ACPI_SIZE
 *
SizeNìded
);

325 
ACPI_STATUS


326 
A˝iRsGëAmlLígth
 (

327 
ACPI_RESOURCE
 *
Resour˚Li°
,

328 
ACPI_SIZE
 
Resour˚Li°Size
,

329 
ACPI_SIZE
 *
SizeNìded
);

331 
ACPI_STATUS


332 
A˝iRsGëPciRoutögTabÀLígth
 (

333 
ACPI_OPERAND_OBJECT
 *
PackageObje˘
,

334 
ACPI_SIZE
 *
Buf„rSizeNìded
);

336 
ACPI_STATUS


337 
A˝iRsC⁄vîtAmlToResour˚s
 (

338 
UINT8
 *
Aml
,

339 
UINT32
 
Lígth
,

340 
UINT32
 
Off£t
,

341 
UINT8
 
Resour˚Index
,

342 **
C⁄ãxt
);

344 
ACPI_STATUS


345 
A˝iRsC⁄vîtResour˚sToAml
 (

346 
ACPI_RESOURCE
 *
Resour˚
,

347 
ACPI_SIZE
 
AmlSizeNìded
,

348 
UINT8
 *
OuçutBuf„r
);

355 
A˝iRsSëAddªssComm⁄
 (

356 
AML_RESOURCE
 *
Aml
,

357 
ACPI_RESOURCE
 *
Resour˚
);

359 
BOOLEAN


360 
A˝iRsGëAddªssComm⁄
 (

361 
ACPI_RESOURCE
 *
Resour˚
,

362 
AML_RESOURCE
 *
Aml
);

368 
ACPI_STATUS


369 
A˝iRsC⁄vîtAmlToResour˚
 (

370 
ACPI_RESOURCE
 *
Resour˚
,

371 
AML_RESOURCE
 *
Aml
,

372 
ACPI_RSCONVERT_INFO
 *
Info
);

374 
ACPI_STATUS


375 
A˝iRsC⁄vîtResour˚ToAml
 (

376 
ACPI_RESOURCE
 *
Resour˚
,

377 
AML_RESOURCE
 *
Aml
,

378 
ACPI_RSCONVERT_INFO
 *
Info
);

385 
A˝iRsMoveD©a
 (

386 *
De°ö©i⁄
,

387 *
Sour˚
,

388 
UINT16
 
IãmCou¡
,

389 
UINT8
 
MoveTy≥
);

391 
UINT8


392 
A˝iRsDecodeBômask
 (

393 
UINT16
 
Mask
,

394 
UINT8
 *
Li°
);

396 
UINT16


397 
A˝iRsEncodeBômask
 (

398 
UINT8
 *
Li°
,

399 
UINT8
 
Cou¡
);

401 
ACPI_RS_LENGTH


402 
A˝iRsGëResour˚Sour˚
 (

403 
ACPI_RS_LENGTH
 
Resour˚Lígth
,

404 
ACPI_RS_LENGTH
 
MöimumLígth
,

405 
ACPI_RESOURCE_SOURCE
 *
Resour˚Sour˚
,

406 
AML_RESOURCE
 *
Aml
,

407 *
SåögPå
);

409 
ACPI_RSDESC_SIZE


410 
A˝iRsSëResour˚Sour˚
 (

411 
AML_RESOURCE
 *
Aml
,

412 
ACPI_RS_LENGTH
 
MöimumLígth
,

413 
ACPI_RESOURCE_SOURCE
 *
Resour˚Sour˚
);

416 
A˝iRsSëResour˚Hódî
 (

417 
UINT8
 
Des¸ùt‹Ty≥
,

418 
ACPI_RSDESC_SIZE
 
TŸÆLígth
,

419 
AML_RESOURCE
 *
Aml
);

422 
A˝iRsSëResour˚Lígth
 (

423 
ACPI_RSDESC_SIZE
 
TŸÆLígth
,

424 
AML_RESOURCE
 *
Aml
);

430 #ifde‡
ACPI_DEBUGGER


432 
A˝iRsDumpResour˚Li°
 (

433 
ACPI_RESOURCE
 *
Resour˚
);

436 
A˝iRsDumpIrqLi°
 (

437 
UINT8
 *
RouãTabÀ
);

444 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtDma
[];

445 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtEndDpf
[];

446 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtIo
[];

447 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtFixedIo
[];

448 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtEndTag
[];

449 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtMem‹y24
[];

450 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtGíîicReg
[];

451 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtMem‹y32
[];

452 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtFixedMem‹y32
[];

453 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtAddªss32
[];

454 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtAddªss16
[];

455 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtExtIrq
[];

456 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtAddªss64
[];

457 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtExtAddªss64
[];

458 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtGpio
[];

459 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtFixedDma
[];

460 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtI2cSîülBus
[];

461 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtSpiSîülBus
[];

462 
ACPI_RSCONVERT_INFO
 
A˝iRsC⁄vîtU¨tSîülBus
[];

466 
ACPI_RSCONVERT_INFO
 
A˝iRsGëIrq
[];

467 
ACPI_RSCONVERT_INFO
 
A˝iRsGëSèπDpf
[];

468 
ACPI_RSCONVERT_INFO
 
A˝iRsGëVíd‹SmÆl
[];

469 
ACPI_RSCONVERT_INFO
 
A˝iRsGëVíd‹L¨ge
[];

471 
ACPI_RSCONVERT_INFO
 
A˝iRsSëIrq
[];

472 
ACPI_RSCONVERT_INFO
 
A˝iRsSëSèπDpf
[];

473 
ACPI_RSCONVERT_INFO
 
A˝iRsSëVíd‹
[];

476 #i‡
deföed
(
ACPI_DEBUG_OUTPUT
Ë|| deföed(
ACPI_DEBUGGER
)

480 
ACPI_RSDUMP_INFO
 *
A˝iGbl_DumpResour˚Di•©ch
[];

481 
ACPI_RSDUMP_INFO
 *
A˝iGbl_DumpSîülBusDi•©ch
[];

486 
ACPI_RSDUMP_INFO
 
A˝iRsDumpIrq
[];

487 
ACPI_RSDUMP_INFO
 
A˝iRsDumpPπ
[];

488 
ACPI_RSDUMP_INFO
 
A˝iRsDumpDma
[];

489 
ACPI_RSDUMP_INFO
 
A˝iRsDumpSèπDpf
[];

490 
ACPI_RSDUMP_INFO
 
A˝iRsDumpEndDpf
[];

491 
ACPI_RSDUMP_INFO
 
A˝iRsDumpIo
[];

492 
ACPI_RSDUMP_INFO
 
A˝iRsDumpIoFœgs
[];

493 
ACPI_RSDUMP_INFO
 
A˝iRsDumpFixedIo
[];

494 
ACPI_RSDUMP_INFO
 
A˝iRsDumpVíd‹
[];

495 
ACPI_RSDUMP_INFO
 
A˝iRsDumpEndTag
[];

496 
ACPI_RSDUMP_INFO
 
A˝iRsDumpMem‹y24
[];

497 
ACPI_RSDUMP_INFO
 
A˝iRsDumpMem‹y32
[];

498 
ACPI_RSDUMP_INFO
 
A˝iRsDumpMem‹yFœgs
[];

499 
ACPI_RSDUMP_INFO
 
A˝iRsDumpFixedMem‹y32
[];

500 
ACPI_RSDUMP_INFO
 
A˝iRsDumpAddªss16
[];

501 
ACPI_RSDUMP_INFO
 
A˝iRsDumpAddªss32
[];

502 
ACPI_RSDUMP_INFO
 
A˝iRsDumpAddªss64
[];

503 
ACPI_RSDUMP_INFO
 
A˝iRsDumpExtAddªss64
[];

504 
ACPI_RSDUMP_INFO
 
A˝iRsDumpExtIrq
[];

505 
ACPI_RSDUMP_INFO
 
A˝iRsDumpGíîicReg
[];

506 
ACPI_RSDUMP_INFO
 
A˝iRsDumpGpio
[];

507 
ACPI_RSDUMP_INFO
 
A˝iRsDumpFixedDma
[];

508 
ACPI_RSDUMP_INFO
 
A˝iRsDumpComm⁄SîülBus
[];

509 
ACPI_RSDUMP_INFO
 
A˝iRsDumpI2cSîülBus
[];

510 
ACPI_RSDUMP_INFO
 
A˝iRsDumpSpiSîülBus
[];

511 
ACPI_RSDUMP_INFO
 
A˝iRsDumpU¨tSîülBus
[];

512 
ACPI_RSDUMP_INFO
 
A˝iRsDumpGíîÆFœgs
[];

	@src/extern/acpica/source/include/acrestyp.h

116 #i‚de‡
__ACRESTYP_H__


117 
	#__ACRESTYP_H__


	)

123 
UINT16
 
	tACPI_RS_LENGTH
;

124 
UINT32
 
	tACPI_RSDESC_SIZE
;

129 
	#ACPI_READ_ONLY_MEMORY
 (
UINT8
Ë0x00

	)

130 
	#ACPI_READ_WRITE_MEMORY
 (
UINT8
Ë0x01

	)

132 
	#ACPI_NON_CACHEABLE_MEMORY
 (
UINT8
Ë0x00

	)

133 
	#ACPI_CACHABLE_MEMORY
 (
UINT8
Ë0x01

	)

134 
	#ACPI_WRITE_COMBINING_MEMORY
 (
UINT8
Ë0x02

	)

135 
	#ACPI_PREFETCHABLE_MEMORY
 (
UINT8
Ë0x03

	)

145 
	#ACPI_NON_ISA_ONLY_RANGES
 (
UINT8
Ë0x01

	)

146 
	#ACPI_ISA_ONLY_RANGES
 (
UINT8
Ë0x02

	)

147 
	#ACPI_ENTIRE_RANGE
 (
ACPI_NON_ISA_ONLY_RANGES
 | 
ACPI_ISA_ONLY_RANGES
)

	)

151 
	#ACPI_SPARSE_TRANSLATION
 (
UINT8
Ë0x01

	)

156 
	#ACPI_DECODE_10
 (
UINT8
Ë0x00

	)

157 
	#ACPI_DECODE_16
 (
UINT8
Ë0x01

	)

165 
	#ACPI_LEVEL_SENSITIVE
 (
UINT8
Ë0x00

	)

166 
	#ACPI_EDGE_SENSITIVE
 (
UINT8
Ë0x01

	)

170 
	#ACPI_ACTIVE_HIGH
 (
UINT8
Ë0x00

	)

171 
	#ACPI_ACTIVE_LOW
 (
UINT8
Ë0x01

	)

172 
	#ACPI_ACTIVE_BOTH
 (
UINT8
Ë0x02

	)

176 
	#ACPI_EXCLUSIVE
 (
UINT8
Ë0x00

	)

177 
	#ACPI_SHARED
 (
UINT8
Ë0x01

	)

181 
	#ACPI_NOT_WAKE_CAPABLE
 (
UINT8
Ë0x00

	)

182 
	#ACPI_WAKE_CAPABLE
 (
UINT8
Ë0x01

	)

187 
	#ACPI_COMPATIBILITY
 (
UINT8
Ë0x00

	)

188 
	#ACPI_TYPE_A
 (
UINT8
Ë0x01

	)

189 
	#ACPI_TYPE_B
 (
UINT8
Ë0x02

	)

190 
	#ACPI_TYPE_F
 (
UINT8
Ë0x03

	)

192 
	#ACPI_NOT_BUS_MASTER
 (
UINT8
Ë0x00

	)

193 
	#ACPI_BUS_MASTER
 (
UINT8
Ë0x01

	)

195 
	#ACPI_TRANSFER_8
 (
UINT8
Ë0x00

	)

196 
	#ACPI_TRANSFER_8_16
 (
UINT8
Ë0x01

	)

197 
	#ACPI_TRANSFER_16
 (
UINT8
Ë0x02

	)

202 
	#ACPI_GOOD_CONFIGURATION
 (
UINT8
Ë0x00

	)

203 
	#ACPI_ACCEPTABLE_CONFIGURATION
 (
UINT8
Ë0x01

	)

204 
	#ACPI_SUB_OPTIMAL_CONFIGURATION
 (
UINT8
Ë0x02

	)

209 
	#ACPI_MEMORY_RANGE
 (
UINT8
Ë0x00

	)

210 
	#ACPI_IO_RANGE
 (
UINT8
Ë0x01

	)

211 
	#ACPI_BUS_NUMBER_RANGE
 (
UINT8
Ë0x02

	)

213 
	#ACPI_ADDRESS_NOT_FIXED
 (
UINT8
Ë0x00

	)

214 
	#ACPI_ADDRESS_FIXED
 (
UINT8
Ë0x01

	)

216 
	#ACPI_POS_DECODE
 (
UINT8
Ë0x00

	)

217 
	#ACPI_SUB_DECODE
 (
UINT8
Ë0x01

	)

221 
	#ACPI_PRODUCER
 (
UINT8
Ë0x00

	)

222 
	#ACPI_CONSUMER
 (
UINT8
Ë0x01

	)

228 #i‚de‡
ACPI_MISALIGNMENT_NOT_SUPPORTED


229 #¥agm®
∑ck
(1)

234 
	sa˝i_uuid


236 
UINT8
 
	mD©a
[
ACPI_UUID_LENGTH
];

237 } 
	tACPI_UUID
;

239 
	sa˝i_víd‹_uuid


241 
UINT8
 
	mSubty≥
;

242 
UINT8
 
	mD©a
[
ACPI_UUID_LENGTH
];

244 } 
	tACPI_VENDOR_UUID
;

249 
	sa˝i_ªsour˚_úq


251 
UINT8
 
	mDes¸ùt‹Lígth
;

252 
UINT8
 
	mTriggîög
;

253 
UINT8
 
	mPﬁ¨ôy
;

254 
UINT8
 
	mSh¨abÀ
;

255 
UINT8
 
	mWakeC≠abÀ
;

256 
UINT8
 
	mI¡îru±Cou¡
;

257 
UINT8
 
	mI¡îru±s
[1];

259 } 
	tACPI_RESOURCE_IRQ
;

261 
	sa˝i_ªsour˚_dma


263 
UINT8
 
	mTy≥
;

264 
UINT8
 
	mBusMa°î
;

265 
UINT8
 
	mTøns„r
;

266 
UINT8
 
	mCh™√lCou¡
;

267 
UINT8
 
	mCh™√ls
[1];

269 } 
	tACPI_RESOURCE_DMA
;

271 
	sa˝i_ªsour˚_°¨t_dïídít


273 
UINT8
 
	mDes¸ùt‹Lígth
;

274 
UINT8
 
	mCom∑tibûôyPri‹ôy
;

275 
UINT8
 
	mPîf‹m™˚Robu°√ss
;

277 } 
	tACPI_RESOURCE_START_DEPENDENT
;

286 
	sa˝i_ªsour˚_io


288 
UINT8
 
	mIoDecode
;

289 
UINT8
 
	mAlignmít
;

290 
UINT8
 
	mAddªssLígth
;

291 
UINT16
 
	mMöimum
;

292 
UINT16
 
	mMaximum
;

294 } 
	tACPI_RESOURCE_IO
;

296 
	sa˝i_ªsour˚_fixed_io


298 
UINT16
 
	mAddªss
;

299 
UINT8
 
	mAddªssLígth
;

301 } 
	tACPI_RESOURCE_FIXED_IO
;

303 
	sa˝i_ªsour˚_fixed_dma


305 
UINT16
 
	mReque°Löes
;

306 
UINT16
 
	mCh™√ls
;

307 
UINT8
 
	mWidth
;

309 } 
	tACPI_RESOURCE_FIXED_DMA
;

313 
	#ACPI_DMA_WIDTH8
 0

	)

314 
	#ACPI_DMA_WIDTH16
 1

	)

315 
	#ACPI_DMA_WIDTH32
 2

	)

316 
	#ACPI_DMA_WIDTH64
 3

	)

317 
	#ACPI_DMA_WIDTH128
 4

	)

318 
	#ACPI_DMA_WIDTH256
 5

	)

321 
	sa˝i_ªsour˚_víd‹


323 
UINT16
 
	mByãLígth
;

324 
UINT8
 
	mByãD©a
[1];

326 } 
	tACPI_RESOURCE_VENDOR
;

330 
	sa˝i_ªsour˚_víd‹_ty≥d


332 
UINT16
 
	mByãLígth
;

333 
UINT8
 
	mUuidSubty≥
;

334 
UINT8
 
	mUuid
[
ACPI_UUID_LENGTH
];

335 
UINT8
 
	mByãD©a
[1];

337 } 
	tACPI_RESOURCE_VENDOR_TYPED
;

339 
	sa˝i_ªsour˚_íd_èg


341 
UINT8
 
	mChecksum
;

343 } 
	tACPI_RESOURCE_END_TAG
;

345 
	sa˝i_ªsour˚_mem‹y24


347 
UINT8
 
	mWrôePrŸe˘
;

348 
UINT16
 
	mMöimum
;

349 
UINT16
 
	mMaximum
;

350 
UINT16
 
	mAlignmít
;

351 
UINT16
 
	mAddªssLígth
;

353 } 
	tACPI_RESOURCE_MEMORY24
;

355 
	sa˝i_ªsour˚_mem‹y32


357 
UINT8
 
	mWrôePrŸe˘
;

358 
UINT32
 
	mMöimum
;

359 
UINT32
 
	mMaximum
;

360 
UINT32
 
	mAlignmít
;

361 
UINT32
 
	mAddªssLígth
;

363 } 
	tACPI_RESOURCE_MEMORY32
;

365 
	sa˝i_ªsour˚_fixed_mem‹y32


367 
UINT8
 
	mWrôePrŸe˘
;

368 
UINT32
 
	mAddªss
;

369 
UINT32
 
	mAddªssLígth
;

371 } 
	tACPI_RESOURCE_FIXED_MEMORY32
;

373 
	sa˝i_mem‹y_©åibuã


375 
UINT8
 
	mWrôePrŸe˘
;

376 
UINT8
 
	mCachög
;

377 
UINT8
 
	mR™geTy≥
;

378 
UINT8
 
	mTøn¶©i⁄
;

380 } 
	tACPI_MEMORY_ATTRIBUTE
;

382 
	sa˝i_io_©åibuã


384 
UINT8
 
	mR™geTy≥
;

385 
UINT8
 
	mTøn¶©i⁄
;

386 
UINT8
 
	mTøn¶©i⁄Ty≥
;

387 
UINT8
 
	mRe£rved1
;

389 } 
	tACPI_IO_ATTRIBUTE
;

391 
	ua˝i_ªsour˚_©åibuã


393 
ACPI_MEMORY_ATTRIBUTE
 
	mMem
;

394 
ACPI_IO_ATTRIBUTE
 
	mIo
;

398 
UINT8
 
	mTy≥S≥cific
;

400 } 
	tACPI_RESOURCE_ATTRIBUTE
;

402 
	sa˝i_ªsour˚_sour˚


404 
UINT8
 
	mIndex
;

405 
UINT16
 
	mSåögLígth
;

406 *
	mSåögPå
;

408 } 
	tACPI_RESOURCE_SOURCE
;

412 
	#ACPI_RESOURCE_ADDRESS_COMMON
 \

413 
UINT8
 
Resour˚Ty≥
; \

414 
UINT8
 
Produ˚rC⁄sumî
; \

415 
UINT8
 
Decode
; \

416 
UINT8
 
MöAddªssFixed
; \

417 
UINT8
 
MaxAddªssFixed
; \

418 
ACPI_RESOURCE_ATTRIBUTE
 
Info
;

	)

420 
	sa˝i_addªss16_©åibuã


422 
UINT16
 
	mGønuœrôy
;

423 
UINT16
 
	mMöimum
;

424 
UINT16
 
	mMaximum
;

425 
UINT16
 
	mTøn¶©i⁄Off£t
;

426 
UINT16
 
	mAddªssLígth
;

428 } 
	tACPI_ADDRESS16_ATTRIBUTE
;

430 
	sa˝i_addªss32_©åibuã


432 
UINT32
 
	mGønuœrôy
;

433 
UINT32
 
	mMöimum
;

434 
UINT32
 
	mMaximum
;

435 
UINT32
 
	mTøn¶©i⁄Off£t
;

436 
UINT32
 
	mAddªssLígth
;

438 } 
	tACPI_ADDRESS32_ATTRIBUTE
;

440 
	sa˝i_addªss64_©åibuã


442 
UINT64
 
	mGønuœrôy
;

443 
UINT64
 
	mMöimum
;

444 
UINT64
 
	mMaximum
;

445 
UINT64
 
	mTøn¶©i⁄Off£t
;

446 
UINT64
 
	mAddªssLígth
;

448 } 
	tACPI_ADDRESS64_ATTRIBUTE
;

450 
	sa˝i_ªsour˚_addªss


452 
	mACPI_RESOURCE_ADDRESS_COMMON


454 } 
	tACPI_RESOURCE_ADDRESS
;

456 
	sa˝i_ªsour˚_addªss16


458 
ACPI_RESOURCE_ADDRESS_COMMON


459 
ACPI_ADDRESS16_ATTRIBUTE
 
	mAddªss
;

460 
ACPI_RESOURCE_SOURCE
 
	mResour˚Sour˚
;

462 } 
	tACPI_RESOURCE_ADDRESS16
;

464 
	sa˝i_ªsour˚_addªss32


466 
ACPI_RESOURCE_ADDRESS_COMMON


467 
ACPI_ADDRESS32_ATTRIBUTE
 
	mAddªss
;

468 
ACPI_RESOURCE_SOURCE
 
	mResour˚Sour˚
;

470 } 
	tACPI_RESOURCE_ADDRESS32
;

472 
	sa˝i_ªsour˚_addªss64


474 
ACPI_RESOURCE_ADDRESS_COMMON


475 
ACPI_ADDRESS64_ATTRIBUTE
 
	mAddªss
;

476 
ACPI_RESOURCE_SOURCE
 
	mResour˚Sour˚
;

478 } 
	tACPI_RESOURCE_ADDRESS64
;

480 
	sa˝i_ªsour˚_exãnded_addªss64


482 
ACPI_RESOURCE_ADDRESS_COMMON


483 
UINT8
 
	mRevisi⁄ID
;

484 
ACPI_ADDRESS64_ATTRIBUTE
 
	mAddªss
;

485 
UINT64
 
	mTy≥S≥cific
;

487 } 
	tACPI_RESOURCE_EXTENDED_ADDRESS64
;

489 
	sa˝i_ªsour˚_exãnded_úq


491 
UINT8
 
	mProdu˚rC⁄sumî
;

492 
UINT8
 
	mTriggîög
;

493 
UINT8
 
	mPﬁ¨ôy
;

494 
UINT8
 
	mSh¨abÀ
;

495 
UINT8
 
	mWakeC≠abÀ
;

496 
UINT8
 
	mI¡îru±Cou¡
;

497 
ACPI_RESOURCE_SOURCE
 
	mResour˚Sour˚
;

498 
UINT32
 
	mI¡îru±s
[1];

500 } 
	tACPI_RESOURCE_EXTENDED_IRQ
;

502 
	sa˝i_ªsour˚_gíîic_ªgi°î


504 
UINT8
 
	mS∑˚Id
;

505 
UINT8
 
	mBôWidth
;

506 
UINT8
 
	mBôOff£t
;

507 
UINT8
 
	mAc˚ssSize
;

508 
UINT64
 
	mAddªss
;

510 } 
	tACPI_RESOURCE_GENERIC_REGISTER
;

512 
	sa˝i_ªsour˚_gpio


514 
UINT8
 
	mRevisi⁄Id
;

515 
UINT8
 
	mC⁄√˘i⁄Ty≥
;

516 
UINT8
 
	mProdu˚rC⁄sumî
;

517 
UINT8
 
	mPöC⁄fig
;

518 
UINT8
 
	mSh¨abÀ
;

519 
UINT8
 
	mWakeC≠abÀ
;

520 
UINT8
 
	mIoRe°ri˘i⁄
;

521 
UINT8
 
	mTriggîög
;

522 
UINT8
 
	mPﬁ¨ôy
;

523 
UINT16
 
	mDriveSåígth
;

524 
UINT16
 
	mDeboun˚Timeout
;

525 
UINT16
 
	mPöTabÀLígth
;

526 
UINT16
 
	mVíd‹Lígth
;

527 
ACPI_RESOURCE_SOURCE
 
	mResour˚Sour˚
;

528 
UINT16
 *
	mPöTabÀ
;

529 
UINT8
 *
	mVíd‹D©a
;

531 } 
	tACPI_RESOURCE_GPIO
;

535 
	#ACPI_RESOURCE_GPIO_TYPE_INT
 0

	)

536 
	#ACPI_RESOURCE_GPIO_TYPE_IO
 1

	)

540 
	#ACPI_PIN_CONFIG_DEFAULT
 0

	)

541 
	#ACPI_PIN_CONFIG_PULLUP
 1

	)

542 
	#ACPI_PIN_CONFIG_PULLDOWN
 2

	)

543 
	#ACPI_PIN_CONFIG_NOPULL
 3

	)

547 
	#ACPI_IO_RESTRICT_NONE
 0

	)

548 
	#ACPI_IO_RESTRICT_INPUT
 1

	)

549 
	#ACPI_IO_RESTRICT_OUTPUT
 2

	)

550 
	#ACPI_IO_RESTRICT_NONE_PRESERVE
 3

	)

555 
	#ACPI_RESOURCE_SERIAL_COMMON
 \

556 
UINT8
 
Revisi⁄Id
; \

557 
UINT8
 
Ty≥
; \

558 
UINT8
 
Produ˚rC⁄sumî
; \

559 
UINT8
 
SœveMode
; \

560 
UINT8
 
Ty≥Revisi⁄Id
; \

561 
UINT16
 
Ty≥D©aLígth
; \

562 
UINT16
 
Víd‹Lígth
; \

563 
ACPI_RESOURCE_SOURCE
 
Resour˚Sour˚
; \

564 
UINT8
 *
Víd‹D©a
;

	)

566 
	sa˝i_ªsour˚_comm⁄_£rülbus


568 
	mACPI_RESOURCE_SERIAL_COMMON


570 } 
	tACPI_RESOURCE_COMMON_SERIALBUS
;

574 
	#ACPI_RESOURCE_SERIAL_TYPE_I2C
 1

	)

575 
	#ACPI_RESOURCE_SERIAL_TYPE_SPI
 2

	)

576 
	#ACPI_RESOURCE_SERIAL_TYPE_UART
 3

	)

580 
	#ACPI_CONTROLLER_INITIATED
 0

	)

581 
	#ACPI_DEVICE_INITIATED
 1

	)

584 
	sa˝i_ªsour˚_i2c_£rülbus


586 
ACPI_RESOURCE_SERIAL_COMMON


587 
UINT8
 
	mAc˚ssMode
;

588 
UINT16
 
	mSœveAddªss
;

589 
UINT32
 
	mC⁄√˘i⁄S≥ed
;

591 } 
	tACPI_RESOURCE_I2C_SERIALBUS
;

595 
	#ACPI_I2C_7BIT_MODE
 0

	)

596 
	#ACPI_I2C_10BIT_MODE
 1

	)

599 
	sa˝i_ªsour˚_•i_£rülbus


601 
ACPI_RESOURCE_SERIAL_COMMON


602 
UINT8
 
	mWúeMode
;

603 
UINT8
 
	mDevi˚Pﬁ¨ôy
;

604 
UINT8
 
	mD©aBôLígth
;

605 
UINT8
 
	mClockPha£
;

606 
UINT8
 
	mClockPﬁ¨ôy
;

607 
UINT16
 
	mDevi˚Sñe˘i⁄
;

608 
UINT32
 
	mC⁄√˘i⁄S≥ed
;

610 } 
	tACPI_RESOURCE_SPI_SERIALBUS
;

614 
	#ACPI_SPI_4WIRE_MODE
 0

	)

615 
	#ACPI_SPI_3WIRE_MODE
 1

	)

619 
	#ACPI_SPI_ACTIVE_LOW
 0

	)

620 
	#ACPI_SPI_ACTIVE_HIGH
 1

	)

624 
	#ACPI_SPI_FIRST_PHASE
 0

	)

625 
	#ACPI_SPI_SECOND_PHASE
 1

	)

629 
	#ACPI_SPI_START_LOW
 0

	)

630 
	#ACPI_SPI_START_HIGH
 1

	)

633 
	sa˝i_ªsour˚_u¨t_£rülbus


635 
ACPI_RESOURCE_SERIAL_COMMON


636 
UINT8
 
	mEndün
;

637 
UINT8
 
	mD©aBôs
;

638 
UINT8
 
	mSt›Bôs
;

639 
UINT8
 
	mFlowC⁄åﬁ
;

640 
UINT8
 
	mP¨ôy
;

641 
UINT8
 
	mLöesE«bÀd
;

642 
UINT16
 
	mRxFifoSize
;

643 
UINT16
 
	mTxFifoSize
;

644 
UINT32
 
	mDeÁu…BaudR©e
;

646 } 
	tACPI_RESOURCE_UART_SERIALBUS
;

650 
	#ACPI_UART_LITTLE_ENDIAN
 0

	)

651 
	#ACPI_UART_BIG_ENDIAN
 1

	)

655 
	#ACPI_UART_5_DATA_BITS
 0

	)

656 
	#ACPI_UART_6_DATA_BITS
 1

	)

657 
	#ACPI_UART_7_DATA_BITS
 2

	)

658 
	#ACPI_UART_8_DATA_BITS
 3

	)

659 
	#ACPI_UART_9_DATA_BITS
 4

	)

663 
	#ACPI_UART_NO_STOP_BITS
 0

	)

664 
	#ACPI_UART_1_STOP_BIT
 1

	)

665 
	#ACPI_UART_1P5_STOP_BITS
 2

	)

666 
	#ACPI_UART_2_STOP_BITS
 3

	)

670 
	#ACPI_UART_FLOW_CONTROL_NONE
 0

	)

671 
	#ACPI_UART_FLOW_CONTROL_HW
 1

	)

672 
	#ACPI_UART_FLOW_CONTROL_XON_XOFF
 2

	)

676 
	#ACPI_UART_PARITY_NONE
 0

	)

677 
	#ACPI_UART_PARITY_EVEN
 1

	)

678 
	#ACPI_UART_PARITY_ODD
 2

	)

679 
	#ACPI_UART_PARITY_MARK
 3

	)

680 
	#ACPI_UART_PARITY_SPACE
 4

	)

684 
	#ACPI_UART_CARRIER_DETECT
 (1<<2)

	)

685 
	#ACPI_UART_RING_INDICATOR
 (1<<3)

	)

686 
	#ACPI_UART_DATA_SET_READY
 (1<<4)

	)

687 
	#ACPI_UART_DATA_TERMINAL_READY
 (1<<5)

	)

688 
	#ACPI_UART_CLEAR_TO_SEND
 (1<<6)

	)

689 
	#ACPI_UART_REQUEST_TO_SEND
 (1<<7)

	)

694 
	#ACPI_RESOURCE_TYPE_IRQ
 0

	)

695 
	#ACPI_RESOURCE_TYPE_DMA
 1

	)

696 
	#ACPI_RESOURCE_TYPE_START_DEPENDENT
 2

	)

697 
	#ACPI_RESOURCE_TYPE_END_DEPENDENT
 3

	)

698 
	#ACPI_RESOURCE_TYPE_IO
 4

	)

699 
	#ACPI_RESOURCE_TYPE_FIXED_IO
 5

	)

700 
	#ACPI_RESOURCE_TYPE_VENDOR
 6

	)

701 
	#ACPI_RESOURCE_TYPE_END_TAG
 7

	)

702 
	#ACPI_RESOURCE_TYPE_MEMORY24
 8

	)

703 
	#ACPI_RESOURCE_TYPE_MEMORY32
 9

	)

704 
	#ACPI_RESOURCE_TYPE_FIXED_MEMORY32
 10

	)

705 
	#ACPI_RESOURCE_TYPE_ADDRESS16
 11

	)

706 
	#ACPI_RESOURCE_TYPE_ADDRESS32
 12

	)

707 
	#ACPI_RESOURCE_TYPE_ADDRESS64
 13

	)

708 
	#ACPI_RESOURCE_TYPE_EXTENDED_ADDRESS64
 14

	)

709 
	#ACPI_RESOURCE_TYPE_EXTENDED_IRQ
 15

	)

710 
	#ACPI_RESOURCE_TYPE_GENERIC_REGISTER
 16

	)

711 
	#ACPI_RESOURCE_TYPE_GPIO
 17

	)

712 
	#ACPI_RESOURCE_TYPE_FIXED_DMA
 18

	)

713 
	#ACPI_RESOURCE_TYPE_SERIAL_BUS
 19

	)

714 
	#ACPI_RESOURCE_TYPE_MAX
 19

	)

718 
	ua˝i_ªsour˚_d©a


720 
ACPI_RESOURCE_IRQ
 
	mIrq
;

721 
ACPI_RESOURCE_DMA
 
	mDma
;

722 
ACPI_RESOURCE_START_DEPENDENT
 
	mSèπDpf
;

723 
ACPI_RESOURCE_IO
 
	mIo
;

724 
ACPI_RESOURCE_FIXED_IO
 
	mFixedIo
;

725 
ACPI_RESOURCE_FIXED_DMA
 
	mFixedDma
;

726 
ACPI_RESOURCE_VENDOR
 
	mVíd‹
;

727 
ACPI_RESOURCE_VENDOR_TYPED
 
	mVíd‹Ty≥d
;

728 
ACPI_RESOURCE_END_TAG
 
	mEndTag
;

729 
ACPI_RESOURCE_MEMORY24
 
	mMem‹y24
;

730 
ACPI_RESOURCE_MEMORY32
 
	mMem‹y32
;

731 
ACPI_RESOURCE_FIXED_MEMORY32
 
	mFixedMem‹y32
;

732 
ACPI_RESOURCE_ADDRESS16
 
	mAddªss16
;

733 
ACPI_RESOURCE_ADDRESS32
 
	mAddªss32
;

734 
ACPI_RESOURCE_ADDRESS64
 
	mAddªss64
;

735 
ACPI_RESOURCE_EXTENDED_ADDRESS64
 
	mExtAddªss64
;

736 
ACPI_RESOURCE_EXTENDED_IRQ
 
	mExãndedIrq
;

737 
ACPI_RESOURCE_GENERIC_REGISTER
 
	mGíîicReg
;

738 
ACPI_RESOURCE_GPIO
 
	mGpio
;

739 
ACPI_RESOURCE_I2C_SERIALBUS
 
	mI2cSîülBus
;

740 
ACPI_RESOURCE_SPI_SERIALBUS
 
	mSpiSîülBus
;

741 
ACPI_RESOURCE_UART_SERIALBUS
 
	mU¨tSîülBus
;

742 
ACPI_RESOURCE_COMMON_SERIALBUS
 
	mComm⁄SîülBus
;

746 
ACPI_RESOURCE_ADDRESS
 
	mAddªss
;

748 } 
	tACPI_RESOURCE_DATA
;

753 
	sa˝i_ªsour˚


755 
UINT32
 
	mTy≥
;

756 
UINT32
 
	mLígth
;

757 
ACPI_RESOURCE_DATA
 
	mD©a
;

759 } 
	tACPI_RESOURCE
;

763 #¥agm®
∑ck
()

766 
	#ACPI_RS_SIZE_NO_DATA
 8

	)

767 
	#ACPI_RS_SIZE_MIN
 (
UINT32
Ë
	`ACPI_ROUND_UP_TO_NATIVE_WORD
 (12)

	)

768 
	#ACPI_RS_SIZE
(
Ty≥
Ë(
UINT32
Ë(
ACPI_RS_SIZE_NO_DATA
 +  (Ty≥))

	)

772 
	#ACPI_NEXT_RESOURCE
(
Res
) \

773 
	`ACPI_ADD_PTR
 (
ACPI_RESOURCE
, (
Res
), (Res)->
Lígth
)

	)

776 
	sa˝i_pci_routög_èbÀ


778 
UINT32
 
	mLígth
;

779 
UINT32
 
	mPö
;

780 
UINT64
 
	mAddªss
;

781 
UINT32
 
	mSour˚Index
;

782 
	mSour˚
[4];

784 } 
	tACPI_PCI_ROUTING_TABLE
;

	@src/extern/acpica/source/include/acstruct.h

116 #i‚de‡
__ACSTRUCT_H__


117 
	#__ACSTRUCT_H__


	)

133 
	#ACPI_NEXT_OP_DOWNWARD
 1

	)

134 
	#ACPI_NEXT_OP_UPWARD
 2

	)

140 
	#ACPI_WALK_NON_METHOD
 0

	)

141 
	#ACPI_WALK_METHOD
 0x01

	)

142 
	#ACPI_WALK_METHOD_RESTART
 0x02

	)

145 
	sa˝i_wÆk_°©e


147 
a˝i_wÆk_°©e
 *
	mNext
;

148 
UINT8
 
	mDes¸ùt‹Ty≥
;

149 
UINT8
 
	mWÆkTy≥
;

150 
UINT16
 
	mOpcode
;

151 
UINT8
 
	mNextOpInfo
;

152 
UINT8
 
	mNumO≥ønds
;

153 
UINT8
 
	mO≥øndIndex
;

154 
ACPI_OWNER_ID
 
	mOw√rId
;

155 
BOOLEAN
 
	mLa°Pªdiˇã
;

156 
UINT8
 
	mCuºítResu…
;

157 
UINT8
 
	mRëu∫U£d
;

158 
UINT8
 
	mSc›eDïth
;

159 
UINT8
 
	mPassNumbî
;

160 
UINT8
 
	mResu…Size
;

161 
UINT8
 
	mResu…Cou¡
;

162 
UINT32
 
	mAmlOff£t
;

163 
UINT32
 
	mArgTy≥s
;

164 
UINT32
 
	mMëhodBªakpoöt
;

165 
UINT32
 
	mU£rBªakpoöt
;

166 
UINT32
 
	mP¨£Fœgs
;

168 
ACPI_PARSE_STATE
 
	mP¨£rSèã
;

169 
UINT32
 
	mPªvArgTy≥s
;

170 
UINT32
 
	mArgCou¡
;

172 
a˝i_«me•a˚_node
 
	mArgumíts
[
ACPI_METHOD_NUM_ARGS
];

173 
a˝i_«me•a˚_node
 
	mLoˇlV¨übÀs
[
ACPI_METHOD_NUM_LOCALS
];

174 
a˝i_›î™d_obje˘
 *
	mO≥ønds
[
ACPI_OBJ_NUM_OPERANDS
 + 1];

175 
a˝i_›î™d_obje˘
 **
	mP¨ams
;

177 
UINT8
 *
	mAmlLa°Whûe
;

178 
a˝i_›î™d_obje˘
 **
	mCÆÀrRëu∫Desc
;

179 
ACPI_GENERIC_STATE
 *
	mC⁄åﬁSèã
;

180 
a˝i_«me•a˚_node
 *
	mDe„ºedNode
;

181 
a˝i_›î™d_obje˘
 *
	mIm∂icôRëu∫Obj
;

182 
a˝i_«me•a˚_node
 *
	mMëhodCÆlNode
;

183 
ACPI_PARSE_OBJECT
 *
	mMëhodCÆlOp
;

184 
a˝i_›î™d_obje˘
 *
	mMëhodDesc
;

185 
a˝i_«me•a˚_node
 *
	mMëhodNode
;

186 
ACPI_PARSE_OBJECT
 *
	mOp
;

187 c⁄° 
ACPI_OPCODE_INFO
 *
	mOpInfo
;

188 
ACPI_PARSE_OBJECT
 *
	mOrigö
;

189 
a˝i_›î™d_obje˘
 *
	mResu…Obj
;

190 
ACPI_GENERIC_STATE
 *
	mResu…s
;

191 
a˝i_›î™d_obje˘
 *
	mRëu∫Desc
;

192 
ACPI_GENERIC_STATE
 *
	mSc›eInfo
;

193 
ACPI_PARSE_OBJECT
 *
	mPªvOp
;

194 
ACPI_PARSE_OBJECT
 *
	mNextOp
;

195 
ACPI_THREAD_STATE
 *
	mThªad
;

196 
ACPI_PARSE_DOWNWARDS
 
	mDes˚ndögCÆlback
;

197 
ACPI_PARSE_UPWARDS
 
	mAs˚ndögCÆlback
;

199 } 
	tACPI_WALK_STATE
;

204 
	sa˝i_öô_wÆk_öfo


206 
UINT32
 
	mTabÀIndex
;

207 
UINT32
 
	mObje˘Cou¡
;

208 
UINT32
 
	mMëhodCou¡
;

209 
UINT32
 
	mSîülMëhodCou¡
;

210 
UINT32
 
	mN⁄SîülMëhodCou¡
;

211 
UINT32
 
	mSîülizedMëhodCou¡
;

212 
UINT32
 
	mDevi˚Cou¡
;

213 
UINT32
 
	mOpRegi⁄Cou¡
;

214 
UINT32
 
	mFõldCou¡
;

215 
UINT32
 
	mBuf„rCou¡
;

216 
UINT32
 
	mPackageCou¡
;

217 
UINT32
 
	mOpRegi⁄Inô
;

218 
UINT32
 
	mFõldInô
;

219 
UINT32
 
	mBuf„rInô
;

220 
UINT32
 
	mPackageInô
;

221 
ACPI_OWNER_ID
 
	mOw√rId
;

223 } 
	tACPI_INIT_WALK_INFO
;

226 
	sa˝i_gë_devi˚s_öfo


228 
ACPI_WALK_CALLBACK
 
	mU£rFun˘i⁄
;

229 *
	mC⁄ãxt
;

230 *
	mHid
;

232 } 
	tACPI_GET_DEVICES_INFO
;

235 
	ua˝i_aml_›î™ds


237 
ACPI_OPERAND_OBJECT
 *
	mO≥ønds
[7];

241 
ACPI_OBJECT_INTEGER
 *
	mTy≥
;

242 
ACPI_OBJECT_INTEGER
 *
	mCode
;

243 
ACPI_OBJECT_INTEGER
 *
	mArgumít
;

245 } 
	mF©Æ
;

249 
ACPI_OPERAND_OBJECT
 *
	mSour˚
;

250 
ACPI_OBJECT_INTEGER
 *
	mIndex
;

251 
ACPI_OPERAND_OBJECT
 *
	mT¨gë
;

253 } 
	mIndex
;

257 
ACPI_OPERAND_OBJECT
 *
	mSour˚
;

258 
ACPI_OBJECT_INTEGER
 *
	mIndex
;

259 
ACPI_OBJECT_INTEGER
 *
	mLígth
;

260 
ACPI_OPERAND_OBJECT
 *
	mT¨gë
;

262 } 
	mMid
;

264 } 
	tACPI_AML_OPERANDS
;

271 
	sa˝i_evÆu©e_öfo


275 
ACPI_NAMESPACE_NODE
 *
	mPªfixNode
;

276 *
	mRñ©iveP©h«me
;

277 
ACPI_OPERAND_OBJECT
 **
	mP¨amëîs
;

279 
ACPI_NAMESPACE_NODE
 *
	mNode
;

280 
ACPI_OPERAND_OBJECT
 *
	mObjDesc
;

281 *
	mFuŒP©h«me
;

283 c⁄° 
ACPI_PREDEFINED_INFO
 *
	mPªdeföed
;

284 
ACPI_OPERAND_OBJECT
 *
	mRëu∫Obje˘
;

285 
a˝i_›î™d_obje˘
 *
	mP¨ítPackage
;

287 
UINT32
 
	mRëu∫Fœgs
;

288 
UINT32
 
	mRëu∫Bty≥
;

289 
UINT16
 
	mP¨amCou¡
;

290 
UINT8
 
	mPassNumbî
;

291 
UINT8
 
	mRëu∫Obje˘Ty≥
;

292 
UINT8
 
	mNodeFœgs
;

293 
UINT8
 
	mFœgs
;

295 } 
	tACPI_EVALUATE_INFO
;

299 
	#ACPI_IGNORE_RETURN_VALUE
 1

	)

303 
	#ACPI_OBJECT_REPAIRED
 1

	)

304 
	#ACPI_OBJECT_WRAPPED
 2

	)

309 
	sa˝i_devi˚_wÆk_öfo


311 
ACPI_TABLE_DESC
 *
	mTabÀDesc
;

312 
ACPI_EVALUATE_INFO
 *
	mEvÆu©eInfo
;

313 
UINT32
 
	mDevi˚Cou¡
;

314 
UINT32
 
	mNum_STA
;

315 
UINT32
 
	mNum_INI
;

317 } 
	tACPI_DEVICE_WALK_INFO
;

322 
	sa˝i_wÆk_öfo


324 
UINT32
 
	mDebugLevñ
;

325 
UINT32
 
	mCou¡
;

326 
ACPI_OWNER_ID
 
	mOw√rId
;

327 
UINT8
 
	mDi•œyTy≥
;

329 } 
	tACPI_WALK_INFO
;

333 
	#ACPI_DISPLAY_SUMMARY
 (
UINT8
Ë0

	)

334 
	#ACPI_DISPLAY_OBJECTS
 (
UINT8
Ë1

	)

335 
	#ACPI_DISPLAY_MASK
 (
UINT8
Ë1

	)

337 
	#ACPI_DISPLAY_SHORT
 (
UINT8
Ë2

	)

	@src/extern/acpica/source/include/actables.h

116 #i‚de‡
__ACTABLES_H__


117 
	#__ACTABLES_H__


	)

120 
ACPI_STATUS


121 
A˝iAŒoˇãRoŸTabÀ
 (

122 
UINT32
 
InôülTabÀCou¡
);

127 
UINT32


128 
A˝iTbGëRsdpLígth
 (

129 
ACPI_TABLE_RSDP
 *
Rsdp
);

131 
ACPI_STATUS


132 
A˝iTbVÆid©eRsdp
 (

133 
ACPI_TABLE_RSDP
 *
Rsdp
);

135 
UINT8
 *

136 
A˝iTbSˇnMem‹yF‹Rsdp
 (

137 
UINT8
 *
SèπAddªss
,

138 
UINT32
 
Lígth
);

144 
ACPI_STATUS


145 
A˝iTbGëNextTabÀDes¸ùt‹
 (

146 
UINT32
 *
TabÀIndex
,

147 
ACPI_TABLE_DESC
 **
TabÀDesc
);

150 
A˝iTbInôTabÀDes¸ùt‹
 (

151 
ACPI_TABLE_DESC
 *
TabÀDesc
,

152 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

153 
UINT8
 
Fœgs
,

154 
ACPI_TABLE_HEADER
 *
TabÀ
);

156 
ACPI_STATUS


157 
A˝iTbAcquúeTempTabÀ
 (

158 
ACPI_TABLE_DESC
 *
TabÀDesc
,

159 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

160 
UINT8
 
Fœgs
);

163 
A˝iTbRñó£TempTabÀ
 (

164 
ACPI_TABLE_DESC
 *
TabÀDesc
);

166 
ACPI_STATUS


167 
A˝iTbVÆid©eTempTabÀ
 (

168 
ACPI_TABLE_DESC
 *
TabÀDesc
);

170 
ACPI_STATUS


171 
A˝iTbVîifyTempTabÀ
 (

172 
ACPI_TABLE_DESC
 *
TabÀDesc
,

173 *
Sig«tuª
);

175 
BOOLEAN


176 
A˝iTbIsTabÀLﬂded
 (

177 
UINT32
 
TabÀIndex
);

180 
A˝iTbSëTabÀLﬂdedFœg
 (

181 
UINT32
 
TabÀIndex
,

182 
BOOLEAN
 
IsLﬂded
);

189 
A˝iTbP¨£Fadt
 (

190 
UINT32
 
TabÀIndex
);

193 
A˝iTbCª©eLoˇlFadt
 (

194 
ACPI_TABLE_HEADER
 *
TabÀ
,

195 
UINT32
 
Lígth
);

201 
ACPI_STATUS


202 
A˝iTbFödTabÀ
 (

203 *
Sig«tuª
,

204 *
OemId
,

205 *
OemTabÀId
,

206 
UINT32
 *
TabÀIndex
);

212 
ACPI_STATUS


213 
A˝iTbResizeRoŸTabÀLi°
 (

216 
ACPI_STATUS


217 
A˝iTbVÆid©eTabÀ
 (

218 
ACPI_TABLE_DESC
 *
TabÀDesc
);

221 
A˝iTbInvÆid©eTabÀ
 (

222 
ACPI_TABLE_DESC
 *
TabÀDesc
);

225 
A˝iTbOvîrideTabÀ
 (

226 
ACPI_TABLE_DESC
 *
OldTabÀDesc
);

228 
ACPI_STATUS


229 
A˝iTbAcquúeTabÀ
 (

230 
ACPI_TABLE_DESC
 *
TabÀDesc
,

231 
ACPI_TABLE_HEADER
 **
TabÀPå
,

232 
UINT32
 *
TabÀLígth
,

233 
UINT8
 *
TabÀFœgs
);

236 
A˝iTbRñó£TabÀ
 (

237 
ACPI_TABLE_HEADER
 *
TabÀ
,

238 
UINT32
 
TabÀLígth
,

239 
UINT8
 
TabÀFœgs
);

241 
ACPI_STATUS


242 
A˝iTbIn°ÆlSènd¨dTabÀ
 (

243 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

244 
UINT8
 
Fœgs
,

245 
BOOLEAN
 
Rñﬂd
,

246 
BOOLEAN
 
Ovîride
,

247 
UINT32
 *
TabÀIndex
);

250 
A˝iTbUnö°ÆlTabÀ
 (

251 
ACPI_TABLE_DESC
 *
TabÀDesc
);

254 
A˝iTbTîmö©e
 (

257 
ACPI_STATUS


258 
A˝iTbDñëeName•a˚ByOw√r
 (

259 
UINT32
 
TabÀIndex
);

261 
ACPI_STATUS


262 
A˝iTbAŒoˇãOw√rId
 (

263 
UINT32
 
TabÀIndex
);

265 
ACPI_STATUS


266 
A˝iTbRñó£Ow√rId
 (

267 
UINT32
 
TabÀIndex
);

269 
ACPI_STATUS


270 
A˝iTbGëOw√rId
 (

271 
UINT32
 
TabÀIndex
,

272 
ACPI_OWNER_ID
 *
Ow√rId
);

278 
ACPI_STATUS


279 
A˝iTbInôülizeFacs
 (

282 
BOOLEAN


283 
A˝iTbTabÀsLﬂded
 (

287 
A˝iTbPrötTabÀHódî
(

288 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

289 
ACPI_TABLE_HEADER
 *
Hódî
);

291 
UINT8


292 
A˝iTbChecksum
 (

293 
UINT8
 *
Buf„r
,

294 
UINT32
 
Lígth
);

296 
ACPI_STATUS


297 
A˝iTbVîifyChecksum
 (

298 
ACPI_TABLE_HEADER
 *
TabÀ
,

299 
UINT32
 
Lígth
);

302 
A˝iTbCheckDsdtHódî
 (

305 
ACPI_TABLE_HEADER
 *

306 
A˝iTbC›yDsdt
 (

307 
UINT32
 
TabÀIndex
);

310 
A˝iTbIn°ÆlTabÀWôhOvîride
 (

311 
UINT32
 
TabÀIndex
,

312 
ACPI_TABLE_DESC
 *
NewTabÀDesc
,

313 
BOOLEAN
 
Ovîride
);

315 
ACPI_STATUS


316 
A˝iTbIn°ÆlFixedTabÀ
 (

317 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

318 *
Sig«tuª
,

319 
UINT32
 
TabÀIndex
);

321 
ACPI_STATUS


322 
A˝iTbP¨£RoŸTabÀ
 (

323 
ACPI_PHYSICAL_ADDRESS
 
RsdpAddªss
);

	@src/extern/acpica/source/include/actbl.h

116 #i‚de‡
__ACTBL_H__


117 
	#__ACTBL_H__


	)

139 
	#ACPI_SIG_DSDT
 "DSDT"

	)

140 
	#ACPI_SIG_FADT
 "FACP"

	)

141 
	#ACPI_SIG_FACS
 "FACS"

	)

142 
	#ACPI_SIG_PSDT
 "PSDT"

	)

143 
	#ACPI_SIG_RSDP
 "RSD PTR "

	)

144 
	#ACPI_SIG_RSDT
 "RSDT"

	)

145 
	#ACPI_SIG_XSDT
 "XSDT"

	)

146 
	#ACPI_SIG_SSDT
 "SSDT"

	)

147 
	#ACPI_RSDP_NAME
 "RSDP"

	)

154 #¥agm®
∑ck
(1)

176 
	sa˝i_èbÀ_hódî


178 
	mSig«tuª
[
ACPI_NAME_SIZE
];

179 
UINT32
 
	mLígth
;

180 
UINT8
 
	mRevisi⁄
;

181 
UINT8
 
	mChecksum
;

182 
	mOemId
[
ACPI_OEM_ID_SIZE
];

183 
	mOemTabÀId
[
ACPI_OEM_TABLE_ID_SIZE
];

184 
UINT32
 
	mOemRevisi⁄
;

185 
	mA¶CompûîId
[
ACPI_NAME_SIZE
];

186 
UINT32
 
	mA¶CompûîRevisi⁄
;

188 } 
	tACPI_TABLE_HEADER
;

201 
	sa˝i_gíîic_addªss


203 
UINT8
 
	mS∑˚Id
;

204 
UINT8
 
	mBôWidth
;

205 
UINT8
 
	mBôOff£t
;

206 
UINT8
 
	mAc˚ssWidth
;

207 
UINT64
 
	mAddªss
;

209 } 
	tACPI_GENERIC_ADDRESS
;

219 
	sa˝i_èbÀ_rsdp


221 
	mSig«tuª
[8];

222 
UINT8
 
	mChecksum
;

223 
	mOemId
[
ACPI_OEM_ID_SIZE
];

224 
UINT8
 
	mRevisi⁄
;

225 
UINT32
 
	mRsdtPhysiˇlAddªss
;

226 
UINT32
 
	mLígth
;

227 
UINT64
 
	mXsdtPhysiˇlAddªss
;

228 
UINT8
 
	mExãndedChecksum
;

229 
UINT8
 
	mRe£rved
[3];

231 } 
	tACPI_TABLE_RSDP
;

235 
	sa˝i_rsdp_comm⁄


237 
	mSig«tuª
[8];

238 
UINT8
 
	mChecksum
;

239 
	mOemId
[
ACPI_OEM_ID_SIZE
];

240 
UINT8
 
	mRevisi⁄
;

241 
UINT32
 
	mRsdtPhysiˇlAddªss
;

243 } 
	tACPI_RSDP_COMMON
;

247 
	sa˝i_rsdp_exãnsi⁄


249 
UINT32
 
	mLígth
;

250 
UINT64
 
	mXsdtPhysiˇlAddªss
;

251 
UINT8
 
	mExãndedChecksum
;

252 
UINT8
 
	mRe£rved
[3];

254 } 
	tACPI_RSDP_EXTENSION
;

264 
	sa˝i_èbÀ_rsdt


266 
ACPI_TABLE_HEADER
 
	mHódî
;

267 
UINT32
 
	mTabÀOff£tE¡ry
[1];

269 } 
	tACPI_TABLE_RSDT
;

271 
	sa˝i_èbÀ_xsdt


273 
ACPI_TABLE_HEADER
 
	mHódî
;

274 
UINT64
 
	mTabÀOff£tE¡ry
[1];

276 } 
	tACPI_TABLE_XSDT
;

278 
	#ACPI_RSDT_ENTRY_SIZE
 ( (
UINT32
))

	)

279 
	#ACPI_XSDT_ENTRY_SIZE
 ( (
UINT64
))

	)

288 
	sa˝i_èbÀ_Ács


290 
	mSig«tuª
[4];

291 
UINT32
 
	mLígth
;

292 
UINT32
 
	mH¨dw¨eSig«tuª
;

293 
UINT32
 
	mFúmw¨eWakögVe˘‹
;

294 
UINT32
 
	mGlobÆLock
;

295 
UINT32
 
	mFœgs
;

296 
UINT64
 
	mXFúmw¨eWakögVe˘‹
;

297 
UINT8
 
	mVîsi⁄
;

298 
UINT8
 
	mRe£rved
[3];

299 
UINT32
 
	mO•mFœgs
;

300 
UINT8
 
	mRe£rved1
[24];

302 } 
	tACPI_TABLE_FACS
;

306 
	#ACPI_GLOCK_PENDING
 (1Ë

	)

307 
	#ACPI_GLOCK_OWNED
 (1<<1Ë

	)

311 
	#ACPI_FACS_S4_BIOS_PRESENT
 (1Ë

	)

312 
	#ACPI_FACS_64BIT_WAKE
 (1<<1Ë

	)

316 
	#ACPI_FACS_64BIT_ENVIRONMENT
 (1Ë

	)

328 
	sa˝i_èbÀ_Ádt


330 
ACPI_TABLE_HEADER
 
	mHódî
;

331 
UINT32
 
	mFacs
;

332 
UINT32
 
	mDsdt
;

333 
UINT8
 
	mModñ
;

334 
UINT8
 
	mPª„ºedProfûe
;

335 
UINT16
 
	mSciI¡îru±
;

336 
UINT32
 
	mSmiComm™d
;

337 
UINT8
 
	mA˝iE«bÀ
;

338 
UINT8
 
	mA˝iDißbÀ
;

339 
UINT8
 
	mS4BiosReque°
;

340 
UINT8
 
	mP°©eC⁄åﬁ
;

341 
UINT32
 
	mPm1aEvítBlock
;

342 
UINT32
 
	mPm1bEvítBlock
;

343 
UINT32
 
	mPm1aC⁄åﬁBlock
;

344 
UINT32
 
	mPm1bC⁄åﬁBlock
;

345 
UINT32
 
	mPm2C⁄åﬁBlock
;

346 
UINT32
 
	mPmTimîBlock
;

347 
UINT32
 
	mG≥0Block
;

348 
UINT32
 
	mG≥1Block
;

349 
UINT8
 
	mPm1EvítLígth
;

350 
UINT8
 
	mPm1C⁄åﬁLígth
;

351 
UINT8
 
	mPm2C⁄åﬁLígth
;

352 
UINT8
 
	mPmTimîLígth
;

353 
UINT8
 
	mG≥0BlockLígth
;

354 
UINT8
 
	mG≥1BlockLígth
;

355 
UINT8
 
	mG≥1Ba£
;

356 
UINT8
 
	mC°C⁄åﬁ
;

357 
UINT16
 
	mC2L©ícy
;

358 
UINT16
 
	mC3L©ícy
;

359 
UINT16
 
	mFlushSize
;

360 
UINT16
 
	mFlushSåide
;

361 
UINT8
 
	mDutyOff£t
;

362 
UINT8
 
	mDutyWidth
;

363 
UINT8
 
	mDayAœrm
;

364 
UINT8
 
	mM⁄thAœrm
;

365 
UINT8
 
	mCítury
;

366 
UINT16
 
	mBoŸFœgs
;

367 
UINT8
 
	mRe£rved
;

368 
UINT32
 
	mFœgs
;

369 
ACPI_GENERIC_ADDRESS
 
	mRe£tRegi°î
;

370 
UINT8
 
	mRe£tVÆue
;

371 
UINT16
 
	mArmBoŸFœgs
;

372 
UINT8
 
	mMö‹Revisi⁄
;

373 
UINT64
 
	mXFacs
;

374 
UINT64
 
	mXDsdt
;

375 
ACPI_GENERIC_ADDRESS
 
	mXPm1aEvítBlock
;

376 
ACPI_GENERIC_ADDRESS
 
	mXPm1bEvítBlock
;

377 
ACPI_GENERIC_ADDRESS
 
	mXPm1aC⁄åﬁBlock
;

378 
ACPI_GENERIC_ADDRESS
 
	mXPm1bC⁄åﬁBlock
;

379 
ACPI_GENERIC_ADDRESS
 
	mXPm2C⁄åﬁBlock
;

380 
ACPI_GENERIC_ADDRESS
 
	mXPmTimîBlock
;

381 
ACPI_GENERIC_ADDRESS
 
	mXG≥0Block
;

382 
ACPI_GENERIC_ADDRESS
 
	mXG≥1Block
;

383 
ACPI_GENERIC_ADDRESS
 
	mSÀïC⁄åﬁ
;

384 
ACPI_GENERIC_ADDRESS
 
	mSÀïSètus
;

386 } 
	tACPI_TABLE_FADT
;

391 
	#ACPI_FADT_LEGACY_DEVICES
 (1Ë

	)

392 
	#ACPI_FADT_8042
 (1<<1Ë

	)

393 
	#ACPI_FADT_NO_VGA
 (1<<2Ë

	)

394 
	#ACPI_FADT_NO_MSI
 (1<<3Ë

	)

395 
	#ACPI_FADT_NO_ASPM
 (1<<4Ë

	)

396 
	#ACPI_FADT_NO_CMOS_RTC
 (1<<5Ë

	)

400 
	#ACPI_FADT_PSCI_COMPLIANT
 (1Ë

	)

401 
	#ACPI_FADT_PSCI_USE_HVC
 (1<<1Ë

	)

405 
	#ACPI_FADT_WBINVD
 (1Ë

	)

406 
	#ACPI_FADT_WBINVD_FLUSH
 (1<<1Ë

	)

407 
	#ACPI_FADT_C1_SUPPORTED
 (1<<2Ë

	)

408 
	#ACPI_FADT_C2_MP_SUPPORTED
 (1<<3Ë

	)

409 
	#ACPI_FADT_POWER_BUTTON
 (1<<4Ë

	)

410 
	#ACPI_FADT_SLEEP_BUTTON
 (1<<5Ë

	)

411 
	#ACPI_FADT_FIXED_RTC
 (1<<6Ë

	)

412 
	#ACPI_FADT_S4_RTC_WAKE
 (1<<7Ë

	)

413 
	#ACPI_FADT_32BIT_TIMER
 (1<<8Ë

	)

414 
	#ACPI_FADT_DOCKING_SUPPORTED
 (1<<9Ë

	)

415 
	#ACPI_FADT_RESET_REGISTER
 (1<<10Ë

	)

416 
	#ACPI_FADT_SEALED_CASE
 (1<<11Ë

	)

417 
	#ACPI_FADT_HEADLESS
 (1<<12Ë

	)

418 
	#ACPI_FADT_SLEEP_TYPE
 (1<<13Ë

	)

419 
	#ACPI_FADT_PCI_EXPRESS_WAKE
 (1<<14Ë

	)

420 
	#ACPI_FADT_PLATFORM_CLOCK
 (1<<15Ë

	)

421 
	#ACPI_FADT_S4_RTC_VALID
 (1<<16Ë

	)

422 
	#ACPI_FADT_REMOTE_POWER_ON
 (1<<17Ë

	)

423 
	#ACPI_FADT_APIC_CLUSTER
 (1<<18Ë

	)

424 
	#ACPI_FADT_APIC_PHYSICAL
 (1<<19Ë

	)

425 
	#ACPI_FADT_HW_REDUCED
 (1<<20Ë

	)

426 
	#ACPI_FADT_LOW_POWER_S0
 (1<<21Ë

	)

431 
	eA˝iPª„ºedPmProfûes


433 
	mPM_UNSPECIFIED
 = 0,

434 
	mPM_DESKTOP
 = 1,

435 
	mPM_MOBILE
 = 2,

436 
	mPM_WORKSTATION
 = 3,

437 
	mPM_ENTERPRISE_SERVER
 = 4,

438 
	mPM_SOHO_SERVER
 = 5,

439 
	mPM_APPLIANCE_PC
 = 6,

440 
	mPM_PERFORMANCE_SERVER
 = 7,

441 
	mPM_TABLET
 = 8

446 
	#ACPI_X_WAKE_STATUS
 0x80

	)

447 
	#ACPI_X_SLEEP_TYPE_MASK
 0x1C

	)

448 
	#ACPI_X_SLEEP_TYPE_POSITION
 0x02

	)

449 
	#ACPI_X_SLEEP_ENABLE
 0x20

	)

454 #¥agm®
∑ck
()

460 
	ua˝i_«me_uni⁄


462 
UINT32
 
	mI¡egî
;

463 
	mAscii
[4];

465 } 
	tACPI_NAME_UNION
;

470 
	sa˝i_èbÀ_desc


472 
ACPI_PHYSICAL_ADDRESS
 
	mAddªss
;

473 
ACPI_TABLE_HEADER
 *
	mPoöãr
;

474 
UINT32
 
	mLígth
;

475 
ACPI_NAME_UNION
 
	mSig«tuª
;

476 
ACPI_OWNER_ID
 
	mOw√rId
;

477 
UINT8
 
	mFœgs
;

479 } 
	tACPI_TABLE_DESC
;

483 
	#ACPI_TABLE_ORIGIN_EXTERNAL_VIRTUAL
 (0Ë

	)

484 
	#ACPI_TABLE_ORIGIN_INTERNAL_PHYSICAL
 (1Ë

	)

485 
	#ACPI_TABLE_ORIGIN_INTERNAL_VIRTUAL
 (2Ë

	)

486 
	#ACPI_TABLE_ORIGIN_MASK
 (3)

	)

487 
	#ACPI_TABLE_IS_LOADED
 (8)

	)

493 
	~"a˘bl1.h
"

494 
	~"a˘bl2.h
"

495 
	~"a˘bl3.h
"

499 
	#ACPI_FADT_OFFSET
(
f
Ë(
UINT16
Ë
	`ACPI_OFFSET
 (
ACPI_TABLE_FADT
, f)

	)

515 
	#ACPI_FADT_V1_SIZE
 (
UINT32
Ë(
	`ACPI_FADT_OFFSET
 (
Fœgs
Ë+ 4)

	)

516 
	#ACPI_FADT_V2_SIZE
 (
UINT32
Ë(
	`ACPI_FADT_OFFSET
 (
Mö‹Revisi⁄
Ë+ 1)

	)

517 
	#ACPI_FADT_V3_SIZE
 (
UINT32
Ë(
	`ACPI_FADT_OFFSET
 (
SÀïC⁄åﬁ
))

	)

518 
	#ACPI_FADT_V5_SIZE
 (
UINT32
Ë( (
ACPI_TABLE_FADT
))

	)

	@src/extern/acpica/source/include/actbl1.h

116 #i‚de‡
__ACTBL1_H__


117 
	#__ACTBL1_H__


	)

137 
	#ACPI_SIG_BERT
 "BERT"

	)

138 
	#ACPI_SIG_CPEP
 "CPEP"

	)

139 
	#ACPI_SIG_ECDT
 "ECDT"

	)

140 
	#ACPI_SIG_EINJ
 "EINJ"

	)

141 
	#ACPI_SIG_ERST
 "ERST"

	)

142 
	#ACPI_SIG_HEST
 "HEST"

	)

143 
	#ACPI_SIG_MADT
 "APIC"

	)

144 
	#ACPI_SIG_MSCT
 "MSCT"

	)

145 
	#ACPI_SIG_SBST
 "SBST"

	)

146 
	#ACPI_SIG_SLIT
 "SLIT"

	)

147 
	#ACPI_SIG_SRAT
 "SRAT"

	)

154 #¥agm®
∑ck
(1)

177 
	sa˝i_subèbÀ_hódî


179 
UINT8
 
	mTy≥
;

180 
UINT8
 
	mLígth
;

182 } 
	tACPI_SUBTABLE_HEADER
;

187 
	sa˝i_whó_hódî


189 
UINT8
 
	mA˘i⁄
;

190 
UINT8
 
	mIn°ru˘i⁄
;

191 
UINT8
 
	mFœgs
;

192 
UINT8
 
	mRe£rved
;

193 
ACPI_GENERIC_ADDRESS
 
	mRegi°îRegi⁄
;

194 
UINT64
 
	mVÆue
;

195 
UINT64
 
	mMask
;

197 } 
	tACPI_WHEA_HEADER
;

207 
	sa˝i_èbÀ_bît


209 
ACPI_TABLE_HEADER
 
	mHódî
;

210 
UINT32
 
	mRegi⁄Lígth
;

211 
UINT64
 
	mAddªss
;

213 } 
	tACPI_TABLE_BERT
;

218 
	sa˝i_bît_ªgi⁄


220 
UINT32
 
	mBlockSètus
;

221 
UINT32
 
	mRawD©aOff£t
;

222 
UINT32
 
	mRawD©aLígth
;

223 
UINT32
 
	mD©aLígth
;

224 
UINT32
 
	mEº‹Sevîôy
;

226 } 
	tACPI_BERT_REGION
;

230 
	#ACPI_BERT_UNCORRECTABLE
 (1)

	)

231 
	#ACPI_BERT_CORRECTABLE
 (1<<1)

	)

232 
	#ACPI_BERT_MULTIPLE_UNCORRECTABLE
 (1<<2)

	)

233 
	#ACPI_BERT_MULTIPLE_CORRECTABLE
 (1<<3)

	)

234 
	#ACPI_BERT_ERROR_ENTRY_COUNT
 (0xFF<<4Ë

	)

238 
	eA˝iBîtEº‹Sevîôy


240 
	mACPI_BERT_ERROR_CORRECTABLE
 = 0,

241 
	mACPI_BERT_ERROR_FATAL
 = 1,

242 
	mACPI_BERT_ERROR_CORRECTED
 = 2,

243 
	mACPI_BERT_ERROR_NONE
 = 3,

244 
	mACPI_BERT_ERROR_RESERVED
 = 4

260 
	sa˝i_èbÀ_˝ï


262 
ACPI_TABLE_HEADER
 
	mHódî
;

263 
UINT64
 
	mRe£rved
;

265 } 
	tACPI_TABLE_CPEP
;

270 
	sa˝i_˝ï_pﬁlög


272 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

273 
UINT8
 
	mId
;

274 
UINT8
 
	mEid
;

275 
UINT32
 
	mI¡îvÆ
;

277 } 
	tACPI_CPEP_POLLING
;

287 
	sa˝i_èbÀ_ecdt


289 
ACPI_TABLE_HEADER
 
	mHódî
;

290 
ACPI_GENERIC_ADDRESS
 
	mC⁄åﬁ
;

291 
ACPI_GENERIC_ADDRESS
 
	mD©a
;

292 
UINT32
 
	mUid
;

293 
UINT8
 
	mG≥
;

294 
UINT8
 
	mId
[1];

296 } 
	tACPI_TABLE_ECDT
;

306 
	sa˝i_èbÀ_eöj


308 
ACPI_TABLE_HEADER
 
	mHódî
;

309 
UINT32
 
	mHódîLígth
;

310 
UINT8
 
	mFœgs
;

311 
UINT8
 
	mRe£rved
[3];

312 
UINT32
 
	mE¡rõs
;

314 } 
	tACPI_TABLE_EINJ
;

319 
	sa˝i_eöj_íåy


321 
ACPI_WHEA_HEADER
 
	mWhóHódî
;

323 } 
	tACPI_EINJ_ENTRY
;

327 
	#ACPI_EINJ_PRESERVE
 (1)

	)

331 
	eA˝iEöjA˘i⁄s


333 
	mACPI_EINJ_BEGIN_OPERATION
 = 0,

334 
	mACPI_EINJ_GET_TRIGGER_TABLE
 = 1,

335 
	mACPI_EINJ_SET_ERROR_TYPE
 = 2,

336 
	mACPI_EINJ_GET_ERROR_TYPE
 = 3,

337 
	mACPI_EINJ_END_OPERATION
 = 4,

338 
	mACPI_EINJ_EXECUTE_OPERATION
 = 5,

339 
	mACPI_EINJ_CHECK_BUSY_STATUS
 = 6,

340 
	mACPI_EINJ_GET_COMMAND_STATUS
 = 7,

341 
	mACPI_EINJ_SET_ERROR_TYPE_WITH_ADDRESS
 = 8,

342 
	mACPI_EINJ_ACTION_RESERVED
 = 9,

343 
	mACPI_EINJ_TRIGGER_ERROR
 = 0xFF

348 
	eA˝iEöjIn°ru˘i⁄s


350 
	mACPI_EINJ_READ_REGISTER
 = 0,

351 
	mACPI_EINJ_READ_REGISTER_VALUE
 = 1,

352 
	mACPI_EINJ_WRITE_REGISTER
 = 2,

353 
	mACPI_EINJ_WRITE_REGISTER_VALUE
 = 3,

354 
	mACPI_EINJ_NOOP
 = 4,

355 
	mACPI_EINJ_FLUSH_CACHELINE
 = 5,

356 
	mACPI_EINJ_INSTRUCTION_RESERVED
 = 6

359 
	sa˝i_eöj_îr‹_ty≥_wôh_addr


361 
UINT32
 
	mEº‹Ty≥
;

362 
UINT32
 
	mVíd‹Såu˘Off£t
;

363 
UINT32
 
	mFœgs
;

364 
UINT32
 
	mApicId
;

365 
UINT64
 
	mAddªss
;

366 
UINT64
 
	mR™ge
;

367 
UINT32
 
	mPcõId
;

369 } 
	tACPI_EINJ_ERROR_TYPE_WITH_ADDR
;

371 
	sa˝i_eöj_víd‹


373 
UINT32
 
	mLígth
;

374 
UINT32
 
	mPcõId
;

375 
UINT16
 
	mVíd‹Id
;

376 
UINT16
 
	mDevi˚Id
;

377 
UINT8
 
	mRevisi⁄Id
;

378 
UINT8
 
	mRe£rved
[3];

380 } 
	tACPI_EINJ_VENDOR
;

385 
	sa˝i_eöj_åiggî


387 
UINT32
 
	mHódîSize
;

388 
UINT32
 
	mRevisi⁄
;

389 
UINT32
 
	mTabÀSize
;

390 
UINT32
 
	mE¡ryCou¡
;

392 } 
	tACPI_EINJ_TRIGGER
;

396 
	eA˝iEöjComm™dSètus


398 
	mACPI_EINJ_SUCCESS
 = 0,

399 
	mACPI_EINJ_FAILURE
 = 1,

400 
	mACPI_EINJ_INVALID_ACCESS
 = 2,

401 
	mACPI_EINJ_STATUS_RESERVED
 = 3

407 
	#ACPI_EINJ_PROCESSOR_CORRECTABLE
 (1)

	)

408 
	#ACPI_EINJ_PROCESSOR_UNCORRECTABLE
 (1<<1)

	)

409 
	#ACPI_EINJ_PROCESSOR_FATAL
 (1<<2)

	)

410 
	#ACPI_EINJ_MEMORY_CORRECTABLE
 (1<<3)

	)

411 
	#ACPI_EINJ_MEMORY_UNCORRECTABLE
 (1<<4)

	)

412 
	#ACPI_EINJ_MEMORY_FATAL
 (1<<5)

	)

413 
	#ACPI_EINJ_PCIX_CORRECTABLE
 (1<<6)

	)

414 
	#ACPI_EINJ_PCIX_UNCORRECTABLE
 (1<<7)

	)

415 
	#ACPI_EINJ_PCIX_FATAL
 (1<<8)

	)

416 
	#ACPI_EINJ_PLATFORM_CORRECTABLE
 (1<<9)

	)

417 
	#ACPI_EINJ_PLATFORM_UNCORRECTABLE
 (1<<10)

	)

418 
	#ACPI_EINJ_PLATFORM_FATAL
 (1<<11)

	)

419 
	#ACPI_EINJ_VENDOR_DEFINED
 (1<<31)

	)

429 
	sa˝i_èbÀ_î°


431 
ACPI_TABLE_HEADER
 
	mHódî
;

432 
UINT32
 
	mHódîLígth
;

433 
UINT32
 
	mRe£rved
;

434 
UINT32
 
	mE¡rõs
;

436 } 
	tACPI_TABLE_ERST
;

441 
	sa˝i_î°_íåy


443 
ACPI_WHEA_HEADER
 
	mWhóHódî
;

445 } 
	tACPI_ERST_ENTRY
;

449 
	#ACPI_ERST_PRESERVE
 (1)

	)

453 
	eA˝iEr°A˘i⁄s


455 
	mACPI_ERST_BEGIN_WRITE
 = 0,

456 
	mACPI_ERST_BEGIN_READ
 = 1,

457 
	mACPI_ERST_BEGIN_CLEAR
 = 2,

458 
	mACPI_ERST_END
 = 3,

459 
	mACPI_ERST_SET_RECORD_OFFSET
 = 4,

460 
	mACPI_ERST_EXECUTE_OPERATION
 = 5,

461 
	mACPI_ERST_CHECK_BUSY_STATUS
 = 6,

462 
	mACPI_ERST_GET_COMMAND_STATUS
 = 7,

463 
	mACPI_ERST_GET_RECORD_ID
 = 8,

464 
	mACPI_ERST_SET_RECORD_ID
 = 9,

465 
	mACPI_ERST_GET_RECORD_COUNT
 = 10,

466 
	mACPI_ERST_BEGIN_DUMMY_WRIITE
 = 11,

467 
	mACPI_ERST_NOT_USED
 = 12,

468 
	mACPI_ERST_GET_ERROR_RANGE
 = 13,

469 
	mACPI_ERST_GET_ERROR_LENGTH
 = 14,

470 
	mACPI_ERST_GET_ERROR_ATTRIBUTES
 = 15,

471 
	mACPI_ERST_ACTION_RESERVED
 = 16

476 
	eA˝iEr°In°ru˘i⁄s


478 
	mACPI_ERST_READ_REGISTER
 = 0,

479 
	mACPI_ERST_READ_REGISTER_VALUE
 = 1,

480 
	mACPI_ERST_WRITE_REGISTER
 = 2,

481 
	mACPI_ERST_WRITE_REGISTER_VALUE
 = 3,

482 
	mACPI_ERST_NOOP
 = 4,

483 
	mACPI_ERST_LOAD_VAR1
 = 5,

484 
	mACPI_ERST_LOAD_VAR2
 = 6,

485 
	mACPI_ERST_STORE_VAR1
 = 7,

486 
	mACPI_ERST_ADD
 = 8,

487 
	mACPI_ERST_SUBTRACT
 = 9,

488 
	mACPI_ERST_ADD_VALUE
 = 10,

489 
	mACPI_ERST_SUBTRACT_VALUE
 = 11,

490 
	mACPI_ERST_STALL
 = 12,

491 
	mACPI_ERST_STALL_WHILE_TRUE
 = 13,

492 
	mACPI_ERST_SKIP_NEXT_IF_TRUE
 = 14,

493 
	mACPI_ERST_GOTO
 = 15,

494 
	mACPI_ERST_SET_SRC_ADDRESS_BASE
 = 16,

495 
	mACPI_ERST_SET_DST_ADDRESS_BASE
 = 17,

496 
	mACPI_ERST_MOVE_DATA
 = 18,

497 
	mACPI_ERST_INSTRUCTION_RESERVED
 = 19

502 
	eA˝iEr°Comm™dSètus


504 
	mACPI_ERST_SUCESS
 = 0,

505 
	mACPI_ERST_NO_SPACE
 = 1,

506 
	mACPI_ERST_NOT_AVAILABLE
 = 2,

507 
	mACPI_ERST_FAILURE
 = 3,

508 
	mACPI_ERST_RECORD_EMPTY
 = 4,

509 
	mACPI_ERST_NOT_FOUND
 = 5,

510 
	mACPI_ERST_STATUS_RESERVED
 = 6

516 
	sa˝i_î°_öfo


518 
UINT16
 
	mSig«tuª
;

519 
UINT8
 
	mD©a
[48];

521 } 
	tACPI_ERST_INFO
;

531 
	sa˝i_èbÀ_he°


533 
ACPI_TABLE_HEADER
 
	mHódî
;

534 
UINT32
 
	mEº‹Sour˚Cou¡
;

536 } 
	tACPI_TABLE_HEST
;

541 
	sa˝i_he°_hódî


543 
UINT16
 
	mTy≥
;

544 
UINT16
 
	mSour˚Id
;

546 } 
	tACPI_HEST_HEADER
;

551 
	eA˝iHe°Ty≥s


553 
	mACPI_HEST_TYPE_IA32_CHECK
 = 0,

554 
	mACPI_HEST_TYPE_IA32_CORRECTED_CHECK
 = 1,

555 
	mACPI_HEST_TYPE_IA32_NMI
 = 2,

556 
	mACPI_HEST_TYPE_NOT_USED3
 = 3,

557 
	mACPI_HEST_TYPE_NOT_USED4
 = 4,

558 
	mACPI_HEST_TYPE_NOT_USED5
 = 5,

559 
	mACPI_HEST_TYPE_AER_ROOT_PORT
 = 6,

560 
	mACPI_HEST_TYPE_AER_ENDPOINT
 = 7,

561 
	mACPI_HEST_TYPE_AER_BRIDGE
 = 8,

562 
	mACPI_HEST_TYPE_GENERIC_ERROR
 = 9,

563 
	mACPI_HEST_TYPE_RESERVED
 = 10

575 
	sa˝i_he°_ü_îr‹_b™k


577 
UINT8
 
	mB™kNumbî
;

578 
UINT8
 
	mCÀ¨SètusOnInô
;

579 
UINT8
 
	mSètusF‹m©
;

580 
UINT8
 
	mRe£rved
;

581 
UINT32
 
	mC⁄åﬁRegi°î
;

582 
UINT64
 
	mC⁄åﬁD©a
;

583 
UINT32
 
	mSètusRegi°î
;

584 
UINT32
 
	mAddªssRegi°î
;

585 
UINT32
 
	mMiscRegi°î
;

587 } 
	tACPI_HEST_IA_ERROR_BANK
;

592 
	sa˝i_he°_´r_comm⁄


594 
UINT16
 
	mRe£rved1
;

595 
UINT8
 
	mFœgs
;

596 
UINT8
 
	mE«bÀd
;

597 
UINT32
 
	mRec‹dsToPªÆloˇã
;

598 
UINT32
 
	mMaxSe˘i⁄sPîRec‹d
;

599 
UINT32
 
	mBus
;

600 
UINT16
 
	mDevi˚
;

601 
UINT16
 
	mFun˘i⁄
;

602 
UINT16
 
	mDevi˚C⁄åﬁ
;

603 
UINT16
 
	mRe£rved2
;

604 
UINT32
 
	mUnc‹ª˘abÀMask
;

605 
UINT32
 
	mUnc‹ª˘abÀSevîôy
;

606 
UINT32
 
	mC‹ª˘abÀMask
;

607 
UINT32
 
	mAdv™˚dC≠abûôõs
;

609 } 
	tACPI_HEST_AER_COMMON
;

613 
	#ACPI_HEST_FIRMWARE_FIRST
 (1)

	)

614 
	#ACPI_HEST_GLOBAL
 (1<<1)

	)

621 
	#ACPI_HEST_BUS
(
Bus
Ë((BusË& 0xFF)

	)

622 
	#ACPI_HEST_SEGMENT
(
Bus
Ë(((BusË>> 8Ë& 0xFFFF)

	)

627 
	sa˝i_he°_nŸify


629 
UINT8
 
	mTy≥
;

630 
UINT8
 
	mLígth
;

631 
UINT16
 
	mC⁄figWrôeE«bÀ
;

632 
UINT32
 
	mPﬁlI¡îvÆ
;

633 
UINT32
 
	mVe˘‹
;

634 
UINT32
 
	mPﬁlögThªshﬁdVÆue
;

635 
UINT32
 
	mPﬁlögThªshﬁdWödow
;

636 
UINT32
 
	mEº‹ThªshﬁdVÆue
;

637 
UINT32
 
	mEº‹ThªshﬁdWödow
;

639 } 
	tACPI_HEST_NOTIFY
;

643 
	eA˝iHe°NŸifyTy≥s


645 
	mACPI_HEST_NOTIFY_POLLED
 = 0,

646 
	mACPI_HEST_NOTIFY_EXTERNAL
 = 1,

647 
	mACPI_HEST_NOTIFY_LOCAL
 = 2,

648 
	mACPI_HEST_NOTIFY_SCI
 = 3,

649 
	mACPI_HEST_NOTIFY_NMI
 = 4,

650 
	mACPI_HEST_NOTIFY_CMCI
 = 5,

651 
	mACPI_HEST_NOTIFY_MCE
 = 6,

652 
	mACPI_HEST_NOTIFY_RESERVED
 = 7

657 
	#ACPI_HEST_TYPE
 (1)

	)

658 
	#ACPI_HEST_POLL_INTERVAL
 (1<<1)

	)

659 
	#ACPI_HEST_POLL_THRESHOLD_VALUE
 (1<<2)

	)

660 
	#ACPI_HEST_POLL_THRESHOLD_WINDOW
 (1<<3)

	)

661 
	#ACPI_HEST_ERR_THRESHOLD_VALUE
 (1<<4)

	)

662 
	#ACPI_HEST_ERR_THRESHOLD_WINDOW
 (1<<5)

	)

671 
	sa˝i_he°_ü_machöe_check


673 
ACPI_HEST_HEADER
 
	mHódî
;

674 
UINT16
 
	mRe£rved1
;

675 
UINT8
 
	mFœgs
;

676 
UINT8
 
	mE«bÀd
;

677 
UINT32
 
	mRec‹dsToPªÆloˇã
;

678 
UINT32
 
	mMaxSe˘i⁄sPîRec‹d
;

679 
UINT64
 
	mGlobÆC≠abûôyD©a
;

680 
UINT64
 
	mGlobÆC⁄åﬁD©a
;

681 
UINT8
 
	mNumH¨dw¨eB™ks
;

682 
UINT8
 
	mRe£rved3
[7];

684 } 
	tACPI_HEST_IA_MACHINE_CHECK
;

689 
	sa˝i_he°_ü_c‹ª˘ed


691 
ACPI_HEST_HEADER
 
	mHódî
;

692 
UINT16
 
	mRe£rved1
;

693 
UINT8
 
	mFœgs
;

694 
UINT8
 
	mE«bÀd
;

695 
UINT32
 
	mRec‹dsToPªÆloˇã
;

696 
UINT32
 
	mMaxSe˘i⁄sPîRec‹d
;

697 
ACPI_HEST_NOTIFY
 
	mNŸify
;

698 
UINT8
 
	mNumH¨dw¨eB™ks
;

699 
UINT8
 
	mRe£rved2
[3];

701 } 
	tACPI_HEST_IA_CORRECTED
;

706 
	sa˝i_he°_ü_nmi


708 
ACPI_HEST_HEADER
 
	mHódî
;

709 
UINT32
 
	mRe£rved
;

710 
UINT32
 
	mRec‹dsToPªÆloˇã
;

711 
UINT32
 
	mMaxSe˘i⁄sPîRec‹d
;

712 
UINT32
 
	mMaxRawD©aLígth
;

714 } 
	tACPI_HEST_IA_NMI
;

721 
	sa˝i_he°_´r_roŸ


723 
ACPI_HEST_HEADER
 
	mHódî
;

724 
ACPI_HEST_AER_COMMON
 
	mAî
;

725 
UINT32
 
	mRoŸEº‹Comm™d
;

727 } 
	tACPI_HEST_AER_ROOT
;

732 
	sa˝i_he°_´r


734 
ACPI_HEST_HEADER
 
	mHódî
;

735 
ACPI_HEST_AER_COMMON
 
	mAî
;

737 } 
	tACPI_HEST_AER
;

742 
	sa˝i_he°_´r_bridge


744 
ACPI_HEST_HEADER
 
	mHódî
;

745 
ACPI_HEST_AER_COMMON
 
	mAî
;

746 
UINT32
 
	mUnc‹ª˘abÀMask2
;

747 
UINT32
 
	mUnc‹ª˘abÀSevîôy2
;

748 
UINT32
 
	mAdv™˚dC≠abûôõs2
;

750 } 
	tACPI_HEST_AER_BRIDGE
;

755 
	sa˝i_he°_gíîic


757 
ACPI_HEST_HEADER
 
	mHódî
;

758 
UINT16
 
	mRñ©edSour˚Id
;

759 
UINT8
 
	mRe£rved
;

760 
UINT8
 
	mE«bÀd
;

761 
UINT32
 
	mRec‹dsToPªÆloˇã
;

762 
UINT32
 
	mMaxSe˘i⁄sPîRec‹d
;

763 
UINT32
 
	mMaxRawD©aLígth
;

764 
ACPI_GENERIC_ADDRESS
 
	mEº‹SètusAddªss
;

765 
ACPI_HEST_NOTIFY
 
	mNŸify
;

766 
UINT32
 
	mEº‹BlockLígth
;

768 } 
	tACPI_HEST_GENERIC
;

773 
	sa˝i_he°_gíîic_°©us


775 
UINT32
 
	mBlockSètus
;

776 
UINT32
 
	mRawD©aOff£t
;

777 
UINT32
 
	mRawD©aLígth
;

778 
UINT32
 
	mD©aLígth
;

779 
UINT32
 
	mEº‹Sevîôy
;

781 } 
	tACPI_HEST_GENERIC_STATUS
;

785 
	#ACPI_HEST_UNCORRECTABLE
 (1)

	)

786 
	#ACPI_HEST_CORRECTABLE
 (1<<1)

	)

787 
	#ACPI_HEST_MULTIPLE_UNCORRECTABLE
 (1<<2)

	)

788 
	#ACPI_HEST_MULTIPLE_CORRECTABLE
 (1<<3)

	)

789 
	#ACPI_HEST_ERROR_ENTRY_COUNT
 (0xFF<<4Ë

	)

794 
	sa˝i_he°_gíîic_d©a


796 
UINT8
 
	mSe˘i⁄Ty≥
[16];

797 
UINT32
 
	mEº‹Sevîôy
;

798 
UINT16
 
	mRevisi⁄
;

799 
UINT8
 
	mVÆid©i⁄Bôs
;

800 
UINT8
 
	mFœgs
;

801 
UINT32
 
	mEº‹D©aLígth
;

802 
UINT8
 
	mFruId
[16];

803 
UINT8
 
	mFruText
[20];

805 } 
	tACPI_HEST_GENERIC_DATA
;

815 
	sa˝i_èbÀ_madt


817 
ACPI_TABLE_HEADER
 
	mHódî
;

818 
UINT32
 
	mAddªss
;

819 
UINT32
 
	mFœgs
;

821 } 
	tACPI_TABLE_MADT
;

825 
	#ACPI_MADT_PCAT_COMPAT
 (1Ë

	)

829 
	#ACPI_MADT_DUAL_PIC
 0

	)

830 
	#ACPI_MADT_MULTIPLE_APIC
 1

	)

835 
	eA˝iMadtTy≥


837 
	mACPI_MADT_TYPE_LOCAL_APIC
 = 0,

838 
	mACPI_MADT_TYPE_IO_APIC
 = 1,

839 
	mACPI_MADT_TYPE_INTERRUPT_OVERRIDE
 = 2,

840 
	mACPI_MADT_TYPE_NMI_SOURCE
 = 3,

841 
	mACPI_MADT_TYPE_LOCAL_APIC_NMI
 = 4,

842 
	mACPI_MADT_TYPE_LOCAL_APIC_OVERRIDE
 = 5,

843 
	mACPI_MADT_TYPE_IO_SAPIC
 = 6,

844 
	mACPI_MADT_TYPE_LOCAL_SAPIC
 = 7,

845 
	mACPI_MADT_TYPE_INTERRUPT_SOURCE
 = 8,

846 
	mACPI_MADT_TYPE_LOCAL_X2APIC
 = 9,

847 
	mACPI_MADT_TYPE_LOCAL_X2APIC_NMI
 = 10,

848 
	mACPI_MADT_TYPE_GENERIC_INTERRUPT
 = 11,

849 
	mACPI_MADT_TYPE_GENERIC_DISTRIBUTOR
 = 12,

850 
	mACPI_MADT_TYPE_GENERIC_MSI_FRAME
 = 13,

851 
	mACPI_MADT_TYPE_GENERIC_REDISTRIBUTOR
 = 14,

852 
	mACPI_MADT_TYPE_RESERVED
 = 15

862 
	sa˝i_madt_loˇl_≠ic


864 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

865 
UINT8
 
	mPro˚ss‹Id
;

866 
UINT8
 
	mId
;

867 
UINT32
 
	mL≠icFœgs
;

869 } 
	tACPI_MADT_LOCAL_APIC
;

874 
	sa˝i_madt_io_≠ic


876 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

877 
UINT8
 
	mId
;

878 
UINT8
 
	mRe£rved
;

879 
UINT32
 
	mAddªss
;

880 
UINT32
 
	mGlobÆIrqBa£
;

882 } 
	tACPI_MADT_IO_APIC
;

887 
	sa˝i_madt_öãºu±_ovîride


889 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

890 
UINT8
 
	mBus
;

891 
UINT8
 
	mSour˚Irq
;

892 
UINT32
 
	mGlobÆIrq
;

893 
UINT16
 
	mI¡iFœgs
;

895 } 
	tACPI_MADT_INTERRUPT_OVERRIDE
;

900 
	sa˝i_madt_nmi_sour˚


902 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

903 
UINT16
 
	mI¡iFœgs
;

904 
UINT32
 
	mGlobÆIrq
;

906 } 
	tACPI_MADT_NMI_SOURCE
;

911 
	sa˝i_madt_loˇl_≠ic_nmi


913 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

914 
UINT8
 
	mPro˚ss‹Id
;

915 
UINT16
 
	mI¡iFœgs
;

916 
UINT8
 
	mLöt
;

918 } 
	tACPI_MADT_LOCAL_APIC_NMI
;

923 
	sa˝i_madt_loˇl_≠ic_ovîride


925 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

926 
UINT16
 
	mRe£rved
;

927 
UINT64
 
	mAddªss
;

929 } 
	tACPI_MADT_LOCAL_APIC_OVERRIDE
;

934 
	sa˝i_madt_io_ßpic


936 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

937 
UINT8
 
	mId
;

938 
UINT8
 
	mRe£rved
;

939 
UINT32
 
	mGlobÆIrqBa£
;

940 
UINT64
 
	mAddªss
;

942 } 
	tACPI_MADT_IO_SAPIC
;

947 
	sa˝i_madt_loˇl_ßpic


949 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

950 
UINT8
 
	mPro˚ss‹Id
;

951 
UINT8
 
	mId
;

952 
UINT8
 
	mEid
;

953 
UINT8
 
	mRe£rved
[3];

954 
UINT32
 
	mL≠icFœgs
;

955 
UINT32
 
	mUid
;

956 
	mUidSåög
[1];

958 } 
	tACPI_MADT_LOCAL_SAPIC
;

963 
	sa˝i_madt_öãºu±_sour˚


965 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

966 
UINT16
 
	mI¡iFœgs
;

967 
UINT8
 
	mTy≥
;

968 
UINT8
 
	mId
;

969 
UINT8
 
	mEid
;

970 
UINT8
 
	mIoS≠icVe˘‹
;

971 
UINT32
 
	mGlobÆIrq
;

972 
UINT32
 
	mFœgs
;

974 } 
	tACPI_MADT_INTERRUPT_SOURCE
;

978 
	#ACPI_MADT_CPEI_OVERRIDE
 (1)

	)

983 
	sa˝i_madt_loˇl_x2≠ic


985 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

986 
UINT16
 
	mRe£rved
;

987 
UINT32
 
	mLoˇlApicId
;

988 
UINT32
 
	mL≠icFœgs
;

989 
UINT32
 
	mUid
;

991 } 
	tACPI_MADT_LOCAL_X2APIC
;

996 
	sa˝i_madt_loˇl_x2≠ic_nmi


998 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

999 
UINT16
 
	mI¡iFœgs
;

1000 
UINT32
 
	mUid
;

1001 
UINT8
 
	mLöt
;

1002 
UINT8
 
	mRe£rved
[3];

1004 } 
	tACPI_MADT_LOCAL_X2APIC_NMI
;

1009 
	sa˝i_madt_gíîic_öãºu±


1011 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

1012 
UINT16
 
	mRe£rved
;

1013 
UINT32
 
	mCpuI¡îÁ˚Numbî
;

1014 
UINT32
 
	mUid
;

1015 
UINT32
 
	mFœgs
;

1016 
UINT32
 
	mP¨kögVîsi⁄
;

1017 
UINT32
 
	mPîf‹m™˚I¡îru±
;

1018 
UINT64
 
	mP¨kedAddªss
;

1019 
UINT64
 
	mBa£Addªss
;

1020 
UINT64
 
	mGicvBa£Addªss
;

1021 
UINT64
 
	mGichBa£Addªss
;

1022 
UINT32
 
	mVgicI¡îru±
;

1023 
UINT64
 
	mGi¸Ba£Addªss
;

1024 
UINT64
 
	mArmMpidr
;

1026 } 
	tACPI_MADT_GENERIC_INTERRUPT
;

1031 
	#ACPI_MADT_PERFORMANCE_IRQ_MODE
 (1<<1Ë

	)

1032 
	#ACPI_MADT_VGIC_IRQ_MODE
 (1<<2Ë

	)

1037 
	sa˝i_madt_gíîic_di°ribut‹


1039 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

1040 
UINT16
 
	mRe£rved
;

1041 
UINT32
 
	mGicId
;

1042 
UINT64
 
	mBa£Addªss
;

1043 
UINT32
 
	mGlobÆIrqBa£
;

1044 
UINT32
 
	mRe£rved2
;

1046 } 
	tACPI_MADT_GENERIC_DISTRIBUTOR
;

1051 
	sa˝i_madt_gíîic_msi_‰ame


1053 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

1054 
UINT16
 
	mRe£rved
;

1055 
UINT32
 
	mMsiFømeId
;

1056 
UINT64
 
	mBa£Addªss
;

1057 
UINT32
 
	mFœgs
;

1058 
UINT16
 
	mSpiCou¡
;

1059 
UINT16
 
	mSpiBa£
;

1061 } 
	tACPI_MADT_GENERIC_MSI_FRAME
;

1065 
	#ACPI_MADT_OVERRIDE_SPI_VALUES
 (1)

	)

1070 
	sa˝i_madt_gíîic_ªdi°ribut‹


1072 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

1073 
UINT16
 
	mRe£rved
;

1074 
UINT64
 
	mBa£Addªss
;

1075 
UINT32
 
	mLígth
;

1077 } 
	tACPI_MADT_GENERIC_REDISTRIBUTOR
;

1086 
	#ACPI_MADT_ENABLED
 (1Ë

	)

1090 
	#ACPI_MADT_POLARITY_MASK
 (3Ë

	)

1091 
	#ACPI_MADT_TRIGGER_MASK
 (3<<2Ë

	)

1095 
	#ACPI_MADT_POLARITY_CONFORMS
 0

	)

1096 
	#ACPI_MADT_POLARITY_ACTIVE_HIGH
 1

	)

1097 
	#ACPI_MADT_POLARITY_RESERVED
 2

	)

1098 
	#ACPI_MADT_POLARITY_ACTIVE_LOW
 3

	)

1100 
	#ACPI_MADT_TRIGGER_CONFORMS
 (0)

	)

1101 
	#ACPI_MADT_TRIGGER_EDGE
 (1<<2)

	)

1102 
	#ACPI_MADT_TRIGGER_RESERVED
 (2<<2)

	)

1103 
	#ACPI_MADT_TRIGGER_LEVEL
 (3<<2)

	)

1113 
	sa˝i_èbÀ_ms˘


1115 
ACPI_TABLE_HEADER
 
	mHódî
;

1116 
UINT32
 
	mProximôyOff£t
;

1117 
UINT32
 
	mMaxProximôyDomaös
;

1118 
UINT32
 
	mMaxClockDomaös
;

1119 
UINT64
 
	mMaxAddªss
;

1121 } 
	tACPI_TABLE_MSCT
;

1126 
	sa˝i_ms˘_¥oximôy


1128 
UINT8
 
	mRevisi⁄
;

1129 
UINT8
 
	mLígth
;

1130 
UINT32
 
	mR™geSèπ
;

1131 
UINT32
 
	mR™geEnd
;

1132 
UINT32
 
	mPro˚ss‹C≠acôy
;

1133 
UINT64
 
	mMem‹yC≠acôy
;

1135 } 
	tACPI_MSCT_PROXIMITY
;

1145 
	sa˝i_èbÀ_sb°


1147 
ACPI_TABLE_HEADER
 
	mHódî
;

1148 
UINT32
 
	mW¨nögLevñ
;

1149 
UINT32
 
	mLowLevñ
;

1150 
UINT32
 
	mCrôiˇlLevñ
;

1152 } 
	tACPI_TABLE_SBST
;

1162 
	sa˝i_èbÀ_¶ô


1164 
ACPI_TABLE_HEADER
 
	mHódî
;

1165 
UINT64
 
	mLoˇlôyCou¡
;

1166 
UINT8
 
	mE¡ry
[1];

1168 } 
	tACPI_TABLE_SLIT
;

1178 
	sa˝i_èbÀ_§©


1180 
ACPI_TABLE_HEADER
 
	mHódî
;

1181 
UINT32
 
	mTabÀRevisi⁄
;

1182 
UINT64
 
	mRe£rved
;

1184 } 
	tACPI_TABLE_SRAT
;

1188 
	eA˝iSøtTy≥


1190 
	mACPI_SRAT_TYPE_CPU_AFFINITY
 = 0,

1191 
	mACPI_SRAT_TYPE_MEMORY_AFFINITY
 = 1,

1192 
	mACPI_SRAT_TYPE_X2APIC_CPU_AFFINITY
 = 2,

1193 
	mACPI_SRAT_TYPE_GICC_AFFINITY
 = 3,

1194 
	mACPI_SRAT_TYPE_RESERVED
 = 4

1203 
	sa˝i_§©_˝u_afföôy


1205 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

1206 
UINT8
 
	mProximôyDomaöLo
;

1207 
UINT8
 
	mApicId
;

1208 
UINT32
 
	mFœgs
;

1209 
UINT8
 
	mLoˇlS≠icEid
;

1210 
UINT8
 
	mProximôyDomaöHi
[3];

1211 
UINT32
 
	mClockDomaö
;

1213 } 
	tACPI_SRAT_CPU_AFFINITY
;

1217 
	#ACPI_SRAT_CPU_USE_AFFINITY
 (1Ë

	)

1222 
	sa˝i_§©_mem_afföôy


1224 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

1225 
UINT32
 
	mProximôyDomaö
;

1226 
UINT16
 
	mRe£rved
;

1227 
UINT64
 
	mBa£Addªss
;

1228 
UINT64
 
	mLígth
;

1229 
UINT32
 
	mRe£rved1
;

1230 
UINT32
 
	mFœgs
;

1231 
UINT64
 
	mRe£rved2
;

1233 } 
	tACPI_SRAT_MEM_AFFINITY
;

1237 
	#ACPI_SRAT_MEM_ENABLED
 (1Ë

	)

1238 
	#ACPI_SRAT_MEM_HOT_PLUGGABLE
 (1<<1Ë

	)

1239 
	#ACPI_SRAT_MEM_NON_VOLATILE
 (1<<2Ë

	)

1244 
	sa˝i_§©_x2≠ic_˝u_afföôy


1246 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

1247 
UINT16
 
	mRe£rved
;

1248 
UINT32
 
	mProximôyDomaö
;

1249 
UINT32
 
	mApicId
;

1250 
UINT32
 
	mFœgs
;

1251 
UINT32
 
	mClockDomaö
;

1252 
UINT32
 
	mRe£rved2
;

1254 } 
	tACPI_SRAT_X2APIC_CPU_AFFINITY
;

1258 
	#ACPI_SRAT_CPU_ENABLED
 (1Ë

	)

1263 
	sa˝i_§©_gicc_afföôy


1265 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

1266 
UINT32
 
	mProximôyDomaö
;

1267 
UINT32
 
	mA˝iPro˚ss‹Uid
;

1268 
UINT32
 
	mFœgs
;

1269 
UINT32
 
	mClockDomaö
;

1271 } 
	tACPI_SRAT_GICC_AFFINITY
;

1275 
	#ACPI_SRAT_GICC_ENABLED
 (1Ë

	)

1279 #¥agm®
∑ck
()

	@src/extern/acpica/source/include/actbl2.h

116 #i‚de‡
__ACTBL2_H__


117 
	#__ACTBL2_H__


	)

138 
	#ACPI_SIG_ASF
 "ASF!"

	)

139 
	#ACPI_SIG_BOOT
 "BOOT"

	)

140 
	#ACPI_SIG_CSRT
 "CSRT"

	)

141 
	#ACPI_SIG_DBG2
 "DBG2"

	)

142 
	#ACPI_SIG_DBGP
 "DBGP"

	)

143 
	#ACPI_SIG_DMAR
 "DMAR"

	)

144 
	#ACPI_SIG_HPET
 "HPET"

	)

145 
	#ACPI_SIG_IBFT
 "IBFT"

	)

146 
	#ACPI_SIG_IVRS
 "IVRS"

	)

147 
	#ACPI_SIG_LPIT
 "LPIT"

	)

148 
	#ACPI_SIG_MCFG
 "MCFG"

	)

149 
	#ACPI_SIG_MCHI
 "MCHI"

	)

150 
	#ACPI_SIG_MSDM
 "MSDM"

	)

151 
	#ACPI_SIG_MTMR
 "MTMR"

	)

152 
	#ACPI_SIG_SLIC
 "SLIC"

	)

153 
	#ACPI_SIG_SPCR
 "SPCR"

	)

154 
	#ACPI_SIG_SPMI
 "SPMI"

	)

155 
	#ACPI_SIG_TCPA
 "TCPA"

	)

156 
	#ACPI_SIG_UEFI
 "UEFI"

	)

157 
	#ACPI_SIG_VRTC
 "VRTC"

	)

158 
	#ACPI_SIG_WAET
 "WAET"

	)

159 
	#ACPI_SIG_WDAT
 "WDAT"

	)

160 
	#ACPI_SIG_WDDT
 "WDDT"

	)

161 
	#ACPI_SIG_WDRT
 "WDRT"

	)

163 #ifde‡
ACPI_UNDEFINED_TABLES


167 
	#ACPI_SIG_ATKG
 "ATKG"

	)

168 
	#ACPI_SIG_GSCI
 "GSCI"

	)

169 
	#ACPI_SIG_IEIT
 "IEIT"

	)

176 #¥agm®
∑ck
(1)

200 
	sa˝i_èbÀ_asf


202 
ACPI_TABLE_HEADER
 
	mHódî
;

204 } 
	tACPI_TABLE_ASF
;

209 
	sa˝i_asf_hódî


211 
UINT8
 
	mTy≥
;

212 
UINT8
 
	mRe£rved
;

213 
UINT16
 
	mLígth
;

215 } 
	tACPI_ASF_HEADER
;

220 
	eA˝iAsfTy≥


222 
	mACPI_ASF_TYPE_INFO
 = 0,

223 
	mACPI_ASF_TYPE_ALERT
 = 1,

224 
	mACPI_ASF_TYPE_CONTROL
 = 2,

225 
	mACPI_ASF_TYPE_BOOT
 = 3,

226 
	mACPI_ASF_TYPE_ADDRESS
 = 4,

227 
	mACPI_ASF_TYPE_RESERVED
 = 5

236 
	sa˝i_asf_öfo


238 
ACPI_ASF_HEADER
 
	mHódî
;

239 
UINT8
 
	mMöRe£tVÆue
;

240 
UINT8
 
	mMöPﬁlI¡îvÆ
;

241 
UINT16
 
	mSy°emId
;

242 
UINT32
 
	mMfgId
;

243 
UINT8
 
	mFœgs
;

244 
UINT8
 
	mRe£rved2
[3];

246 } 
	tACPI_ASF_INFO
;

250 
	#ACPI_ASF_SMBUS_PROTOCOLS
 (1)

	)

255 
	sa˝i_asf_Æît


257 
ACPI_ASF_HEADER
 
	mHódî
;

258 
UINT8
 
	mAs£πMask
;

259 
UINT8
 
	mDós£πMask
;

260 
UINT8
 
	mAÀπs
;

261 
UINT8
 
	mD©aLígth
;

263 } 
	tACPI_ASF_ALERT
;

265 
	sa˝i_asf_Æît_d©a


267 
UINT8
 
	mAddªss
;

268 
UINT8
 
	mComm™d
;

269 
UINT8
 
	mMask
;

270 
UINT8
 
	mVÆue
;

271 
UINT8
 
	mSís‹Ty≥
;

272 
UINT8
 
	mTy≥
;

273 
UINT8
 
	mOff£t
;

274 
UINT8
 
	mSour˚Ty≥
;

275 
UINT8
 
	mSevîôy
;

276 
UINT8
 
	mSís‹Numbî
;

277 
UINT8
 
	mE¡ôy
;

278 
UINT8
 
	mIn°™˚
;

280 } 
	tACPI_ASF_ALERT_DATA
;

285 
	sa˝i_asf_ªmŸe


287 
ACPI_ASF_HEADER
 
	mHódî
;

288 
UINT8
 
	mC⁄åﬁs
;

289 
UINT8
 
	mD©aLígth
;

290 
UINT16
 
	mRe£rved2
;

292 } 
	tACPI_ASF_REMOTE
;

294 
	sa˝i_asf_c⁄åﬁ_d©a


296 
UINT8
 
	mFun˘i⁄
;

297 
UINT8
 
	mAddªss
;

298 
UINT8
 
	mComm™d
;

299 
UINT8
 
	mVÆue
;

301 } 
	tACPI_ASF_CONTROL_DATA
;

306 
	sa˝i_asf_rm˝


308 
ACPI_ASF_HEADER
 
	mHódî
;

309 
UINT8
 
	mC≠abûôõs
[7];

310 
UINT8
 
	mCom∂ëi⁄Code
;

311 
UINT32
 
	mE¡î¥i£Id
;

312 
UINT8
 
	mComm™d
;

313 
UINT16
 
	mP¨amëî
;

314 
UINT16
 
	mBoŸO±i⁄s
;

315 
UINT16
 
	mOemP¨amëîs
;

317 } 
	tACPI_ASF_RMCP
;

322 
	sa˝i_asf_addªss


324 
ACPI_ASF_HEADER
 
	mHódî
;

325 
UINT8
 
	mE¥omAddªss
;

326 
UINT8
 
	mDevi˚s
;

328 } 
	tACPI_ASF_ADDRESS
;

340 
	sa˝i_èbÀ_boŸ


342 
ACPI_TABLE_HEADER
 
	mHódî
;

343 
UINT8
 
	mCmosIndex
;

344 
UINT8
 
	mRe£rved
[3];

346 } 
	tACPI_TABLE_BOOT
;

358 
	sa˝i_èbÀ_c§t


360 
ACPI_TABLE_HEADER
 
	mHódî
;

362 } 
	tACPI_TABLE_CSRT
;

367 
	sa˝i_c§t_group


369 
UINT32
 
	mLígth
;

370 
UINT32
 
	mVíd‹Id
;

371 
UINT32
 
	mSubvíd‹Id
;

372 
UINT16
 
	mDevi˚Id
;

373 
UINT16
 
	mSubdevi˚Id
;

374 
UINT16
 
	mRevisi⁄
;

375 
UINT16
 
	mRe£rved
;

376 
UINT32
 
	mSh¨edInfoLígth
;

380 } 
	tACPI_CSRT_GROUP
;

384 
	sa˝i_c§t_sh¨ed_öfo


386 
UINT16
 
	mMaj‹Vîsi⁄
;

387 
UINT16
 
	mMö‹Vîsi⁄
;

388 
UINT32
 
	mMmioBa£Low
;

389 
UINT32
 
	mMmioBa£High
;

390 
UINT32
 
	mGsiI¡îru±
;

391 
UINT8
 
	mI¡îru±Pﬁ¨ôy
;

392 
UINT8
 
	mI¡îru±Mode
;

393 
UINT8
 
	mNumCh™√ls
;

394 
UINT8
 
	mDmaAddªssWidth
;

395 
UINT16
 
	mBa£Reque°Löe
;

396 
UINT16
 
	mNumH™dshakeSig«ls
;

397 
UINT32
 
	mMaxBlockSize
;

401 } 
	tACPI_CSRT_SHARED_INFO
;

405 
	sa˝i_c§t_des¸ùt‹


407 
UINT32
 
	mLígth
;

408 
UINT16
 
	mTy≥
;

409 
UINT16
 
	mSubty≥
;

410 
UINT32
 
	mUid
;

414 } 
	tACPI_CSRT_DESCRIPTOR
;

419 
	#ACPI_CSRT_TYPE_INTERRUPT
 0x0001

	)

420 
	#ACPI_CSRT_TYPE_TIMER
 0x0002

	)

421 
	#ACPI_CSRT_TYPE_DMA
 0x0003

	)

425 
	#ACPI_CSRT_XRUPT_LINE
 0x0000

	)

426 
	#ACPI_CSRT_XRUPT_CONTROLLER
 0x0001

	)

427 
	#ACPI_CSRT_TIMER
 0x0000

	)

428 
	#ACPI_CSRT_DMA_CHANNEL
 0x0000

	)

429 
	#ACPI_CSRT_DMA_CONTROLLER
 0x0001

	)

441 
	sa˝i_èbÀ_dbg2


443 
ACPI_TABLE_HEADER
 
	mHódî
;

444 
UINT32
 
	mInfoOff£t
;

445 
UINT32
 
	mInfoCou¡
;

447 } 
	tACPI_TABLE_DBG2
;

450 
	sa˝i_dbg2_hódî


452 
UINT32
 
	mInfoOff£t
;

453 
UINT32
 
	mInfoCou¡
;

455 } 
	tACPI_DBG2_HEADER
;

460 
	sa˝i_dbg2_devi˚


462 
UINT8
 
	mRevisi⁄
;

463 
UINT16
 
	mLígth
;

464 
UINT8
 
	mRegi°îCou¡
;

465 
UINT16
 
	mNamï©hLígth
;

466 
UINT16
 
	mNamï©hOff£t
;

467 
UINT16
 
	mOemD©aLígth
;

468 
UINT16
 
	mOemD©aOff£t
;

469 
UINT16
 
	mP‹tTy≥
;

470 
UINT16
 
	mP‹tSubty≥
;

471 
UINT16
 
	mRe£rved
;

472 
UINT16
 
	mBa£AddªssOff£t
;

473 
UINT16
 
	mAddªssSizeOff£t
;

481 } 
	tACPI_DBG2_DEVICE
;

485 
	#ACPI_DBG2_SERIAL_PORT
 0x8000

	)

486 
	#ACPI_DBG2_1394_PORT
 0x8001

	)

487 
	#ACPI_DBG2_USB_PORT
 0x8002

	)

488 
	#ACPI_DBG2_NET_PORT
 0x8003

	)

492 
	#ACPI_DBG2_16550_COMPATIBLE
 0x0000

	)

493 
	#ACPI_DBG2_16550_SUBSET
 0x0001

	)

495 
	#ACPI_DBG2_1394_STANDARD
 0x0000

	)

497 
	#ACPI_DBG2_USB_XHCI
 0x0000

	)

498 
	#ACPI_DBG2_USB_EHCI
 0x0001

	)

510 
	sa˝i_èbÀ_dbgp


512 
ACPI_TABLE_HEADER
 
	mHódî
;

513 
UINT8
 
	mTy≥
;

514 
UINT8
 
	mRe£rved
[3];

515 
ACPI_GENERIC_ADDRESS
 
	mDebugP‹t
;

517 } 
	tACPI_TABLE_DBGP
;

530 
	sa˝i_èbÀ_dm¨


532 
ACPI_TABLE_HEADER
 
	mHódî
;

533 
UINT8
 
	mWidth
;

534 
UINT8
 
	mFœgs
;

535 
UINT8
 
	mRe£rved
[10];

537 } 
	tACPI_TABLE_DMAR
;

541 
	#ACPI_DMAR_INTR_REMAP
 (1)

	)

546 
	sa˝i_dm¨_hódî


548 
UINT16
 
	mTy≥
;

549 
UINT16
 
	mLígth
;

551 } 
	tACPI_DMAR_HEADER
;

555 
	eA˝iDm¨Ty≥


557 
	mACPI_DMAR_TYPE_HARDWARE_UNIT
 = 0,

558 
	mACPI_DMAR_TYPE_RESERVED_MEMORY
 = 1,

559 
	mACPI_DMAR_TYPE_ROOT_ATS
 = 2,

560 
	mACPI_DMAR_TYPE_HARDWARE_AFFINITY
 = 3,

561 
	mACPI_DMAR_TYPE_NAMESPACE
 = 4,

562 
	mACPI_DMAR_TYPE_RESERVED
 = 5

568 
	sa˝i_dm¨_devi˚_sc›e


570 
UINT8
 
	mE¡ryTy≥
;

571 
UINT8
 
	mLígth
;

572 
UINT16
 
	mRe£rved
;

573 
UINT8
 
	mEnumî©i⁄Id
;

574 
UINT8
 
	mBus
;

576 } 
	tACPI_DMAR_DEVICE_SCOPE
;

580 
	eA˝iDm¨Sc›eTy≥


582 
	mACPI_DMAR_SCOPE_TYPE_NOT_USED
 = 0,

583 
	mACPI_DMAR_SCOPE_TYPE_ENDPOINT
 = 1,

584 
	mACPI_DMAR_SCOPE_TYPE_BRIDGE
 = 2,

585 
	mACPI_DMAR_SCOPE_TYPE_IOAPIC
 = 3,

586 
	mACPI_DMAR_SCOPE_TYPE_HPET
 = 4,

587 
	mACPI_DMAR_SCOPE_TYPE_NAMESPACE
 = 5,

588 
	mACPI_DMAR_SCOPE_TYPE_RESERVED
 = 6

591 
	sa˝i_dm¨_pci_∑th


593 
UINT8
 
	mDevi˚
;

594 
UINT8
 
	mFun˘i⁄
;

596 } 
	tACPI_DMAR_PCI_PATH
;

605 
	sa˝i_dm¨_h¨dw¨e_unô


607 
ACPI_DMAR_HEADER
 
	mHódî
;

608 
UINT8
 
	mFœgs
;

609 
UINT8
 
	mRe£rved
;

610 
UINT16
 
	mSegmít
;

611 
UINT64
 
	mAddªss
;

613 } 
	tACPI_DMAR_HARDWARE_UNIT
;

617 
	#ACPI_DMAR_INCLUDE_ALL
 (1)

	)

622 
	sa˝i_dm¨_ª£rved_mem‹y


624 
ACPI_DMAR_HEADER
 
	mHódî
;

625 
UINT16
 
	mRe£rved
;

626 
UINT16
 
	mSegmít
;

627 
UINT64
 
	mBa£Addªss
;

628 
UINT64
 
	mEndAddªss
;

630 } 
	tACPI_DMAR_RESERVED_MEMORY
;

634 
	#ACPI_DMAR_ALLOW_ALL
 (1)

	)

639 
	sa˝i_dm¨_©§


641 
ACPI_DMAR_HEADER
 
	mHódî
;

642 
UINT8
 
	mFœgs
;

643 
UINT8
 
	mRe£rved
;

644 
UINT16
 
	mSegmít
;

646 } 
	tACPI_DMAR_ATSR
;

650 
	#ACPI_DMAR_ALL_PORTS
 (1)

	)

655 
	sa˝i_dm¨_rhß


657 
ACPI_DMAR_HEADER
 
	mHódî
;

658 
UINT32
 
	mRe£rved
;

659 
UINT64
 
	mBa£Addªss
;

660 
UINT32
 
	mProximôyDomaö
;

662 } 
	tACPI_DMAR_RHSA
;

667 
	sa˝i_dm¨_™dd


669 
ACPI_DMAR_HEADER
 
	mHódî
;

670 
UINT8
 
	mRe£rved
[3];

671 
UINT8
 
	mDevi˚Numbî
;

672 
	mDevi˚Name
[1];

674 } 
	tACPI_DMAR_ANDD
;

687 
	sa˝i_èbÀ_h≥t


689 
ACPI_TABLE_HEADER
 
	mHódî
;

690 
UINT32
 
	mId
;

691 
ACPI_GENERIC_ADDRESS
 
	mAddªss
;

692 
UINT8
 
	mSequí˚
;

693 
UINT16
 
	mMöimumTick
;

694 
UINT8
 
	mFœgs
;

696 } 
	tACPI_TABLE_HPET
;

700 
	#ACPI_HPET_PAGE_PROTECT_MASK
 (3)

	)

704 
	eA˝iH≥tPagePrŸe˘


706 
	mACPI_HPET_NO_PAGE_PROTECT
 = 0,

707 
	mACPI_HPET_PAGE_PROTECT4
 = 1,

708 
	mACPI_HPET_PAGE_PROTECT64
 = 2

725 
	sa˝i_èbÀ_ib·


727 
ACPI_TABLE_HEADER
 
	mHódî
;

728 
UINT8
 
	mRe£rved
[12];

730 } 
	tACPI_TABLE_IBFT
;

735 
	sa˝i_ib·_hódî


737 
UINT8
 
	mTy≥
;

738 
UINT8
 
	mVîsi⁄
;

739 
UINT16
 
	mLígth
;

740 
UINT8
 
	mIndex
;

741 
UINT8
 
	mFœgs
;

743 } 
	tACPI_IBFT_HEADER
;

747 
	eA˝iIb·Ty≥


749 
	mACPI_IBFT_TYPE_NOT_USED
 = 0,

750 
	mACPI_IBFT_TYPE_CONTROL
 = 1,

751 
	mACPI_IBFT_TYPE_INITIATOR
 = 2,

752 
	mACPI_IBFT_TYPE_NIC
 = 3,

753 
	mACPI_IBFT_TYPE_TARGET
 = 4,

754 
	mACPI_IBFT_TYPE_EXTENSIONS
 = 5,

755 
	mACPI_IBFT_TYPE_RESERVED
 = 6

761 
	sa˝i_ib·_c⁄åﬁ


763 
ACPI_IBFT_HEADER
 
	mHódî
;

764 
UINT16
 
	mExãnsi⁄s
;

765 
UINT16
 
	mInôüt‹Off£t
;

766 
UINT16
 
	mNic0Off£t
;

767 
UINT16
 
	mT¨gë0Off£t
;

768 
UINT16
 
	mNic1Off£t
;

769 
UINT16
 
	mT¨gë1Off£t
;

771 } 
	tACPI_IBFT_CONTROL
;

773 
	sa˝i_ib·_öôüt‹


775 
ACPI_IBFT_HEADER
 
	mHódî
;

776 
UINT8
 
	mSnsSîvî
[16];

777 
UINT8
 
	mSÕSîvî
[16];

778 
UINT8
 
	mPrim¨ySîvî
[16];

779 
UINT8
 
	mSec⁄d¨ySîvî
[16];

780 
UINT16
 
	mNameLígth
;

781 
UINT16
 
	mNameOff£t
;

783 } 
	tACPI_IBFT_INITIATOR
;

785 
	sa˝i_ib·_nic


787 
ACPI_IBFT_HEADER
 
	mHódî
;

788 
UINT8
 
	mIpAddªss
[16];

789 
UINT8
 
	mSub√tMaskPªfix
;

790 
UINT8
 
	mOrigö
;

791 
UINT8
 
	mG©eway
[16];

792 
UINT8
 
	mPrim¨yDns
[16];

793 
UINT8
 
	mSec⁄d¨yDns
[16];

794 
UINT8
 
	mDh˝
[16];

795 
UINT16
 
	mVœn
;

796 
UINT8
 
	mMacAddªss
[6];

797 
UINT16
 
	mPciAddªss
;

798 
UINT16
 
	mNameLígth
;

799 
UINT16
 
	mNameOff£t
;

801 } 
	tACPI_IBFT_NIC
;

803 
	sa˝i_ib·_èrgë


805 
ACPI_IBFT_HEADER
 
	mHódî
;

806 
UINT8
 
	mT¨gëIpAddªss
[16];

807 
UINT16
 
	mT¨gëIpSockë
;

808 
UINT8
 
	mT¨gëBoŸLun
[8];

809 
UINT8
 
	mCh≠Ty≥
;

810 
UINT8
 
	mNicAssocüti⁄
;

811 
UINT16
 
	mT¨gëNameLígth
;

812 
UINT16
 
	mT¨gëNameOff£t
;

813 
UINT16
 
	mCh≠NameLígth
;

814 
UINT16
 
	mCh≠NameOff£t
;

815 
UINT16
 
	mCh≠Se¸ëLígth
;

816 
UINT16
 
	mCh≠Se¸ëOff£t
;

817 
UINT16
 
	mRevî£Ch≠NameLígth
;

818 
UINT16
 
	mRevî£Ch≠NameOff£t
;

819 
UINT16
 
	mRevî£Ch≠Se¸ëLígth
;

820 
UINT16
 
	mRevî£Ch≠Se¸ëOff£t
;

822 } 
	tACPI_IBFT_TARGET
;

835 
	sa˝i_èbÀ_ivrs


837 
ACPI_TABLE_HEADER
 
	mHódî
;

838 
UINT32
 
	mInfo
;

839 
UINT64
 
	mRe£rved
;

841 } 
	tACPI_TABLE_IVRS
;

845 
	#ACPI_IVRS_PHYSICAL_SIZE
 0x00007F00

	)

846 
	#ACPI_IVRS_VIRTUAL_SIZE
 0x003F8000

	)

847 
	#ACPI_IVRS_ATS_RESERVED
 0x00400000

	)

852 
	sa˝i_ivrs_hódî


854 
UINT8
 
	mTy≥
;

855 
UINT8
 
	mFœgs
;

856 
UINT16
 
	mLígth
;

857 
UINT16
 
	mDevi˚Id
;

859 } 
	tACPI_IVRS_HEADER
;

863 
	eA˝iIvrsTy≥


865 
	mACPI_IVRS_TYPE_HARDWARE
 = 0x10,

866 
	mACPI_IVRS_TYPE_MEMORY1
 = 0x20,

867 
	mACPI_IVRS_TYPE_MEMORY2
 = 0x21,

868 
	mACPI_IVRS_TYPE_MEMORY3
 = 0x22

873 
	#ACPI_IVHD_TT_ENABLE
 (1)

	)

874 
	#ACPI_IVHD_PASS_PW
 (1<<1)

	)

875 
	#ACPI_IVHD_RES_PASS_PW
 (1<<2)

	)

876 
	#ACPI_IVHD_ISOC
 (1<<3)

	)

877 
	#ACPI_IVHD_IOTLB
 (1<<4)

	)

881 
	#ACPI_IVMD_UNITY
 (1)

	)

882 
	#ACPI_IVMD_READ
 (1<<1)

	)

883 
	#ACPI_IVMD_WRITE
 (1<<2)

	)

884 
	#ACPI_IVMD_EXCLUSION_RANGE
 (1<<3)

	)

893 
	sa˝i_ivrs_h¨dw¨e


895 
ACPI_IVRS_HEADER
 
	mHódî
;

896 
UINT16
 
	mC≠abûôyOff£t
;

897 
UINT64
 
	mBa£Addªss
;

898 
UINT16
 
	mPciSegmítGroup
;

899 
UINT16
 
	mInfo
;

900 
UINT32
 
	mRe£rved
;

902 } 
	tACPI_IVRS_HARDWARE
;

906 
	#ACPI_IVHD_MSI_NUMBER_MASK
 0x001F

	)

907 
	#ACPI_IVHD_UNIT_ID_MASK
 0x1F00

	)

916 
	sa˝i_ivrs_de_hódî


918 
UINT8
 
	mTy≥
;

919 
UINT16
 
	mId
;

920 
UINT8
 
	mD©aSëtög
;

922 } 
	tACPI_IVRS_DE_HEADER
;

926 
	#ACPI_IVHD_ENTRY_LENGTH
 0xC0

	)

930 
	eA˝iIvrsDevi˚E¡ryTy≥


934 
	mACPI_IVRS_TYPE_PAD4
 = 0,

935 
	mACPI_IVRS_TYPE_ALL
 = 1,

936 
	mACPI_IVRS_TYPE_SELECT
 = 2,

937 
	mACPI_IVRS_TYPE_START
 = 3,

938 
	mACPI_IVRS_TYPE_END
 = 4,

942 
	mACPI_IVRS_TYPE_PAD8
 = 64,

943 
	mACPI_IVRS_TYPE_NOT_USED
 = 65,

944 
	mACPI_IVRS_TYPE_ALIAS_SELECT
 = 66,

945 
	mACPI_IVRS_TYPE_ALIAS_START
 = 67,

946 
	mACPI_IVRS_TYPE_EXT_SELECT
 = 70,

947 
	mACPI_IVRS_TYPE_EXT_START
 = 71,

948 
	mACPI_IVRS_TYPE_SPECIAL
 = 72

953 
	#ACPI_IVHD_INIT_PASS
 (1)

	)

954 
	#ACPI_IVHD_EINT_PASS
 (1<<1)

	)

955 
	#ACPI_IVHD_NMI_PASS
 (1<<2)

	)

956 
	#ACPI_IVHD_SYSTEM_MGMT
 (3<<4)

	)

957 
	#ACPI_IVHD_LINT0_PASS
 (1<<6)

	)

958 
	#ACPI_IVHD_LINT1_PASS
 (1<<7)

	)

963 
	sa˝i_ivrs_devi˚4


965 
ACPI_IVRS_DE_HEADER
 
	mHódî
;

967 } 
	tACPI_IVRS_DEVICE4
;

971 
	sa˝i_ivrs_devi˚8a


973 
ACPI_IVRS_DE_HEADER
 
	mHódî
;

974 
UINT8
 
	mRe£rved1
;

975 
UINT16
 
	mU£dId
;

976 
UINT8
 
	mRe£rved2
;

978 } 
	tACPI_IVRS_DEVICE8A
;

982 
	sa˝i_ivrs_devi˚8b


984 
ACPI_IVRS_DE_HEADER
 
	mHódî
;

985 
UINT32
 
	mExãndedD©a
;

987 } 
	tACPI_IVRS_DEVICE8B
;

991 
	#ACPI_IVHD_ATS_DISABLED
 (1<<31)

	)

995 
	sa˝i_ivrs_devi˚8c


997 
ACPI_IVRS_DE_HEADER
 
	mHódî
;

998 
UINT8
 
	mH™dÀ
;

999 
UINT16
 
	mU£dId
;

1000 
UINT8
 
	mV¨õty
;

1002 } 
	tACPI_IVRS_DEVICE8C
;

1006 
	#ACPI_IVHD_IOAPIC
 1

	)

1007 
	#ACPI_IVHD_HPET
 2

	)

1012 
	sa˝i_ivrs_mem‹y


1014 
ACPI_IVRS_HEADER
 
	mHódî
;

1015 
UINT16
 
	mAuxD©a
;

1016 
UINT64
 
	mRe£rved
;

1017 
UINT64
 
	mSèπAddªss
;

1018 
UINT64
 
	mMem‹yLígth
;

1020 } 
	tACPI_IVRS_MEMORY
;

1031 
	sa˝i_èbÀ_Õô


1033 
ACPI_TABLE_HEADER
 
	mHódî
;

1035 } 
	tACPI_TABLE_LPIT
;

1040 
	sa˝i_Õô_hódî


1042 
UINT32
 
	mTy≥
;

1043 
UINT32
 
	mLígth
;

1044 
UINT16
 
	mUniqueId
;

1045 
UINT16
 
	mRe£rved
;

1046 
UINT32
 
	mFœgs
;

1048 } 
	tACPI_LPIT_HEADER
;

1052 
	eA˝iLpôTy≥


1054 
	mACPI_LPIT_TYPE_NATIVE_CSTATE
 = 0x00,

1055 
	mACPI_LPIT_TYPE_SIMPLE_IO
 = 0x01,

1056 
	mACPI_LPIT_TYPE_RESERVED
 = 0x02

1061 
	#ACPI_LPIT_STATE_DISABLED
 (1)

	)

1062 
	#ACPI_LPIT_NO_COUNTER
 (1<<1)

	)

1070 
	sa˝i_Õô_«tive


1072 
ACPI_LPIT_HEADER
 
	mHódî
;

1073 
ACPI_GENERIC_ADDRESS
 
	mE¡ryTriggî
;

1074 
UINT32
 
	mResidícy
;

1075 
UINT32
 
	mL©ícy
;

1076 
ACPI_GENERIC_ADDRESS
 
	mResidícyCou¡î
;

1077 
UINT64
 
	mCou¡îFªquícy
;

1079 } 
	tACPI_LPIT_NATIVE
;

1084 
	sa˝i_Õô_io


1086 
ACPI_LPIT_HEADER
 
	mHódî
;

1087 
ACPI_GENERIC_ADDRESS
 
	mE¡ryTriggî
;

1088 
UINT32
 
	mTriggîA˘i⁄
;

1089 
UINT64
 
	mTriggîVÆue
;

1090 
UINT64
 
	mTriggîMask
;

1091 
ACPI_GENERIC_ADDRESS
 
	mMöimumIdÀSèã
;

1092 
UINT32
 
	mResidícy
;

1093 
UINT32
 
	mL©ícy
;

1094 
ACPI_GENERIC_ADDRESS
 
	mResidícyCou¡î
;

1095 
UINT64
 
	mCou¡îFªquícy
;

1097 } 
	tACPI_LPIT_IO
;

1109 
	sa˝i_èbÀ_mcfg


1111 
ACPI_TABLE_HEADER
 
	mHódî
;

1112 
UINT8
 
	mRe£rved
[8];

1114 } 
	tACPI_TABLE_MCFG
;

1119 
	sa˝i_mcfg_Æloˇti⁄


1121 
UINT64
 
	mAddªss
;

1122 
UINT16
 
	mPciSegmít
;

1123 
UINT8
 
	mSèπBusNumbî
;

1124 
UINT8
 
	mEndBusNumbî
;

1125 
UINT32
 
	mRe£rved
;

1127 } 
	tACPI_MCFG_ALLOCATION
;

1140 
	sa˝i_èbÀ_mchi


1142 
ACPI_TABLE_HEADER
 
	mHódî
;

1143 
UINT8
 
	mI¡îÁ˚Ty≥
;

1144 
UINT8
 
	mPrŸocﬁ
;

1145 
UINT64
 
	mPrŸocﬁD©a
;

1146 
UINT8
 
	mI¡îru±Ty≥
;

1147 
UINT8
 
	mG≥
;

1148 
UINT8
 
	mPciDevi˚Fœg
;

1149 
UINT32
 
	mGlobÆI¡îru±
;

1150 
ACPI_GENERIC_ADDRESS
 
	mC⁄åﬁRegi°î
;

1151 
UINT8
 
	mPciSegmít
;

1152 
UINT8
 
	mPciBus
;

1153 
UINT8
 
	mPciDevi˚
;

1154 
UINT8
 
	mPciFun˘i⁄
;

1156 } 
	tACPI_TABLE_MCHI
;

1170 
	sa˝i_èbÀ_msdm


1172 
ACPI_TABLE_HEADER
 
	mHódî
;

1174 } 
	tACPI_TABLE_MSDM
;

1188 
	sa˝i_èbÀ_mtmr


1190 
ACPI_TABLE_HEADER
 
	mHódî
;

1192 } 
	tACPI_TABLE_MTMR
;

1196 
	sa˝i_mtmr_íåy


1198 
ACPI_GENERIC_ADDRESS
 
	mPhysiˇlAddªss
;

1199 
UINT32
 
	mFªquícy
;

1200 
UINT32
 
	mIrq
;

1202 } 
	tACPI_MTMR_ENTRY
;

1216 
	sa˝i_èbÀ_¶ic


1218 
ACPI_TABLE_HEADER
 
	mHódî
;

1220 } 
	tACPI_TABLE_SLIC
;

1233 
	sa˝i_èbÀ_•¸


1235 
ACPI_TABLE_HEADER
 
	mHódî
;

1236 
UINT8
 
	mI¡îÁ˚Ty≥
;

1237 
UINT8
 
	mRe£rved
[3];

1238 
ACPI_GENERIC_ADDRESS
 
	mSîülP‹t
;

1239 
UINT8
 
	mI¡îru±Ty≥
;

1240 
UINT8
 
	mPcI¡îru±
;

1241 
UINT32
 
	mI¡îru±
;

1242 
UINT8
 
	mBaudR©e
;

1243 
UINT8
 
	mP¨ôy
;

1244 
UINT8
 
	mSt›Bôs
;

1245 
UINT8
 
	mFlowC⁄åﬁ
;

1246 
UINT8
 
	mTîmöÆTy≥
;

1247 
UINT8
 
	mRe£rved1
;

1248 
UINT16
 
	mPciDevi˚Id
;

1249 
UINT16
 
	mPciVíd‹Id
;

1250 
UINT8
 
	mPciBus
;

1251 
UINT8
 
	mPciDevi˚
;

1252 
UINT8
 
	mPciFun˘i⁄
;

1253 
UINT32
 
	mPciFœgs
;

1254 
UINT8
 
	mPciSegmít
;

1255 
UINT32
 
	mRe£rved2
;

1257 } 
	tACPI_TABLE_SPCR
;

1261 
	#ACPI_SPCR_DO_NOT_DISABLE
 (1)

	)

1275 
	sa˝i_èbÀ_•mi


1277 
ACPI_TABLE_HEADER
 
	mHódî
;

1278 
UINT8
 
	mI¡îÁ˚Ty≥
;

1279 
UINT8
 
	mRe£rved
;

1280 
UINT16
 
	mS≥cRevisi⁄
;

1281 
UINT8
 
	mI¡îru±Ty≥
;

1282 
UINT8
 
	mG≥Numbî
;

1283 
UINT8
 
	mRe£rved1
;

1284 
UINT8
 
	mPciDevi˚Fœg
;

1285 
UINT32
 
	mI¡îru±
;

1286 
ACPI_GENERIC_ADDRESS
 
	mIpmiRegi°î
;

1287 
UINT8
 
	mPciSegmít
;

1288 
UINT8
 
	mPciBus
;

1289 
UINT8
 
	mPciDevi˚
;

1290 
UINT8
 
	mPciFun˘i⁄
;

1291 
UINT8
 
	mRe£rved2
;

1293 } 
	tACPI_TABLE_SPMI
;

1297 
	eA˝iSpmiI¡îÁ˚Ty≥s


1299 
	mACPI_SPMI_NOT_USED
 = 0,

1300 
	mACPI_SPMI_KEYBOARD
 = 1,

1301 
	mACPI_SPMI_SMI
 = 2,

1302 
	mACPI_SPMI_BLOCK_TRANSFER
 = 3,

1303 
	mACPI_SPMI_SMBUS
 = 4,

1304 
	mACPI_SPMI_RESERVED
 = 5

1318 
	sa˝i_èbÀ_t˝a


1320 
ACPI_TABLE_HEADER
 
	mHódî
;

1321 
UINT16
 
	mRe£rved
;

1322 
UINT32
 
	mMaxLogLígth
;

1323 
UINT64
 
	mLogAddªss
;

1325 } 
	tACPI_TABLE_TCPA
;

1338 
	sa˝i_èbÀ_uefi


1340 
ACPI_TABLE_HEADER
 
	mHódî
;

1341 
UINT8
 
	mIdítifõr
[16];

1342 
UINT16
 
	mD©aOff£t
;

1344 } 
	tACPI_TABLE_UEFI
;

1358 
	sa˝i_èbÀ_vπc


1360 
ACPI_TABLE_HEADER
 
	mHódî
;

1362 } 
	tACPI_TABLE_VRTC
;

1366 
	sa˝i_vπc_íåy


1368 
ACPI_GENERIC_ADDRESS
 
	mPhysiˇlAddªss
;

1369 
UINT32
 
	mIrq
;

1371 } 
	tACPI_VRTC_ENTRY
;

1383 
	sa˝i_èbÀ_w´t


1385 
ACPI_TABLE_HEADER
 
	mHódî
;

1386 
UINT32
 
	mFœgs
;

1388 } 
	tACPI_TABLE_WAET
;

1392 
	#ACPI_WAET_RTC_NO_ACK
 (1Ë

	)

1393 
	#ACPI_WAET_TIMER_ONE_READ
 (1<<1Ë

	)

1406 
	sa˝i_èbÀ_wd©


1408 
ACPI_TABLE_HEADER
 
	mHódî
;

1409 
UINT32
 
	mHódîLígth
;

1410 
UINT16
 
	mPciSegmít
;

1411 
UINT8
 
	mPciBus
;

1412 
UINT8
 
	mPciDevi˚
;

1413 
UINT8
 
	mPciFun˘i⁄
;

1414 
UINT8
 
	mRe£rved
[3];

1415 
UINT32
 
	mTimîPîiod
;

1416 
UINT32
 
	mMaxCou¡
;

1417 
UINT32
 
	mMöCou¡
;

1418 
UINT8
 
	mFœgs
;

1419 
UINT8
 
	mRe£rved2
[3];

1420 
UINT32
 
	mE¡rõs
;

1422 } 
	tACPI_TABLE_WDAT
;

1426 
	#ACPI_WDAT_ENABLED
 (1)

	)

1427 
	#ACPI_WDAT_STOPPED
 0x80

	)

1432 
	sa˝i_wd©_íåy


1434 
UINT8
 
	mA˘i⁄
;

1435 
UINT8
 
	mIn°ru˘i⁄
;

1436 
UINT16
 
	mRe£rved
;

1437 
ACPI_GENERIC_ADDRESS
 
	mRegi°îRegi⁄
;

1438 
UINT32
 
	mVÆue
;

1439 
UINT32
 
	mMask
;

1441 } 
	tACPI_WDAT_ENTRY
;

1445 
	eA˝iWd©A˘i⁄s


1447 
	mACPI_WDAT_RESET
 = 1,

1448 
	mACPI_WDAT_GET_CURRENT_COUNTDOWN
 = 4,

1449 
	mACPI_WDAT_GET_COUNTDOWN
 = 5,

1450 
	mACPI_WDAT_SET_COUNTDOWN
 = 6,

1451 
	mACPI_WDAT_GET_RUNNING_STATE
 = 8,

1452 
	mACPI_WDAT_SET_RUNNING_STATE
 = 9,

1453 
	mACPI_WDAT_GET_STOPPED_STATE
 = 10,

1454 
	mACPI_WDAT_SET_STOPPED_STATE
 = 11,

1455 
	mACPI_WDAT_GET_REBOOT
 = 16,

1456 
	mACPI_WDAT_SET_REBOOT
 = 17,

1457 
	mACPI_WDAT_GET_SHUTDOWN
 = 18,

1458 
	mACPI_WDAT_SET_SHUTDOWN
 = 19,

1459 
	mACPI_WDAT_GET_STATUS
 = 32,

1460 
	mACPI_WDAT_SET_STATUS
 = 33,

1461 
	mACPI_WDAT_ACTION_RESERVED
 = 34

1466 
	eA˝iWd©In°ru˘i⁄s


1468 
	mACPI_WDAT_READ_VALUE
 = 0,

1469 
	mACPI_WDAT_READ_COUNTDOWN
 = 1,

1470 
	mACPI_WDAT_WRITE_VALUE
 = 2,

1471 
	mACPI_WDAT_WRITE_COUNTDOWN
 = 3,

1472 
	mACPI_WDAT_INSTRUCTION_RESERVED
 = 4,

1473 
	mACPI_WDAT_PRESERVE_REGISTER
 = 0x80

1487 
	sa˝i_èbÀ_wddt


1489 
ACPI_TABLE_HEADER
 
	mHódî
;

1490 
UINT16
 
	mS≥cVîsi⁄
;

1491 
UINT16
 
	mTabÀVîsi⁄
;

1492 
UINT16
 
	mPciVíd‹Id
;

1493 
ACPI_GENERIC_ADDRESS
 
	mAddªss
;

1494 
UINT16
 
	mMaxCou¡
;

1495 
UINT16
 
	mMöCou¡
;

1496 
UINT16
 
	mPîiod
;

1497 
UINT16
 
	mSètus
;

1498 
UINT16
 
	mC≠abûôy
;

1500 } 
	tACPI_TABLE_WDDT
;

1504 
	#ACPI_WDDT_AVAILABLE
 (1)

	)

1505 
	#ACPI_WDDT_ACTIVE
 (1<<1)

	)

1506 
	#ACPI_WDDT_TCO_OS_OWNED
 (1<<2)

	)

1507 
	#ACPI_WDDT_USER_RESET
 (1<<11)

	)

1508 
	#ACPI_WDDT_WDT_RESET
 (1<<12)

	)

1509 
	#ACPI_WDDT_POWER_FAIL
 (1<<13)

	)

1510 
	#ACPI_WDDT_UNKNOWN_RESET
 (1<<14)

	)

1514 
	#ACPI_WDDT_AUTO_RESET
 (1)

	)

1515 
	#ACPI_WDDT_ALERT_SUPPORT
 (1<<1)

	)

1528 
	sa˝i_èbÀ_wdπ


1530 
ACPI_TABLE_HEADER
 
	mHódî
;

1531 
ACPI_GENERIC_ADDRESS
 
	mC⁄åﬁRegi°î
;

1532 
ACPI_GENERIC_ADDRESS
 
	mCou¡Regi°î
;

1533 
UINT16
 
	mPciDevi˚Id
;

1534 
UINT16
 
	mPciVíd‹Id
;

1535 
UINT8
 
	mPciBus
;

1536 
UINT8
 
	mPciDevi˚
;

1537 
UINT8
 
	mPciFun˘i⁄
;

1538 
UINT8
 
	mPciSegmít
;

1539 
UINT16
 
	mMaxCou¡
;

1540 
UINT8
 
	mUnôs
;

1542 } 
	tACPI_TABLE_WDRT
;

1547 #¥agm®
∑ck
()

	@src/extern/acpica/source/include/actbl3.h

116 #i‚de‡
__ACTBL3_H__


117 
	#__ACTBL3_H__


	)

137 
	#ACPI_SIG_BGRT
 "BGRT"

	)

138 
	#ACPI_SIG_DRTM
 "DRTM"

	)

139 
	#ACPI_SIG_FPDT
 "FPDT"

	)

140 
	#ACPI_SIG_GTDT
 "GTDT"

	)

141 
	#ACPI_SIG_MPST
 "MPST"

	)

142 
	#ACPI_SIG_PCCT
 "PCCT"

	)

143 
	#ACPI_SIG_PMTT
 "PMTT"

	)

144 
	#ACPI_SIG_RASF
 "RASF"

	)

145 
	#ACPI_SIG_TPM2
 "TPM2"

	)

147 
	#ACPI_SIG_S3PT
 "S3PT"

	)

148 
	#ACPI_SIG_PCCS
 "PCC"

	)

152 
	#ACPI_SIG_MATR
 "MATR"

	)

153 
	#ACPI_SIG_MSDM
 "MSDM"

	)

154 
	#ACPI_SIG_WPBT
 "WPBT"

	)

160 #¥agm®
∑ck
(1)

182 
	sa˝i_èbÀ_bgπ


184 
ACPI_TABLE_HEADER
 
	mHódî
;

185 
UINT16
 
	mVîsi⁄
;

186 
UINT8
 
	mSètus
;

187 
UINT8
 
	mImageTy≥
;

188 
UINT64
 
	mImageAddªss
;

189 
UINT32
 
	mImageOff£tX
;

190 
UINT32
 
	mImageOff£tY
;

192 } 
	tACPI_TABLE_BGRT
;

201 
	sa˝i_èbÀ_dπm


203 
ACPI_TABLE_HEADER
 
	mHódî
;

204 
UINT64
 
	mE¡ryBa£Addªss
;

205 
UINT64
 
	mE¡ryLígth
;

206 
UINT32
 
	mE¡ryAddªss32
;

207 
UINT64
 
	mE¡ryAddªss64
;

208 
UINT64
 
	mExôAddªss
;

209 
UINT64
 
	mLogAªaAddªss
;

210 
UINT32
 
	mLogAªaLígth
;

211 
UINT64
 
	mArchDïídítAddªss
;

212 
UINT32
 
	mFœgs
;

214 } 
	tACPI_TABLE_DRTM
;

218 
	sa˝i_dπm_vé_li°


220 
UINT32
 
	mVÆid©edTabÀLi°Cou¡
;

222 } 
	tACPI_DRTM_VTL_LIST
;

226 
	sa˝i_dπm_ªsour˚_li°


228 
UINT32
 
	mResour˚Li°Cou¡
;

230 } 
	tACPI_DRTM_RESOURCE_LIST
;

234 
	sa˝i_dπm_id_li°


236 
UINT32
 
	mIdLi°Cou¡
;

238 } 
	tACPI_DRTM_ID_LIST
;

248 
	sa˝i_èbÀ_Âdt


250 
ACPI_TABLE_HEADER
 
	mHódî
;

252 } 
	tACPI_TABLE_FPDT
;

257 
	sa˝i_Âdt_hódî


259 
UINT16
 
	mTy≥
;

260 
UINT8
 
	mLígth
;

261 
UINT8
 
	mRevisi⁄
;

263 } 
	tACPI_FPDT_HEADER
;

267 
	eA˝iFpdtTy≥


269 
	mACPI_FPDT_TYPE_BOOT
 = 0,

270 
	mACPI_FPDT_TYPE_S3PERF
 = 1

280 
	sa˝i_Âdt_boŸ


282 
ACPI_FPDT_HEADER
 
	mHódî
;

283 
UINT8
 
	mRe£rved
[4];

284 
UINT64
 
	mRe£tEnd
;

285 
UINT64
 
	mLﬂdSèπ
;

286 
UINT64
 
	mSèπupSèπ
;

287 
UINT64
 
	mExôSîvi˚sE¡ry
;

288 
UINT64
 
	mExôSîvi˚sExô
;

290 } 
	tACPI_FPDT_BOOT
;

295 
	sa˝i_Âdt_s3±_±r


297 
ACPI_FPDT_HEADER
 
	mHódî
;

298 
UINT8
 
	mRe£rved
[4];

299 
UINT64
 
	mAddªss
;

301 } 
	tACPI_FPDT_S3PT_PTR
;

308 
	sa˝i_èbÀ_s3±


310 
UINT8
 
	mSig«tuª
[4];

311 
UINT32
 
	mLígth
;

313 } 
	tACPI_TABLE_S3PT
;

319 
	sa˝i_s3±_hódî


321 
UINT16
 
	mTy≥
;

322 
UINT8
 
	mLígth
;

323 
UINT8
 
	mRevisi⁄
;

325 } 
	tACPI_S3PT_HEADER
;

329 
	eA˝iS3±Ty≥


331 
	mACPI_S3PT_TYPE_RESUME
 = 0,

332 
	mACPI_S3PT_TYPE_SUSPEND
 = 1

335 
	sa˝i_s3±_ªsume


337 
ACPI_S3PT_HEADER
 
	mHódî
;

338 
UINT32
 
	mResumeCou¡
;

339 
UINT64
 
	mFuŒResume
;

340 
UINT64
 
	mAvîageResume
;

342 } 
	tACPI_S3PT_RESUME
;

344 
	sa˝i_s3±_su•íd


346 
ACPI_S3PT_HEADER
 
	mHódî
;

347 
UINT64
 
	mSu•ídSèπ
;

348 
UINT64
 
	mSu•ídEnd
;

350 } 
	tACPI_S3PT_SUSPEND
;

360 
	sa˝i_èbÀ_gtdt


362 
ACPI_TABLE_HEADER
 
	mHódî
;

363 
UINT64
 
	mCou¡îBlockAddªsss
;

364 
UINT32
 
	mRe£rved
;

365 
UINT32
 
	mSecuªEl1I¡îru±
;

366 
UINT32
 
	mSecuªEl1Fœgs
;

367 
UINT32
 
	mN⁄SecuªEl1I¡îru±
;

368 
UINT32
 
	mN⁄SecuªEl1Fœgs
;

369 
UINT32
 
	mVútuÆTimîI¡îru±
;

370 
UINT32
 
	mVútuÆTimîFœgs
;

371 
UINT32
 
	mN⁄SecuªEl2I¡îru±
;

372 
UINT32
 
	mN⁄SecuªEl2Fœgs
;

373 
UINT64
 
	mCou¡îRódBlockAddªss
;

374 
UINT32
 
	mPœtf‹mTimîCou¡
;

375 
UINT32
 
	mPœtf‹mTimîOff£t
;

377 } 
	tACPI_TABLE_GTDT
;

381 
	#ACPI_GTDT_INTERRUPT_MODE
 (1)

	)

382 
	#ACPI_GTDT_INTERRUPT_POLARITY
 (1<<1)

	)

383 
	#ACPI_GTDT_ALWAYS_ON
 (1<<2)

	)

388 
	sa˝i_gtdt_hódî


390 
UINT8
 
	mTy≥
;

391 
UINT16
 
	mLígth
;

393 } 
	tACPI_GTDT_HEADER
;

397 
	eA˝iGtdtTy≥


399 
	mACPI_GTDT_TYPE_TIMER_BLOCK
 = 0,

400 
	mACPI_GTDT_TYPE_WATCHDOG
 = 1,

401 
	mACPI_GTDT_TYPE_RESERVED
 = 2

409 
	sa˝i_gtdt_timî_block


411 
ACPI_GTDT_HEADER
 
	mHódî
;

412 
UINT8
 
	mRe£rved
;

413 
UINT64
 
	mBlockAddªss
;

414 
UINT32
 
	mTimîCou¡
;

415 
UINT32
 
	mTimîOff£t
;

417 } 
	tACPI_GTDT_TIMER_BLOCK
;

421 
	sa˝i_gtdt_timî_íåy


423 
UINT8
 
	mFømeNumbî
;

424 
UINT8
 
	mRe£rved
[3];

425 
UINT64
 
	mBa£Addªss
;

426 
UINT64
 
	mEl0Ba£Addªss
;

427 
UINT32
 
	mTimîI¡îru±
;

428 
UINT32
 
	mTimîFœgs
;

429 
UINT32
 
	mVútuÆTimîI¡îru±
;

430 
UINT32
 
	mVútuÆTimîFœgs
;

431 
UINT32
 
	mComm⁄Fœgs
;

433 } 
	tACPI_GTDT_TIMER_ENTRY
;

437 
	#ACPI_GTDT_GT_IRQ_MODE
 (1)

	)

438 
	#ACPI_GTDT_GT_IRQ_POLARITY
 (1<<1)

	)

442 
	#ACPI_GTDT_GT_IS_SECURE_TIMER
 (1)

	)

443 
	#ACPI_GTDT_GT_ALWAYS_ON
 (1<<1)

	)

448 
	sa˝i_gtdt_w©chdog


450 
ACPI_GTDT_HEADER
 
	mHódî
;

451 
UINT8
 
	mRe£rved
;

452 
UINT64
 
	mRe‰eshFømeAddªss
;

453 
UINT64
 
	mC⁄åﬁFømeAddªss
;

454 
UINT32
 
	mTimîI¡îru±
;

455 
UINT32
 
	mTimîFœgs
;

457 } 
	tACPI_GTDT_WATCHDOG
;

461 
	#ACPI_GTDT_WATCHDOG_IRQ_MODE
 (1)

	)

462 
	#ACPI_GTDT_WATCHDOG_IRQ_POLARITY
 (1<<1)

	)

463 
	#ACPI_GTDT_WATCHDOG_SECURE
 (1<<2)

	)

473 
	#ACPI_MPST_CHANNEL_INFO
 \

474 
UINT8
 
Ch™√lId
; \

475 
UINT8
 
Re£rved1
[3]; \

476 
UINT16
 
PowîNodeCou¡
; \

477 
UINT16
 
Re£rved2
;

	)

481 
	sa˝i_èbÀ_mp°


483 
ACPI_TABLE_HEADER
 
	mHódî
;

484 
	mACPI_MPST_CHANNEL_INFO


486 } 
	tACPI_TABLE_MPST
;

491 
	sa˝i_mp°_ch™√l


493 
	mACPI_MPST_CHANNEL_INFO


495 } 
	tACPI_MPST_CHANNEL
;

500 
	sa˝i_mp°_powî_node


502 
UINT8
 
	mFœgs
;

503 
UINT8
 
	mRe£rved1
;

504 
UINT16
 
	mNodeId
;

505 
UINT32
 
	mLígth
;

506 
UINT64
 
	mR™geAddªss
;

507 
UINT64
 
	mR™geLígth
;

508 
UINT32
 
	mNumPowîSèãs
;

509 
UINT32
 
	mNumPhysiˇlComp⁄íts
;

511 } 
	tACPI_MPST_POWER_NODE
;

515 
	#ACPI_MPST_ENABLED
 1

	)

516 
	#ACPI_MPST_POWER_MANAGED
 2

	)

517 
	#ACPI_MPST_HOT_PLUG_CAPABLE
 4

	)

522 
	sa˝i_mp°_powî_°©e


524 
UINT8
 
	mPowîSèã
;

525 
UINT8
 
	mInfoIndex
;

527 } 
	tACPI_MPST_POWER_STATE
;

532 
	sa˝i_mp°_comp⁄ít


534 
UINT16
 
	mComp⁄ítId
;

536 } 
	tACPI_MPST_COMPONENT
;

541 
	sa˝i_mp°_d©a_hdr


543 
UINT16
 
	mCh¨a˘îi°icsCou¡
;

544 
UINT16
 
	mRe£rved
;

546 } 
	tACPI_MPST_DATA_HDR
;

548 
	sa˝i_mp°_powî_d©a


550 
UINT8
 
	mSåu˘uªId
;

551 
UINT8
 
	mFœgs
;

552 
UINT16
 
	mRe£rved1
;

553 
UINT32
 
	mAvîagePowî
;

554 
UINT32
 
	mPowîSavög
;

555 
UINT64
 
	mExôL©ícy
;

556 
UINT64
 
	mRe£rved2
;

558 } 
	tACPI_MPST_POWER_DATA
;

562 
	#ACPI_MPST_PRESERVE
 1

	)

563 
	#ACPI_MPST_AUTOENTRY
 2

	)

564 
	#ACPI_MPST_AUTOEXIT
 4

	)

569 
	sa˝i_mp°_sh¨ed


571 
UINT32
 
	mSig«tuª
;

572 
UINT16
 
	mPccComm™d
;

573 
UINT16
 
	mPccSètus
;

574 
UINT32
 
	mComm™dRegi°î
;

575 
UINT32
 
	mSètusRegi°î
;

576 
UINT32
 
	mPowîSèãId
;

577 
UINT32
 
	mPowîNodeId
;

578 
UINT64
 
	mE√rgyC⁄sumed
;

579 
UINT64
 
	mAvîagePowî
;

581 } 
	tACPI_MPST_SHARED
;

591 
	sa˝i_èbÀ_pc˘


593 
ACPI_TABLE_HEADER
 
	mHódî
;

594 
UINT32
 
	mFœgs
;

595 
UINT64
 
	mRe£rved
;

597 } 
	tACPI_TABLE_PCCT
;

601 
	#ACPI_PCCT_DOORBELL
 1

	)

605 
	eA˝iPc˘Ty≥


607 
	mACPI_PCCT_TYPE_GENERIC_SUBSPACE
 = 0,

608 
	mACPI_PCCT_TYPE_HW_REDUCED_SUBSPACE
 = 1,

609 
	mACPI_PCCT_TYPE_RESERVED
 = 2

618 
	sa˝i_pc˘_sub•a˚


620 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

621 
UINT8
 
	mRe£rved
[6];

622 
UINT64
 
	mBa£Addªss
;

623 
UINT64
 
	mLígth
;

624 
ACPI_GENERIC_ADDRESS
 
	mDo‹bñlRegi°î
;

625 
UINT64
 
	mPª£rveMask
;

626 
UINT64
 
	mWrôeMask
;

627 
UINT32
 
	mL©ícy
;

628 
UINT32
 
	mMaxAc˚ssR©e
;

629 
UINT16
 
	mMöTu∫¨oundTime
;

631 } 
	tACPI_PCCT_SUBSPACE
;

636 
	sa˝i_pc˘_hw_ªdu˚d


638 
ACPI_SUBTABLE_HEADER
 
	mHódî
;

639 
UINT32
 
	mDo‹bñlI¡îru±
;

640 
UINT8
 
	mFœgs
;

641 
UINT8
 
	mRe£rved
;

642 
UINT64
 
	mBa£Addªss
;

643 
UINT64
 
	mLígth
;

644 
ACPI_GENERIC_ADDRESS
 
	mDo‹bñlRegi°î
;

645 
UINT64
 
	mPª£rveMask
;

646 
UINT64
 
	mWrôeMask
;

647 
UINT32
 
	mL©ícy
;

648 
UINT32
 
	mMaxAc˚ssR©e
;

649 
UINT16
 
	mMöTu∫¨oundTime
;

651 } 
	tACPI_PCCT_HW_REDUCED
;

655 
	#ACPI_PCCT_INTERRUPT_POLARITY
 (1)

	)

656 
	#ACPI_PCCT_INTERRUPT_MODE
 (1<<1)

	)

665 
	sa˝i_pc˘_sh¨ed_mem‹y


667 
UINT32
 
	mSig«tuª
;

668 
UINT16
 
	mComm™d
;

669 
UINT16
 
	mSètus
;

671 } 
	tACPI_PCCT_SHARED_MEMORY
;

681 
	sa˝i_èbÀ_pmâ


683 
ACPI_TABLE_HEADER
 
	mHódî
;

684 
UINT32
 
	mRe£rved
;

686 } 
	tACPI_TABLE_PMTT
;

691 
	sa˝i_pmâ_hódî


693 
UINT8
 
	mTy≥
;

694 
UINT8
 
	mRe£rved1
;

695 
UINT16
 
	mLígth
;

696 
UINT16
 
	mFœgs
;

697 
UINT16
 
	mRe£rved2
;

699 } 
	tACPI_PMTT_HEADER
;

703 
	#ACPI_PMTT_TYPE_SOCKET
 0

	)

704 
	#ACPI_PMTT_TYPE_CONTROLLER
 1

	)

705 
	#ACPI_PMTT_TYPE_DIMM
 2

	)

706 
	#ACPI_PMTT_TYPE_RESERVED
 3

	)

710 
	#ACPI_PMTT_TOP_LEVEL
 0x0001

	)

711 
	#ACPI_PMTT_PHYSICAL
 0x0002

	)

712 
	#ACPI_PMTT_MEMORY_TYPE
 0x000C

	)

722 
	sa˝i_pmâ_sockë


724 
ACPI_PMTT_HEADER
 
	mHódî
;

725 
UINT16
 
	mSockëId
;

726 
UINT16
 
	mRe£rved
;

728 } 
	tACPI_PMTT_SOCKET
;

733 
	sa˝i_pmâ_c⁄åﬁÀr


735 
ACPI_PMTT_HEADER
 
	mHódî
;

736 
UINT32
 
	mRódL©ícy
;

737 
UINT32
 
	mWrôeL©ícy
;

738 
UINT32
 
	mRódB™dwidth
;

739 
UINT32
 
	mWrôeB™dwidth
;

740 
UINT16
 
	mAc˚ssWidth
;

741 
UINT16
 
	mAlignmít
;

742 
UINT16
 
	mRe£rved
;

743 
UINT16
 
	mDomaöCou¡
;

745 } 
	tACPI_PMTT_CONTROLLER
;

749 
	sa˝i_pmâ_domaö


751 
UINT32
 
	mProximôyDomaö
;

753 } 
	tACPI_PMTT_DOMAIN
;

758 
	sa˝i_pmâ_physiˇl_comp⁄ít


760 
ACPI_PMTT_HEADER
 
	mHódî
;

761 
UINT16
 
	mComp⁄ítId
;

762 
UINT16
 
	mRe£rved
;

763 
UINT32
 
	mMem‹ySize
;

764 
UINT32
 
	mBiosH™dÀ
;

766 } 
	tACPI_PMTT_PHYSICAL_COMPONENT
;

776 
	sa˝i_èbÀ_øsf


778 
ACPI_TABLE_HEADER
 
	mHódî
;

779 
UINT8
 
	mCh™√lId
[12];

781 } 
	tACPI_TABLE_RASF
;

785 
	sa˝i_øsf_sh¨ed_mem‹y


787 
UINT32
 
	mSig«tuª
;

788 
UINT16
 
	mComm™d
;

789 
UINT16
 
	mSètus
;

790 
UINT16
 
	mVîsi⁄
;

791 
UINT8
 
	mC≠abûôõs
[16];

792 
UINT8
 
	mSëC≠abûôõs
[16];

793 
UINT16
 
	mNumP¨amëîBlocks
;

794 
UINT32
 
	mSëC≠abûôõsSètus
;

796 } 
	tACPI_RASF_SHARED_MEMORY
;

800 
	sa˝i_øsf_∑ømëî_block


802 
UINT16
 
	mTy≥
;

803 
UINT16
 
	mVîsi⁄
;

804 
UINT16
 
	mLígth
;

806 } 
	tACPI_RASF_PARAMETER_BLOCK
;

810 
	sa˝i_øsf_∑åﬁ_s¸ub_∑ømëî


812 
ACPI_RASF_PARAMETER_BLOCK
 
	mHódî
;

813 
UINT16
 
	mP©rﬁS¸ubComm™d
;

814 
UINT64
 
	mReque°edAddªssR™ge
[2];

815 
UINT64
 
	mA˘uÆAddªssR™ge
[2];

816 
UINT16
 
	mFœgs
;

817 
UINT8
 
	mReque°edS≥ed
;

819 } 
	tACPI_RASF_PATROL_SCRUB_PARAMETER
;

823 
	#ACPI_RASF_SCRUBBER_RUNNING
 1

	)

824 
	#ACPI_RASF_SPEED
 (7<<1)

	)

825 
	#ACPI_RASF_SPEED_SLOW
 (0<<1)

	)

826 
	#ACPI_RASF_SPEED_MEDIUM
 (4<<1)

	)

827 
	#ACPI_RASF_SPEED_FAST
 (7<<1)

	)

831 
	eA˝iRasfComm™ds


833 
	mACPI_RASF_EXECUTE_RASF_COMMAND
 = 1

838 
	eA˝iRasfC≠abûiôõs


840 
	mACPI_HW_PATROL_SCRUB_SUPPORTED
 = 0,

841 
	mACPI_SW_PATROL_SCRUB_EXPOSED
 = 1

846 
	eA˝iRasfP©rﬁS¸ubComm™ds


848 
	mACPI_RASF_GET_PATROL_PARAMETERS
 = 1,

849 
	mACPI_RASF_START_PATROL_SCRUBBER
 = 2,

850 
	mACPI_RASF_STOP_PATROL_SCRUBBER
 = 3

855 
	#ACPI_RASF_GENERATE_SCI
 (1<<15)

	)

859 
	eA˝iRasfSètus


861 
	mACPI_RASF_SUCCESS
 = 0,

862 
	mACPI_RASF_NOT_VALID
 = 1,

863 
	mACPI_RASF_NOT_SUPPORTED
 = 2,

864 
	mACPI_RASF_BUSY
 = 3,

865 
	mACPI_RASF_FAILED
 = 4,

866 
	mACPI_RASF_ABORTED
 = 5,

867 
	mACPI_RASF_INVALID_DATA
 = 6

872 
	#ACPI_RASF_COMMAND_COMPLETE
 (1)

	)

873 
	#ACPI_RASF_SCI_DOORBELL
 (1<<1)

	)

874 
	#ACPI_RASF_ERROR
 (1<<2)

	)

875 
	#ACPI_RASF_STATUS
 (0x1F<<3)

	)

887 
	sa˝i_èbÀ_çm2


889 
ACPI_TABLE_HEADER
 
	mHódî
;

890 
UINT32
 
	mFœgs
;

891 
UINT64
 
	mC⁄åﬁAddªss
;

892 
UINT32
 
	mSèπMëhod
;

894 } 
	tACPI_TABLE_TPM2
;

898 
	sa˝i_çm2_c⁄åﬁ


900 
UINT32
 
	mRe£rved
;

901 
UINT32
 
	mEº‹
;

902 
UINT32
 
	mC™˚l
;

903 
UINT32
 
	mSèπ
;

904 
UINT64
 
	mI¡îru±C⁄åﬁ
;

905 
UINT32
 
	mComm™dSize
;

906 
UINT64
 
	mComm™dAddªss
;

907 
UINT32
 
	mRe•⁄£Size
;

908 
UINT64
 
	mRe•⁄£Addªss
;

910 } 
	tACPI_TPM2_CONTROL
;

915 #¥agm®
∑ck
()

	@src/extern/acpica/source/include/actypes.h

116 #i‚de‡
__ACTYPES_H__


117 
	#__ACTYPES_H__


	)

126 #i‚de‡
ACPI_MACHINE_WIDTH


127 #îr‹ 
ACPI_MACHINE_WIDTH
 
nŸ
 
deföed


136 
	#ACPI_UINT8_MAX
 (
UINT8
Ë(~((UINT8Ë0)Ë

	)

137 
	#ACPI_UINT16_MAX
 (
UINT16
)(~((UINT16Ë0)Ë

	)

138 
	#ACPI_UINT32_MAX
 (
UINT32
)(~((UINT32Ë0)Ë

	)

139 
	#ACPI_UINT64_MAX
 (
UINT64
)(~((UINT64Ë0)Ë

	)

140 
	#ACPI_ASCII_MAX
 0x7F

	)

197 #i‚de‡
ACPI_USE_SYSTEM_INTTYPES


199 
	tBOOLEAN
;

200 
	tUINT8
;

201 
	tUINT16
;

202 
	tINT16
;

203 
COMPILER_DEPENDENT_UINT64
 
	tUINT64
;

204 
COMPILER_DEPENDENT_INT64
 
	tINT64
;

216 
	#ACPI_THREAD_ID
 
UINT64


	)

225 #i‡
ACPI_MACHINE_WIDTH
 == 64

227 #i‚de‡
ACPI_USE_SYSTEM_INTTYPES


229 
	tUINT32
;

230 
	tINT32
;

235 
INT64
 
	tACPI_NATIVE_INT
;

236 
UINT64
 
	tACPI_SIZE
;

237 
UINT64
 
	tACPI_IO_ADDRESS
;

238 
UINT64
 
	tACPI_PHYSICAL_ADDRESS
;

240 
	#ACPI_MAX_PTR
 
ACPI_UINT64_MAX


	)

241 
	#ACPI_SIZE_MAX
 
ACPI_UINT64_MAX


	)

242 
	#ACPI_USE_NATIVE_DIVIDE


	)

253 #i‡
deföed
 (
__IA64__
Ë|| deföed (
__ü64__
)

254 
	#ACPI_MISALIGNMENT_NOT_SUPPORTED


	)

264 #ñi‡
ACPI_MACHINE_WIDTH
 == 32

266 #i‚de‡
ACPI_USE_SYSTEM_INTTYPES


268 
	tUINT32
;

269 
	tINT32
;

274 
INT32
 
	tACPI_NATIVE_INT
;

275 
UINT32
 
	tACPI_SIZE
;

277 #ifde‡
ACPI_32BIT_PHYSICAL_ADDRESS


284 
UINT32
 
	tACPI_IO_ADDRESS
;

285 
UINT32
 
	tACPI_PHYSICAL_ADDRESS
;

294 
UINT64
 
	tACPI_IO_ADDRESS
;

295 
UINT64
 
	tACPI_PHYSICAL_ADDRESS
;

299 
	#ACPI_MAX_PTR
 
ACPI_UINT32_MAX


	)

300 
	#ACPI_SIZE_MAX
 
ACPI_UINT32_MAX


	)

306 #îr‹ 
unknown
 
ACPI_MACHINE_WIDTH


321 #i‚de‡
ACPI_CPU_FLAGS


322 
	#ACPI_CPU_FLAGS
 
ACPI_SIZE


	)

327 #i‚de‡
ACPI_CACHE_T


328 #ifde‡
ACPI_USE_LOCAL_CACHE


329 
	#ACPI_CACHE_T
 
ACPI_MEMORY_LIST


	)

331 
	#ACPI_CACHE_T
 *

	)

338 #i‡(
ACPI_MUTEX_TYPE
 =
ACPI_BINARY_SEMAPHORE
)

343 
	#ACPI_MUTEX
 
ACPI_SEMAPHORE


	)

344 
	#A˝iOsCª©eMuãx
(
OutH™dÀ
Ë
	`A˝iOsCª©eSem≠h‹e
 (1, 1, OutH™dÀ)

	)

345 
	#A˝iOsDñëeMuãx
(
H™dÀ
Ë(Ë
	`A˝iOsDñëeSem≠h‹e
 (H™dÀ)

	)

346 
	#A˝iOsAcquúeMuãx
(
H™dÀ
,
Time
Ë
	`A˝iOsWaôSem≠h‹e
 (H™dÀ, 1, Time)

	)

347 
	#A˝iOsRñó£Muãx
(
H™dÀ
Ë(Ë
	`A˝iOsSig«lSem≠h‹e
 (H™dÀ, 1)

	)

352 #i‚de‡
ACPI_SPINLOCK


353 
	#ACPI_SPINLOCK
 *

	)

356 #i‚de‡
ACPI_SEMAPHORE


357 
	#ACPI_SEMAPHORE
 *

	)

360 #i‚de‡
ACPI_MUTEX


361 
	#ACPI_MUTEX
 *

	)

376 #i‚de‡
ACPI_UINTPTR_T


377 
	#ACPI_UINTPTR_T
 *

	)

384 #i‚de‡
ACPI_PRINTF_LIKE


385 
	#ACPI_PRINTF_LIKE
(
c
)

	)

394 #i‚de‡
ACPI_UNUSED_VAR


395 
	#ACPI_UNUSED_VAR


	)

407 #i‚de‡
ACPI_EXPORT_SYMBOL_INIT


408 
	#ACPI_EXPORT_SYMBOL_INIT
(
Symbﬁ
)

	)

411 #i‚de‡
ACPI_EXPORT_SYMBOL


412 
	#ACPI_EXPORT_SYMBOL
(
Symbﬁ
)

	)

419 #i‚de‡
ACPI_DEBUG_INITIALIZE


420 
	#ACPI_DEBUG_INITIALIZE
()

	)

430 #ifde‡
ACPI_NO_MEM_ALLOCATIONS


432 
	#ACPI_ALLOCATE
(
a
Ë
NULL


	)

433 
	#ACPI_ALLOCATE_ZEROED
(
a
Ë
NULL


	)

434 
	#ACPI_FREE
(
a
)

	)

435 
	#ACPI_MEM_TRACKING
(
a
)

	)

439 #ifde‡
ACPI_DBG_TRACK_ALLOCATIONS


443 
	#ACPI_MEM_PARAMETERS
 
_COMPONENT
, 
_A˝iModuÀName
, 
__LINE__


	)

444 
	#ACPI_ALLOCATE
(
a
Ë
	`A˝iUtAŒoˇãAndTøck
 ((
ACPI_SIZE
Ë◊), 
ACPI_MEM_PARAMETERS
)

	)

445 
	#ACPI_ALLOCATE_ZEROED
(
a
Ë
	`A˝iUtAŒoˇãZî€dAndTøck
 ((
ACPI_SIZE
Ë◊), 
ACPI_MEM_PARAMETERS
)

	)

446 
	#ACPI_FREE
(
a
Ë
	`A˝iUtFªeAndTøck
 (a, 
ACPI_MEM_PARAMETERS
)

	)

447 
	#ACPI_MEM_TRACKING
(
a
Ë
	)
a

453 
	#ACPI_ALLOCATE
(
a
Ë
	`A˝iOsAŒoˇã
 ((
ACPI_SIZE
Ë◊))

	)

454 
	#ACPI_ALLOCATE_ZEROED
(
a
Ë
	`A˝iOsAŒoˇãZî€d
 ((
ACPI_SIZE
Ë◊))

	)

455 
	#ACPI_FREE
(
a
Ë
	`A˝iOsFªe
 (a)

	)

456 
	#ACPI_MEM_TRACKING
(
a
)

	)

471 
	#ACPI_MAX_GPE_BLOCKS
 2

	)

475 
	#ACPI_GPE_REGISTER_WIDTH
 8

	)

476 
	#ACPI_PM1_REGISTER_WIDTH
 16

	)

477 
	#ACPI_PM2_REGISTER_WIDTH
 8

	)

478 
	#ACPI_PM_TIMER_WIDTH
 32

	)

479 
	#ACPI_RESET_REGISTER_WIDTH
 8

	)

483 
	#ACPI_NAME_SIZE
 4

	)

484 
	#ACPI_PATH_SEGMENT_LENGTH
 5

	)

485 
	#ACPI_PATH_SEPARATOR
 '.'

	)

489 
	#ACPI_OEM_ID_SIZE
 6

	)

490 
	#ACPI_OEM_TABLE_ID_SIZE
 8

	)

494 
	#PCI_ROOT_HID_STRING
 "PNP0A03"

	)

495 
	#PCI_EXPRESS_ROOT_HID_STRING
 "PNP0A08"

	)

499 
	#ACPI_PM_TIMER_FREQUENCY
 3579545

	)

510 #ifde‡
FALSE


511 #unde‡
FALSE


513 
	#FALSE
 (1 =0)

	)

515 #ifde‡
TRUE


516 #unde‡
TRUE


518 
	#TRUE
 (1 =1)

	)

520 #i‚de‡
NULL


521 
	#NULL
 (*Ë0

	)

528 
UINT32
 
	tACPI_STATUS
;

529 
UINT32
 
	tACPI_NAME
;

530 * 
	tACPI_STRING
;

531 * 
	tACPI_HANDLE
;

536 
	#ACPI_MSEC_PER_SEC
 1000L

	)

538 
	#ACPI_USEC_PER_MSEC
 1000L

	)

539 
	#ACPI_USEC_PER_SEC
 1000000L

	)

541 
	#ACPI_100NSEC_PER_USEC
 10L

	)

542 
	#ACPI_100NSEC_PER_MSEC
 10000L

	)

543 
	#ACPI_100NSEC_PER_SEC
 10000000L

	)

545 
	#ACPI_NSEC_PER_USEC
 1000L

	)

546 
	#ACPI_NSEC_PER_MSEC
 1000000L

	)

547 
	#ACPI_NSEC_PER_SEC
 1000000000L

	)

552 
UINT8
 
	tACPI_OWNER_ID
;

553 
	#ACPI_OWNER_ID_MAX
 0xFF

	)

556 
	#ACPI_INTEGER_BIT_SIZE
 64

	)

557 
	#ACPI_MAX_DECIMAL_DIGITS
 20

	)

558 
	#ACPI_MAX64_DECIMAL_DIGITS
 20

	)

559 
	#ACPI_MAX32_DECIMAL_DIGITS
 10

	)

560 
	#ACPI_MAX16_DECIMAL_DIGITS
 5

	)

561 
	#ACPI_MAX8_DECIMAL_DIGITS
 3

	)

566 
	#ACPI_ROOT_OBJECT
 
	`ACPI_ADD_PTR
 (
ACPI_HANDLE
, 
NULL
, 
ACPI_MAX_PTR
)

	)

567 
	#ACPI_WAIT_FOREVER
 0xFFFF

	)

568 
	#ACPI_DO_NOT_WAIT
 0

	)

580 
UINT64
 
	tACPI_INTEGER
;

581 
	#ACPI_INTEGER_MAX
 
ACPI_UINT64_MAX


	)

592 
	#ACPI_LOBYTE
(
I¡egî
Ë((
UINT8
Ë(
UINT16
)(I¡egî))

	)

593 
	#ACPI_HIBYTE
(
I¡egî
Ë((
UINT8
Ë(((
UINT16
)(I¡egî)Ë>> 8))

	)

594 
	#ACPI_LOWORD
(
I¡egî
Ë((
UINT16
Ë(
UINT32
)(I¡egî))

	)

595 
	#ACPI_HIWORD
(
I¡egî
Ë((
UINT16
)(((
UINT32
)(I¡egî)Ë>> 16))

	)

596 
	#ACPI_LODWORD
(
I¡egî64
Ë((
UINT32
Ë(
UINT64
)(I¡egî64))

	)

597 
	#ACPI_HIDWORD
(
I¡egî64
Ë((
UINT32
)(((
UINT64
)(I¡egî64)Ë>> 32))

	)

599 
	#ACPI_SET_BIT
(
èrgë
,
bô
Ë(—¨gëË|(bô))

	)

600 
	#ACPI_CLEAR_BIT
(
èrgë
,
bô
Ë(—¨gëË&~(bô))

	)

601 
	#ACPI_MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

602 
	#ACPI_MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

606 
	#ACPI_ARRAY_LENGTH
(
x
Ë((xË/ ((x)[0]))

	)

610 
	#ACPI_CAST_PTR
(
t
, 
p
Ë(— *Ë(
ACPI_UINTPTR_T
Ë’))

	)

611 
	#ACPI_CAST_INDIRECT_PTR
(
t
, 
p
Ë(— **Ë(
ACPI_UINTPTR_T
Ë’))

	)

612 
	#ACPI_ADD_PTR
(
t
, 
a
, 
b
Ë
	`ACPI_CAST_PTR
 (t, (ACPI_CAST_PTR (
UINT8
, (a)Ë+ (
ACPI_SIZE
)(b)))

	)

613 
	#ACPI_PTR_DIFF
(
a
, 
b
Ë(
ACPI_SIZE
Ë(
	`ACPI_CAST_PTR
 (
UINT8
, (a)Ë- ACPI_CAST_PTR (UINT8, (b)))

	)

617 
	#ACPI_TO_POINTER
(
i
Ë
	`ACPI_ADD_PTR
 (, (*Ë
NULL
,(
ACPI_SIZE
Ëi)

	)

618 
	#ACPI_TO_INTEGER
(
p
Ë
	`ACPI_PTR_DIFF
 (p, (*Ë
NULL
)

	)

619 
	#ACPI_OFFSET
(
d
, 
f
Ë
	`ACPI_PTR_DIFF
 (&(((d *Ë0)->f), (*Ë
NULL
)

	)

620 
	#ACPI_PHYSADDR_TO_PTR
(
i
Ë
	`ACPI_TO_POINTER
(i)

	)

621 
	#ACPI_PTR_TO_PHYSADDR
(
i
Ë
	`ACPI_TO_INTEGER
(i)

	)

625 #i‚de‡
ACPI_MISALIGNMENT_NOT_SUPPORTED


626 
	#ACPI_COMPARE_NAME
(
a
,
b
Ë(*
	`ACPI_CAST_PTR
 (
UINT32
, (a)Ë=*ACPI_CAST_PTR (UINT32, (b)))

	)

627 
	#ACPI_MOVE_NAME
(
de°
,
§c
Ë(*
	`ACPI_CAST_PTR
 (
UINT32
, (de°)Ë*ACPI_CAST_PTR (UINT32, (§c)))

	)

629 
	#ACPI_COMPARE_NAME
(
a
,
b
Ë(!
	`ACPI_STRNCMP
 (
	`ACPI_CAST_PTR
 (, (a)), ACPI_CAST_PTR (, (b)), 
ACPI_NAME_SIZE
))

	)

630 
	#ACPI_MOVE_NAME
(
de°
,
§c
Ë(
	`ACPI_STRNCPY
 (
	`ACPI_CAST_PTR
 (, (de°)), ACPI_CAST_PTR (, (§c)), 
ACPI_NAME_SIZE
))

	)

635 
	#ACPI_VALIDATE_RSDP_SIG
(
a
Ë(!
	`ACPI_STRNCMP
 (
	`ACPI_CAST_PTR
 (, (a)), 
ACPI_SIG_RSDP
, 8))

	)

636 
	#ACPI_MAKE_RSDP_SIG
(
de°
Ë(
	`ACPI_MEMCPY
 (
	`ACPI_CAST_PTR
 (, (de°)), 
ACPI_SIG_RSDP
, 8))

	)

648 
	#ACPI_FULL_INITIALIZATION
 0x00

	)

649 
	#ACPI_NO_ADDRESS_SPACE_INIT
 0x01

	)

650 
	#ACPI_NO_HARDWARE_INIT
 0x02

	)

651 
	#ACPI_NO_EVENT_INIT
 0x04

	)

652 
	#ACPI_NO_HANDLER_INIT
 0x08

	)

653 
	#ACPI_NO_ACPI_ENABLE
 0x10

	)

654 
	#ACPI_NO_DEVICE_INIT
 0x20

	)

655 
	#ACPI_NO_OBJECT_INIT
 0x40

	)

660 
	#ACPI_SUBSYSTEM_INITIALIZE
 0x01

	)

661 
	#ACPI_INITIALIZED_OK
 0x02

	)

666 
	#ACPI_STATE_UNKNOWN
 (
UINT8
Ë0xFF

	)

668 
	#ACPI_STATE_S0
 (
UINT8
Ë0

	)

669 
	#ACPI_STATE_S1
 (
UINT8
Ë1

	)

670 
	#ACPI_STATE_S2
 (
UINT8
Ë2

	)

671 
	#ACPI_STATE_S3
 (
UINT8
Ë3

	)

672 
	#ACPI_STATE_S4
 (
UINT8
Ë4

	)

673 
	#ACPI_STATE_S5
 (
UINT8
Ë5

	)

674 
	#ACPI_S_STATES_MAX
 
ACPI_STATE_S5


	)

675 
	#ACPI_S_STATE_COUNT
 6

	)

677 
	#ACPI_STATE_D0
 (
UINT8
Ë0

	)

678 
	#ACPI_STATE_D1
 (
UINT8
Ë1

	)

679 
	#ACPI_STATE_D2
 (
UINT8
Ë2

	)

680 
	#ACPI_STATE_D3
 (
UINT8
Ë3

	)

681 
	#ACPI_D_STATES_MAX
 
ACPI_STATE_D3


	)

682 
	#ACPI_D_STATE_COUNT
 4

	)

684 
	#ACPI_STATE_C0
 (
UINT8
Ë0

	)

685 
	#ACPI_STATE_C1
 (
UINT8
Ë1

	)

686 
	#ACPI_STATE_C2
 (
UINT8
Ë2

	)

687 
	#ACPI_STATE_C3
 (
UINT8
Ë3

	)

688 
	#ACPI_C_STATES_MAX
 
ACPI_STATE_C3


	)

689 
	#ACPI_C_STATE_COUNT
 4

	)

694 
	#ACPI_SLEEP_TYPE_MAX
 0x7

	)

695 
	#ACPI_SLEEP_TYPE_INVALID
 0xFF

	)

700 
	#ACPI_NOTIFY_BUS_CHECK
 (
UINT8
Ë0x00

	)

701 
	#ACPI_NOTIFY_DEVICE_CHECK
 (
UINT8
Ë0x01

	)

702 
	#ACPI_NOTIFY_DEVICE_WAKE
 (
UINT8
Ë0x02

	)

703 
	#ACPI_NOTIFY_EJECT_REQUEST
 (
UINT8
Ë0x03

	)

704 
	#ACPI_NOTIFY_DEVICE_CHECK_LIGHT
 (
UINT8
Ë0x04

	)

705 
	#ACPI_NOTIFY_FREQUENCY_MISMATCH
 (
UINT8
Ë0x05

	)

706 
	#ACPI_NOTIFY_BUS_MODE_MISMATCH
 (
UINT8
Ë0x06

	)

707 
	#ACPI_NOTIFY_POWER_FAULT
 (
UINT8
Ë0x07

	)

708 
	#ACPI_NOTIFY_CAPABILITIES_CHECK
 (
UINT8
Ë0x08

	)

709 
	#ACPI_NOTIFY_DEVICE_PLD_CHECK
 (
UINT8
Ë0x09

	)

710 
	#ACPI_NOTIFY_RESERVED
 (
UINT8
Ë0x0A

	)

711 
	#ACPI_NOTIFY_LOCALITY_UPDATE
 (
UINT8
Ë0x0B

	)

712 
	#ACPI_NOTIFY_SHUTDOWN_REQUEST
 (
UINT8
Ë0x0C

	)

713 
	#ACPI_NOTIFY_AFFINITY_UPDATE
 (
UINT8
Ë0x0D

	)

715 
	#ACPI_NOTIFY_MAX
 0x0D

	)

726 
UINT32
 
	tACPI_OBJECT_TYPE
;

728 
	#ACPI_TYPE_ANY
 0x00

	)

729 
	#ACPI_TYPE_INTEGER
 0x01

	)

730 
	#ACPI_TYPE_STRING
 0x02

	)

731 
	#ACPI_TYPE_BUFFER
 0x03

	)

732 
	#ACPI_TYPE_PACKAGE
 0x04

	)

733 
	#ACPI_TYPE_FIELD_UNIT
 0x05

	)

734 
	#ACPI_TYPE_DEVICE
 0x06

	)

735 
	#ACPI_TYPE_EVENT
 0x07

	)

736 
	#ACPI_TYPE_METHOD
 0x08

	)

737 
	#ACPI_TYPE_MUTEX
 0x09

	)

738 
	#ACPI_TYPE_REGION
 0x0A

	)

739 
	#ACPI_TYPE_POWER
 0x0B

	)

740 
	#ACPI_TYPE_PROCESSOR
 0x0C

	)

741 
	#ACPI_TYPE_THERMAL
 0x0D

	)

742 
	#ACPI_TYPE_BUFFER_FIELD
 0x0E

	)

743 
	#ACPI_TYPE_DDB_HANDLE
 0x0F

	)

744 
	#ACPI_TYPE_DEBUG_OBJECT
 0x10

	)

746 
	#ACPI_TYPE_EXTERNAL_MAX
 0x10

	)

755 
	#ACPI_TYPE_LOCAL_REGION_FIELD
 0x11

	)

756 
	#ACPI_TYPE_LOCAL_BANK_FIELD
 0x12

	)

757 
	#ACPI_TYPE_LOCAL_INDEX_FIELD
 0x13

	)

758 
	#ACPI_TYPE_LOCAL_REFERENCE
 0x14

	)

759 
	#ACPI_TYPE_LOCAL_ALIAS
 0x15

	)

760 
	#ACPI_TYPE_LOCAL_METHOD_ALIAS
 0x16

	)

761 
	#ACPI_TYPE_LOCAL_NOTIFY
 0x17

	)

762 
	#ACPI_TYPE_LOCAL_ADDRESS_HANDLER
 0x18

	)

763 
	#ACPI_TYPE_LOCAL_RESOURCE
 0x19

	)

764 
	#ACPI_TYPE_LOCAL_RESOURCE_FIELD
 0x1A

	)

765 
	#ACPI_TYPE_LOCAL_SCOPE
 0x1B

	)

767 
	#ACPI_TYPE_NS_NODE_MAX
 0x1B

	)

773 
	#ACPI_TYPE_LOCAL_EXTRA
 0x1C

	)

774 
	#ACPI_TYPE_LOCAL_DATA
 0x1D

	)

776 
	#ACPI_TYPE_LOCAL_MAX
 0x1D

	)

780 
	#ACPI_TYPE_INVALID
 0x1E

	)

781 
	#ACPI_TYPE_NOT_FOUND
 0xFF

	)

783 
	#ACPI_NUM_NS_TYPES
 (
ACPI_TYPE_INVALID
 + 1)

	)

789 
	#ACPI_READ
 0

	)

790 
	#ACPI_WRITE
 1

	)

791 
	#ACPI_IO_MASK
 1

	)

796 
UINT32
 
	tACPI_EVENT_TYPE
;

801 
	#ACPI_EVENT_PMTIMER
 0

	)

802 
	#ACPI_EVENT_GLOBAL
 1

	)

803 
	#ACPI_EVENT_POWER_BUTTON
 2

	)

804 
	#ACPI_EVENT_SLEEP_BUTTON
 3

	)

805 
	#ACPI_EVENT_RTC
 4

	)

806 
	#ACPI_EVENT_MAX
 4

	)

807 
	#ACPI_NUM_FIXED_EVENTS
 
ACPI_EVENT_MAX
 + 1

	)

826 
UINT32
 
	tACPI_EVENT_STATUS
;

828 
	#ACPI_EVENT_FLAG_DISABLED
 (
ACPI_EVENT_STATUS
Ë0x00

	)

829 
	#ACPI_EVENT_FLAG_ENABLED
 (
ACPI_EVENT_STATUS
Ë0x01

	)

830 
	#ACPI_EVENT_FLAG_WAKE_ENABLED
 (
ACPI_EVENT_STATUS
Ë0x02

	)

831 
	#ACPI_EVENT_FLAG_STATUS_SET
 (
ACPI_EVENT_STATUS
Ë0x04

	)

832 
	#ACPI_EVENT_FLAG_ENABLE_SET
 (
ACPI_EVENT_STATUS
Ë0x08

	)

833 
	#ACPI_EVENT_FLAG_HAS_HANDLER
 (
ACPI_EVENT_STATUS
Ë0x10

	)

834 
	#ACPI_EVENT_FLAG_SET
 
ACPI_EVENT_FLAG_STATUS_SET


	)

838 
	#ACPI_GPE_ENABLE
 0

	)

839 
	#ACPI_GPE_DISABLE
 1

	)

840 
	#ACPI_GPE_CONDITIONAL_ENABLE
 2

	)

841 
	#ACPI_GPE_SAVE_MASK
 4

	)

843 
	#ACPI_GPE_ENABLE_SAVE
 (
ACPI_GPE_ENABLE
 | 
ACPI_GPE_SAVE_MASK
)

	)

844 
	#ACPI_GPE_DISABLE_SAVE
 (
ACPI_GPE_DISABLE
 | 
ACPI_GPE_SAVE_MASK
)

	)

857 
	#ACPI_GPE_DISPATCH_NONE
 (
UINT8
Ë0x00

	)

858 
	#ACPI_GPE_DISPATCH_METHOD
 (
UINT8
Ë0x01

	)

859 
	#ACPI_GPE_DISPATCH_HANDLER
 (
UINT8
Ë0x02

	)

860 
	#ACPI_GPE_DISPATCH_NOTIFY
 (
UINT8
Ë0x03

	)

861 
	#ACPI_GPE_DISPATCH_RAW_HANDLER
 (
UINT8
Ë0x04

	)

862 
	#ACPI_GPE_DISPATCH_MASK
 (
UINT8
Ë0x07

	)

863 
	#ACPI_GPE_DISPATCH_TYPE
(
Êags
Ë((
UINT8
Ë((ÊagsË& 
ACPI_GPE_DISPATCH_MASK
))

	)

865 
	#ACPI_GPE_LEVEL_TRIGGERED
 (
UINT8
Ë0x08

	)

866 
	#ACPI_GPE_EDGE_TRIGGERED
 (
UINT8
Ë0x00

	)

867 
	#ACPI_GPE_XRUPT_TYPE_MASK
 (
UINT8
Ë0x08

	)

869 
	#ACPI_GPE_CAN_WAKE
 (
UINT8
Ë0x10

	)

874 
	#ACPI_NOT_ISR
 0x1

	)

875 
	#ACPI_ISR
 0x0

	)

880 
	#ACPI_SYSTEM_NOTIFY
 0x1

	)

881 
	#ACPI_DEVICE_NOTIFY
 0x2

	)

882 
	#ACPI_ALL_NOTIFY
 (
ACPI_SYSTEM_NOTIFY
 | 
ACPI_DEVICE_NOTIFY
)

	)

883 
	#ACPI_MAX_NOTIFY_HANDLER_TYPE
 0x3

	)

884 
	#ACPI_NUM_NOTIFY_TYPES
 2

	)

886 
	#ACPI_MAX_SYS_NOTIFY
 0x7F

	)

887 
	#ACPI_MAX_DEVICE_SPECIFIC_NOTIFY
 0xBF

	)

889 
	#ACPI_SYSTEM_HANDLER_LIST
 0

	)

890 
	#ACPI_DEVICE_HANDLER_LIST
 1

	)

895 
UINT8
 
	tACPI_ADR_SPACE_TYPE
;

897 
	#ACPI_ADR_SPACE_SYSTEM_MEMORY
 (
ACPI_ADR_SPACE_TYPE
Ë0

	)

898 
	#ACPI_ADR_SPACE_SYSTEM_IO
 (
ACPI_ADR_SPACE_TYPE
Ë1

	)

899 
	#ACPI_ADR_SPACE_PCI_CONFIG
 (
ACPI_ADR_SPACE_TYPE
Ë2

	)

900 
	#ACPI_ADR_SPACE_EC
 (
ACPI_ADR_SPACE_TYPE
Ë3

	)

901 
	#ACPI_ADR_SPACE_SMBUS
 (
ACPI_ADR_SPACE_TYPE
Ë4

	)

902 
	#ACPI_ADR_SPACE_CMOS
 (
ACPI_ADR_SPACE_TYPE
Ë5

	)

903 
	#ACPI_ADR_SPACE_PCI_BAR_TARGET
 (
ACPI_ADR_SPACE_TYPE
Ë6

	)

904 
	#ACPI_ADR_SPACE_IPMI
 (
ACPI_ADR_SPACE_TYPE
Ë7

	)

905 
	#ACPI_ADR_SPACE_GPIO
 (
ACPI_ADR_SPACE_TYPE
Ë8

	)

906 
	#ACPI_ADR_SPACE_GSBUS
 (
ACPI_ADR_SPACE_TYPE
Ë9

	)

907 
	#ACPI_ADR_SPACE_PLATFORM_COMM
 (
ACPI_ADR_SPACE_TYPE
Ë10

	)

909 
	#ACPI_NUM_PREDEFINED_REGIONS
 11

	)

919 
	#ACPI_ADR_SPACE_DATA_TABLE
 (
ACPI_ADR_SPACE_TYPE
Ë0x7E

	)

920 
	#ACPI_ADR_SPACE_FIXED_HARDWARE
 (
ACPI_ADR_SPACE_TYPE
Ë0x7F

	)

924 
	#ACPI_REG_DISCONNECT
 0

	)

925 
	#ACPI_REG_CONNECT
 1

	)

938 
	#ACPI_BITREG_TIMER_STATUS
 0x00

	)

939 
	#ACPI_BITREG_BUS_MASTER_STATUS
 0x01

	)

940 
	#ACPI_BITREG_GLOBAL_LOCK_STATUS
 0x02

	)

941 
	#ACPI_BITREG_POWER_BUTTON_STATUS
 0x03

	)

942 
	#ACPI_BITREG_SLEEP_BUTTON_STATUS
 0x04

	)

943 
	#ACPI_BITREG_RT_CLOCK_STATUS
 0x05

	)

944 
	#ACPI_BITREG_WAKE_STATUS
 0x06

	)

945 
	#ACPI_BITREG_PCIEXP_WAKE_STATUS
 0x07

	)

949 
	#ACPI_BITREG_TIMER_ENABLE
 0x08

	)

950 
	#ACPI_BITREG_GLOBAL_LOCK_ENABLE
 0x09

	)

951 
	#ACPI_BITREG_POWER_BUTTON_ENABLE
 0x0A

	)

952 
	#ACPI_BITREG_SLEEP_BUTTON_ENABLE
 0x0B

	)

953 
	#ACPI_BITREG_RT_CLOCK_ENABLE
 0x0C

	)

954 
	#ACPI_BITREG_PCIEXP_WAKE_DISABLE
 0x0D

	)

958 
	#ACPI_BITREG_SCI_ENABLE
 0x0E

	)

959 
	#ACPI_BITREG_BUS_MASTER_RLD
 0x0F

	)

960 
	#ACPI_BITREG_GLOBAL_LOCK_RELEASE
 0x10

	)

961 
	#ACPI_BITREG_SLEEP_TYPE
 0x11

	)

962 
	#ACPI_BITREG_SLEEP_ENABLE
 0x12

	)

966 
	#ACPI_BITREG_ARB_DISABLE
 0x13

	)

968 
	#ACPI_BITREG_MAX
 0x13

	)

969 
	#ACPI_NUM_BITREG
 
ACPI_BITREG_MAX
 + 1

	)

974 
	#ACPI_CLEAR_STATUS
 1

	)

978 
	#ACPI_ENABLE_EVENT
 1

	)

979 
	#ACPI_DISABLE_EVENT
 0

	)

984 
	$ACPI_STATUS
 (*
	tACPI_SLEEP_FUNCTION
) (

985 
	tUINT8
 
	tSÀïSèã
);

987 
	sa˝i_¶ìp_fun˘i⁄s


989 
ACPI_SLEEP_FUNCTION
 
LegacyFun˘i⁄
;

990 
ACPI_SLEEP_FUNCTION
 
ExãndedFun˘i⁄
;

992 } 
	tACPI_SLEEP_FUNCTIONS
;

1003 
	ua˝i_obje˘


1005 
ACPI_OBJECT_TYPE
 
Ty≥
;

1008 
ACPI_OBJECT_TYPE
 
Ty≥
;

1009 
UINT64
 
VÆue
;

1010 } 
I¡egî
;

1014 
ACPI_OBJECT_TYPE
 
Ty≥
;

1015 
UINT32
 
Lígth
;

1016 *
Poöãr
;

1017 } 
Såög
;

1021 
ACPI_OBJECT_TYPE
 
Ty≥
;

1022 
UINT32
 
Lígth
;

1023 
UINT8
 *
Poöãr
;

1024 } 
Buf„r
;

1028 
ACPI_OBJECT_TYPE
 
Ty≥
;

1029 
UINT32
 
Cou¡
;

1030 
a˝i_obje˘
 *
EÀmíts
;

1031 } 
Package
;

1035 
ACPI_OBJECT_TYPE
 
Ty≥
;

1036 
ACPI_OBJECT_TYPE
 
A˘uÆTy≥
;

1037 
ACPI_HANDLE
 
H™dÀ
;

1038 } 
Re„ªn˚
;

1042 
ACPI_OBJECT_TYPE
 
Ty≥
;

1043 
UINT32
 
ProcId
;

1044 
ACPI_IO_ADDRESS
 
PblkAddªss
;

1045 
UINT32
 
PblkLígth
;

1046 } 
Pro˚ss‹
;

1050 
ACPI_OBJECT_TYPE
 
Ty≥
;

1051 
UINT32
 
Sy°emLevñ
;

1052 
UINT32
 
Resour˚Ordî
;

1053 } 
PowîResour˚
;

1055 } 
	tACPI_OBJECT
;

1061 
	sa˝i_obje˘_li°


1063 
UINT32
 
Cou¡
;

1064 
ACPI_OBJECT
 *
Poöãr
;

1066 } 
	tACPI_OBJECT_LIST
;

1072 
	#ACPI_NO_BUFFER
 0

	)

1074 #ifde‡
ACPI_NO_MEM_ALLOCATIONS


1076 
	#ACPI_ALLOCATE_BUFFER
 (
ACPI_SIZE
Ë(0)

	)

1077 
	#ACPI_ALLOCATE_LOCAL_BUFFER
 (
ACPI_SIZE
Ë(0)

	)

1081 
	#ACPI_ALLOCATE_BUFFER
 (
ACPI_SIZE
Ë(-1Ë

	)

1082 
	#ACPI_ALLOCATE_LOCAL_BUFFER
 (
ACPI_SIZE
Ë(-2Ë

	)

1086 
	sa˝i_buf„r


1088 
ACPI_SIZE
 
Lígth
;

1089 *
Poöãr
;

1091 } 
	tACPI_BUFFER
;

1097 
	#ACPI_FULL_PATHNAME
 0

	)

1098 
	#ACPI_SINGLE_NAME
 1

	)

1099 
	#ACPI_NAME_TYPE_MAX
 1

	)

1105 
	sa˝i_¥edeföed_«mes


1107 *
Name
;

1108 
UINT8
 
Ty≥
;

1109 *
VÆ
;

1111 } 
	tACPI_PREDEFINED_NAMES
;

1117 
	#ACPI_SYS_MODE_UNKNOWN
 0x0000

	)

1118 
	#ACPI_SYS_MODE_ACPI
 0x0001

	)

1119 
	#ACPI_SYS_MODE_LEGACY
 0x0002

	)

1120 
	#ACPI_SYS_MODES_MASK
 0x0003

	)

1126 
	sa˝i_sy°em_öfo


1128 
UINT32
 
A˝iCaVîsi⁄
;

1129 
UINT32
 
Fœgs
;

1130 
UINT32
 
TimîResﬁuti⁄
;

1131 
UINT32
 
Re£rved1
;

1132 
UINT32
 
Re£rved2
;

1133 
UINT32
 
DebugLevñ
;

1134 
UINT32
 
DebugLayî
;

1136 } 
	tACPI_SYSTEM_INFO
;

1142 
	sa˝i_°©i°ics


1144 
UINT32
 
SciCou¡
;

1145 
UINT32
 
G≥Cou¡
;

1146 
UINT32
 
FixedEvítCou¡
[
ACPI_NUM_FIXED_EVENTS
];

1147 
UINT32
 
MëhodCou¡
;

1149 } 
	tACPI_STATISTICS
;

1154 
	#ACPI_TABLE_EVENT_LOAD
 0x0

	)

1155 
	#ACPI_TABLE_EVENT_UNLOAD
 0x1

	)

1156 
	#ACPI_NUM_TABLE_EVENTS
 2

	)

1162 
UINT32


1163 (
	tACPI_SYSTEM_XFACE
 *
	tACPI_OSD_HANDLER
) (

1164 *
	tC⁄ãxt
);

1167 (
	tACPI_SYSTEM_XFACE
 *
	tACPI_OSD_EXEC_CALLBACK
) (

1168 *
	tC⁄ãxt
);

1174 
	$UINT32
 (*
	tACPI_SCI_HANDLER
) (

1175 *
	tC⁄ãxt
);

1178 (*
	tACPI_GBL_EVENT_HANDLER
) (

1179 
	tUINT32
 
	tEvítTy≥
,

1180 
	tACPI_HANDLE
 
	tDevi˚
,

1181 
	tUINT32
 
	tEvítNumbî
,

1182 *
	tC⁄ãxt
);

1184 
	#ACPI_EVENT_TYPE_GPE
 0

	)

1185 
	#ACPI_EVENT_TYPE_FIXED
 1

	)

1188 
	$UINT32
 (*
	tACPI_EVENT_HANDLER
) (

1189 *
	tC⁄ãxt
);

1192 
	$UINT32
 (*
	tACPI_GPE_HANDLER
) (

1193 
	tACPI_HANDLE
 
	tG≥Devi˚
,

1194 
	tUINT32
 
	tG≥Numbî
,

1195 *
	tC⁄ãxt
);

1198 (*
	tACPI_NOTIFY_HANDLER
) (

1199 
	tACPI_HANDLE
 
	tDevi˚
,

1200 
	tUINT32
 
	tVÆue
,

1201 *
	tC⁄ãxt
);

1204 (*
	tACPI_OBJECT_HANDLER
) (

1205 
	tACPI_HANDLE
 
	tObje˘
,

1206 *
	tD©a
);

1209 
	$ACPI_STATUS
 (*
	tACPI_INIT_HANDLER
) (

1210 
	tACPI_HANDLE
 
	tObje˘
,

1211 
	tUINT32
 
	tFun˘i⁄
);

1213 
	#ACPI_INIT_DEVICE_INI
 1

	)

1216 
	$ACPI_STATUS
 (*
	tACPI_EXCEPTION_HANDLER
) (

1217 
	tACPI_STATUS
 
	tAmlSètus
,

1218 
	tACPI_NAME
 
	tName
,

1219 
	tUINT16
 
	tOpcode
,

1220 
	tUINT32
 
	tAmlOff£t
,

1221 *
	tC⁄ãxt
);

1226 
	$ACPI_STATUS
 (*
	tACPI_TABLE_HANDLER
) (

1227 
	tUINT32
 
	tEvít
,

1228 *
	tTabÀ
,

1229 *
	tC⁄ãxt
);

1231 
	#ACPI_TABLE_LOAD
 0x0

	)

1232 
	#ACPI_TABLE_UNLOAD
 0x1

	)

1233 
	#ACPI_NUM_TABLE_EVENTS
 2

	)

1239 
	$ACPI_STATUS
 (*
	tACPI_ADR_SPACE_HANDLER
) (

1240 
	tUINT32
 
	tFun˘i⁄
,

1241 
	tACPI_PHYSICAL_ADDRESS
 
	tAddªss
,

1242 
	tUINT32
 
	tBôWidth
,

1243 
	tUINT64
 *
	tVÆue
,

1244 *
	tH™dÀrC⁄ãxt
,

1245 *
	tRegi⁄C⁄ãxt
);

1247 
	#ACPI_DEFAULT_HANDLER
 
NULL


	)

1251 
	sa˝i_c⁄√˘i⁄_öfo


1253 
UINT8
 *
C⁄√˘i⁄
;

1254 
UINT16
 
Lígth
;

1255 
UINT8
 
Ac˚ssLígth
;

1257 } 
	tACPI_CONNECTION_INFO
;

1261 
	$ACPI_STATUS
 (*
	tACPI_ADR_SPACE_SETUP
) (

1262 
	tACPI_HANDLE
 
	tRegi⁄H™dÀ
,

1263 
	tUINT32
 
	tFun˘i⁄
,

1264 *
	tH™dÀrC⁄ãxt
,

1265 **
	tRegi⁄C⁄ãxt
);

1267 
	#ACPI_REGION_ACTIVATE
 0

	)

1268 
	#ACPI_REGION_DEACTIVATE
 1

	)

1271 
	$ACPI_STATUS
 (*
	tACPI_WALK_CALLBACK
) (

1272 
	tACPI_HANDLE
 
	tObje˘
,

1273 
	tUINT32
 
	tNe°ögLevñ
,

1274 *
	tC⁄ãxt
,

1275 **
	tRëu∫VÆue
);

1278 
	$UINT32
 (*
	tACPI_INTERFACE_HANDLER
) (

1279 
	tACPI_STRING
 
	tI¡îÁ˚Name
,

1280 
	tUINT32
 
	tSuµ‹ãd
);

1285 
	#ACPI_INTERRUPT_NOT_HANDLED
 0x00

	)

1286 
	#ACPI_INTERRUPT_HANDLED
 0x01

	)

1290 
	#ACPI_REENABLE_GPE
 0x80

	)

1295 
	#ACPI_EISAID_STRING_SIZE
 8

	)

1299 
	#ACPI_UUID_LENGTH
 16

	)

1304 
	sa˝i_≤p_devi˚_id


1306 
UINT32
 
Lígth
;

1307 *
Såög
;

1309 } 
	tACPI_PNP_DEVICE_ID
;

1311 
	sa˝i_≤p_devi˚_id_li°


1313 
UINT32
 
Cou¡
;

1314 
UINT32
 
Li°Size
;

1315 
ACPI_PNP_DEVICE_ID
 
Ids
[1];

1317 } 
	tACPI_PNP_DEVICE_ID_LIST
;

1323 
	sa˝i_devi˚_öfo


1325 
UINT32
 
InfoSize
;

1326 
UINT32
 
Name
;

1327 
ACPI_OBJECT_TYPE
 
Ty≥
;

1328 
UINT8
 
P¨amCou¡
;

1329 
UINT8
 
VÆid
;

1330 
UINT8
 
Fœgs
;

1331 
UINT8
 
Highe°D°©es
[4];

1332 
UINT8
 
Lowe°D°©es
[5];

1333 
UINT32
 
CuºítSètus
;

1334 
UINT64
 
Addªss
;

1335 
ACPI_PNP_DEVICE_ID
 
H¨dw¨eId
;

1336 
ACPI_PNP_DEVICE_ID
 
UniqueId
;

1337 
ACPI_PNP_DEVICE_ID
 
Subsy°emId
;

1338 
ACPI_PNP_DEVICE_ID_LIST
 
Com∑tibÀIdLi°
;

1340 } 
	tACPI_DEVICE_INFO
;

1344 
	#ACPI_PCI_ROOT_BRIDGE
 0x01

	)

1348 
	#ACPI_VALID_STA
 0x01

	)

1349 
	#ACPI_VALID_ADR
 0x02

	)

1350 
	#ACPI_VALID_HID
 0x04

	)

1351 
	#ACPI_VALID_UID
 0x08

	)

1352 
	#ACPI_VALID_SUB
 0x10

	)

1353 
	#ACPI_VALID_CID
 0x20

	)

1354 
	#ACPI_VALID_SXDS
 0x40

	)

1355 
	#ACPI_VALID_SXWS
 0x80

	)

1359 
	#ACPI_STA_DEVICE_PRESENT
 0x01

	)

1360 
	#ACPI_STA_DEVICE_ENABLED
 0x02

	)

1361 
	#ACPI_STA_DEVICE_UI
 0x04

	)

1362 
	#ACPI_STA_DEVICE_FUNCTIONING
 0x08

	)

1363 
	#ACPI_STA_DEVICE_OK
 0x08

	)

1364 
	#ACPI_STA_BATTERY_PRESENT
 0x10

	)

1369 
	sa˝i_pci_id


1371 
UINT16
 
Segmít
;

1372 
UINT16
 
Bus
;

1373 
UINT16
 
Devi˚
;

1374 
UINT16
 
Fun˘i⁄
;

1376 } 
	tACPI_PCI_ID
;

1378 
	sa˝i_mem_•a˚_c⁄ãxt


1380 
UINT32
 
Lígth
;

1381 
ACPI_PHYSICAL_ADDRESS
 
Addªss
;

1382 
ACPI_PHYSICAL_ADDRESS
 
M≠≥dPhysiˇlAddªss
;

1383 
UINT8
 *
M≠≥dLogiˇlAddªss
;

1384 
ACPI_SIZE
 
M≠≥dLígth
;

1386 } 
	tACPI_MEM_SPACE_CONTEXT
;

1392 
	sa˝i_mem‹y_li°


1394 *
Li°Name
;

1395 *
Li°Hód
;

1396 
UINT16
 
Obje˘Size
;

1397 
UINT16
 
MaxDïth
;

1398 
UINT16
 
CuºítDïth
;

1400 #ifde‡
ACPI_DBG_TRACK_ALLOCATIONS


1404 
UINT32
 
TŸÆAŒoˇãd
;

1405 
UINT32
 
TŸÆFªed
;

1406 
UINT32
 
MaxOccupõd
;

1407 
UINT32
 
TŸÆSize
;

1408 
UINT32
 
CuºítTŸÆSize
;

1409 
UINT32
 
Reque°s
;

1410 
UINT32
 
Hôs
;

1413 } 
	tACPI_MEMORY_LIST
;

1418 
	#ACPI_VENDOR_STRINGS
 0x01

	)

1419 
	#ACPI_FEATURE_STRINGS
 0x02

	)

1420 
	#ACPI_ENABLE_INTERFACES
 0x00

	)

1421 
	#ACPI_DISABLE_INTERFACES
 0x04

	)

1423 
	#ACPI_DISABLE_ALL_VENDOR_STRINGS
 (
ACPI_DISABLE_INTERFACES
 | 
ACPI_VENDOR_STRINGS
)

	)

1424 
	#ACPI_DISABLE_ALL_FEATURE_STRINGS
 (
ACPI_DISABLE_INTERFACES
 | 
ACPI_FEATURE_STRINGS
)

	)

1425 
	#ACPI_DISABLE_ALL_STRINGS
 (
ACPI_DISABLE_INTERFACES
 | 
ACPI_VENDOR_STRINGS
 | 
ACPI_FEATURE_STRINGS
)

	)

1426 
	#ACPI_ENABLE_ALL_VENDOR_STRINGS
 (
ACPI_ENABLE_INTERFACES
 | 
ACPI_VENDOR_STRINGS
)

	)

1427 
	#ACPI_ENABLE_ALL_FEATURE_STRINGS
 (
ACPI_ENABLE_INTERFACES
 | 
ACPI_FEATURE_STRINGS
)

	)

1428 
	#ACPI_ENABLE_ALL_STRINGS
 (
ACPI_ENABLE_INTERFACES
 | 
ACPI_VENDOR_STRINGS
 | 
ACPI_FEATURE_STRINGS
)

	)

1430 
	#ACPI_OSI_WIN_2000
 0x01

	)

1431 
	#ACPI_OSI_WIN_XP
 0x02

	)

1432 
	#ACPI_OSI_WIN_XP_SP1
 0x03

	)

1433 
	#ACPI_OSI_WINSRV_2003
 0x04

	)

1434 
	#ACPI_OSI_WIN_XP_SP2
 0x05

	)

1435 
	#ACPI_OSI_WINSRV_2003_SP1
 0x06

	)

1436 
	#ACPI_OSI_WIN_VISTA
 0x07

	)

1437 
	#ACPI_OSI_WINSRV_2008
 0x08

	)

1438 
	#ACPI_OSI_WIN_VISTA_SP1
 0x09

	)

1439 
	#ACPI_OSI_WIN_VISTA_SP2
 0x0A

	)

1440 
	#ACPI_OSI_WIN_7
 0x0B

	)

1441 
	#ACPI_OSI_WIN_8
 0x0C

	)

1442 
	#ACPI_OSI_WIN_10
 0x0D

	)

1447 
	#ACPI_FILE_READING
 0x01

	)

1448 
	#ACPI_FILE_WRITING
 0x02

	)

1449 
	#ACPI_FILE_BINARY
 0x04

	)

1451 
	#ACPI_FILE_BEGIN
 0x01

	)

1452 
	#ACPI_FILE_END
 0x02

	)

1457 
	#ACPI_OPT_END
 -1

	)

	@src/extern/acpica/source/include/acutils.h

116 #i‚de‡
_ACUTILS_H


117 
	#_ACUTILS_H


	)

120 c⁄° 
UINT8
 
A˝iGbl_Resour˚AmlSizes
[];

121 c⁄° 
UINT8
 
A˝iGbl_Resour˚AmlSîülBusSizes
[];

125 #i‡
deföed
(
ACPI_DEBUG_OUTPUT
Ë|| deföed (
ACPI_DISASSEMBLER
Ë|| deföed (
ACPI_DEBUGGER
)

127 c⁄° *
A˝iGbl_BmDecode
[];

128 c⁄° *
A˝iGbl_C⁄figDecode
[];

129 c⁄° *
A˝iGbl_C⁄sumeDecode
[];

130 c⁄° *
A˝iGbl_DecDecode
[];

131 c⁄° *
A˝iGbl_HeDecode
[];

132 c⁄° *
A˝iGbl_IoDecode
[];

133 c⁄° *
A˝iGbl_LlDecode
[];

134 c⁄° *
A˝iGbl_MaxDecode
[];

135 c⁄° *
A˝iGbl_MemDecode
[];

136 c⁄° *
A˝iGbl_MöDecode
[];

137 c⁄° *
A˝iGbl_MçDecode
[];

138 c⁄° *
A˝iGbl_RngDecode
[];

139 c⁄° *
A˝iGbl_RwDecode
[];

140 c⁄° *
A˝iGbl_ShrDecode
[];

141 c⁄° *
A˝iGbl_SizDecode
[];

142 c⁄° *
A˝iGbl_TrsDecode
[];

143 c⁄° *
A˝iGbl_TçDecode
[];

144 c⁄° *
A˝iGbl_TypDecode
[];

145 c⁄° *
A˝iGbl_PpcDecode
[];

146 c⁄° *
A˝iGbl_I‹Decode
[];

147 c⁄° *
A˝iGbl_DtsDecode
[];

148 c⁄° *
A˝iGbl_CtDecode
[];

149 c⁄° *
A˝iGbl_SbtDecode
[];

150 c⁄° *
A˝iGbl_AmDecode
[];

151 c⁄° *
A˝iGbl_SmDecode
[];

152 c⁄° *
A˝iGbl_WmDecode
[];

153 c⁄° *
A˝iGbl_CphDecode
[];

154 c⁄° *
A˝iGbl_CpoDecode
[];

155 c⁄° *
A˝iGbl_DpDecode
[];

156 c⁄° *
A˝iGbl_EdDecode
[];

157 c⁄° *
A˝iGbl_BpbDecode
[];

158 c⁄° *
A˝iGbl_SbDecode
[];

159 c⁄° *
A˝iGbl_FcDecode
[];

160 c⁄° *
A˝iGbl_PtDecode
[];

168 #ifde‡
ACPI_ASL_COMPILER


170 
	~<°dio.h
>

172 
	#ACPI_MSG_REDIRECT_BEGIN
 \

173 
FILE
 *
OuçutFûe
 = 
A˝iGbl_OuçutFûe
; \

174 
	`A˝iOsRedúe˘Ouçut
 (
°dîr
);

	)

176 
	#ACPI_MSG_REDIRECT_END
 \

177 
	`A˝iOsRedúe˘Ouçut
 (
OuçutFûe
);

	)

183 
	#ACPI_MSG_REDIRECT_BEGIN


	)

184 
	#ACPI_MSG_REDIRECT_END


	)

190 
	#ACPI_MSG_ERROR
 "ACPI Eº‹: "

	)

191 
	#ACPI_MSG_EXCEPTION
 "ACPI Ex˚±i⁄: "

	)

192 
	#ACPI_MSG_WARNING
 "ACPI W¨nög: "

	)

193 
	#ACPI_MSG_INFO
 "ACPI: "

	)

195 
	#ACPI_MSG_BIOS_ERROR
 "ACPI BIOS Eº‹ (bug): "

	)

196 
	#ACPI_MSG_BIOS_WARNING
 "ACPI BIOS W¨nög (bug): "

	)

201 
	#ACPI_MSG_SUFFIX
 \

202 
	`A˝iOsPrötf
 (" (%8.8X/%s-%u)\n", 
ACPI_CA_VERSION
, 
ModuÀName
, 
LöeNumbî
)

	)

207 
	#ACPI_INVALID_RESOURCE
 0

	)

208 
	#ACPI_FIXED_LENGTH
 1

	)

209 
	#ACPI_VARIABLE_LENGTH
 2

	)

210 
	#ACPI_SMALL_VARIABLE_LENGTH
 3

	)

213 
	$ACPI_STATUS
 (*
	tACPI_WALK_AML_CALLBACK
) (

214 
	tUINT8
 *
	tAml
,

215 
	tUINT32
 
	tLígth
,

216 
	tUINT32
 
	tOff£t
,

217 
	tUINT8
 
	tResour˚Index
,

218 **
	tC⁄ãxt
);

221 
	$ACPI_STATUS
 (*
	tACPI_PKG_CALLBACK
) (

222 
	tUINT8
 
	tObje˘Ty≥
,

223 
	tACPI_OPERAND_OBJECT
 *
	tSour˚Obje˘
,

224 
	tACPI_GENERIC_STATE
 *
	tSèã
,

225 *
	tC⁄ãxt
);

227 
	sa˝i_pkg_öfo


229 
UINT8
 *
FªeS∑˚
;

230 
ACPI_SIZE
 
Lígth
;

231 
UINT32
 
Obje˘S∑˚
;

232 
UINT32
 
NumPackages
;

234 } 
	tACPI_PKG_INFO
;

238 
	#REF_INCREMENT
 (
UINT16
Ë0

	)

239 
	#REF_DECREMENT
 (
UINT16
Ë1

	)

243 
	#DB_BYTE_DISPLAY
 1

	)

244 
	#DB_WORD_DISPLAY
 2

	)

245 
	#DB_DWORD_DISPLAY
 4

	)

246 
	#DB_QWORD_DISPLAY
 8

	)

251 
ACPI_STATUS


252 
	`A˝iUtInôGlobÆs
 (

255 #i‡
	`deföed
(
ACPI_DEBUG_OUTPUT
Ë|| deföed(
ACPI_DEBUGGER
)

258 
	`A˝iUtGëMuãxName
 (

259 
UINT32
 
MuãxId
);

262 
	`A˝iUtGëNŸifyName
 (

263 
UINT32
 
NŸifyVÆue
,

264 
ACPI_OBJECT_TYPE
 
Ty≥
);

268 
	`A˝iUtGëTy≥Name
 (

269 
ACPI_OBJECT_TYPE
 
Ty≥
);

272 
	`A˝iUtGëNodeName
 (

273 *
Obje˘
);

276 
	`A˝iUtGëDes¸ùt‹Name
 (

277 *
Obje˘
);

280 
	`A˝iUtGëRe„ªn˚Name
 (

281 
ACPI_OPERAND_OBJECT
 *
Obje˘
);

284 
	`A˝iUtGëObje˘Ty≥Name
 (

285 
ACPI_OPERAND_OBJECT
 *
ObjDesc
);

288 
	`A˝iUtGëRegi⁄Name
 (

289 
UINT8
 
S∑˚Id
);

292 
	`A˝iUtGëEvítName
 (

293 
UINT32
 
EvítId
);

296 
	`A˝iUtHexToAsciiCh¨
 (

297 
UINT64
 
I¡egî
,

298 
UINT32
 
Posôi⁄
);

300 
UINT8


301 
	`A˝iUtAsciiCh¨ToHex
 (

302 
HexCh¨
);

304 
BOOLEAN


305 
	`A˝iUtVÆidObje˘Ty≥
 (

306 
ACPI_OBJECT_TYPE
 
Ty≥
);

312 
ACPI_STATUS


313 
	`A˝iUtH¨dw¨eInôülize
 (

317 
	`A˝iUtSubsy°emShutdown
 (

324 #i‚de‡
ACPI_USE_SYSTEM_CLIBRARY


326 
ACPI_SIZE


327 
	`A˝iUtSåÀn
 (

328 c⁄° *
Såög
);

331 
	`A˝iUtSåchr
 (

332 c⁄° *
Såög
,

333 
ch
);

336 
	`A˝iUtSå˝y
 (

337 *
D°Såög
,

338 c⁄° *
SrcSåög
);

341 
	`A˝iUtSån˝y
 (

342 *
D°Såög
,

343 c⁄° *
SrcSåög
,

344 
ACPI_SIZE
 
Cou¡
);

347 
	`A˝iUtMemcmp
 (

348 c⁄° *
Buf„r1
,

349 c⁄° *
Buf„r2
,

350 
ACPI_SIZE
 
Cou¡
);

353 
	`A˝iUtSåncmp
 (

354 c⁄° *
Såög1
,

355 c⁄° *
Såög2
,

356 
ACPI_SIZE
 
Cou¡
);

359 
	`A˝iUtSåcmp
 (

360 c⁄° *
Såög1
,

361 c⁄° *
Såög2
);

364 
	`A˝iUtSåˇt
 (

365 *
D°Såög
,

366 c⁄° *
SrcSåög
);

369 
	`A˝iUtSånˇt
 (

370 *
D°Såög
,

371 c⁄° *
SrcSåög
,

372 
ACPI_SIZE
 
Cou¡
);

374 
UINT32


375 
	`A˝iUtSåtoul
 (

376 c⁄° *
Såög
,

377 **
Tîmö©‹
,

378 
UINT32
 
Ba£
);

381 
	`A˝iUtSå°r
 (

382 *
Såög1
,

383 *
Såög2
);

386 
	`A˝iUtMem˝y
 (

387 *
De°
,

388 c⁄° *
Src
,

389 
ACPI_SIZE
 
Cou¡
);

392 
	`A˝iUtMem£t
 (

393 *
De°
,

394 
UINT8
 
VÆue
,

395 
ACPI_SIZE
 
Cou¡
);

398 
	`A˝iUtToUµî
 (

399 
c
);

402 
	`A˝iUtToLowî
 (

403 
c
);

405 c⁄° 
UINT8
 
_a˝i_˘y≥
[];

407 
	#_ACPI_XA
 0x00

	)

408 
	#_ACPI_XS
 0x40

	)

409 
	#_ACPI_BB
 0x00

	)

410 
	#_ACPI_CN
 0x20

	)

411 
	#_ACPI_DI
 0x04

	)

412 
	#_ACPI_LO
 0x02

	)

413 
	#_ACPI_PU
 0x10

	)

414 
	#_ACPI_SP
 0x08

	)

415 
	#_ACPI_UP
 0x01

	)

416 
	#_ACPI_XD
 0x80

	)

418 
	#ACPI_IS_DIGIT
(
c
Ë(
_a˝i_˘y≥
[()(c)] & (
_ACPI_DI
))

	)

419 
	#ACPI_IS_SPACE
(
c
Ë(
_a˝i_˘y≥
[()(c)] & (
_ACPI_SP
))

	)

420 
	#ACPI_IS_XDIGIT
(
c
Ë(
_a˝i_˘y≥
[()(c)] & (
_ACPI_XD
))

	)

421 
	#ACPI_IS_UPPER
(
c
Ë(
_a˝i_˘y≥
[()(c)] & (
_ACPI_UP
))

	)

422 
	#ACPI_IS_LOWER
(
c
Ë(
_a˝i_˘y≥
[()(c)] & (
_ACPI_LO
))

	)

423 
	#ACPI_IS_PRINT
(
c
Ë(
_a˝i_˘y≥
[()(c)] & (
_ACPI_LO
 | 
_ACPI_UP
 | 
_ACPI_DI
 | 
_ACPI_XS
 | 
_ACPI_PU
))

	)

424 
	#ACPI_IS_ALPHA
(
c
Ë(
_a˝i_˘y≥
[()(c)] & (
_ACPI_LO
 | 
_ACPI_UP
))

	)

428 
	#ACPI_IS_ASCII
(
c
Ë((cË< 0x80)

	)

434 
ACPI_STATUS


435 
	`A˝iUtBuûdSim∂eObje˘
(

436 
ACPI_OPERAND_OBJECT
 *
Obj
,

437 
ACPI_OBJECT
 *
U£rObj
,

438 
UINT8
 *
D©aS∑˚
,

439 
UINT32
 *
Buf„rS∑˚U£d
);

441 
ACPI_STATUS


442 
	`A˝iUtBuûdPackageObje˘
 (

443 
ACPI_OPERAND_OBJECT
 *
Obj
,

444 
UINT8
 *
Buf„r
,

445 
UINT32
 *
S∑˚U£d
);

447 
ACPI_STATUS


448 
	`A˝iUtC›yIobje˘ToEobje˘
 (

449 
ACPI_OPERAND_OBJECT
 *
Obj
,

450 
ACPI_BUFFER
 *
RëBuf„r
);

452 
ACPI_STATUS


453 
	`A˝iUtC›yEobje˘ToIobje˘
 (

454 
ACPI_OBJECT
 *
Obj
,

455 
ACPI_OPERAND_OBJECT
 **
I¡î«lObj
);

457 
ACPI_STATUS


458 
	`A˝iUtC›yISim∂eToIsim∂e
 (

459 
ACPI_OPERAND_OBJECT
 *
Sour˚Obj
,

460 
ACPI_OPERAND_OBJECT
 *
De°Obj
);

462 
ACPI_STATUS


463 
	`A˝iUtC›yIobje˘ToIobje˘
 (

464 
ACPI_OPERAND_OBJECT
 *
Sour˚Desc
,

465 
ACPI_OPERAND_OBJECT
 **
De°Desc
,

466 
ACPI_WALK_STATE
 *
WÆkSèã
);

472 
ACPI_STATUS


473 
	`A˝iUtUpd©eObje˘Re„ªn˚
 (

474 
ACPI_OPERAND_OBJECT
 *
Obje˘
,

475 
UINT16
 
A˘i⁄
);

482 
	`A˝iUtInôSèckPåTø˚
 (

486 
	`A˝iUtTøckSèckPå
 (

490 
	`A˝iUtTø˚
 (

491 
UINT32
 
LöeNumbî
,

492 c⁄° *
Fun˘i⁄Name
,

493 c⁄° *
ModuÀName
,

494 
UINT32
 
Comp⁄ítId
);

497 
	`A˝iUtTø˚På
 (

498 
UINT32
 
LöeNumbî
,

499 c⁄° *
Fun˘i⁄Name
,

500 c⁄° *
ModuÀName
,

501 
UINT32
 
Comp⁄ítId
,

502 *
Poöãr
);

505 
	`A˝iUtTø˚U32
 (

506 
UINT32
 
LöeNumbî
,

507 c⁄° *
Fun˘i⁄Name
,

508 c⁄° *
ModuÀName
,

509 
UINT32
 
Comp⁄ítId
,

510 
UINT32
 
I¡egî
);

513 
	`A˝iUtTø˚Så
 (

514 
UINT32
 
LöeNumbî
,

515 c⁄° *
Fun˘i⁄Name
,

516 c⁄° *
ModuÀName
,

517 
UINT32
 
Comp⁄ítId
,

518 *
Såög
);

521 
	`A˝iUtExô
 (

522 
UINT32
 
LöeNumbî
,

523 c⁄° *
Fun˘i⁄Name
,

524 c⁄° *
ModuÀName
,

525 
UINT32
 
Comp⁄ítId
);

528 
	`A˝iUtSètusExô
 (

529 
UINT32
 
LöeNumbî
,

530 c⁄° *
Fun˘i⁄Name
,

531 c⁄° *
ModuÀName
,

532 
UINT32
 
Comp⁄ítId
,

533 
ACPI_STATUS
 
Sètus
);

536 
	`A˝iUtVÆueExô
 (

537 
UINT32
 
LöeNumbî
,

538 c⁄° *
Fun˘i⁄Name
,

539 c⁄° *
ModuÀName
,

540 
UINT32
 
Comp⁄ítId
,

541 
UINT64
 
VÆue
);

544 
	`A˝iUtPåExô
 (

545 
UINT32
 
LöeNumbî
,

546 c⁄° *
Fun˘i⁄Name
,

547 c⁄° *
ModuÀName
,

548 
UINT32
 
Comp⁄ítId
,

549 
UINT8
 *
På
);

552 
	`A˝iUtDebugDumpBuf„r
 (

553 
UINT8
 *
Buf„r
,

554 
UINT32
 
Cou¡
,

555 
UINT32
 
Di•œy
,

556 
UINT32
 
Comp⁄ítId
);

559 
	`A˝iUtDumpBuf„r
 (

560 
UINT8
 *
Buf„r
,

561 
UINT32
 
Cou¡
,

562 
UINT32
 
Di•œy
,

563 
UINT32
 
Off£t
);

565 #ifde‡
ACPI_APPLICATION


567 
	`A˝iUtDumpBuf„rToFûe
 (

568 
ACPI_FILE
 
Fûe
,

569 
UINT8
 *
Buf„r
,

570 
UINT32
 
Cou¡
,

571 
UINT32
 
Di•œy
,

572 
UINT32
 
Ba£Off£t
);

576 
	`A˝iUtRï‹tEº‹
 (

577 *
ModuÀName
,

578 
UINT32
 
LöeNumbî
);

581 
	`A˝iUtRï‹tInfo
 (

582 *
ModuÀName
,

583 
UINT32
 
LöeNumbî
);

586 
	`A˝iUtRï‹tW¨nög
 (

587 *
ModuÀName
,

588 
UINT32
 
LöeNumbî
);

594 
	`A˝iUtAddRe„ªn˚
 (

595 
ACPI_OPERAND_OBJECT
 *
Obje˘
);

598 
	`A˝iUtRemoveRe„ªn˚
 (

599 
ACPI_OPERAND_OBJECT
 *
Obje˘
);

602 
	`A˝iUtDñëeI¡î«lPackageObje˘
 (

603 
ACPI_OPERAND_OBJECT
 *
Obje˘
);

606 
	`A˝iUtDñëeI¡î«lSim∂eObje˘
 (

607 
ACPI_OPERAND_OBJECT
 *
Obje˘
);

610 
	`A˝iUtDñëeI¡î«lObje˘Li°
 (

611 
ACPI_OPERAND_OBJECT
 **
ObjLi°
);

617 
ACPI_STATUS


618 
	`A˝iUtEvÆu©eObje˘
 (

619 
ACPI_NAMESPACE_NODE
 *
PªfixNode
,

620 *
P©h
,

621 
UINT32
 
Ex≥˘edRëu∫Bty≥s
,

622 
ACPI_OPERAND_OBJECT
 **
Rëu∫Desc
);

624 
ACPI_STATUS


625 
	`A˝iUtEvÆu©eNumîicObje˘
 (

626 *
Obje˘Name
,

627 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
,

628 
UINT64
 *
VÆue
);

630 
ACPI_STATUS


631 
	`A˝iUtExecuã_STA
 (

632 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
,

633 
UINT32
 *
SètusFœgs
);

635 
ACPI_STATUS


636 
	`A˝iUtExecuãPowîMëhods
 (

637 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
,

638 c⁄° **
MëhodNames
,

639 
UINT8
 
MëhodCou¡
,

640 
UINT8
 *
OutVÆues
);

646 #ifde‡
ACPI_APPLICATION


647 
ACPI_STATUS


648 
	`A˝iUtRódTabÀFromFûe
 (

649 *
Fûíame
,

650 
ACPI_TABLE_HEADER
 **
TabÀ
);

657 
ACPI_STATUS


658 
	`A˝iUtExecuã_HID
 (

659 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
,

660 
ACPI_PNP_DEVICE_ID
 **
Rëu∫Id
);

662 
ACPI_STATUS


663 
	`A˝iUtExecuã_UID
 (

664 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
,

665 
ACPI_PNP_DEVICE_ID
 **
Rëu∫Id
);

667 
ACPI_STATUS


668 
	`A˝iUtExecuã_SUB
 (

669 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
,

670 
ACPI_PNP_DEVICE_ID
 **
Rëu∫Id
);

672 
ACPI_STATUS


673 
	`A˝iUtExecuã_CID
 (

674 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
,

675 
ACPI_PNP_DEVICE_ID_LIST
 **
Rëu∫CidLi°
);

681 
ACPI_STATUS


682 
	`A˝iUtCª©eRwLock
 (

683 
ACPI_RW_LOCK
 *
Lock
);

686 
	`A˝iUtDñëeRwLock
 (

687 
ACPI_RW_LOCK
 *
Lock
);

689 
ACPI_STATUS


690 
	`A˝iUtAcquúeRódLock
 (

691 
ACPI_RW_LOCK
 *
Lock
);

693 
ACPI_STATUS


694 
	`A˝iUtRñó£RódLock
 (

695 
ACPI_RW_LOCK
 *
Lock
);

697 
ACPI_STATUS


698 
	`A˝iUtAcquúeWrôeLock
 (

699 
ACPI_RW_LOCK
 *
Lock
);

702 
	`A˝iUtRñó£WrôeLock
 (

703 
ACPI_RW_LOCK
 *
Lock
);

709 
ACPI_OPERAND_OBJECT
 *

710 
	`A˝iUtCª©eI¡î«lObje˘Dbg
 (

711 c⁄° *
ModuÀName
,

712 
UINT32
 
LöeNumbî
,

713 
UINT32
 
Comp⁄ítId
,

714 
ACPI_OBJECT_TYPE
 
Ty≥
);

717 
	`A˝iUtAŒoˇãObje˘DescDbg
 (

718 c⁄° *
ModuÀName
,

719 
UINT32
 
LöeNumbî
,

720 
UINT32
 
Comp⁄ítId
);

722 
	#A˝iUtCª©eI¡î«lObje˘
(
t
Ë
	`A˝iUtCª©eI¡î«lObje˘Dbg
 (
_A˝iModuÀName
,
__LINE__
,
_COMPONENT
,t)

	)

723 
	#A˝iUtAŒoˇãObje˘Desc
(Ë
	`A˝iUtAŒoˇãObje˘DescDbg
 (
_A˝iModuÀName
,
__LINE__
,
_COMPONENT
)

	)

726 
	`A˝iUtDñëeObje˘Desc
 (

727 
ACPI_OPERAND_OBJECT
 *
Obje˘
);

729 
BOOLEAN


730 
	`A˝iUtVÆidI¡î«lObje˘
 (

731 *
Obje˘
);

733 
ACPI_OPERAND_OBJECT
 *

734 
	`A˝iUtCª©ePackageObje˘
 (

735 
UINT32
 
Cou¡
);

737 
ACPI_OPERAND_OBJECT
 *

738 
	`A˝iUtCª©eI¡egîObje˘
 (

739 
UINT64
 
VÆue
);

741 
ACPI_OPERAND_OBJECT
 *

742 
	`A˝iUtCª©eBuf„rObje˘
 (

743 
ACPI_SIZE
 
Buf„rSize
);

745 
ACPI_OPERAND_OBJECT
 *

746 
	`A˝iUtCª©eSåögObje˘
 (

747 
ACPI_SIZE
 
SåögSize
);

749 
ACPI_STATUS


750 
	`A˝iUtGëObje˘Size
(

751 
ACPI_OPERAND_OBJECT
 *
Obj
,

752 
ACPI_SIZE
 *
ObjLígth
);

758 
ACPI_STATUS


759 
	`A˝iUtInôülizeI¡îÁ˚s
 (

762 
ACPI_STATUS


763 
	`A˝iUtI¡îÁ˚Tîmö©e
 (

766 
ACPI_STATUS


767 
	`A˝iUtIn°ÆlI¡îÁ˚
 (

768 
ACPI_STRING
 
I¡îÁ˚Name
);

770 
ACPI_STATUS


771 
	`A˝iUtRemoveI¡îÁ˚
 (

772 
ACPI_STRING
 
I¡îÁ˚Name
);

774 
ACPI_STATUS


775 
	`A˝iUtUpd©eI¡îÁ˚s
 (

776 
UINT8
 
A˘i⁄
);

778 
ACPI_INTERFACE_INFO
 *

779 
	`A˝iUtGëI¡îÁ˚
 (

780 
ACPI_STRING
 
I¡îÁ˚Name
);

782 
ACPI_STATUS


783 
	`A˝iUtOsiIm∂emíèti⁄
 (

784 
ACPI_WALK_STATE
 *
WÆkSèã
);

790 c⁄° 
ACPI_PREDEFINED_INFO
 *

791 
	`A˝iUtGëNextPªdeföedMëhod
 (

792 c⁄° 
ACPI_PREDEFINED_INFO
 *
ThisName
);

794 c⁄° 
ACPI_PREDEFINED_INFO
 *

795 
	`A˝iUtM©chPªdeföedMëhod
 (

796 *
Name
);

799 
	`A˝iUtGëEx≥˘edRëu∫Ty≥s
 (

800 *
Buf„r
,

801 
UINT32
 
Ex≥˘edBty≥s
);

803 #i‡(
deföed
 
ACPI_ASL_COMPILER
 || deföed 
ACPI_HELP_APP
)

804 c⁄° 
ACPI_PREDEFINED_INFO
 *

805 
	`A˝iUtM©chResour˚Name
 (

806 *
Name
);

809 
	`A˝iUtDi•œyPªdeföedMëhod
 (

810 *
Buf„r
,

811 c⁄° 
ACPI_PREDEFINED_INFO
 *
ThisName
,

812 
BOOLEAN
 
Mu…iLöe
);

814 
UINT32


815 
	`A˝iUtGëResour˚BôWidth
 (

816 *
Buf„r
,

817 
UINT16
 
Ty≥s
);

825 
	`A˝iUtPushGíîicSèã
 (

826 
ACPI_GENERIC_STATE
 **
Li°Hód
,

827 
ACPI_GENERIC_STATE
 *
Sèã
);

829 
ACPI_GENERIC_STATE
 *

830 
	`A˝iUtP›GíîicSèã
 (

831 
ACPI_GENERIC_STATE
 **
Li°Hód
);

834 
ACPI_GENERIC_STATE
 *

835 
	`A˝iUtCª©eGíîicSèã
 (

838 
ACPI_THREAD_STATE
 *

839 
	`A˝iUtCª©eThªadSèã
 (

842 
ACPI_GENERIC_STATE
 *

843 
	`A˝iUtCª©eUpd©eSèã
 (

844 
ACPI_OPERAND_OBJECT
 *
Obje˘
,

845 
UINT16
 
A˘i⁄
);

847 
ACPI_GENERIC_STATE
 *

848 
	`A˝iUtCª©ePkgSèã
 (

849 *
I¡î«lObje˘
,

850 *
Exã∫ÆObje˘
,

851 
UINT16
 
Index
);

853 
ACPI_STATUS


854 
	`A˝iUtCª©eUpd©eSèãAndPush
 (

855 
ACPI_OPERAND_OBJECT
 *
Obje˘
,

856 
UINT16
 
A˘i⁄
,

857 
ACPI_GENERIC_STATE
 **
SèãLi°
);

859 
ACPI_GENERIC_STATE
 *

860 
	`A˝iUtCª©eC⁄åﬁSèã
 (

864 
	`A˝iUtDñëeGíîicSèã
 (

865 
ACPI_GENERIC_STATE
 *
Sèã
);

871 
ACPI_STATUS


872 
	`A˝iUtDivide
 (

873 
UINT64
 
InDividíd
,

874 
UINT64
 
InDivis‹
,

875 
UINT64
 *
OutQuŸõ¡
,

876 
UINT64
 *
OutRemaödî
);

878 
ACPI_STATUS


879 
	`A˝iUtSh‹tDivide
 (

880 
UINT64
 
InDividíd
,

881 
UINT32
 
Divis‹
,

882 
UINT64
 *
OutQuŸõ¡
,

883 
UINT32
 *
OutRemaödî
);

889 c⁄° 
ACPI_EXCEPTION_INFO
 *

890 
	`A˝iUtVÆid©eEx˚±i⁄
 (

891 
ACPI_STATUS
 
Sètus
);

893 
BOOLEAN


894 
	`A˝iUtIsPciRoŸBridge
 (

895 *
Id
);

897 #i‡(
deföed
 
ACPI_ASL_COMPILER
 || deföed 
ACPI_EXEC_APP
)

898 
BOOLEAN


899 
	`A˝iUtIsAmlTabÀ
 (

900 
ACPI_TABLE_HEADER
 *
TabÀ
);

903 
ACPI_STATUS


904 
	`A˝iUtWÆkPackageTªe
 (

905 
ACPI_OPERAND_OBJECT
 *
Sour˚Obje˘
,

906 *
T¨gëObje˘
,

907 
ACPI_PKG_CALLBACK
 
WÆkCÆlback
,

908 *
C⁄ãxt
);

913 
	#ACPI_ANY_BASE
 0

	)

915 
UINT32


916 
	`A˝iUtDw‹dByãSw≠
 (

917 
UINT32
 
VÆue
);

920 
	`A˝iUtSëI¡egîWidth
 (

921 
UINT8
 
Revisi⁄
);

923 #ifde‡
ACPI_DEBUG_OUTPUT


925 
	`A˝iUtDi•œyInôP©h«me
 (

926 
UINT8
 
Ty≥
,

927 
ACPI_NAMESPACE_NODE
 *
ObjH™dÀ
,

928 *
P©h
);

935 
ACPI_STATUS


936 
	`A˝iUtAŒoˇãOw√rId
 (

937 
ACPI_OWNER_ID
 *
Ow√rId
);

940 
	`A˝iUtRñó£Ow√rId
 (

941 
ACPI_OWNER_ID
 *
Ow√rId
);

947 
ACPI_STATUS


948 
	`A˝iUtWÆkAmlResour˚s
 (

949 
ACPI_WALK_STATE
 *
WÆkSèã
,

950 
UINT8
 *
Aml
,

951 
ACPI_SIZE
 
AmlLígth
,

952 
ACPI_WALK_AML_CALLBACK
 
U£rFun˘i⁄
,

953 **
C⁄ãxt
);

955 
ACPI_STATUS


956 
	`A˝iUtVÆid©eResour˚
 (

957 
ACPI_WALK_STATE
 *
WÆkSèã
,

958 *
Aml
,

959 
UINT8
 *
Rëu∫Index
);

961 
UINT32


962 
	`A˝iUtGëDes¸ùt‹Lígth
 (

963 *
Aml
);

965 
UINT16


966 
	`A˝iUtGëResour˚Lígth
 (

967 *
Aml
);

969 
UINT8


970 
	`A˝iUtGëResour˚HódîLígth
 (

971 *
Aml
);

973 
UINT8


974 
	`A˝iUtGëResour˚Ty≥
 (

975 *
Aml
);

977 
ACPI_STATUS


978 
	`A˝iUtGëResour˚EndTag
 (

979 
ACPI_OPERAND_OBJECT
 *
ObjDesc
,

980 
UINT8
 **
EndTag
);

987 
	`A˝iUtSåu¥
 (

988 *
SrcSåög
);

990 #ifde‡
ACPI_ASL_COMPILER


992 
	`A˝iUtSålwr
 (

993 *
SrcSåög
);

996 
	`A˝iUtSåicmp
 (

997 *
Såög1
,

998 *
Såög2
);

1001 
ACPI_STATUS


1002 
	`A˝iUtSåtoul64
 (

1003 *
Såög
,

1004 
UINT32
 
Ba£
,

1005 
UINT64
 *
RëI¡egî
);

1008 
	`A˝iUtPrötSåög
 (

1009 *
Såög
,

1010 
UINT16
 
MaxLígth
);

1012 #i‡
deföed
 
ACPI_ASL_COMPILER
 || deföed 
ACPI_EXEC_APP


1014 
	`UtC⁄vîtBack¶ashes
 (

1015 *
P©h«me
);

1018 
BOOLEAN


1019 
	`A˝iUtVÆidA˝iName
 (

1020 *
Name
);

1022 
BOOLEAN


1023 
	`A˝iUtVÆidA˝iCh¨
 (

1024 
Ch¨a˘î
,

1025 
UINT32
 
Posôi⁄
);

1028 
	`A˝iUtRïaúName
 (

1029 *
Name
);

1031 #i‡
	`deföed
 (
ACPI_DEBUGGER
Ë|| deföed (
ACPI_APPLICATION
)

1032 
BOOLEAN


1033 
	`A˝iUtSa„Så˝y
 (

1034 *
De°
,

1035 
ACPI_SIZE
 
De°Size
,

1036 *
Sour˚
);

1038 
BOOLEAN


1039 
	`A˝iUtSa„Såˇt
 (

1040 *
De°
,

1041 
ACPI_SIZE
 
De°Size
,

1042 *
Sour˚
);

1044 
BOOLEAN


1045 
	`A˝iUtSa„Sånˇt
 (

1046 *
De°
,

1047 
ACPI_SIZE
 
De°Size
,

1048 *
Sour˚
,

1049 
ACPI_SIZE
 
MaxTøns„rLígth
);

1056 
ACPI_STATUS


1057 
	`A˝iUtMuãxInôülize
 (

1061 
	`A˝iUtMuãxTîmö©e
 (

1064 
ACPI_STATUS


1065 
	`A˝iUtAcquúeMuãx
 (

1066 
ACPI_MUTEX_HANDLE
 
MuãxId
);

1068 
ACPI_STATUS


1069 
	`A˝iUtRñó£Muãx
 (

1070 
ACPI_MUTEX_HANDLE
 
MuãxId
);

1076 
ACPI_STATUS


1077 
	`A˝iUtCª©eCaches
 (

1080 
ACPI_STATUS


1081 
	`A˝iUtDñëeCaches
 (

1084 
ACPI_STATUS


1085 
	`A˝iUtVÆid©eBuf„r
 (

1086 
ACPI_BUFFER
 *
Buf„r
);

1088 
ACPI_STATUS


1089 
	`A˝iUtInôülizeBuf„r
 (

1090 
ACPI_BUFFER
 *
Buf„r
,

1091 
ACPI_SIZE
 
RequúedLígth
);

1093 #ifde‡
ACPI_DBG_TRACK_ALLOCATIONS


1095 
	`A˝iUtAŒoˇãAndTøck
 (

1096 
ACPI_SIZE
 
Size
,

1097 
UINT32
 
Comp⁄ít
,

1098 c⁄° *
ModuÀ
,

1099 
UINT32
 
Löe
);

1102 
	`A˝iUtAŒoˇãZî€dAndTøck
 (

1103 
ACPI_SIZE
 
Size
,

1104 
UINT32
 
Comp⁄ít
,

1105 c⁄° *
ModuÀ
,

1106 
UINT32
 
Löe
);

1109 
	`A˝iUtFªeAndTøck
 (

1110 *
Addªss
,

1111 
UINT32
 
Comp⁄ít
,

1112 c⁄° *
ModuÀ
,

1113 
UINT32
 
Löe
);

1116 
	`A˝iUtDumpAŒoˇti⁄Info
 (

1120 
	`A˝iUtDumpAŒoˇti⁄s
 (

1121 
UINT32
 
Comp⁄ít
,

1122 c⁄° *
ModuÀ
);

1124 
ACPI_STATUS


1125 
	`A˝iUtCª©eLi°
 (

1126 *
Li°Name
,

1127 
UINT16
 
Obje˘Size
,

1128 
ACPI_MEMORY_LIST
 **
Rëu∫Cache
);

1135 
ACPI_STATUS


1136 
	`A˝iUtAddAddªssR™ge
 (

1137 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
,

1138 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

1139 
UINT32
 
Lígth
,

1140 
ACPI_NAMESPACE_NODE
 *
Regi⁄Node
);

1143 
	`A˝iUtRemoveAddªssR™ge
 (

1144 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
,

1145 
ACPI_NAMESPACE_NODE
 *
Regi⁄Node
);

1147 
UINT32


1148 
	`A˝iUtCheckAddªssR™ge
 (

1149 
ACPI_ADR_SPACE_TYPE
 
S∑˚Id
,

1150 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

1151 
UINT32
 
Lígth
,

1152 
BOOLEAN
 
W¨n
);

1155 
	`A˝iUtDñëeAddªssLi°s
 (

1161 
ACPI_INTERNAL_VAR_XFACE


1162 
	`A˝iUtPªdeföedW¨nög
 (

1163 c⁄° *
ModuÀName
,

1164 
UINT32
 
LöeNumbî
,

1165 *
P©h«me
,

1166 
UINT8
 
NodeFœgs
,

1167 c⁄° *
F‹m©
,

1170 
ACPI_INTERNAL_VAR_XFACE


1171 
	`A˝iUtPªdeföedInfo
 (

1172 c⁄° *
ModuÀName
,

1173 
UINT32
 
LöeNumbî
,

1174 *
P©h«me
,

1175 
UINT8
 
NodeFœgs
,

1176 c⁄° *
F‹m©
,

1179 
ACPI_INTERNAL_VAR_XFACE


1180 
	`A˝iUtPªdeföedBiosEº‹
 (

1181 c⁄° *
ModuÀName
,

1182 
UINT32
 
LöeNumbî
,

1183 *
P©h«me
,

1184 
UINT8
 
NodeFœgs
,

1185 c⁄° *
F‹m©
,

1189 
	`A˝iUtName•a˚Eº‹
 (

1190 c⁄° *
ModuÀName
,

1191 
UINT32
 
LöeNumbî
,

1192 c⁄° *
I¡î«lName
,

1193 
ACPI_STATUS
 
LookupSètus
);

1196 
	`A˝iUtMëhodEº‹
 (

1197 c⁄° *
ModuÀName
,

1198 
UINT32
 
LöeNumbî
,

1199 c⁄° *
Mesßge
,

1200 
ACPI_NAMESPACE_NODE
 *
Node
,

1201 c⁄° *
P©h
,

1202 
ACPI_STATUS
 
LookupSètus
);

1207 c⁄° 
AH_PREDEFINED_NAME
 *

1208 
	`A˝iAhM©chPªdeföedName
 (

1209 *
Name£g
);

1211 c⁄° 
AH_DEVICE_ID
 *

1212 
	`A˝iAhM©chH¨dw¨eId
 (

1213 *
Hid
);

1216 
	`A˝iAhM©chUuid
 (

1217 
UINT8
 *
D©a
);

1223 
	`A˝iUtSˇnNumbî
 (

1224 c⁄° *
Såög
,

1225 
UINT64
 *
NumbîPå
);

1228 
	`A˝iUtPrötNumbî
 (

1229 *
Såög
,

1230 
UINT64
 
Numbî
);

1233 
	`A˝iUtV¢¥ötf
 (

1234 *
Såög
,

1235 
ACPI_SIZE
 
Size
,

1236 c⁄° *
F‹m©
,

1237 
va_li°
 
Args
);

1240 
	`A˝iUtS≈rötf
 (

1241 *
Såög
,

1242 
ACPI_SIZE
 
Size
,

1243 c⁄° *
F‹m©
,

1246 #ifde‡
ACPI_APPLICATION


1248 
	`A˝iUtFûeV¥ötf
 (

1249 
ACPI_FILE
 
Fûe
,

1250 c⁄° *
F‹m©
,

1251 
va_li°
 
Args
);

1254 
	`A˝iUtFûePrötf
 (

1255 
ACPI_FILE
 
Fûe
,

1256 c⁄° *
F‹m©
,

1263 #i‡(
deföed
 
ACPI_ASL_COMPILER
 || deföed 
ACPI_EXEC_APP
 || deföed 
ACPI_HELP_APP
)

1265 
	`A˝iUtC⁄vîtSåögToUuid
 (

1266 *
InSåög
,

1267 
UINT8
 *
UuidBuf„r
);

	@src/extern/acpica/source/include/amlcode.h

118 #i‚de‡
__AMLCODE_H__


119 
	#__AMLCODE_H__


	)

123 
	#AML_NULL_CHAR
 (
UINT16
Ë0x00

	)

125 
	#AML_ZERO_OP
 (
UINT16
Ë0x00

	)

126 
	#AML_ONE_OP
 (
UINT16
Ë0x01

	)

127 
	#AML_UNASSIGNED
 (
UINT16
Ë0x02

	)

128 
	#AML_ALIAS_OP
 (
UINT16
Ë0x06

	)

129 
	#AML_NAME_OP
 (
UINT16
Ë0x08

	)

130 
	#AML_BYTE_OP
 (
UINT16
Ë0x0a

	)

131 
	#AML_WORD_OP
 (
UINT16
Ë0x0b

	)

132 
	#AML_DWORD_OP
 (
UINT16
Ë0x0c

	)

133 
	#AML_STRING_OP
 (
UINT16
Ë0x0d

	)

134 
	#AML_QWORD_OP
 (
UINT16
Ë0x0ê

	)

135 
	#AML_SCOPE_OP
 (
UINT16
Ë0x10

	)

136 
	#AML_BUFFER_OP
 (
UINT16
Ë0x11

	)

137 
	#AML_PACKAGE_OP
 (
UINT16
Ë0x12

	)

138 
	#AML_VAR_PACKAGE_OP
 (
UINT16
Ë0x13

	)

139 
	#AML_METHOD_OP
 (
UINT16
Ë0x14

	)

140 
	#AML_EXTERNAL_OP
 (
UINT16
Ë0x15

	)

141 
	#AML_DUAL_NAME_PREFIX
 (
UINT16
Ë0x2e

	)

142 
	#AML_MULTI_NAME_PREFIX_OP
 (
UINT16
Ë0x2f

	)

143 
	#AML_NAME_CHAR_SUBSEQ
 (
UINT16
Ë0x30

	)

144 
	#AML_NAME_CHAR_FIRST
 (
UINT16
Ë0x41

	)

145 
	#AML_EXTENDED_OP_PREFIX
 (
UINT16
Ë0x5b

	)

146 
	#AML_ROOT_PREFIX
 (
UINT16
Ë0x5c

	)

147 
	#AML_PARENT_PREFIX
 (
UINT16
Ë0x5e

	)

148 
	#AML_LOCAL_OP
 (
UINT16
Ë0x60

	)

149 
	#AML_LOCAL0
 (
UINT16
Ë0x60

	)

150 
	#AML_LOCAL1
 (
UINT16
Ë0x61

	)

151 
	#AML_LOCAL2
 (
UINT16
Ë0x62

	)

152 
	#AML_LOCAL3
 (
UINT16
Ë0x63

	)

153 
	#AML_LOCAL4
 (
UINT16
Ë0x64

	)

154 
	#AML_LOCAL5
 (
UINT16
Ë0x65

	)

155 
	#AML_LOCAL6
 (
UINT16
Ë0x66

	)

156 
	#AML_LOCAL7
 (
UINT16
Ë0x67

	)

157 
	#AML_ARG_OP
 (
UINT16
Ë0x68

	)

158 
	#AML_ARG0
 (
UINT16
Ë0x68

	)

159 
	#AML_ARG1
 (
UINT16
Ë0x69

	)

160 
	#AML_ARG2
 (
UINT16
Ë0x6a

	)

161 
	#AML_ARG3
 (
UINT16
Ë0x6b

	)

162 
	#AML_ARG4
 (
UINT16
Ë0x6c

	)

163 
	#AML_ARG5
 (
UINT16
Ë0x6d

	)

164 
	#AML_ARG6
 (
UINT16
Ë0x6e

	)

165 
	#AML_STORE_OP
 (
UINT16
Ë0x70

	)

166 
	#AML_REF_OF_OP
 (
UINT16
Ë0x71

	)

167 
	#AML_ADD_OP
 (
UINT16
Ë0x72

	)

168 
	#AML_CONCAT_OP
 (
UINT16
Ë0x73

	)

169 
	#AML_SUBTRACT_OP
 (
UINT16
Ë0x74

	)

170 
	#AML_INCREMENT_OP
 (
UINT16
Ë0x75

	)

171 
	#AML_DECREMENT_OP
 (
UINT16
Ë0x76

	)

172 
	#AML_MULTIPLY_OP
 (
UINT16
Ë0x77

	)

173 
	#AML_DIVIDE_OP
 (
UINT16
Ë0x78

	)

174 
	#AML_SHIFT_LEFT_OP
 (
UINT16
Ë0x79

	)

175 
	#AML_SHIFT_RIGHT_OP
 (
UINT16
Ë0x7a

	)

176 
	#AML_BIT_AND_OP
 (
UINT16
Ë0x7b

	)

177 
	#AML_BIT_NAND_OP
 (
UINT16
Ë0x7c

	)

178 
	#AML_BIT_OR_OP
 (
UINT16
Ë0x7d

	)

179 
	#AML_BIT_NOR_OP
 (
UINT16
Ë0x7e

	)

180 
	#AML_BIT_XOR_OP
 (
UINT16
Ë0x7f

	)

181 
	#AML_BIT_NOT_OP
 (
UINT16
Ë0x80

	)

182 
	#AML_FIND_SET_LEFT_BIT_OP
 (
UINT16
Ë0x81

	)

183 
	#AML_FIND_SET_RIGHT_BIT_OP
 (
UINT16
Ë0x82

	)

184 
	#AML_DEREF_OF_OP
 (
UINT16
Ë0x83

	)

185 
	#AML_CONCAT_RES_OP
 (
UINT16
Ë0x84

	)

186 
	#AML_MOD_OP
 (
UINT16
Ë0x85

	)

187 
	#AML_NOTIFY_OP
 (
UINT16
Ë0x86

	)

188 
	#AML_SIZE_OF_OP
 (
UINT16
Ë0x87

	)

189 
	#AML_INDEX_OP
 (
UINT16
Ë0x88

	)

190 
	#AML_MATCH_OP
 (
UINT16
Ë0x89

	)

191 
	#AML_CREATE_DWORD_FIELD_OP
 (
UINT16
Ë0x8a

	)

192 
	#AML_CREATE_WORD_FIELD_OP
 (
UINT16
Ë0x8b

	)

193 
	#AML_CREATE_BYTE_FIELD_OP
 (
UINT16
Ë0x8c

	)

194 
	#AML_CREATE_BIT_FIELD_OP
 (
UINT16
Ë0x8d

	)

195 
	#AML_TYPE_OP
 (
UINT16
Ë0x8e

	)

196 
	#AML_CREATE_QWORD_FIELD_OP
 (
UINT16
Ë0x8‡

	)

197 
	#AML_LAND_OP
 (
UINT16
Ë0x90

	)

198 
	#AML_LOR_OP
 (
UINT16
Ë0x91

	)

199 
	#AML_LNOT_OP
 (
UINT16
Ë0x92

	)

200 
	#AML_LEQUAL_OP
 (
UINT16
Ë0x93

	)

201 
	#AML_LGREATER_OP
 (
UINT16
Ë0x94

	)

202 
	#AML_LLESS_OP
 (
UINT16
Ë0x95

	)

203 
	#AML_TO_BUFFER_OP
 (
UINT16
Ë0x96

	)

204 
	#AML_TO_DECSTRING_OP
 (
UINT16
Ë0x97

	)

205 
	#AML_TO_HEXSTRING_OP
 (
UINT16
Ë0x98

	)

206 
	#AML_TO_INTEGER_OP
 (
UINT16
Ë0x99

	)

207 
	#AML_TO_STRING_OP
 (
UINT16
Ë0x9¯

	)

208 
	#AML_COPY_OP
 (
UINT16
Ë0x9d

	)

209 
	#AML_MID_OP
 (
UINT16
Ë0x9ê

	)

210 
	#AML_CONTINUE_OP
 (
UINT16
Ë0x9‡

	)

211 
	#AML_IF_OP
 (
UINT16
Ë0xa0

	)

212 
	#AML_ELSE_OP
 (
UINT16
Ë0xa1

	)

213 
	#AML_WHILE_OP
 (
UINT16
Ë0xa2

	)

214 
	#AML_NOOP_OP
 (
UINT16
Ë0xa3

	)

215 
	#AML_RETURN_OP
 (
UINT16
Ë0xa4

	)

216 
	#AML_BREAK_OP
 (
UINT16
Ë0xa5

	)

217 
	#AML_BREAK_POINT_OP
 (
UINT16
Ë0xcc

	)

218 
	#AML_ONES_OP
 (
UINT16
Ë0xff

	)

222 
	#AML_EXTENDED_OPCODE
 (
UINT16
Ë0x5b00

	)

224 
	#AML_MUTEX_OP
 (
UINT16
Ë0x5b01

	)

225 
	#AML_EVENT_OP
 (
UINT16
Ë0x5b02

	)

226 
	#AML_SHIFT_RIGHT_BIT_OP
 (
UINT16
Ë0x5b10

	)

227 
	#AML_SHIFT_LEFT_BIT_OP
 (
UINT16
Ë0x5b11

	)

228 
	#AML_COND_REF_OF_OP
 (
UINT16
Ë0x5b12

	)

229 
	#AML_CREATE_FIELD_OP
 (
UINT16
Ë0x5b13

	)

230 
	#AML_LOAD_TABLE_OP
 (
UINT16
Ë0x5b1‡

	)

231 
	#AML_LOAD_OP
 (
UINT16
Ë0x5b20

	)

232 
	#AML_STALL_OP
 (
UINT16
Ë0x5b21

	)

233 
	#AML_SLEEP_OP
 (
UINT16
Ë0x5b22

	)

234 
	#AML_ACQUIRE_OP
 (
UINT16
Ë0x5b23

	)

235 
	#AML_SIGNAL_OP
 (
UINT16
Ë0x5b24

	)

236 
	#AML_WAIT_OP
 (
UINT16
Ë0x5b25

	)

237 
	#AML_RESET_OP
 (
UINT16
Ë0x5b26

	)

238 
	#AML_RELEASE_OP
 (
UINT16
Ë0x5b27

	)

239 
	#AML_FROM_BCD_OP
 (
UINT16
Ë0x5b28

	)

240 
	#AML_TO_BCD_OP
 (
UINT16
Ë0x5b29

	)

241 
	#AML_UNLOAD_OP
 (
UINT16
Ë0x5b2a

	)

242 
	#AML_REVISION_OP
 (
UINT16
Ë0x5b30

	)

243 
	#AML_DEBUG_OP
 (
UINT16
Ë0x5b31

	)

244 
	#AML_FATAL_OP
 (
UINT16
Ë0x5b32

	)

245 
	#AML_TIMER_OP
 (
UINT16
Ë0x5b33

	)

246 
	#AML_REGION_OP
 (
UINT16
Ë0x5b80

	)

247 
	#AML_FIELD_OP
 (
UINT16
Ë0x5b81

	)

248 
	#AML_DEVICE_OP
 (
UINT16
Ë0x5b82

	)

249 
	#AML_PROCESSOR_OP
 (
UINT16
Ë0x5b83

	)

250 
	#AML_POWER_RES_OP
 (
UINT16
Ë0x5b84

	)

251 
	#AML_THERMAL_ZONE_OP
 (
UINT16
Ë0x5b85

	)

252 
	#AML_INDEX_FIELD_OP
 (
UINT16
Ë0x5b86

	)

253 
	#AML_BANK_FIELD_OP
 (
UINT16
Ë0x5b87

	)

254 
	#AML_DATA_REGION_OP
 (
UINT16
Ë0x5b88

	)

261 
	#AML_LGREATEREQUAL_OP
 (
UINT16
Ë0x9295

	)

262 
	#AML_LLESSEQUAL_OP
 (
UINT16
Ë0x9294

	)

263 
	#AML_LNOTEQUAL_OP
 (
UINT16
Ë0x9293

	)

269 
	#AML_FIELD_OFFSET_OP
 (
UINT8
Ë0x00

	)

270 
	#AML_FIELD_ACCESS_OP
 (
UINT8
Ë0x01

	)

271 
	#AML_FIELD_CONNECTION_OP
 (
UINT8
Ë0x02

	)

272 
	#AML_FIELD_EXT_ACCESS_OP
 (
UINT8
Ë0x03

	)

280 
	#AML_INT_NAMEPATH_OP
 (
UINT16
Ë0x002d

	)

281 
	#AML_INT_NAMEDFIELD_OP
 (
UINT16
Ë0x0030

	)

282 
	#AML_INT_RESERVEDFIELD_OP
 (
UINT16
Ë0x0031

	)

283 
	#AML_INT_ACCESSFIELD_OP
 (
UINT16
Ë0x0032

	)

284 
	#AML_INT_BYTELIST_OP
 (
UINT16
Ë0x0033

	)

285 
	#AML_INT_METHODCALL_OP
 (
UINT16
Ë0x0035

	)

286 
	#AML_INT_RETURN_VALUE_OP
 (
UINT16
Ë0x0036

	)

287 
	#AML_INT_EVAL_SUBTREE_OP
 (
UINT16
Ë0x0037

	)

288 
	#AML_INT_CONNECTION_OP
 (
UINT16
Ë0x0038

	)

289 
	#AML_INT_EXTACCESSFIELD_OP
 (
UINT16
Ë0x0039

	)

291 
	#ARG_NONE
 0x0

	)

299 
	#ARGP_BYTEDATA
 0x01

	)

300 
	#ARGP_BYTELIST
 0x02

	)

301 
	#ARGP_CHARLIST
 0x03

	)

302 
	#ARGP_DATAOBJ
 0x04

	)

303 
	#ARGP_DATAOBJLIST
 0x05

	)

304 
	#ARGP_DWORDDATA
 0x06

	)

305 
	#ARGP_FIELDLIST
 0x07

	)

306 
	#ARGP_NAME
 0x08

	)

307 
	#ARGP_NAMESTRING
 0x09

	)

308 
	#ARGP_OBJLIST
 0x0A

	)

309 
	#ARGP_PKGLENGTH
 0x0B

	)

310 
	#ARGP_SUPERNAME
 0x0C

	)

311 
	#ARGP_TARGET
 0x0D

	)

312 
	#ARGP_TERMARG
 0x0E

	)

313 
	#ARGP_TERMLIST
 0x0F

	)

314 
	#ARGP_WORDDATA
 0x10

	)

315 
	#ARGP_QWORDDATA
 0x11

	)

316 
	#ARGP_SIMPLENAME
 0x12

	)

332 
	#ARGI_ANYTYPE
 0x01

	)

333 
	#ARGI_PACKAGE
 0x02

	)

334 
	#ARGI_EVENT
 0x03

	)

335 
	#ARGI_MUTEX
 0x04

	)

336 
	#ARGI_DDBHANDLE
 0x05

	)

340 
	#ARGI_INTEGER
 0x06

	)

341 
	#ARGI_STRING
 0x07

	)

342 
	#ARGI_BUFFER
 0x08

	)

343 
	#ARGI_BUFFER_OR_STRING
 0x09

	)

344 
	#ARGI_COMPUTEDATA
 0x0A

	)

348 
	#ARGI_INTEGER_REF
 0x0B

	)

349 
	#ARGI_OBJECT_REF
 0x0C

	)

350 
	#ARGI_DEVICE_REF
 0x0D

	)

351 
	#ARGI_REFERENCE
 0x0E

	)

352 
	#ARGI_TARGETREF
 0x0F

	)

353 
	#ARGI_FIXED_TARGET
 0x10

	)

354 
	#ARGI_SIMPLE_TARGET
 0x11

	)

358 
	#ARGI_DATAOBJECT
 0x12

	)

359 
	#ARGI_COMPLEXOBJ
 0x13

	)

360 
	#ARGI_REF_OR_STRING
 0x14

	)

361 
	#ARGI_REGION_OR_BUFFER
 0x15

	)

362 
	#ARGI_DATAREFOBJ
 0x16

	)

366 
	#ARGI_INVALID_OPCODE
 0xFFFFFFFF

	)

372 
	#AML_EXTOP_HASH_OFFSET
 22

	)

373 
	#AML_LNOT_HASH_OFFSET
 19

	)

379 
	#OPGRP_NAMED
 0x01

	)

380 
	#OPGRP_FIELD
 0x02

	)

381 
	#OPGRP_BYTELIST
 0x04

	)

390 
	#AML_LOGICAL
 0x0001

	)

391 
	#AML_LOGICAL_NUMERIC
 0x0002

	)

392 
	#AML_MATH
 0x0004

	)

393 
	#AML_CREATE
 0x0008

	)

394 
	#AML_FIELD
 0x0010

	)

395 
	#AML_DEFER
 0x0020

	)

396 
	#AML_NAMED
 0x0040

	)

397 
	#AML_NSNODE
 0x0080

	)

398 
	#AML_NSOPCODE
 0x0100

	)

399 
	#AML_NSOBJECT
 0x0200

	)

400 
	#AML_HAS_RETVAL
 0x0400

	)

401 
	#AML_HAS_TARGET
 0x0800

	)

402 
	#AML_HAS_ARGS
 0x1000

	)

403 
	#AML_CONSTANT
 0x2000

	)

404 
	#AML_NO_OPERAND_RESOLVE
 0x4000

	)

408 
	#AML_FLAGS_EXEC_0A_0T_1R
 
AML_HAS_RETVAL


	)

409 
	#AML_FLAGS_EXEC_1A_0T_0R
 
AML_HAS_ARGS


	)

410 
	#AML_FLAGS_EXEC_1A_0T_1R
 
AML_HAS_ARGS
 | 
AML_HAS_RETVAL


	)

411 
	#AML_FLAGS_EXEC_1A_1T_0R
 
AML_HAS_ARGS
 | 
AML_HAS_TARGET


	)

412 
	#AML_FLAGS_EXEC_1A_1T_1R
 
AML_HAS_ARGS
 | 
AML_HAS_TARGET
 | 
AML_HAS_RETVAL


	)

413 
	#AML_FLAGS_EXEC_2A_0T_0R
 
AML_HAS_ARGS


	)

414 
	#AML_FLAGS_EXEC_2A_0T_1R
 
AML_HAS_ARGS
 | 
AML_HAS_RETVAL


	)

415 
	#AML_FLAGS_EXEC_2A_1T_1R
 
AML_HAS_ARGS
 | 
AML_HAS_TARGET
 | 
AML_HAS_RETVAL


	)

416 
	#AML_FLAGS_EXEC_2A_2T_1R
 
AML_HAS_ARGS
 | 
AML_HAS_TARGET
 | 
AML_HAS_RETVAL


	)

417 
	#AML_FLAGS_EXEC_3A_0T_0R
 
AML_HAS_ARGS


	)

418 
	#AML_FLAGS_EXEC_3A_1T_1R
 
AML_HAS_ARGS
 | 
AML_HAS_TARGET
 | 
AML_HAS_RETVAL


	)

419 
	#AML_FLAGS_EXEC_6A_0T_1R
 
AML_HAS_ARGS
 | 
AML_HAS_RETVAL


	)

426 
	#AML_TYPE_EXEC_0A_0T_1R
 0x00

	)

427 
	#AML_TYPE_EXEC_1A_0T_0R
 0x01

	)

428 
	#AML_TYPE_EXEC_1A_0T_1R
 0x02

	)

429 
	#AML_TYPE_EXEC_1A_1T_0R
 0x03

	)

430 
	#AML_TYPE_EXEC_1A_1T_1R
 0x04

	)

431 
	#AML_TYPE_EXEC_2A_0T_0R
 0x05

	)

432 
	#AML_TYPE_EXEC_2A_0T_1R
 0x06

	)

433 
	#AML_TYPE_EXEC_2A_1T_1R
 0x07

	)

434 
	#AML_TYPE_EXEC_2A_2T_1R
 0x08

	)

435 
	#AML_TYPE_EXEC_3A_0T_0R
 0x09

	)

436 
	#AML_TYPE_EXEC_3A_1T_1R
 0x0A

	)

437 
	#AML_TYPE_EXEC_6A_0T_1R
 0x0B

	)

440 
	#AML_TYPE_LITERAL
 0x0B

	)

441 
	#AML_TYPE_CONSTANT
 0x0C

	)

442 
	#AML_TYPE_METHOD_ARGUMENT
 0x0D

	)

443 
	#AML_TYPE_LOCAL_VARIABLE
 0x0E

	)

444 
	#AML_TYPE_DATA_TERM
 0x0F

	)

448 
	#AML_TYPE_METHOD_CALL
 0x10

	)

452 
	#AML_TYPE_CREATE_FIELD
 0x11

	)

453 
	#AML_TYPE_CREATE_OBJECT
 0x12

	)

454 
	#AML_TYPE_CONTROL
 0x13

	)

455 
	#AML_TYPE_NAMED_NO_OBJ
 0x14

	)

456 
	#AML_TYPE_NAMED_FIELD
 0x15

	)

457 
	#AML_TYPE_NAMED_SIMPLE
 0x16

	)

458 
	#AML_TYPE_NAMED_COMPLEX
 0x17

	)

459 
	#AML_TYPE_RETURN
 0x18

	)

461 
	#AML_TYPE_UNDEFINED
 0x19

	)

462 
	#AML_TYPE_BOGUS
 0x1A

	)

466 
	#ACPI_AML_PACKAGE_TYPE1
 0x40

	)

467 
	#ACPI_AML_PACKAGE_TYPE2
 0x4000

	)

468 
	#ACPI_AML_PACKAGE_TYPE3
 0x400000

	)

469 
	#ACPI_AML_PACKAGE_TYPE4
 0x40000000

	)

474 
	#AML_CLASS_EXECUTE
 0x00

	)

475 
	#AML_CLASS_CREATE
 0x01

	)

476 
	#AML_CLASS_ARGUMENT
 0x02

	)

477 
	#AML_CLASS_NAMED_OBJECT
 0x03

	)

478 
	#AML_CLASS_CONTROL
 0x04

	)

479 
	#AML_CLASS_ASCII
 0x05

	)

480 
	#AML_CLASS_PREFIX
 0x06

	)

481 
	#AML_CLASS_INTERNAL
 0x07

	)

482 
	#AML_CLASS_RETURN_VALUE
 0x08

	)

483 
	#AML_CLASS_METHOD_CALL
 0x09

	)

484 
	#AML_CLASS_UNKNOWN
 0x0A

	)

491 
	mMATCH_MTR
 = 0,

492 
	mMATCH_MEQ
 = 1,

493 
	mMATCH_MLE
 = 2,

494 
	mMATCH_MLT
 = 3,

495 
	mMATCH_MGE
 = 4,

496 
	mMATCH_MGT
 = 5

498 } 
	tAML_MATCH_OPERATOR
;

500 
	#MAX_MATCH_OPERATOR
 5

	)

516 
	#AML_FIELD_ACCESS_TYPE_MASK
 0x0F

	)

517 
	#AML_FIELD_LOCK_RULE_MASK
 0x10

	)

518 
	#AML_FIELD_UPDATE_RULE_MASK
 0x60

	)

525 
	mAML_FIELD_ACCESS_ANY
 = 0x00,

526 
	mAML_FIELD_ACCESS_BYTE
 = 0x01,

527 
	mAML_FIELD_ACCESS_WORD
 = 0x02,

528 
	mAML_FIELD_ACCESS_DWORD
 = 0x03,

529 
	mAML_FIELD_ACCESS_QWORD
 = 0x04,

530 
	mAML_FIELD_ACCESS_BUFFER
 = 0x05

532 } 
	tAML_ACCESS_TYPE
;

539 
	mAML_FIELD_LOCK_NEVER
 = 0x00,

540 
	mAML_FIELD_LOCK_ALWAYS
 = 0x10

542 } 
	tAML_LOCK_RULE
;

549 
	mAML_FIELD_UPDATE_PRESERVE
 = 0x00,

550 
	mAML_FIELD_UPDATE_WRITE_AS_ONES
 = 0x20,

551 
	mAML_FIELD_UPDATE_WRITE_AS_ZEROS
 = 0x40

553 } 
	tAML_UPDATE_RULE
;

563 
	mAML_FIELD_ATTRIB_QUICK
 = 0x02,

564 
	mAML_FIELD_ATTRIB_SEND_RCV
 = 0x04,

565 
	mAML_FIELD_ATTRIB_BYTE
 = 0x06,

566 
	mAML_FIELD_ATTRIB_WORD
 = 0x08,

567 
	mAML_FIELD_ATTRIB_BLOCK
 = 0x0A,

568 
	mAML_FIELD_ATTRIB_MULTIBYTE
 = 0x0B,

569 
	mAML_FIELD_ATTRIB_WORD_CALL
 = 0x0C,

570 
	mAML_FIELD_ATTRIB_BLOCK_CALL
 = 0x0D,

571 
	mAML_FIELD_ATTRIB_RAW_BYTES
 = 0x0E,

572 
	mAML_FIELD_ATTRIB_RAW_PROCESS
 = 0x0F

574 } 
	tAML_ACCESS_ATTRIBUTE
;

579 
	#AML_METHOD_ARG_COUNT
 0x07

	)

580 
	#AML_METHOD_SERIALIZED
 0x08

	)

581 
	#AML_METHOD_SYNC_LEVEL
 0xF0

	)

	@src/extern/acpica/source/include/amlresrc.h

118 #i‚de‡
__AMLRESRC_H


119 
	#__AMLRESRC_H


	)

126 
	#ACPI_RESTAG_ADDRESS
 "_ADR"

	)

127 
	#ACPI_RESTAG_ALIGNMENT
 "_ALN"

	)

128 
	#ACPI_RESTAG_ADDRESSSPACE
 "_ASI"

	)

129 
	#ACPI_RESTAG_ACCESSSIZE
 "_ASZ"

	)

130 
	#ACPI_RESTAG_TYPESPECIFICATTRIBUTES
 "_ATT"

	)

131 
	#ACPI_RESTAG_BASEADDRESS
 "_BAS"

	)

132 
	#ACPI_RESTAG_BUSMASTER
 "_BM_"

	)

133 
	#ACPI_RESTAG_DEBOUNCETIME
 "_DBT"

	)

134 
	#ACPI_RESTAG_DECODE
 "_DEC"

	)

135 
	#ACPI_RESTAG_DEVICEPOLARITY
 "_DPL"

	)

136 
	#ACPI_RESTAG_DMA
 "_DMA"

	)

137 
	#ACPI_RESTAG_DMATYPE
 "_TYP"

	)

138 
	#ACPI_RESTAG_DRIVESTRENGTH
 "_DRS"

	)

139 
	#ACPI_RESTAG_ENDIANNESS
 "_END"

	)

140 
	#ACPI_RESTAG_FLOWCONTROL
 "_FLC"

	)

141 
	#ACPI_RESTAG_GRANULARITY
 "_GRA"

	)

142 
	#ACPI_RESTAG_INTERRUPT
 "_INT"

	)

143 
	#ACPI_RESTAG_INTERRUPTLEVEL
 "_LL_"

	)

144 
	#ACPI_RESTAG_INTERRUPTSHARE
 "_SHR"

	)

145 
	#ACPI_RESTAG_INTERRUPTTYPE
 "_HE_"

	)

146 
	#ACPI_RESTAG_IORESTRICTION
 "_IOR"

	)

147 
	#ACPI_RESTAG_LENGTH
 "_LEN"

	)

148 
	#ACPI_RESTAG_LINE
 "_LIN"

	)

149 
	#ACPI_RESTAG_MEMATTRIBUTES
 "_MTP"

	)

150 
	#ACPI_RESTAG_MEMTYPE
 "_MEM"

	)

151 
	#ACPI_RESTAG_MAXADDR
 "_MAX"

	)

152 
	#ACPI_RESTAG_MINADDR
 "_MIN"

	)

153 
	#ACPI_RESTAG_MAXTYPE
 "_MAF"

	)

154 
	#ACPI_RESTAG_MINTYPE
 "_MIF"

	)

155 
	#ACPI_RESTAG_MODE
 "_MOD"

	)

156 
	#ACPI_RESTAG_PARITY
 "_PAR"

	)

157 
	#ACPI_RESTAG_PHASE
 "_PHA"

	)

158 
	#ACPI_RESTAG_PIN
 "_PIN"

	)

159 
	#ACPI_RESTAG_PINCONFIG
 "_PPI"

	)

160 
	#ACPI_RESTAG_POLARITY
 "_POL"

	)

161 
	#ACPI_RESTAG_REGISTERBITOFFSET
 "_RBO"

	)

162 
	#ACPI_RESTAG_REGISTERBITWIDTH
 "_RBW"

	)

163 
	#ACPI_RESTAG_RANGETYPE
 "_RNG"

	)

164 
	#ACPI_RESTAG_READWRITETYPE
 "_RW_"

	)

165 
	#ACPI_RESTAG_LENGTH_RX
 "_RXL"

	)

166 
	#ACPI_RESTAG_LENGTH_TX
 "_TXL"

	)

167 
	#ACPI_RESTAG_SLAVEMODE
 "_SLV"

	)

168 
	#ACPI_RESTAG_SPEED
 "_SPE"

	)

169 
	#ACPI_RESTAG_STOPBITS
 "_STB"

	)

170 
	#ACPI_RESTAG_TRANSLATION
 "_TRA"

	)

171 
	#ACPI_RESTAG_TRANSTYPE
 "_TRS"

	)

172 
	#ACPI_RESTAG_TYPE
 "_TTP"

	)

173 
	#ACPI_RESTAG_XFERTYPE
 "_SIZ"

	)

174 
	#ACPI_RESTAG_VENDORDATA
 "_VEN"

	)

179 
	#ASL_RDESC_IRQ_SIZE
 0x02

	)

180 
	#ASL_RDESC_DMA_SIZE
 0x02

	)

181 
	#ASL_RDESC_ST_DEPEND_SIZE
 0x00

	)

182 
	#ASL_RDESC_END_DEPEND_SIZE
 0x00

	)

183 
	#ASL_RDESC_IO_SIZE
 0x07

	)

184 
	#ASL_RDESC_FIXED_IO_SIZE
 0x03

	)

185 
	#ASL_RDESC_FIXED_DMA_SIZE
 0x05

	)

186 
	#ASL_RDESC_END_TAG_SIZE
 0x01

	)

189 
	sa¶_ªsour˚_node


191 
UINT32
 
	mBuf„rLígth
;

192 *
	mBuf„r
;

193 
a¶_ªsour˚_node
 *
	mNext
;

195 } 
	tASL_RESOURCE_NODE
;

197 
	sa¶_ªsour˚_öfo


199 
ACPI_PARSE_OBJECT
 *
	mDes¸ùt‹Ty≥Op
;

200 
ACPI_PARSE_OBJECT
 *
	mM≠pögOp
;

201 
UINT32
 
	mCuºítByãOff£t
;

203 } 
	tASL_RESOURCE_INFO
;

208 
	#ACPI_AML_SIZE_LARGE
(
r
Ë( (rË-  (
AML_RESOURCE_LARGE_HEADER
))

	)

209 
	#ACPI_AML_SIZE_SMALL
(
r
Ë( (rË-  (
AML_RESOURCE_SMALL_HEADER
))

	)

217 #¥agm®
∑ck
(1)

222 
	#AML_RESOURCE_SMALL_HEADER_COMMON
 \

223 
UINT8
 
Des¸ùt‹Ty≥
;

	)

225 
	saml_ªsour˚_smÆl_hódî


227 
	mAML_RESOURCE_SMALL_HEADER_COMMON


229 } 
	tAML_RESOURCE_SMALL_HEADER
;

232 
	saml_ªsour˚_úq


234 
AML_RESOURCE_SMALL_HEADER_COMMON


235 
UINT16
 
	mIrqMask
;

236 
UINT8
 
	mFœgs
;

238 } 
	tAML_RESOURCE_IRQ
;

241 
	saml_ªsour˚_úq_noÊags


243 
AML_RESOURCE_SMALL_HEADER_COMMON


244 
UINT16
 
	mIrqMask
;

246 } 
	tAML_RESOURCE_IRQ_NOFLAGS
;

249 
	saml_ªsour˚_dma


251 
AML_RESOURCE_SMALL_HEADER_COMMON


252 
UINT8
 
	mDmaCh™√lMask
;

253 
UINT8
 
	mFœgs
;

255 } 
	tAML_RESOURCE_DMA
;

258 
	saml_ªsour˚_°¨t_dïídít


260 
AML_RESOURCE_SMALL_HEADER_COMMON


261 
UINT8
 
	mFœgs
;

263 } 
	tAML_RESOURCE_START_DEPENDENT
;

266 
	saml_ªsour˚_°¨t_dïídít_n›rio


268 
	mAML_RESOURCE_SMALL_HEADER_COMMON


270 } 
	tAML_RESOURCE_START_DEPENDENT_NOPRIO
;

273 
	saml_ªsour˚_íd_dïídít


275 
	mAML_RESOURCE_SMALL_HEADER_COMMON


277 } 
	tAML_RESOURCE_END_DEPENDENT
;

280 
	saml_ªsour˚_io


282 
AML_RESOURCE_SMALL_HEADER_COMMON


283 
UINT8
 
	mFœgs
;

284 
UINT16
 
	mMöimum
;

285 
UINT16
 
	mMaximum
;

286 
UINT8
 
	mAlignmít
;

287 
UINT8
 
	mAddªssLígth
;

289 } 
	tAML_RESOURCE_IO
;

292 
	saml_ªsour˚_fixed_io


294 
AML_RESOURCE_SMALL_HEADER_COMMON


295 
UINT16
 
	mAddªss
;

296 
UINT8
 
	mAddªssLígth
;

298 } 
	tAML_RESOURCE_FIXED_IO
;

301 
	saml_ªsour˚_víd‹_smÆl


303 
	mAML_RESOURCE_SMALL_HEADER_COMMON


305 } 
	tAML_RESOURCE_VENDOR_SMALL
;

308 
	saml_ªsour˚_íd_èg


310 
AML_RESOURCE_SMALL_HEADER_COMMON


311 
UINT8
 
	mChecksum
;

313 } 
	tAML_RESOURCE_END_TAG
;

316 
	saml_ªsour˚_fixed_dma


318 
AML_RESOURCE_SMALL_HEADER_COMMON


319 
UINT16
 
	mReque°Löes
;

320 
UINT16
 
	mCh™√ls
;

321 
UINT8
 
	mWidth
;

323 } 
	tAML_RESOURCE_FIXED_DMA
;

329 
	#AML_RESOURCE_LARGE_HEADER_COMMON
 \

330 
UINT8
 
Des¸ùt‹Ty≥
;\

331 
UINT16
 
Resour˚Lígth
;

	)

333 
	saml_ªsour˚_œrge_hódî


335 
	mAML_RESOURCE_LARGE_HEADER_COMMON


337 } 
	tAML_RESOURCE_LARGE_HEADER
;

342 
	#ACPI_RESOURCE_FLAG_DEC
 2

	)

343 
	#ACPI_RESOURCE_FLAG_MIF
 4

	)

344 
	#ACPI_RESOURCE_FLAG_MAF
 8

	)

346 
	saml_ªsour˚_mem‹y24


348 
AML_RESOURCE_LARGE_HEADER_COMMON


349 
UINT8
 
	mFœgs
;

350 
UINT16
 
	mMöimum
;

351 
UINT16
 
	mMaximum
;

352 
UINT16
 
	mAlignmít
;

353 
UINT16
 
	mAddªssLígth
;

355 } 
	tAML_RESOURCE_MEMORY24
;

358 
	saml_ªsour˚_víd‹_œrge


360 
	mAML_RESOURCE_LARGE_HEADER_COMMON


362 } 
	tAML_RESOURCE_VENDOR_LARGE
;

365 
	saml_ªsour˚_mem‹y32


367 
AML_RESOURCE_LARGE_HEADER_COMMON


368 
UINT8
 
	mFœgs
;

369 
UINT32
 
	mMöimum
;

370 
UINT32
 
	mMaximum
;

371 
UINT32
 
	mAlignmít
;

372 
UINT32
 
	mAddªssLígth
;

374 } 
	tAML_RESOURCE_MEMORY32
;

377 
	saml_ªsour˚_fixed_mem‹y32


379 
AML_RESOURCE_LARGE_HEADER_COMMON


380 
UINT8
 
	mFœgs
;

381 
UINT32
 
	mAddªss
;

382 
UINT32
 
	mAddªssLígth
;

384 } 
	tAML_RESOURCE_FIXED_MEMORY32
;

387 
	#AML_RESOURCE_ADDRESS_COMMON
 \

388 
UINT8
 
Resour˚Ty≥
; \

389 
UINT8
 
Fœgs
; \

390 
UINT8
 
S≥cificFœgs
;

	)

393 
	saml_ªsour˚_addªss


395 
AML_RESOURCE_LARGE_HEADER_COMMON


396 
	mAML_RESOURCE_ADDRESS_COMMON


398 } 
	tAML_RESOURCE_ADDRESS
;

401 
	saml_ªsour˚_exãnded_addªss64


403 
AML_RESOURCE_LARGE_HEADER_COMMON


404 
AML_RESOURCE_ADDRESS_COMMON


405 
UINT8
 
	mRevisi⁄ID
;

406 
UINT8
 
	mRe£rved
;

407 
UINT64
 
	mGønuœrôy
;

408 
UINT64
 
	mMöimum
;

409 
UINT64
 
	mMaximum
;

410 
UINT64
 
	mTøn¶©i⁄Off£t
;

411 
UINT64
 
	mAddªssLígth
;

412 
UINT64
 
	mTy≥S≥cific
;

414 } 
	tAML_RESOURCE_EXTENDED_ADDRESS64
;

416 
	#AML_RESOURCE_EXTENDED_ADDRESS_REVISION
 1

	)

419 
	saml_ªsour˚_addªss64


421 
AML_RESOURCE_LARGE_HEADER_COMMON


422 
AML_RESOURCE_ADDRESS_COMMON


423 
UINT64
 
	mGønuœrôy
;

424 
UINT64
 
	mMöimum
;

425 
UINT64
 
	mMaximum
;

426 
UINT64
 
	mTøn¶©i⁄Off£t
;

427 
UINT64
 
	mAddªssLígth
;

429 } 
	tAML_RESOURCE_ADDRESS64
;

432 
	saml_ªsour˚_addªss32


434 
AML_RESOURCE_LARGE_HEADER_COMMON


435 
AML_RESOURCE_ADDRESS_COMMON


436 
UINT32
 
	mGønuœrôy
;

437 
UINT32
 
	mMöimum
;

438 
UINT32
 
	mMaximum
;

439 
UINT32
 
	mTøn¶©i⁄Off£t
;

440 
UINT32
 
	mAddªssLígth
;

442 } 
	tAML_RESOURCE_ADDRESS32
;

445 
	saml_ªsour˚_addªss16


447 
AML_RESOURCE_LARGE_HEADER_COMMON


448 
AML_RESOURCE_ADDRESS_COMMON


449 
UINT16
 
	mGønuœrôy
;

450 
UINT16
 
	mMöimum
;

451 
UINT16
 
	mMaximum
;

452 
UINT16
 
	mTøn¶©i⁄Off£t
;

453 
UINT16
 
	mAddªssLígth
;

455 } 
	tAML_RESOURCE_ADDRESS16
;

458 
	saml_ªsour˚_exãnded_úq


460 
AML_RESOURCE_LARGE_HEADER_COMMON


461 
UINT8
 
	mFœgs
;

462 
UINT8
 
	mI¡îru±Cou¡
;

463 
UINT32
 
	mI¡îru±s
[1];

466 } 
	tAML_RESOURCE_EXTENDED_IRQ
;

469 
	saml_ªsour˚_gíîic_ªgi°î


471 
AML_RESOURCE_LARGE_HEADER_COMMON


472 
UINT8
 
	mAddªssS∑˚Id
;

473 
UINT8
 
	mBôWidth
;

474 
UINT8
 
	mBôOff£t
;

475 
UINT8
 
	mAc˚ssSize
;

476 
UINT64
 
	mAddªss
;

478 } 
	tAML_RESOURCE_GENERIC_REGISTER
;

483 
	saml_ªsour˚_gpio


485 
AML_RESOURCE_LARGE_HEADER_COMMON


486 
UINT8
 
	mRevisi⁄Id
;

487 
UINT8
 
	mC⁄√˘i⁄Ty≥
;

488 
UINT16
 
	mFœgs
;

489 
UINT16
 
	mI¡Fœgs
;

490 
UINT8
 
	mPöC⁄fig
;

491 
UINT16
 
	mDriveSåígth
;

492 
UINT16
 
	mDeboun˚Timeout
;

493 
UINT16
 
	mPöTabÀOff£t
;

494 
UINT8
 
	mResSour˚Index
;

495 
UINT16
 
	mResSour˚Off£t
;

496 
UINT16
 
	mVíd‹Off£t
;

497 
UINT16
 
	mVíd‹Lígth
;

505 } 
	tAML_RESOURCE_GPIO
;

507 
	#AML_RESOURCE_GPIO_REVISION
 1

	)

511 
	#AML_RESOURCE_GPIO_TYPE_INT
 0

	)

512 
	#AML_RESOURCE_GPIO_TYPE_IO
 1

	)

513 
	#AML_RESOURCE_MAX_GPIOTYPE
 1

	)

518 
	#AML_RESOURCE_SERIAL_COMMON
 \

519 
UINT8
 
Revisi⁄Id
; \

520 
UINT8
 
ResSour˚Index
; \

521 
UINT8
 
Ty≥
; \

522 
UINT8
 
Fœgs
; \

523 
UINT16
 
Ty≥S≥cificFœgs
; \

524 
UINT8
 
Ty≥Revisi⁄Id
; \

525 
UINT16
 
Ty≥D©aLígth
; \

526 

	)

529 
	#AML_RESOURCE_I2C_SERIALBUSTYPE
 1

	)

530 
	#AML_RESOURCE_SPI_SERIALBUSTYPE
 2

	)

531 
	#AML_RESOURCE_UART_SERIALBUSTYPE
 3

	)

532 
	#AML_RESOURCE_MAX_SERIALBUSTYPE
 3

	)

533 
	#AML_RESOURCE_VENDOR_SERIALBUSTYPE
 192

	)

535 
	saml_ªsour˚_comm⁄_£rülbus


537 
AML_RESOURCE_LARGE_HEADER_COMMON


538 
	mAML_RESOURCE_SERIAL_COMMON


540 } 
	tAML_RESOURCE_COMMON_SERIALBUS
;

542 
	saml_ªsour˚_i2c_£rülbus


544 
AML_RESOURCE_LARGE_HEADER_COMMON


545 
AML_RESOURCE_SERIAL_COMMON


546 
UINT32
 
	mC⁄√˘i⁄S≥ed
;

547 
UINT16
 
	mSœveAddªss
;

554 } 
	tAML_RESOURCE_I2C_SERIALBUS
;

556 
	#AML_RESOURCE_I2C_REVISION
 1

	)

557 
	#AML_RESOURCE_I2C_TYPE_REVISION
 1

	)

558 
	#AML_RESOURCE_I2C_MIN_DATA_LEN
 6

	)

560 
	saml_ªsour˚_•i_£rülbus


562 
AML_RESOURCE_LARGE_HEADER_COMMON


563 
AML_RESOURCE_SERIAL_COMMON


564 
UINT32
 
	mC⁄√˘i⁄S≥ed
;

565 
UINT8
 
	mD©aBôLígth
;

566 
UINT8
 
	mClockPha£
;

567 
UINT8
 
	mClockPﬁ¨ôy
;

568 
UINT16
 
	mDevi˚Sñe˘i⁄
;

575 } 
	tAML_RESOURCE_SPI_SERIALBUS
;

577 
	#AML_RESOURCE_SPI_REVISION
 1

	)

578 
	#AML_RESOURCE_SPI_TYPE_REVISION
 1

	)

579 
	#AML_RESOURCE_SPI_MIN_DATA_LEN
 9

	)

582 
	saml_ªsour˚_u¨t_£rülbus


584 
AML_RESOURCE_LARGE_HEADER_COMMON


585 
AML_RESOURCE_SERIAL_COMMON


586 
UINT32
 
	mDeÁu…BaudR©e
;

587 
UINT16
 
	mRxFifoSize
;

588 
UINT16
 
	mTxFifoSize
;

589 
UINT8
 
	mP¨ôy
;

590 
UINT8
 
	mLöesE«bÀd
;

597 } 
	tAML_RESOURCE_UART_SERIALBUS
;

599 
	#AML_RESOURCE_UART_REVISION
 1

	)

600 
	#AML_RESOURCE_UART_TYPE_REVISION
 1

	)

601 
	#AML_RESOURCE_UART_MIN_DATA_LEN
 10

	)

606 #¥agm®
∑ck
()

610 
	uaml_ªsour˚


614 
UINT8
 
	mDes¸ùt‹Ty≥
;

615 
AML_RESOURCE_SMALL_HEADER
 
	mSmÆlHódî
;

616 
AML_RESOURCE_LARGE_HEADER
 
	mL¨geHódî
;

620 
AML_RESOURCE_IRQ
 
	mIrq
;

621 
AML_RESOURCE_DMA
 
	mDma
;

622 
AML_RESOURCE_START_DEPENDENT
 
	mSèπDpf
;

623 
AML_RESOURCE_END_DEPENDENT
 
	mEndDpf
;

624 
AML_RESOURCE_IO
 
	mIo
;

625 
AML_RESOURCE_FIXED_IO
 
	mFixedIo
;

626 
AML_RESOURCE_FIXED_DMA
 
	mFixedDma
;

627 
AML_RESOURCE_VENDOR_SMALL
 
	mVíd‹SmÆl
;

628 
AML_RESOURCE_END_TAG
 
	mEndTag
;

632 
AML_RESOURCE_MEMORY24
 
	mMem‹y24
;

633 
AML_RESOURCE_GENERIC_REGISTER
 
	mGíîicReg
;

634 
AML_RESOURCE_VENDOR_LARGE
 
	mVíd‹L¨ge
;

635 
AML_RESOURCE_MEMORY32
 
	mMem‹y32
;

636 
AML_RESOURCE_FIXED_MEMORY32
 
	mFixedMem‹y32
;

637 
AML_RESOURCE_ADDRESS16
 
	mAddªss16
;

638 
AML_RESOURCE_ADDRESS32
 
	mAddªss32
;

639 
AML_RESOURCE_ADDRESS64
 
	mAddªss64
;

640 
AML_RESOURCE_EXTENDED_ADDRESS64
 
	mExtAddªss64
;

641 
AML_RESOURCE_EXTENDED_IRQ
 
	mExãndedIrq
;

642 
AML_RESOURCE_GPIO
 
	mGpio
;

643 
AML_RESOURCE_I2C_SERIALBUS
 
	mI2cSîülBus
;

644 
AML_RESOURCE_SPI_SERIALBUS
 
	mSpiSîülBus
;

645 
AML_RESOURCE_UART_SERIALBUS
 
	mU¨tSîülBus
;

646 
AML_RESOURCE_COMMON_SERIALBUS
 
	mComm⁄SîülBus
;

650 
AML_RESOURCE_ADDRESS
 
	mAddªss
;

651 
UINT32
 
	mDw‹dIãm
;

652 
UINT16
 
	mW‹dIãm
;

653 
UINT8
 
	mByãIãm
;

655 } 
	tAML_RESOURCE
;

661 
MpSaveGpioInfo
 (

662 
ACPI_PARSE_OBJECT
 *
Op
,

663 
AML_RESOURCE
 *
Resour˚
,

664 
UINT32
 
PöCou¡
,

665 
UINT16
 *
PöLi°
,

666 *
Devi˚Name
);

669 
MpSaveSîülInfo
 (

670 
ACPI_PARSE_OBJECT
 *
Op
,

671 
AML_RESOURCE
 *
Resour˚
,

672 *
Devi˚Name
);

675 
MpGëHidFromP¨£Tªe
 (

676 
ACPI_NAMESPACE_NODE
 *
HidNode
);

679 
MpGëHidVüName°rög
 (

680 *
Devi˚Name
);

683 
MpGëC⁄√˘i⁄Info
 (

684 
ACPI_PARSE_OBJECT
 *
Op
,

685 
UINT32
 
PöIndex
,

686 
ACPI_NAMESPACE_NODE
 **
T¨gëNode
,

687 **
T¨gëName
);

690 
MpGëP¨ítDevi˚Hid
 (

691 
ACPI_PARSE_OBJECT
 *
Op
,

692 
ACPI_NAMESPACE_NODE
 **
T¨gëNode
,

693 **
P¨ítDevi˚Name
);

696 
MpGëDdnVÆue
 (

697 *
Devi˚Name
);

700 
MpGëHidVÆue
 (

701 
ACPI_NAMESPACE_NODE
 *
Devi˚Node
);

	@src/extern/acpica/source/include/platform/accygwin.h

116 #i‚de‡
__ACCYGWIN_H__


117 
	#__ACCYGWIN_H__


	)

122 
	#ACPI_USE_SYSTEM_CLIBRARY


	)

123 
	#ACPI_USE_DO_WHILE_0


	)

124 
	#ACPI_FLUSH_CPU_CACHE
()

	)

130 
	#ACPI_USE_ALTERNATE_TIMEOUT


	)

133 
	~<°d¨g.h
>

134 
	~<°rög.h
>

135 
	~<°dlib.h
>

136 
	~<˘y≥.h
>

137 
	~<uni°d.h
>

139 #i‡
deföed
(
__ü64__
Ë|| deföed(
__x86_64__
)

140 
	#ACPI_MACHINE_WIDTH
 64

	)

141 
	#COMPILER_DEPENDENT_INT64
 

	)

142 
	#COMPILER_DEPENDENT_UINT64
 

	)

144 
	#ACPI_MACHINE_WIDTH
 32

	)

145 
	#COMPILER_DEPENDENT_INT64
 

	)

146 
	#COMPILER_DEPENDENT_UINT64
 

	)

147 
	#ACPI_USE_NATIVE_DIVIDE


	)

150 #i‚de‡
__cde˛


151 
	#__cde˛


	)

154 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
GL±r
, 
Acq
Ëi‡(GL±rËAcq=1; Acq=0;

	)

155 
	#ACPI_RELEASE_GLOBAL_LOCK
(
GL±r
, 
Pídög
ËPídög = 1

	)

159 
	#ACPI_CAST_PTHREAD_T
(
±hªad
Ë((
ACPI_THREAD_ID
Ë
	`ACPI_TO_INTEGER
 (±hªad))

	)

163 
	~"acgcc.h
"

172 
v¢¥ötf
 (*
s
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
≠
);

175 
¢¥ötf
 (*
s
, 
size_t
 
n
, c⁄° *
f‹m©
, ...);

	@src/extern/acpica/source/include/platform/acdragonfly.h

116 #i‚de‡
__ACDRAGONFLY_H_


117 
	#__ACDRAGONFLY_H_


	)

119 
	~<∂©f‹m/acgcc.h
>

120 
	~<sys/ty≥s.h
>

122 #ifde‡
__LP64__


123 
	#ACPI_MACHINE_WIDTH
 64

	)

125 
	#ACPI_MACHINE_WIDTH
 32

	)

126 
	#ACPI_USE_NATIVE_DIVIDE


	)

129 
	#ACPI_UINTPTR_T
 
uöçå_t


	)

130 
	#COMPILER_DEPENDENT_INT64
 
öt64_t


	)

131 
	#COMPILER_DEPENDENT_UINT64
 
uöt64_t


	)

133 
	#ACPI_USE_DO_WHILE_0


	)

134 
	#ACPI_USE_SYSTEM_CLIBRARY


	)

136 #ifde‡
_KERNEL


138 
	~"›t_a˝i.h
"

139 
	~<sys/˘y≥.h
>

140 
	~<sys/sy°m.h
>

141 
	~<machöe/a˝iˇ_machdï.h
>

142 
	~<°d¨g.h
>

144 #ifde‡
ACPI_DEBUG


145 
	#ACPI_DEBUG_OUTPUT


	)

146 #ifde‡
DEBUGGER_THREADING


147 #unde‡
DEBUGGER_THREADING


149 
	#DEBUGGER_THREADING
 
DEBUGGER_SINGLE_THREADED


	)

151 
	~"›t_ddb.h
"

152 #ifde‡
DDB


153 
	#ACPI_DEBUGGER


	)

155 
	#ACPI_DISASSEMBLER


	)

159 #ifde‡
ACPI_DEBUG_CACHE


160 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRñó£Obje˘


	)

161 
	#A˝iOsRñó£Obje˘
(
Cache
, 
Obje˘
) \

162 
	`_A˝iOsRñó£Obje˘
((
Cache
), (
Obje˘
), 
__func__
, 
__LINE__
)

	)

165 #ifde‡
ACPI_DEBUG_LOCKS


166 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAcquúeLock


	)

167 
	#A˝iOsAcquúeLock
(
H™dÀ
) \

168 
	`_A˝iOsAcquúeLock
((
H™dÀ
), 
__func__
, 
__LINE__
)

	)

171 #ifde‡
ACPI_DEBUG_MEMMAP


172 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsM≠Mem‹y


	)

173 
	#A˝iOsM≠Mem‹y
(
Whîe
, 
Lígth
) \

174 
	`_A˝iOsM≠Mem‹y
((
Whîe
), (
Lígth
), 
__func__
, 
__LINE__
)

	)

176 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsUnm≠Mem‹y


	)

177 
	#A˝iOsUnm≠Mem‹y
(
LogiˇlAddªss
, 
Size
) \

178 
	`_A˝iOsUnm≠Mem‹y
((
LogiˇlAddªss
), (
Size
), 
__func__
, 
__LINE__
)

	)

182 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWaôEvítsCom∂ëe


	)

183 
	#A˝iOsWaôEvítsCom∂ëe
()

	)

185 
	#USE_NATIVE_ALLOCATE_ZEROED


	)

187 
	#ACPI_SPINLOCK
 
a˝i_•ölock
 *

	)

188 
	ga˝i_•ölock
;

190 
	#ACPI_CACHE_T
 
a˝iˇche


	)

191 
	ga˝iˇche
;

195 
	#ACPI_USE_STANDARD_HEADERS


	)

197 
	#ACPI_CAST_PTHREAD_T
(
±hªad
Ë((
ACPI_THREAD_ID
Ë
	`ACPI_TO_INTEGER
 (±hªad))

	)

198 
	#ACPI_FLUSH_CPU_CACHE
()

	)

	@src/extern/acpica/source/include/platform/acdragonflyex.h

116 #i‚de‡
__ACDRAGONFLYEX_H__


117 
	#__ACDRAGONFLYEX_H__


	)

119 #ifde‡
_KERNEL


121 #ifde‡
ACPI_DEBUG_CACHE


122 
ACPI_STATUS


123 
_A˝iOsRñó£Obje˘
 (

124 
ACPI_CACHE_T
 *
Cache
,

125 *
Obje˘
,

126 c⁄° *
func
,

127 
löe
);

130 #ifde‡
ACPI_DEBUG_LOCKS


131 
ACPI_CPU_FLAGS


132 
_A˝iOsAcquúeLock
 (

133 
ACPI_SPINLOCK
 
Spö
,

134 c⁄° *
func
,

135 
löe
);

138 #ifde‡
ACPI_DEBUG_MEMMAP


140 
_A˝iOsM≠Mem‹y
 (

141 
ACPI_PHYSICAL_ADDRESS
 
Whîe
,

142 
ACPI_SIZE
 
Lígth
,

143 c⁄° *
ˇŒî
,

144 
löe
);

147 
_A˝iOsUnm≠Mem‹y
 (

148 *
LogiˇlAddªss
,

149 
ACPI_SIZE
 
Lígth
,

150 c⁄° *
ˇŒî
,

151 
löe
);

	@src/extern/acpica/source/include/platform/acefi.h

116 #i‚de‡
__ACEFI_H__


117 
	#__ACEFI_H__


	)

119 
	~<°d¨g.h
>

120 #i‡
deföed
(
_GNU_EFI
)

121 
	~<°döt.h
>

122 
	~<uni°d.h
>

124 
	~<efi.h
>

125 
	~<efi°d¨g.h
>

126 
	~<efûib.h
>

131 #i‡
deföed
(
_AED_EFI
)

135 
	#COMPILER_DEPENDENT_INT64
 
__öt64


	)

136 
	#COMPILER_DEPENDENT_UINT64
 
__öt64


	)

146 
	#ACPI_SYSTEM_XFACE


	)

147 
	#ACPI_EXTERNAL_XFACE


	)

148 
	#ACPI_INTERNAL_XFACE


	)

149 
	#ACPI_INTERNAL_VAR_XFACE


	)

153 #¥agm®
w¨nög
(
dißbÀ
:4142)

160 #i‡
deföed
(
_GNU_EFI
)

164 
	~"acgcc.h
"

166 #unde‡
ACPI_USE_SYSTEM_CLIBRARY


167 #unde‡
ACPI_USE_STANDARD_HEADERS


168 #unde‡
ACPI_USE_NATIVE_DIVIDE


169 
	#ACPI_USE_SYSTEM_INTTYPES


	)

171 
	#ACPI_FILE
 
SIMPLE_TEXT_OUTPUT_INTERFACE
 *

	)

172 
	#ACPI_FILE_OUT
 
ST
->
C⁄Out


	)

173 
	#ACPI_FILE_ERR
 
ST
->
C⁄Out


	)

178 
	#ACPI_DIV_64_BY_32
(
n_hi
, 
n_lo
, 
d32
, 
q32
, 
r32
) \

180 
UINT64
 
__n
 = ((UINT64Ë
n_hi
Ë<< 32 | (
n_lo
); \

181 (
q32
Ë
	`DivU64x32
 ((
__n
), (
d32
), &(
r32
)); \

182 } 0)

	)

184 
	#ACPI_SHIFT_RIGHT_64
(
n_hi
, 
n_lo
) \

186 (
n_lo
) >>= 1; \

187 (
n_lo
Ë|(((
n_hi
) & 1) << 31); \

188 (
n_hi
) >>= 1; \

189 } 0)

	)

194 
EFI_STATUS


195 
efi_maö
 (

196 
EFI_HANDLE
 
Image
,

197 
EFI_SYSTEM_TABLE
 *
Sy°emTab
);

200 
a˝i_maö
 (

201 
¨gc
,

202 *
¨gv
[]);

	@src/extern/acpica/source/include/platform/acenv.h

116 #i‚de‡
__ACENV_H__


117 
	#__ACENV_H__


	)

127 
	#ACPI_BINARY_SEMAPHORE
 0

	)

128 
	#ACPI_OSL_MUTEX
 1

	)

132 
	#DEBUGGER_SINGLE_THREADED
 0

	)

133 
	#DEBUGGER_MULTI_THREADED
 1

	)

144 #ifde‡
ACPI_ASL_COMPILER


145 
	#ACPI_APPLICATION


	)

146 
	#ACPI_DISASSEMBLER


	)

147 
	#ACPI_DEBUG_OUTPUT


	)

148 
	#ACPI_CONSTANT_EVAL_ONLY


	)

149 
	#ACPI_LARGE_NAMESPACE_NODE


	)

150 
	#ACPI_DATA_TABLE_DISASSEMBLY


	)

151 
	#ACPI_SINGLE_THREADED


	)

152 
	#ACPI_32BIT_PHYSICAL_ADDRESS


	)

157 #ifde‡
ACPI_EXEC_APP


158 
	#ACPI_APPLICATION


	)

159 
	#ACPI_FULL_DEBUG


	)

160 
	#ACPI_MUTEX_DEBUG


	)

161 
	#ACPI_DBG_TRACK_ALLOCATIONS


	)

168 #i‡(
deföed
 
ACPI_BIN_APP
) || \

169 (
deföed
 
	gACPI_DUMP_APP
) || \

170 (
deföed
 
	gACPI_HELP_APP
) || \

171 (
deföed
 
	gACPI_NAMES_APP
) || \

172 (
deföed
 
	gACPI_SRC_APP
) || \

173 (
deföed
 
	gACPI_XTRACT_APP
) || \

174 (
deföed
 
	gACPI_EXAMPLE_APP
)

175 
	#ACPI_APPLICATION


	)

176 
	#ACPI_SINGLE_THREADED


	)

181 #ifde‡
ACPI_HELP_APP


182 
	#ACPI_NO_ERROR_MESSAGES


	)

187 #ifde‡
ACPI_NAMES_APP


188 
	#ACPI_DEBUG_OUTPUT


	)

193 #i‡(
deföed
 
ACPI_EXEC_APP
) || \

194 (
deföed
 
	gACPI_EXAMPLE_APP
) || \

195 (
deföed
 
	gACPI_NAMES_APP
)

196 
	#ACPI_USE_NATIVE_RSDP_POINTER


	)

201 #ifde‡
ACPI_DUMP_APP


202 
	#ACPI_USE_NATIVE_MEMORY_MAPPING


	)

203 
	#USE_NATIVE_ALLOCATE_ZEROED


	)

208 #i‡(
deföed
 
ACPI_EXAMPLE_APP
) || \

209 (
deföed
 
	gACPI_NAMES_APP
)

210 
	#ACPI_REDUCED_HARDWARE
 1

	)

215 #ifde‡
ACPI_LIBRARY


216 
	#ACPI_USE_LOCAL_CACHE


	)

221 #ifde‡
ACPI_APPLICATION


222 
	#ACPI_USE_SYSTEM_CLIBRARY


	)

223 
	#ACPI_USE_LOCAL_CACHE


	)

228 #ifde‡
ACPI_FULL_DEBUG


229 
	#ACPI_DEBUGGER


	)

230 
	#ACPI_DEBUG_OUTPUT


	)

231 
	#ACPI_DISASSEMBLER


	)

244 #i‡
deföed
(
_LINUX
Ë|| deföed(
__löux__
)

245 
	~"a˛öux.h
"

247 #ñi‡
deföed
(
_APPLE
Ë|| deföed(
__APPLE__
)

248 
	~"acmacosx.h
"

250 #ñi‡
deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
)

251 
	~"ac‰ìbsd.h
"

253 #ñi‡
deföed
(
__NëBSD__
)

254 
	~"a˙ëbsd.h
"

256 #ñi‡
deföed
(
__sun
)

257 
	~"acsﬁ¨is.h
"

259 #ñi‡
deföed
(
MODESTO
)

260 
	~"acmode°o.h
"

262 #ñi‡
deföed
(
NETWARE
)

263 
	~"a˙ëw¨e.h
"

265 #ñi‡
deföed
(
_CYGWIN
)

266 
	~"accygwö.h
"

268 #ñi‡
deföed
(
WIN32
)

269 
	~"acwö.h
"

271 #ñi‡
deföed
(
WIN64
)

272 
	~"acwö64.h
"

274 #ñi‡
deföed
(
_WRS_LIB_BUILD
)

275 
	~"acvxw‹ks.h
"

277 #ñi‡
deföed
(
__OS2__
)

278 
	~"acos2.h
"

280 #ñi‡
deföed
(
_AED_EFI
)

281 
	~"a˚fi.h
"

283 #ñi‡
deföed
(
_GNU_EFI
)

284 
	~"a˚fi.h
"

286 #ñi‡
deföed
(
__HAIKU__
)

287 
	~"achaiku.h
"

289 #ñi‡
deföed
(
__KOS__
)

290 
	~"ackos.h
"

296 #îr‹ 
Unknown
 
èrgë
 
ívú⁄mít


311 #i‚de‡
COMPILER_DEPENDENT_INT64


312 
	#COMPILER_DEPENDENT_INT64
 

	)

315 #i‚de‡
COMPILER_DEPENDENT_UINT64


316 
	#COMPILER_DEPENDENT_UINT64
 

	)

321 #i‚de‡
ACPI_MUTEX_TYPE


322 
	#ACPI_MUTEX_TYPE
 
ACPI_BINARY_SEMAPHORE


	)

327 #i‚de‡
ACPI_ACQUIRE_GLOBAL_LOCK


328 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
GL±r
, 
Acquúed
ËAcquúed = 1

	)

331 #i‚de‡
ACPI_RELEASE_GLOBAL_LOCK


332 
	#ACPI_RELEASE_GLOBAL_LOCK
(
GL±r
, 
Pídög
ËPídög = 0

	)

337 #i‚de‡
ACPI_FLUSH_CPU_CACHE


338 
	#ACPI_FLUSH_CPU_CACHE
()

	)

343 #i‚de‡
ACPI_INLINE


344 
	#ACPI_INLINE


	)

355 #i‚de‡
ACPI_SYSTEM_XFACE


356 
	#ACPI_SYSTEM_XFACE


	)

359 #i‚de‡
ACPI_EXTERNAL_XFACE


360 
	#ACPI_EXTERNAL_XFACE


	)

363 #i‚de‡
ACPI_INTERNAL_XFACE


364 
	#ACPI_INTERNAL_XFACE


	)

367 #i‚de‡
ACPI_INTERNAL_VAR_XFACE


368 
	#ACPI_INTERNAL_VAR_XFACE


	)

379 #i‚de‡
DEBUGGER_THREADING


380 #ifde‡
ACPI_APPLICATION


381 
	#DEBUGGER_THREADING
 
DEBUGGER_SINGLE_THREADED


	)

384 
	#DEBUGGER_THREADING
 
DEBUGGER_MULTI_THREADED


	)

407 #ifde‡
ACPI_USE_SYSTEM_CLIBRARY


411 #ifde‡
ACPI_USE_STANDARD_HEADERS


415 
	~<°d¨g.h
>

416 
	~<°dlib.h
>

417 
	~<°rög.h
>

418 
	~<˘y≥.h
>

424 
	#ACPI_STRSTR
(
s1
,
s2
Ë
	`°r°r
((s1), (s2))

	)

425 
	#ACPI_STRCHR
(
s1
,
c
Ë
	`°rchr
((s1), (c))

	)

426 
	#ACPI_STRLEN
(
s
Ë(
ACPI_SIZE
Ë
	`°æí
((s))

	)

427 
	#ACPI_STRCPY
(
d
,
s
Ë(Ë
	`°r˝y
((d), (s))

	)

428 
	#ACPI_STRNCPY
(
d
,
s
,
n
Ë(Ë
	`°∫˝y
((d), (s), (
ACPI_SIZE
)“))

	)

429 
	#ACPI_STRNCMP
(
d
,
s
,
n
Ë
	`°∫cmp
((d), (s), (
ACPI_SIZE
)“))

	)

430 
	#ACPI_STRCMP
(
d
,
s
Ë
	`°rcmp
((d), (s))

	)

431 
	#ACPI_STRCAT
(
d
,
s
Ë(Ë
	`°rˇt
((d), (s))

	)

432 
	#ACPI_STRNCAT
(
d
,
s
,
n
Ë
	`°∫ˇt
((d), (s), (
ACPI_SIZE
)“))

	)

433 
	#ACPI_STRTOUL
(
d
,
s
,
n
Ë
	`°πoul
((d), (s), (
ACPI_SIZE
)“))

	)

434 
	#ACPI_MEMCMP
(
s1
,
s2
,
n
Ë
	`memcmp
((c⁄° *)(s1), (c⁄° *)(s2), (
ACPI_SIZE
)“))

	)

435 
	#ACPI_MEMCPY
(
d
,
s
,
n
Ë(Ë
	`mem˝y
((d), (s), (
ACPI_SIZE
)“))

	)

436 
	#ACPI_MEMSET
(
d
,
s
,
n
Ë(Ë
	`mem£t
((d), (s), (
ACPI_SIZE
)“))

	)

437 
	#ACPI_TOUPPER
(
i
Ë
	`touµî
((Ë(i))

	)

438 
	#ACPI_TOLOWER
(
i
Ë
	`tﬁowî
((Ë(i))

	)

439 
	#ACPI_IS_XDIGIT
(
i
Ë
	`isxdigô
((Ë(i))

	)

440 
	#ACPI_IS_DIGIT
(
i
Ë
	`isdigô
((Ë(i))

	)

441 
	#ACPI_IS_SPACE
(
i
Ë
	`is•a˚
((Ë(i))

	)

442 
	#ACPI_IS_UPPER
(
i
Ë
	`isuµî
((Ë(i))

	)

443 
	#ACPI_IS_PRINT
(
i
Ë
	`i•röt
((Ë(i))

	)

444 
	#ACPI_IS_ALPHA
(
i
Ë
	`ißÕha
((Ë(i))

	)

460 #i‚de‡
va_¨g


462 #i‚de‡
_VALIST


463 
	#_VALIST


	)

464 *
	tva_li°
;

469 
	#_AUPBND
 ( (
ACPI_NATIVE_INT
Ë- 1)

	)

470 
	#_ADNBND
 ( (
ACPI_NATIVE_INT
Ë- 1)

	)

474 
	#_Bnd
(
X
, 
bnd
Ë((( (X)Ë+ (bnd)Ë& (~(bnd)))

	)

475 
	#va_¨g
(
≠
, 
T
Ë(*(T *)((◊pË+(
	`_Bnd
 (T, 
_AUPBND
))Ë- (_Bnd (T,
_ADNBND
))))

	)

476 
	#va_íd
(
≠
Ë◊∞(
va_li°
Ë
NULL
)

	)

477 
	#va_°¨t
(
≠
, 
A
Ë(Ë(◊pË(((*Ë&(A)Ë+ (
	`_Bnd
 (A,
_AUPBND
))))

	)

483 
	#ACPI_STRSTR
(
s1
,
s2
Ë
	`A˝iUtSå°r
 ((s1), (s2))

	)

484 
	#ACPI_STRCHR
(
s1
,
c
Ë
	`A˝iUtSåchr
 ((s1), (c))

	)

485 
	#ACPI_STRLEN
(
s
Ë(
ACPI_SIZE
Ë
	`A˝iUtSåÀn
 ((s))

	)

486 
	#ACPI_STRCPY
(
d
,
s
Ë(Ë
	`A˝iUtSå˝y
 ((d), (s))

	)

487 
	#ACPI_STRNCPY
(
d
,
s
,
n
Ë(Ë
	`A˝iUtSån˝y
 ((d), (s), (
ACPI_SIZE
)“))

	)

488 
	#ACPI_STRNCMP
(
d
,
s
,
n
Ë
	`A˝iUtSåncmp
 ((d), (s), (
ACPI_SIZE
)“))

	)

489 
	#ACPI_STRCMP
(
d
,
s
Ë
	`A˝iUtSåcmp
 ((d), (s))

	)

490 
	#ACPI_STRCAT
(
d
,
s
Ë(Ë
	`A˝iUtSåˇt
 ((d), (s))

	)

491 
	#ACPI_STRNCAT
(
d
,
s
,
n
Ë
	`A˝iUtSånˇt
 ((d), (s), (
ACPI_SIZE
)“))

	)

492 
	#ACPI_STRTOUL
(
d
,
s
,
n
Ë
	`A˝iUtSåtoul
 ((d), (s), (
ACPI_SIZE
)“))

	)

493 
	#ACPI_MEMCMP
(
s1
,
s2
,
n
Ë
	`A˝iUtMemcmp
((c⁄° *)(s1), (c⁄° *)(s2), (
ACPI_SIZE
)“))

	)

494 
	#ACPI_MEMCPY
(
d
,
s
,
n
Ë(Ë
	`A˝iUtMem˝y
 ((d), (s), (
ACPI_SIZE
)“))

	)

495 
	#ACPI_MEMSET
(
d
,
v
,
n
Ë(Ë
	`A˝iUtMem£t
 ((d), (v), (
ACPI_SIZE
)“))

	)

496 
	#ACPI_TOUPPER
(
c
Ë
	`A˝iUtToUµî
 ((Ë(c))

	)

497 
	#ACPI_TOLOWER
(
c
Ë
	`A˝iUtToLowî
 ((Ë(c))

	)

501 #i‚de‡
ACPI_FILE


502 #ifde‡
ACPI_APPLICATION


503 
	~<°dio.h
>

504 
	#ACPI_FILE
 
FILE
 *

	)

505 
	#ACPI_FILE_OUT
 
°dout


	)

506 
	#ACPI_FILE_ERR
 
°dîr


	)

508 
	#ACPI_FILE
 *

	)

509 
	#ACPI_FILE_OUT
 
NULL


	)

510 
	#ACPI_FILE_ERR
 
NULL


	)

	@src/extern/acpica/source/include/platform/acenvex.h

116 #i‚de‡
__ACENVEX_H__


117 
	#__ACENVEX_H__


	)

128 #i‡
deföed
(
_LINUX
Ë|| deföed(
__löux__
)

129 
	~"a˛öuxex.h
"

	@src/extern/acpica/source/include/platform/acfreebsd.h

116 #i‚de‡
__ACFREEBSD_H__


117 
	#__ACFREEBSD_H__


	)

122 
	~"acgcc.h
"

123 
	~<sys/ty≥s.h
>

125 #ifde‡
__LP64__


126 
	#ACPI_MACHINE_WIDTH
 64

	)

128 
	#ACPI_MACHINE_WIDTH
 32

	)

131 
	#COMPILER_DEPENDENT_INT64
 
öt64_t


	)

132 
	#COMPILER_DEPENDENT_UINT64
 
uöt64_t


	)

134 
	#ACPI_UINTPTR_T
 
uöçå_t


	)

136 
	#ACPI_USE_DO_WHILE_0


	)

137 
	#ACPI_USE_LOCAL_CACHE


	)

138 
	#ACPI_USE_NATIVE_DIVIDE


	)

139 
	#ACPI_USE_SYSTEM_CLIBRARY


	)

141 #ifde‡
_KERNEL


143 
	~<sys/˘y≥.h
>

144 
	~<sys/∑øm.h
>

145 
	~<sys/sy°m.h
>

146 
	~<sys/libkîn.h
>

147 
	~<machöe/a˝iˇ_machdï.h
>

148 
	~<machöe/°d¨g.h
>

150 
	~"›t_a˝i.h
"

152 
	#ACPI_MUTEX_TYPE
 
ACPI_OSL_MUTEX


	)

154 #ifde‡
ACPI_DEBUG


155 
	#ACPI_DEBUG_OUTPUT


	)

156 
	#ACPI_DISASSEMBLER


	)

159 #ifde‡
ACPI_DEBUG_OUTPUT


160 
	~"›t_ddb.h
"

161 #ifde‡
DDB


162 
	#ACPI_DEBUGGER


	)

166 #ifde‡
DEBUGGER_THREADING


167 #unde‡
DEBUGGER_THREADING


170 
	#DEBUGGER_THREADING
 0

	)

174 #i‡
__STDC_HOSTED__


175 
	~<˘y≥.h
>

178 
	#ACPI_CAST_PTHREAD_T
(
±hªad
Ë((
ACPI_THREAD_ID
Ë
	`ACPI_TO_INTEGER
 (±hªad))

	)

180 
	#ACPI_USE_STANDARD_HEADERS


	)

182 
	#ACPI_FLUSH_CPU_CACHE
()

	)

183 
	#__cde˛


	)

	@src/extern/acpica/source/include/platform/acgcc.h

116 #i‚de‡
__ACGCC_H__


117 
	#__ACGCC_H__


	)

119 
	#ACPI_INLINE
 
__ölöe__


	)

123 
	#ACPI_GET_FUNCTION_NAME
 
__func__


	)

129 
	#ACPI_PRINTF_LIKE
(
c
Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, c, c+1)))

	)

137 
	#ACPI_UNUSED_VAR
 
	`__©åibuã__
 ((
unu£d
))

	)

146 #ifde‡
°rchr


147 #unde‡
°rchr


	@src/extern/acpica/source/include/platform/achaiku.h

116 #i‚de‡
__ACHAIKU_H__


117 
	#__ACHAIKU_H__


	)

119 
	~"acgcc.h
"

120 
	~<Kî√lExp‹t.h
>

122 
	gmuãx
;

127 
	#ACPI_USE_SYSTEM_CLIBRARY


	)

128 
	#ACPI_USE_STANDARD_HEADERS


	)

130 
	#ACPI_MUTEX_TYPE
 
ACPI_OSL_MUTEX


	)

131 
	#ACPI_MUTEX
 
muãx
 *

	)

133 
	#ACPI_USE_NATIVE_DIVIDE


	)

137 
	#ACPI_SEMAPHORE
 
£m_id


	)

138 
	#ACPI_SPINLOCK
 
•ölock
 *

	)

139 
	#ACPI_CPU_FLAGS
 
˝u_°©us


	)

141 
	#COMPILER_DEPENDENT_INT64
 
öt64


	)

142 
	#COMPILER_DEPENDENT_UINT64
 
uöt64


	)

145 #ifde‡
B_HAIKU_64_BIT


146 
	#ACPI_MACHINE_WIDTH
 64

	)

148 
	#ACPI_MACHINE_WIDTH
 32

	)

152 #ifde‡
_KERNEL_MODE


156 
	#ACPI_USE_LOCAL_CACHE


	)

158 
	#ACPI_FLUSH_CPU_CACHE
(Ë
__asm
 
	`__vﬁ©ûe
("wbövd");

	)

161 
A˝iOsAcquúeGlobÆLock
(
uöt32
 *
lock
);

162 
A˝iOsRñó£GlobÆLock
(
uöt32
 *
lock
);

164 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
GL±r
, 
Acq
) do { \

165 (
Acq
Ë
	`A˝iOsAcquúeGlobÆLock
(&((
GL±r
)->
GlobÆLock
)); \

166 } 0)

	)

168 
	#ACPI_RELEASE_GLOBAL_LOCK
(
GL±r
, 
Acq
) do { \

169 (
Acq
Ë
	`A˝iOsRñó£GlobÆLock
(&((
GL±r
)->
GlobÆLock
)); \

170 } 0)

	)

	@src/extern/acpica/source/include/platform/acintel.h

116 #i‚de‡
__ACINTEL_H__


117 
	#__ACINTEL_H__


	)

121 
	#COMPILER_DEPENDENT_INT64
 
__öt64


	)

122 
	#COMPILER_DEPENDENT_UINT64
 
__öt64


	)

123 
	#ACPI_INLINE
 
__ölöe


	)

133 
	#ACPI_SYSTEM_XFACE


	)

134 
	#ACPI_EXTERNAL_XFACE


	)

135 
	#ACPI_INTERNAL_XFACE


	)

136 
	#ACPI_INTERNAL_VAR_XFACE


	)

139 #¥agm®
w¨nög
(
dißbÀ
:981)

142 #¥agm®
w¨nög
(
dißbÀ
:4100)

145 #¥agm®
w¨nög
(
dißbÀ
:4127)

148 #¥agm®
w¨nög
(
dißbÀ
:4706)

151 #¥agm®
w¨nög
(
dißbÀ
:4214)

	@src/extern/acpica/source/include/platform/ackos.h

1 #i‚de‡
__ACKOS_H__


2 
	#__ACKOS_H__


	)

10 
	#ACPI_USE_DO_WHILE_0


	)

11 
	#ACPI_USE_LOCAL_CACHE


	)

13 
	~<°d¨g.h
>

14 
	~<°rög.h
>

15 
	~<°dlib.h
>

16 
	~<˘y≥.h
>

17 
	~<uni°d.h
>

19 #i‡
deföed
(
__ü64__
Ë|| deföed(
__x86_64__
)

20 
	#ACPI_MACHINE_WIDTH
 64

	)

21 
	#COMPILER_DEPENDENT_INT64
 

	)

22 
	#COMPILER_DEPENDENT_UINT64
 

	)

24 #îr‹ 
unsuµ‹ãd
 
¨chôe˘uª
: 
⁄ly
 
__x86_64__
 
suµ‹ãd
 
©
 
this
 
time


27 #i‚de‡
__cde˛


28 
	#__cde˛


	)

31 
	~"acgcc.h
"

	@src/extern/acpica/source/include/platform/aclinux.h

116 #i‚de‡
__ACLINUX_H__


117 
	#__ACLINUX_H__


	)

119 #ifde‡
__KERNEL__


123 #i‡!
deföed
(
BUILDING_ACPICA
Ë&& !deföed(
_LINUX_ACPI_H
)

131 
	#ACPI_USE_SYSTEM_CLIBRARY


	)

132 
	#ACPI_USE_DO_WHILE_0


	)

135 #ifde‡
__KERNEL__


137 
	#ACPI_USE_SYSTEM_INTTYPES


	)

141 #ifde‡
CONFIG_ACPI_REDUCED_HARDWARE_ONLY


142 
	#ACPI_REDUCED_HARDWARE
 1

	)

145 
	~<löux/°rög.h
>

146 
	~<löux/kî√l.h
>

147 
	~<löux/˘y≥.h
>

148 
	~<löux/sched.h
>

149 
	~<löux/©omic.h
>

150 
	~<löux/m©h64.h
>

151 
	~<löux/¶ab.h
>

152 
	~<löux/•ölock_ty≥s.h
>

153 #ifde‡
EXPORT_ACPI_INTERFACES


154 
	~<löux/exp‹t.h
>

156 #ifde‡
CONFIG_ACPI


157 
	~<asm/a˚nv.h
>

160 #i‚de‡
CONFIG_ACPI


164 
	#ACPI_GLOBAL
(
t
,
a
)

	)

165 
	#ACPI_INIT_GLOBAL
(
t
,
a
,
b
)

	)

169 
	#ACPI_NO_MEM_ALLOCATIONS


	)

173 
	#ACPI_NO_ERROR_MESSAGES


	)

174 #unde‡
ACPI_DEBUG_OUTPUT


178 
	#ACPI_EXTERNAL_RETURN_STATUS
(
PrŸŸy≥
) \

179 
ACPI_INLINE
 
PrŸŸy≥
 {(
AE_NOT_CONFIGURED
);}

	)

180 
	#ACPI_EXTERNAL_RETURN_OK
(
PrŸŸy≥
) \

181 
ACPI_INLINE
 
PrŸŸy≥
 {(
AE_OK
);}

	)

182 
	#ACPI_EXTERNAL_RETURN_VOID
(
PrŸŸy≥
) \

183 
ACPI_INLINE
 
PrŸŸy≥
 {;}

	)

184 
	#ACPI_EXTERNAL_RETURN_UINT32
(
PrŸŸy≥
) \

185 
ACPI_INLINE
 
PrŸŸy≥
 {(0);}

	)

186 
	#ACPI_EXTERNAL_RETURN_PTR
(
PrŸŸy≥
) \

187 
ACPI_INLINE
 
PrŸŸy≥
 {(
NULL
);}

	)

193 
	#ACPI_MACHINE_WIDTH
 
BITS_PER_LONG


	)

194 
	#ACPI_EXPORT_SYMBOL
(
symbﬁ
Ë
	`EXPORT_SYMBOL
(symbﬁ);

	)

195 
	#°πoul
 
sim∂e_°πoul


	)

197 
	#ACPI_CACHE_T
 
kmem_ˇche


	)

198 
	#ACPI_SPINLOCK
 
•ölock_t
 *

	)

199 
	#ACPI_CPU_FLAGS
 

	)

203 
	#USE_NATIVE_ALLOCATE_ZEROED


	)

208 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsInôülize


	)

209 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsTîmö©e


	)

210 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAŒoˇã


	)

211 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAŒoˇãZî€d


	)

212 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsFªe


	)

213 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsAcquúeObje˘


	)

214 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëThªadId


	)

215 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsCª©eLock


	)

220 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRódabÀ


	)

221 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsWrôabÀ


	)

226 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsRedúe˘Ouçut


	)

227 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëLöe


	)

228 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëTabÀByName


	)

229 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëTabÀByIndex


	)

230 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëTabÀByAddªss


	)

231 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsO≥nDúe˘‹y


	)

232 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsGëNextFûíame


	)

233 
	#ACPI_USE_ALTERNATE_PROTOTYPE_A˝iOsClo£Dúe˘‹y


	)

237 
	~<°d¨g.h
>

238 
	~<°rög.h
>

239 
	~<°dlib.h
>

240 
	~<˘y≥.h
>

241 
	~<uni°d.h
>

245 #i‚de‡
__öô


246 
	#__öô


	)

251 
	#ACPI_FLUSH_CPU_CACHE
()

	)

252 
	#ACPI_CAST_PTHREAD_T
(
Pthªad
Ë((
ACPI_THREAD_ID
Ë(Pthªad))

	)

254 #i‡
deföed
(
__ü64__
Ë|| deföed(
__x86_64__
) ||\

255 
deföed
(
__Ørch64__
Ë|| 
	$deföed
(
__PPC64__
)

256 
	#ACPI_MACHINE_WIDTH
 64

	)

257 
	#COMPILER_DEPENDENT_INT64
 

	)

258 
	#COMPILER_DEPENDENT_UINT64
 

	)

260 
	#ACPI_MACHINE_WIDTH
 32

	)

261 
	#COMPILER_DEPENDENT_INT64
 

	)

262 
	#COMPILER_DEPENDENT_UINT64
 

	)

263 
	#ACPI_USE_NATIVE_DIVIDE


	)

266 #i‚de‡
__cde˛


267 
	#__cde˛


	)

274 
	~"acgcc.h
"

	@src/extern/acpica/source/include/platform/aclinuxex.h

116 #i‚de‡
__ACLINUXEX_H__


117 
	#__ACLINUXEX_H__


	)

119 #ifde‡
__KERNEL__


121 #i‚de‡
ACPI_USE_NATIVE_DIVIDE


123 #i‚de‡
ACPI_DIV_64_BY_32


124 
	#ACPI_DIV_64_BY_32
(
n_hi
, 
n_lo
, 
d32
, 
q32
, 
r32
) \

126 
	`UINT64
 (
__n
Ë((
UINT64
Ë
n_hi
Ë<< 32 | (
n_lo
); \

127 (
r32
Ë
	`do_div
 ((
__n
), (
d32
)); \

128 (
q32
Ë(
UINT32
Ë(
__n
); \

129 } 0)

	)

132 #i‚de‡
ACPI_SHIFT_RIGHT_64


133 
	#ACPI_SHIFT_RIGHT_64
(
n_hi
, 
n_lo
) \

135 (
n_lo
) >>= 1; \

136 (
n_lo
Ë|(((
n_hi
) & 1) << 31); \

137 (
n_hi
) >>= 1; \

138 } 0)

	)

146 
ACPI_STATUS
 
__öô
 
A˝iOsInôülize
 (

149 
ACPI_STATUS
 
A˝iOsTîmö©e
 (

158 
ölöe
 *

159 
	$A˝iOsAŒoˇã
 (

160 
ACPI_SIZE
 
Size
)

162  
	`kmÆloc
 (
Size
, 
	`úqs_dißbÀd
 (Ë? 
GFP_ATOMIC
 : 
GFP_KERNEL
);

163 
	}
}

165 
ölöe
 *

166 
	$A˝iOsAŒoˇãZî€d
 (

167 
ACPI_SIZE
 
Size
)

169  
	`kzÆloc
 (
Size
, 
	`úqs_dißbÀd
 (Ë? 
GFP_ATOMIC
 : 
GFP_KERNEL
);

170 
	}
}

172 
ölöe
 

173 
	$A˝iOsFªe
 (

174 *
Mem‹y
)

176 
	`k‰ì
 (
Mem‹y
);

177 
	}
}

179 
ölöe
 *

180 
	$A˝iOsAcquúeObje˘
 (

181 
ACPI_CACHE_T
 *
Cache
)

183  
	`kmem_ˇche_zÆloc
 (
Cache
,

184 
	`úqs_dißbÀd
 (Ë? 
GFP_ATOMIC
 : 
GFP_KERNEL
);

185 
	}
}

187 
ölöe
 
ACPI_THREAD_ID


188 
	$A˝iOsGëThªadId
 (

191  (
ACPI_THREAD_ID
Ë(Ë
cuºít
;

192 
	}
}

201 
	#A˝iOsCª©eLock
(
__H™dÀ
) \

203 
•ölock_t
 *
Lock
 = 
	`ACPI_ALLOCATE
((*Lock)); \

204 i‡(
Lock
) { \

205 *(
__H™dÀ
Ë
Lock
; \

206 
	`•ö_lock_öô
(*(
__H™dÀ
)); \

208 
Lock
 ? 
AE_OK
 : 
AE_NO_MEMORY
; \

209 })

	)

215 
E¨lyA˝iOsUnm≠Mem‹y
 (

216 
__iomem
 *
Vút
,

217 
ACPI_SIZE
 
Size
);

	@src/extern/acpica/source/include/platform/acmacosx.h

116 #i‚de‡
__ACMACOSX_H__


117 
	#__ACMACOSX_H__


	)

119 
	~"a˛öux.h
"

121 #ifde‡
__APPLE__


122 
	#£m_de°roy
 
£m_˛o£


	)

123 
	#ACPI_USE_ALTERNATE_TIMEOUT


	)

126 #ifde‡
__˛™g__


127 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wformat-nonliteral"

	@src/extern/acpica/source/include/platform/acmsvc.h

116 #i‚de‡
__ACMSVC_H__


117 
	#__ACMSVC_H__


	)

124 
	#›í
 
_›í


	)

125 
	#ªad
 
_ªad


	)

126 
	#wrôe
 
_wrôe


	)

127 
	#˛o£
 
_˛o£


	)

128 
	#°©
 
_°©


	)

129 
	#f°©
 
_f°©


	)

130 
	#mkdú
 
_mkdú


	)

131 
	#°æwr
 
_°æwr


	)

132 
	#O_RDONLY
 
_O_RDONLY


	)

133 
	#O_BINARY
 
_O_BINARY


	)

134 
	#O_CREAT
 
_O_CREAT


	)

135 
	#O_WRONLY
 
_O_WRONLY


	)

136 
	#O_TRUNC
 
_O_TRUNC


	)

137 
	#S_IREAD
 
_S_IREAD


	)

138 
	#S_IWRITE
 
_S_IWRITE


	)

139 
	#S_IFDIR
 
_S_IFDIR


	)

143 #i‚de‡
_CRT_SECURE_NO_WARNINGS


144 
	#_CRT_SECURE_NO_WARNINGS


	)

149 #i‚de‡
_CRT_NONSTDC_NO_DEPRECATE


150 
	#_CRT_NONSTDC_NO_DEPRECATE


	)

153 
	#COMPILER_DEPENDENT_INT64
 
__öt64


	)

154 
	#COMPILER_DEPENDENT_UINT64
 
__öt64


	)

155 
	#ACPI_INLINE
 
__ölöe


	)

165 
	#ACPI_SYSTEM_XFACE
 
__cde˛


	)

166 
	#ACPI_EXTERNAL_XFACE


	)

167 
	#ACPI_INTERNAL_XFACE


	)

168 
	#ACPI_INTERNAL_VAR_XFACE
 
__cde˛


	)

170 #i‚de‡
_LINT


174 
	#ACPI_DIV_64_BY_32
(
n_hi
, 
n_lo
, 
d32
, 
q32
, 
r32
) \

176 
__asm
 
mov
 
edx
, 
n_hi
 \

177 
__asm
 
mov
 
óx
, 
n_lo
 \

178 
__asm
 
div
 
d32
 \

179 
__asm
 
mov
 
q32
, 
óx
 \

180 
__asm
 
mov
 
r32
, 
edx
 \

181 }

	)

183 
	#ACPI_SHIFT_RIGHT_64
(
n_hi
, 
n_lo
) \

185 
__asm
 
shr
 
n_hi
, 1 \

186 
__asm
 
r¸
 
n_lo
, 1 \

187 }

	)

192 
	#ACPI_DIV_64_BY_32
(
n_hi
, 
n_lo
, 
d32
, 
q32
, 
r32
) \

194 
q32
 = 
n_hi
 / 
d32
; \

195 
r32
 = 
n_lo
 / 
d32
; \

196 }

	)

198 
	#ACPI_SHIFT_RIGHT_64
(
n_hi
, 
n_lo
) \

200 
n_hi
 >>= 1; \

201 
n_lo
 >>= 1; \

202 }

	)

206 #¥agm®
w¨nög
(
dißbÀ
:4100)

209 #¥agm®
w¨nög
(
dißbÀ
:4127)

212 #¥agm®
w¨nög
(
dißbÀ
:4706)

215 #¥agm®
w¨nög
(
dißbÀ
:4131)

217 #i‡
_MSC_VER
 > 1200

218 #¥agm®
w¨nög
–
dißbÀ
 : 4295 )

224 #ifde‡
_DEBUG


225 
	#_CRTDBG_MAP_ALLOC


	)

227 
	~<°dlib.h
>

228 
	~<mÆloc.h
>

229 
	~<¸tdbg.h
>

237 
	#ACPI_DEBUG_INITIALIZE
() \

238 
	`_CπSëDbgFœg
 (\

239 
_CRTDBG_CHECK_ALWAYS_DF
 | \

240 
_CRTDBG_ALLOC_MEM_DF
 | \

241 
_CRTDBG_DELAY_FREE_MEM_DF
 | \

242 
_CRTDBG_LEAK_CHECK_DF
 | \

243 
	`_CπSëDbgFœg
(
_CRTDBG_REPORT_FLAG
));

	)

250 
Dëe˘ed
 
mem‹y
 
	gÀaks
!

251 
Dumpög
 
	gobje˘s
 ->

252 ..\..\
	gsour˚
\
	gos_•ecific
\
	g£rvi˚_œyîs
\
	goswöxf
.
	$c
(701Ë: {937
	}
} 
n‹mÆ
 
block
 
©
 0x002E9190, 40 
byãs
 .

253 
	gD©a
: < > 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00

255 
_CπSëBªakAŒoc
 (937);

	@src/extern/acpica/source/include/platform/acnetbsd.h

116 #i‚de‡
__ACNETBSD_H__


117 
	#__ACNETBSD_H__


	)

121 
	~"acgcc.h
"

123 
	#ACPI_UINTPTR_T
 
uöçå_t


	)

124 
	#ACPI_USE_LOCAL_CACHE


	)

125 
	#ACPI_CAST_PTHREAD_T
(
x
Ë((
ACPI_THREAD_ID
Ë
	`ACPI_TO_INTEGER
 (x))

	)

127 #ifde‡
_LP64


128 
	#ACPI_MACHINE_WIDTH
 64

	)

130 
	#ACPI_MACHINE_WIDTH
 32

	)

133 
	#COMPILER_DEPENDENT_INT64
 
öt64_t


	)

134 
	#COMPILER_DEPENDENT_UINT64
 
uöt64_t


	)

136 #i‡
deföed
(
_KERNEL
Ë|| deföed(
_STANDALONE
)

137 #ifde‡
_KERNEL_OPT


138 
	~"›t_a˝i.h
"

141 
	~<sys/∑øm.h
>

142 
	~<sys/sy°m.h
>

143 
	~<machöe/°d¨g.h
>

144 
	~<machöe/a˝i_func.h
>

146 
	#asm
 
__asm


	)

148 
	#ACPI_USE_NATIVE_DIVIDE


	)

150 
	#ACPI_SYSTEM_XFACE


	)

151 
	#ACPI_EXTERNAL_XFACE


	)

152 
	#ACPI_INTERNAL_XFACE


	)

153 
	#ACPI_INTERNAL_VAR_XFACE


	)

155 #ifde‡
ACPI_DEBUG


156 
	#ACPI_DEBUG_OUTPUT


	)

157 
	#ACPI_DBG_TRACK_ALLOCATIONS


	)

158 #ifde‡
DEBUGGER_THREADING


159 #unde‡
DEBUGGER_THREADING


161 
	#DEBUGGER_THREADING
 0

	)

162 
	~"›t_ddb.h
"

163 #ifde‡
DDB


164 
	#ACPI_DISASSEMBLER


	)

165 
	#ACPI_DEBUGGER


	)

171 
	~<˘y≥.h
>

172 
	~<°döt.h
>

175 
	#ACPI_USE_STANDARD_HEADERS


	)

177 
	#__˛i
()

	)

178 
	#__°i
()

	)

179 
	#__cde˛


	)

184 
	#ACPI_USE_SYSTEM_CLIBRARY


	)

185 
	#ACPI_USE_NATIVE_DIVIDE


	)

	@src/extern/acpica/source/include/platform/acos2.h

116 #i‚de‡
__ACOS2_H__


117 
	#__ACOS2_H__


	)

118 
	#INCL_LONGLONG


	)

119 
	~<os2.h
>

122 
	#ACPI_MACHINE_WIDTH
 32

	)

124 
	#COMPILER_DEPENDENT_INT64
 

	)

125 
	#COMPILER_DEPENDENT_UINT64
 

	)

126 
	#ACPI_USE_NATIVE_DIVIDE


	)

128 
	#ACPI_SYSTEM_XFACE
 
APIENTRY


	)

129 
	#ACPI_EXTERNAL_XFACE
 
APIENTRY


	)

130 
	#ACPI_INTERNAL_XFACE
 
APIENTRY


	)

131 
	#ACPI_INTERNAL_VAR_XFACE
 
APIENTRY


	)

139 
	#ACPI_UNUSED_VAR


	)

141 
	#ACPI_USE_STANDARD_HEADERS


	)

142 
	~<io.h
>

144 
	#ACPI_FLUSH_CPU_CACHE
(Ë
	`Wbövd
()

	)

145 
Wbövd
();

147 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
GL±r
, 
Acq
ËAcq = 
	`OSPMAcquúeGlobÆLock
(GL±r)

	)

148 
	#ACPI_RELEASE_GLOBAL_LOCK
(
GL±r
, 
Pnd
ËPnd = 
	`OSPMRñó£GlobÆLock
(GL±r)

	)

149 
OSPMAcquúeGlobÆLock
 (*);

150 
OSPMRñó£GlobÆLock
 (*);

152 
	#ACPI_SHIFT_RIGHT_64
(
n_hi
, 
n_lo
) \

154 
vÆ
 = 0LL; \

155 
vÆ
 = 
n_lo
 | ( (()
h_hi
) << 32 ); \

156 
	`__ŒrŸr
 (
vÆ
,1); \

157 
n_hi
 = ()((
vÆ
 >> 32 ) & 0xffffffff ); \

158 
n_lo
 = ()(
vÆ
 & 0xffffffff); \

159 }

	)

161 #i‚de‡
ACPI_ASL_COMPILER


162 
	#ACPI_USE_LOCAL_CACHE


	)

163 #unde‡
ACPI_DEBUGGER


	@src/extern/acpica/source/include/platform/acwin.h

116 #i‚de‡
__ACWIN_H__


117 
	#__ACWIN_H__


	)

122 #ifde‡
_MSC_VER


123 
	~"acmsvc.h
"

127 
	#ACPI_MACHINE_WIDTH
 32

	)

129 
	#ACPI_USE_STANDARD_HEADERS


	)

131 #ifde‡
ACPI_DEFINE_ALTERNATE_TYPES


137 
	ts32
;

138 
	tu8
;

139 
	tu16
;

140 
	tu32
;

141 
COMPILER_DEPENDENT_UINT64
 
	tu64
;

155 #ifde‡
ACPI_APPLICATION


156 
	#ACPI_FLUSH_CPU_CACHE
()

	)

158 
	#ACPI_FLUSH_CPU_CACHE
(Ë
__asm
 {
WBINVD
}

	)

161 #ifde‡
_DEBUG


162 
	#ACPI_SIMPLE_RETURN_MACROS


	)

172 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
FacsPå
, 
Acq
Ë
__asm
 \

174 
__asm
 
mov
 
óx
, 0xFF \

175 
__asm
 
mov
 
ecx
, 
FacsPå
 \

176 
__asm
 
‹
 
ecx
,Écx \

177 
__asm
 
jz
 
exô_acq
 \

178 
__asm
 
Àa
 
ecx
, [ecx].
GlobÆLock
 \

180 
__asm
 
acq10
: \

181 
__asm
 
mov
 
óx
, [
ecx
] \

182 
__asm
 
mov
 
edx
, 
óx
 \

183 
__asm
 
™d
 
edx
, 0xFFFFFFFE \

184 
__asm
 
bts
 
edx
, 1 \

185 
__asm
 
adc
 
edx
, 0 \

186 
__asm
 
lock
 
cmpxchg
 
dw‹d
 
±r
 [
ecx
], 
edx
 \

187 
__asm
 
jnz
 
acq10
 \

189 
__asm
 
cmp
 
dl
, 3 \

190 
__asm
 
sbb
 
óx
,Éax \

192 
__asm
 
exô_acq
: \

193 
__asm
 
mov
 
Acq
, 
Æ
 \

194 }

	)

196 
	#ACPI_RELEASE_GLOBAL_LOCK
(
FacsPå
, 
Pnd
Ë
__asm
 \

198 
__asm
 
x‹
 
óx
,Éax \

199 
__asm
 
mov
 
ecx
, 
FacsPå
 \

200 
__asm
 
‹
 
ecx
,Écx \

201 
__asm
 
jz
 
exô_ªl
 \

202 
__asm
 
Àa
 
ecx
, [ecx].
GlobÆLock
 \

204 
__asm
 
Rñ10
: \

205 
__asm
 
mov
 
óx
, [
ecx
] \

206 
__asm
 
mov
 
edx
, 
óx
 \

207 
__asm
 
™d
 
edx
, 0xFFFFFFFC \

208 
__asm
 
lock
 
cmpxchg
 
dw‹d
 
±r
 [
ecx
], 
edx
 \

209 
__asm
 
jnz
 
Rñ10
 \

211 
__asm
 
cmp
 
dl
, 3 \

212 
__asm
 
™d
 
óx
, 1 \

214 
__asm
 
exô_ªl
: \

215 
__asm
 
mov
 
Pnd
, 
Æ
 \

216 }

	)

	@src/extern/acpica/source/include/platform/acwin64.h

116 #i‚de‡
__ACWIN64_H__


117 
	#__ACWIN64_H__


	)

121 
	~"acöãl.h
"

124 
	#ACPI_MACHINE_WIDTH
 64

	)

126 
	#ACPI_USE_STANDARD_HEADERS


	)

138 
	#ACPI_FLUSH_CPU_CACHE
()

	)

143 #ifde‡
ACPI_APPLICATION


144 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
GL±r
, 
Acq
Ëi‡(
A˝iGbl_GlobÆLockPª£¡
Ë{Acq = 0xFF;} {Acq = 0;}

	)

145 
	#ACPI_RELEASE_GLOBAL_LOCK
(
GL±r
, 
Pnd
Ëi‡(
A˝iGbl_GlobÆLockPª£¡
Ë{Pnd = 0xFF;} {Pnd = 0;}

	)

148 
	#ACPI_ACQUIRE_GLOBAL_LOCK
(
GL±r
, 
Acq
)

	)

150 
	#ACPI_RELEASE_GLOBAL_LOCK
(
GL±r
, 
Pnd
)

	)

	@src/extern/acpica/source/tools/acpibin/acpibin.h

116 
	~"a˝i.h
"

117 
	~"accomm⁄.h
"

119 
	~<°dio.h
>

120 
	~<f˙é.h
>

121 
	~<î∫o.h
>

123 
	#DB_CONSOLE_OUTPUT
 0x02

	)

124 
	#ACPI_DB_REDIRECTABLE_OUTPUT
 0x01

	)

129 #ifde‡
_DECLARE_GLOBALS


130 
	#EXTERN


	)

131 
	#INIT_GLOBAL
(
a
,
b
Ëa=
	)
b

133 
	#EXTERN
 

	)

134 
	#INIT_GLOBAL
(
a
,
b
Ë
	)
a

140 
EXTERN
 
BOOLEAN
 
INIT_GLOBAL
 (
Gbl_Tî£Mode
, 
FALSE
);

146 
AbCom∑ªAmlFûes
 (

147 *
Fûe1P©h
,

148 *
Fûe2P©h
);

151 
AbDumpAmlFûe
 (

152 *
Fûe1P©h
,

153 *
Fûe2P©h
);

156 
AbCompuãChecksum
 (

157 *
Fûe1P©h
);

160 
AbDi•œyHódî
 (

161 *
Fûe1P©h
);

	@src/extern/acpica/source/tools/acpidump/acpidump.h

119 #ifde‡
_DECLARE_GLOBALS


120 
	#EXTERN


	)

121 
	#INIT_GLOBAL
(
a
,
b
Ëa=
	)
b

123 
	#EXTERN
 

	)

124 
	#INIT_GLOBAL
(
a
,
b
Ë
	)
a

127 
	~"a˝i.h
"

128 
	~"accomm⁄.h
"

129 
	~"a˘abÀs.h
"

131 
	~<°dio.h
>

132 
	~<f˙é.h
>

133 
	~<î∫o.h
>

134 
	~<sys/°©.h
>

139 
EXTERN
 
BOOLEAN
 
INIT_GLOBAL
 (
Gbl_Summ¨yMode
, 
FALSE
);

140 
EXTERN
 
BOOLEAN
 
INIT_GLOBAL
 (
Gbl_Vîbo£Mode
, 
FALSE
);

141 
EXTERN
 
BOOLEAN
 
INIT_GLOBAL
 (
Gbl_Bö¨yMode
, 
FALSE
);

142 
EXTERN
 
BOOLEAN
 
INIT_GLOBAL
 (
Gbl_DumpCu°omizedTabÀs
, 
FALSE
);

143 
EXTERN
 
BOOLEAN
 
INIT_GLOBAL
 (
Gbl_DoNŸDumpXsdt
, 
FALSE
);

144 
EXTERN
 
ACPI_FILE
 
INIT_GLOBAL
 (
Gbl_OuçutFûe
, 
NULL
);

145 
EXTERN
 
INIT_GLOBAL
 (*
Gbl_OuçutFûíame
, 
NULL
);

146 
EXTERN
 
UINT64
 
INIT_GLOBAL
 (
Gbl_RsdpBa£
, 0);

150 #ifde‡
_DECLARE_GLOBALS


151 
UINT8
 
	gA˝iGbl_I¡egîByãWidth
 = 8;

156 
	s≠_dump_a˘i⁄


158 *
	mArgumít
;

159 
UINT32
 
	mToBeD⁄e
;

161 } 
	tAP_DUMP_ACTION
;

163 
	#AP_MAX_ACTIONS
 32

	)

165 
	#AP_DUMP_ALL_TABLES
 0

	)

166 
	#AP_DUMP_TABLE_BY_ADDRESS
 1

	)

167 
	#AP_DUMP_TABLE_BY_NAME
 2

	)

168 
	#AP_DUMP_TABLE_BY_FILE
 3

	)

170 
	#AP_MAX_ACPI_FILES
 256

	)

174 
	#MIN_FADT_FOR_DSDT
 (
	`ACPI_FADT_OFFSET
 (
Dsdt
Ë+  (
UINT32
))

	)

175 
	#MIN_FADT_FOR_FACS
 (
	`ACPI_FADT_OFFSET
 (
Facs
Ë+  (
UINT32
))

	)

176 
	#MIN_FADT_FOR_XDSDT
 (
	`ACPI_FADT_OFFSET
 (
XDsdt
Ë+  (
UINT64
))

	)

177 
	#MIN_FADT_FOR_XFACS
 (
	`ACPI_FADT_OFFSET
 (
XFacs
Ë+  (
UINT64
))

	)

184 
ApDumpTabÀFromFûe
 (

185 *
P©h«me
);

188 
ApDumpTabÀByName
 (

189 *
Sig«tuª
);

192 
ApDumpTabÀByAddªss
 (

193 *
AsciiAddªss
);

196 
ApDumpAŒTabÀs
 (

199 
BOOLEAN


200 
ApIsVÆidHódî
 (

201 
ACPI_TABLE_HEADER
 *
TabÀ
);

203 
BOOLEAN


204 
ApIsVÆidChecksum
 (

205 
ACPI_TABLE_HEADER
 *
TabÀ
);

207 
UINT32


208 
ApGëTabÀLígth
 (

209 
ACPI_TABLE_HEADER
 *
TabÀ
);

216 
ApO≥nOuçutFûe
 (

217 *
P©h«me
);

220 
ApWrôeToBö¨yFûe
 (

221 
ACPI_TABLE_HEADER
 *
TabÀ
,

222 
UINT32
 
In°™˚
);

224 
ACPI_TABLE_HEADER
 *

225 
ApGëTabÀFromFûe
 (

226 *
P©h«me
,

227 
UINT32
 *
FûeSize
);

	@src/extern/acpica/source/tools/acpiexec/aecommon.h

116 #i‚de‡
_AECOMMON


117 
	#_AECOMMON


	)

119 #ifde‡
_MSC_VER


120 #¥agm®
w¨nög
(
dißbÀ
:4100)

123 
	~"a˝i.h
"

124 
	~"accomm⁄.h
"

125 
	~"a˝¨£r.h
"

126 
	~"amlcode.h
"

127 
	~"a˙ame•.h
"

128 
	~"acdebug.h
"

129 
	~"a˘abÀs.h
"

130 
	~"acöãΩ.h
"

131 
	~"amÃe§c.h
"

132 
	~"aˇµs.h
"

134 
	~<°dio.h
>

135 
	~<°dlib.h
>

136 
	~<°rög.h
>

137 
	~<sig«l.h
>

139 
BOOLEAN
 
A˝iGbl_Ign‹eEº‹s
;

140 
UINT8
 
A˝iGbl_Regi⁄FûlVÆue
;

141 
UINT8
 
A˝iGbl_U£HwRedu˚dFadt
;

142 
BOOLEAN
 
A˝iGbl_Di•œyRegi⁄Ac˚ss
;

143 
BOOLEAN
 
A˝iGbl_DoI¡îÁ˚Te°s
;

144 
BOOLEAN
 
A˝iGbl_LﬂdTe°TabÀs
;

145 
FILE
 *
A˝iGbl_Name•a˚InôFûe
;

146 
ACPI_CONNECTION_INFO
 
AeMyC⁄ãxt
;

150 
	#AE_CHECK_STATUS
(
Name
, 
Sètus
, 
Ex≥˘ed
) \

151 i‡(
Sètus
 !
Ex≥˘ed
) \

153 
	`A˝iOsPrötf
 ("Unexpected %s from %s (%s-%d)\n", \

154 
	`A˝iF‹m©Ex˚±i⁄
 (
Sètus
), #Name, 
_A˝iModuÀName
, 
__LINE__
); \

155 }

	)

159 
	#AE_CHECK_OK
(
Name
, 
Sètus
Ë
	`AE_CHECK_STATUS
 (Name, Sètus, 
AE_OK
);

	)

161 
	s´_èbÀ_desc


163 
ACPI_TABLE_HEADER
 *
	mTabÀ
;

164 
´_èbÀ_desc
 *
	mNext
;

166 } 
	tAE_TABLE_DESC
;

171 
	s´_ªgi⁄


173 
ACPI_PHYSICAL_ADDRESS
 
	mAddªss
;

174 
UINT32
 
	mLígth
;

175 *
	mBuf„r
;

176 *
	mNextRegi⁄
;

177 
UINT8
 
	mS∑˚Id
;

179 } 
	tAE_REGION
;

181 
	s´_debug_ªgi⁄s


183 
UINT32
 
	mNumbîOfRegi⁄s
;

184 
AE_REGION
 *
	mRegi⁄Li°
;

186 } 
	tAE_DEBUG_REGIONS
;

189 
	#TEST_OUTPUT_LEVEL
(
lvl
Ëi‡(÷vlË& 
OuçutLevñ
)

	)

191 
	#OSD_PRINT
(
lvl
,
Â
Ë
	`TEST_OUTPUT_LEVEL
(lvl) {\

192 
A˝iOsPrötf
 
	`PARAM_LIST
(
Â
);}

	)

194 
ACPI_SYSTEM_XFACE


195 
AeCålCH™dÀr
 (

196 
Sig
);

198 
ACPI_STATUS


199 
AeBuûdLoˇlTabÀs
 (

200 
UINT32
 
TabÀCou¡
,

201 
AE_TABLE_DESC
 *
TabÀLi°
);

203 
ACPI_STATUS


204 
AeIn°ÆlTabÀs
 (

208 
AeDumpName•a˚
 (

212 
AeDumpObje˘
 (

213 *
MëhodName
,

214 
ACPI_BUFFER
 *
Rëu∫Obj
);

217 
AeDumpBuf„r
 (

218 
UINT32
 
Addªss
);

221 
AeExecuã
 (

222 *
Name
);

225 
AeSëSc›e
 (

226 *
Name
);

229 
AeClo£DebugFûe
 (

233 
AeO≥nDebugFûe
 (

234 *
Name
);

236 
ACPI_STATUS


237 
AeDi•œyAŒMëhods
 (

238 
UINT32
 
Di•œyCou¡
);

240 
ACPI_STATUS


241 
AeIn°ÆlE¨lyH™dÀrs
 (

244 
ACPI_STATUS


245 
AeIn°ÆlL©eH™dÀrs
 (

249 
AeMis˚Œ™eousTe°s
 (

252 
ACPI_STATUS


253 
AeRegi⁄H™dÀr
 (

254 
UINT32
 
Fun˘i⁄
,

255 
ACPI_PHYSICAL_ADDRESS
 
Addªss
,

256 
UINT32
 
BôWidth
,

257 
UINT64
 *
VÆue
,

258 *
H™dÀrC⁄ãxt
,

259 *
Regi⁄C⁄ãxt
);

261 
UINT32


262 
AeG≥H™dÀr
 (

263 
ACPI_HANDLE
 
G≥Devi˚
,

264 
UINT32
 
G≥Numbî
,

265 *
C⁄ãxt
);

268 
AeGlobÆEvítH™dÀr
 (

269 
UINT32
 
Ty≥
,

270 
ACPI_HANDLE
 
G≥Devi˚
,

271 
UINT32
 
EvítNumbî
,

272 *
C⁄ãxt
);

276 
ACPI_STATUS


277 
AeIn°ÆlDevi˚H™dÀrs
 (

281 
AeIn°ÆlRegi⁄H™dÀrs
 (

285 
AeOvîrideRegi⁄H™dÀrs
 (

292 
AeO≥nInôüliz©i⁄Fûe
 (

293 *
Fûíame
);

296 
AeDoObje˘Ovîrides
 (

	@src/extern/acpica/source/tools/acpiexec/aetables.h

116 #i‚de‡
__AETABLES_H__


117 
	#__AETABLES_H__


	)

126 
	gLoˇlDsdtCode
[] =

139 
	gSsdt1Code
[] =

151 
	gSsdt2Code
[] =

163 
	gSsdt3Code
[] =

173 
	gSsdt4Code
[] =

185 
	gHwRedu˚dFadtCode
[] =

225 
	gOem1Code
[] =

238 
	gOemxCode
[] =

266 
	gEcdtCode
[] =

282 
	gUefi1Code
[] =

293 
	gUefi2Code
[] =

335 
	gMëhodCode
[] =

359 
Deföôi⁄Block
 ("", "OEMX", 2, "MyOEM", "Test", 0x00000432)

361 
Exã∫Æ
 (
GPE2
, 
Devi˚Obj
)

363 
Mëhod
 (
_INI
)

365 
St‹e
 ("TabÀ OEMXÑu¬ög", 
Debug
)

368 
Sc›e
 (\
_GPE
)

370 
Mëhod
 (
_E07
) {}

371 
Mëhod
 (
_E22
) {}

372 
Mëhod
 (
_L31
) {}

373 
Mëhod
 (
_L66
) {}

376 
Devi˚
 (
OEM1
)

378 
Name
 (
_PRW
, 
Package
(){7,0})

380 
Devi˚
 (
OEM2
)

382 
Name
 (
_PRW
, 
Package
(){0x66,0})

385 
Sc›e
 (\
GPE2
)

387 
Mëhod
 (
_L01
) {}

388 
Mëhod
 (
_E07
) {}

390 
Name
 (
_PRW
, 
Package
(Ë{Package(Ë{\
GPE2
, 1}, 0})

396 
Deföôi⁄Block
 ("", "DSDT", 2, "Intel", "Many", 0x00000001)

398 
Name
 (
BUF1
, 
Buf„r
()

424 
Name
 (
HNDL
, 0)

425 
Mëhod
 (
LD
)

427 
Lﬂd
 (
BUF1
, 
HNDL
)

428 
St‹e
 ("Lﬂd o≥øt‹, h™dÀ:", 
Debug
)

429 
St‹e
 (
HNDL
, 
Debug
)

432 
Mëhod
 (
MAIN
, 0, 
NŸSîülized
)

434 
St‹e
 ("Lﬂdög OEMXÅabÀ", 
Debug
)

435 
St‹e
 (
LﬂdTabÀ
 ("OEMX", "MyOEM", "Te°"), 
Debug
)

438 
Sc›e
 (\
_GPE
)

440 
Mëhod
 (
_L08
) {}

441 
Mëhod
 (
_E08
) {}

442 
Mëhod
 (
_L0B
) {}

445 
Devi˚
 (
DEV0
)

447 
Name
 (
_PRW
, 
Package
() {0x11, 0})

450 
Devi˚
 (\
GPE2
)

452 
Mëhod
 (
_L00
) {}

458 
Deföôi⁄Block
 ("ssdt1.aml", "SSDT", 2, "Intel", "ssdt1", 0x00000001)

460 
Mëhod
 (
_T98
, 1, 
NŸSîülized
)

462 
St‹e
 ("SSDT1 - _T98", 
Debug
)

463 
Rëu∫
 (
Zîo
)

469 
Deföôi⁄Block
 ("ssdt2.aml", "SSDT", 2, "Intel", "ssdt2", 0x00000002)

471 
Mëhod
 (
_T99
, 6, 
NŸSîülized
)

473 
St‹e
 ("SSDT2 - _T99", 
Debug
)

474 
Rëu∫
 (
Zîo
)

480 
Deföôi⁄Block
 ("ssdt4.aml", "SSDT", 2, "Intel", "ssdt4", 0x00000004)

482 
Mëhod
 (
_T96
, 5, 
NŸSîülized
)

484 
Rëu∫
 (
Zîo
)

490 [000
h
 0000 4] 
	gSig«tuª
 : "ECDT"

491 [004
h
 0004 4] 
TabÀ
 
Lígth
 : 0000004E

492 [008
h
 0008 1] 
Revisi⁄
 : 01

493 [009
h
 0009 1] 
Checksum
 : 14

494 [00A
h
 0010 6] 
Oem
 
ID
 : " Intel"

495 [010
h
 0016 8] 
Oem
 
TabÀ
 
ID
 : "Template"

496 [018
h
 0024 4] 
Oem
 
Revisi⁄
 : 00000001

497 [01C
h
 0028 4] 
A¶
 
Compûî
 
ID
 : "INTL"

498 [020
h
 0032 4] 
A¶
 
Compûî
 
Revisi⁄
 : 20110316

501 [024
h
 0036 12] 
Comm™d
/
Sètus
 
Regi°î
 : <
Gíîic
 
Addªss
 
Såu˘uª
>

502 [024
h
 0036 1] 
S∑˚
 
ID
 : 01 (
Sy°emIO
)

503 [025
h
 0037 1] 
Bô
 
Width
 : 08

504 [026
h
 0038 1] 
Bô
 
Off£t
 : 00

505 [027
h
 0039 1] 
Encoded
 
Ac˚ss
 
Width
 : 00 (
Undeföed
/
Legacy
)

506 [028
h
 0040 8] 
Addªss
 : 0000000000000066

508 [030
h
 0048 12] 
D©a
 
Regi°î
 : <
Gíîic
 
Addªss
 
Såu˘uª
>

509 [030
h
 0048 1] 
S∑˚
 
ID
 : 01 (
Sy°emIO
)

510 [031
h
 0049 1] 
Bô
 
Width
 : 08

511 [032
h
 0050 1] 
Bô
 
Off£t
 : 00

512 [033
h
 0051 1] 
Encoded
 
Ac˚ss
 
Width
 : 00 (
Undeföed
/
Legacy
)

513 [034
h
 0052 8] 
Addªss
 : 0000000000000062

515 [03C
h
 0060 4] 
UID
 : 00000000

516 [040
h
 0064 1] 
GPE
 
Numbî
 : 09

517 [041
h
 0065 13] 
Namï©h
 : "\_SB.PCI0.EC"

522 [0004] 
Sig«tuª
 : "UEFI" [
UEFI
 
BoŸ
 
O±imiz©i⁄
 
TabÀ
]

523 [0004] 
TabÀ
 
Lígth
 : 00000036

524 [0001] 
Revisi⁄
 : 01

525 [0001] 
Checksum
 : 9B

526 [0006] 
Oem
 
ID
 : " Intel"

527 [0008] 
Oem
 
TabÀ
 
ID
 : " UEFI1"

528 [0004] 
Oem
 
Revisi⁄
 : 00000001

529 [0004] 
A¶
 
Compûî
 
ID
 : "INTL"

530 [0004] 
A¶
 
Compûî
 
Revisi⁄
 : 20100528

532 [0016] 
UUID
 
Idítifõr
 : 09080706-0504-0706-0809-0A0B0C0D0E0F

533 [0002] 
D©a
 
Off£t
 : 0000

536 [004] 
Sig«tuª
 : "UEFI"

537 [004] 
TabÀ
 
Lígth
 : 00000036

538 [001] 
Revisi⁄
 : 01

539 [001] 
Checksum
 : 9B

540 [006] 
Oem
 
ID
 : " Intel"

541 [008] 
Oem
 
TabÀ
 
ID
 : " UEFI2"

542 [004] 
Oem
 
Revisi⁄
 : 00000001

543 [004] 
A¶
 
Compûî
 
ID
 : "INTL"

544 [004] 
A¶
 
Compûî
 
Revisi⁄
 : 20100528

546 [016] 
UUID
 
Idítifõr
 : 01234567-0504-0706-0809-0A0B0C0D0E0F

547 [002] 
D©a
 
Off£t
 : 0000

549 
Labñ
 : 
SèπRec‹d


550 
UINT8
 : 4

551 
UINT16
 : 
$EndRec‹d
 - 
$SèπRec‹d


552 
UINT24
 : 123456 | 
F00000


553 
UINT32
 : 01020304

554 
UINT56
 : 11223344556677

555 
UINT64
 : 0102030405060708 * 4 - 200 / 100 | 
F0000


556 
Labñ
 : 
EndRec‹d


558 
UINT8
 : 
AB


559 
Såög
 : "This isá string"

560 
Devi˚P©h
 : "\PCI0\ABCD"

561 
UINT16
 : 
$SèπRec‹d


562 
Unicode
 : "Unicode String"

563 
UINT64
 : 
$EndRec‹d
 * 128

565 
Buf„r
 : 41 42 43 44 45

566 
Såög
 : ""

567 
GUID
 : 03020100-0504-0706-0809-0A0B0C0D0E0F

	@src/extern/acpica/source/tools/acpihelp/acpihelp.h

116 #i‚de‡
__ACPIHELP_H


117 
	#__ACPIHELP_H


	)

120 
	~"a˝i.h
"

121 
	~"accomm⁄.h
"

122 
	~"aˇµs.h
"

124 
	~<°dio.h
>

125 
	~<sys/°©.h
>

126 
	~<sys/ty≥s.h
>

127 
	~<f˙é.h
>

128 
	~<˘y≥.h
>

129 
	~<°rög.h
>

130 #ifde‡
WIN32


131 
	~<io.h
>

132 
	~<dúe˘.h
>

134 
	~<î∫o.h
>

137 
	#AH_DECODE_DEFAULT
 0

	)

138 
	#AH_DECODE_ASL
 1

	)

139 
	#AH_DECODE_ASL_KEYWORD
 2

	)

140 
	#AH_DECODE_PREDEFINED_NAME
 3

	)

141 
	#AH_DECODE_AML
 4

	)

142 
	#AH_DECODE_AML_OPCODE
 5

	)

143 
	#AH_DISPLAY_DEVICE_IDS
 6

	)

144 
	#AH_DECODE_EXCEPTION
 7

	)

145 
	#AH_DECODE_ASL_AML
 8

	)

146 
	#AH_DISPLAY_UUIDS
 9

	)

148 
	#AH_MAX_ASL_LINE_LENGTH
 70

	)

149 
	#AH_MAX_AML_LINE_LENGTH
 100

	)

152 
	sah_aml_›code


154 
UINT16
 
	mOpcodeR™geSèπ
;

155 
UINT16
 
	mOpcodeR™geEnd
;

156 *
	mOpcodeSåög
;

157 *
	mOpcodeName
;

158 *
	mTy≥
;

159 *
	mFixedArgumíts
;

160 *
	mV¨übÀArgumíts
;

161 *
	mGømm¨
;

163 } 
	tAH_AML_OPCODE
;

165 
	sah_a¶_›î©‹


167 *
	mName
;

168 *
	mSy¡ax
;

169 *
	mDes¸ùti⁄
;

171 } 
	tAH_ASL_OPERATOR
;

173 
	sah_a¶_keyw‹d


175 *
	mName
;

176 *
	mDes¸ùti⁄
;

177 *
	mKeyw‹dLi°
;

179 } 
	tAH_ASL_KEYWORD
;

182 c⁄° 
AH_AML_OPCODE
 
AmlOpcodeInfo
[];

183 c⁄° 
AH_ASL_OPERATOR
 
A¶O≥øt‹Info
[];

184 c⁄° 
AH_ASL_KEYWORD
 
A¶Keyw‹dInfo
[];

185 c⁄° 
AH_UUID
 
A˝iUuids
[];

186 
BOOLEAN
 
AhDi•œyAŒ
;

189 
AhSåu¥
 (

190 *
SrcSåög
);

193 
AhFödAmlOpcode
 (

194 *
Name
);

197 
AhDecodeAmlOpcode
 (

198 *
Name
);

201 
AhDecodeEx˚±i⁄
 (

202 *
Name
);

205 
AhFödPªdeföedNames
 (

206 *
Name
);

209 
AhFödA¶AndAmlO≥øt‹s
 (

210 *
Name
);

212 
UINT32


213 
AhFödA¶O≥øt‹s
 (

214 *
Name
);

217 
AhFödA¶Keyw‹ds
 (

218 *
Name
);

221 
AhDi•œyDevi˚Ids
 (

222 *
Name
);

225 
AhDi•œyUuids
 (

	@src/extern/acpica/source/tools/acpinames/acpinames.h

116 #i‚de‡
_ACPINAMES_H


117 
	#_ACPINAMES_H


	)

119 
	~"a˝i.h
"

120 
	~"accomm⁄.h
"

121 
	~"aˇµs.h
"

122 
	~"../a˝õxec/´comm⁄.h
"

124 
	~<°dio.h
>

126 
	#ACPI_MAX_INIT_TABLES
 (32)

	)

	@src/extern/acpica/source/tools/acpisrc/acpisrc.h

116 
	~"a˝i.h
"

117 
	~"accomm⁄.h
"

119 
	~<°dio.h
>

120 
	~<sys/°©.h
>

121 
	~<î∫o.h
>

125 #ifde‡
WIN32


126 
	~<dúe˘.h
>

128 
	#mkdú
(
x
Ë
	`mkdú
(x, 0770)

	)

134 
	#LINES_IN_LEGAL_HEADER
 105

	)

135 
	#LEGAL_HEADER_SIGNATURE
 " * 2.1. Thi†i†you∏li˚n£ from I¡ñ C‹p. undî it†öãŒe˘uÆÖr›îty"

	)

136 
	#LINES_IN_LINUX_HEADER
 34

	)

137 
	#LINUX_HEADER_SIGNATURE
 " * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS"

	)

138 
	#LINES_IN_ASL_HEADER
 29

	)

140 
	#ASRC_MAX_FILE_SIZE
 (1024 * 100)

	)

142 
	#FILE_TYPE_SOURCE
 1

	)

143 
	#FILE_TYPE_HEADER
 2

	)

144 
	#FILE_TYPE_DIRECTORY
 3

	)

145 
	#FILE_TYPE_PATCH
 4

	)

147 
	#CVT_COUNT_TABS
 0x00000001

	)

148 
	#CVT_COUNT_NON_ANSI_COMMENTS
 0x00000002

	)

149 
	#CVT_TRIM_LINES
 0x00000004

	)

150 
	#CVT_CHECK_BRACES
 0x00000008

	)

151 
	#CVT_COUNT_LINES
 0x00000010

	)

152 
	#CVT_BRACES_ON_SAME_LINE
 0x00000020

	)

153 
	#CVT_MIXED_CASE_TO_UNDERSCORES
 0x00000040

	)

154 
	#CVT_LOWER_CASE_IDENTIFIERS
 0x00000080

	)

155 
	#CVT_REMOVE_DEBUG_MACROS
 0x00000100

	)

156 
	#CVT_TRIM_WHITESPACE
 0x00000200

	)

157 
	#CVT_REMOVE_EMPTY_BLOCKS
 0x00000400

	)

158 
	#CVT_REDUCE_TYPEDEFS
 0x00000800

	)

159 
	#CVT_COUNT_SHORTMULTILINE_COMMENTS
 0x00001000

	)

160 
	#CVT_SPACES_TO_TABS4
 0x40000000

	)

161 
	#CVT_SPACES_TO_TABS8
 0x80000000

	)

163 
	#FLG_DEFAULT_FLAGS
 0x00000000

	)

164 
	#FLG_NO_CARRIAGE_RETURNS
 0x00000001

	)

165 
	#FLG_NO_FILE_OUTPUT
 0x00000002

	)

166 
	#FLG_LOWERCASE_DIRNAMES
 0x00000004

	)

168 
	#AS_START_IGNORE
 "/*!"

	)

169 
	#AS_STOP_IGNORE
 "!*/"

	)

174 
UINT32
 
Gbl_Fûes
;

175 
UINT32
 
Gbl_MissögBø˚s
;

176 
UINT32
 
Gbl_Tabs
;

177 
UINT32
 
Gbl_N⁄AnsiCommíts
;

178 
UINT32
 
Gbl_Sour˚Löes
;

179 
UINT32
 
Gbl_WhôeLöes
;

180 
UINT32
 
Gbl_CommítLöes
;

181 
UINT32
 
Gbl_L⁄gLöes
;

182 
UINT32
 
Gbl_TŸÆLöes
;

183 
UINT32
 
Gbl_HódîSize
;

184 
UINT32
 
Gbl_HódîLöes
;

185 
°©
 
Gbl_SètBuf
;

186 *
Gbl_FûeBuf„r
;

187 
UINT32
 
Gbl_TŸÆSize
;

188 
UINT32
 
Gbl_FûeSize
;

189 
UINT32
 
Gbl_FûeTy≥
;

190 
BOOLEAN
 
Gbl_Vîbo£Mode
;

191 
BOOLEAN
 
Gbl_QuõtMode
;

192 
BOOLEAN
 
Gbl_B©chMode
;

193 
BOOLEAN
 
Gbl_MadeCh™ges
;

194 
BOOLEAN
 
Gbl_Ovîwrôe
;

195 
BOOLEAN
 
Gbl_WidíDe˛¨©i⁄s
;

196 
BOOLEAN
 
Gbl_Ign‹eL⁄eLöeFìds
;

197 
BOOLEAN
 
Gbl_HasL⁄eLöeFìds
;

198 
BOOLEAN
 
Gbl_CÀ™up
;

199 
BOOLEAN
 
Gbl_Ign‹eTøn¶©i⁄Esˇ≥s
;

200 *
Gbl_Såu˘Defs
;

202 
	#PARAM_LIST
(
∂
Ë
	)
pl

203 
	#TERSE_PRINT
(
a
Ëi‡(!
Gbl_Vîbo£Mode
Ë
¥ötf
 
	`PARAM_LIST
◊)

	)

204 
	#VERBOSE_PRINT
(
a
Ëi‡(
Gbl_Vîbo£Mode
Ë
¥ötf
 
	`PARAM_LIST
◊)

	)

206 
	#REPLACE_WHOLE_WORD
 0x00

	)

207 
	#REPLACE_SUBSTRINGS
 0x01

	)

208 
	#REPLACE_MASK
 0x01

	)

210 
	#EXTRA_INDENT_C
 0x02

	)

215 
	sa˝i_°rög_èbÀ


217 *
	mT¨gë
;

218 *
	mRïœ˚mít
;

219 
UINT8
 
	mTy≥
;

221 } 
	tACPI_STRING_TABLE
;

224 
	sa˝i_ty≥d_idítifõr_èbÀ


226 *
	mIdítifõr
;

227 
UINT8
 
	mTy≥
;

229 } 
	tACPI_TYPED_IDENTIFIER_TABLE
;

231 
	#SRC_TYPE_SIMPLE
 0

	)

232 
	#SRC_TYPE_STRUCT
 1

	)

233 
	#SRC_TYPE_UNION
 2

	)

236 
	sa˝i_idítifõr_èbÀ


238 *
	mIdítifõr
;

240 } 
	tACPI_IDENTIFIER_TABLE
;

242 
	sa˝i_c⁄vîsi⁄_èbÀ


244 *
	mNewHódî
;

245 
UINT32
 
	mFœgs
;

247 
ACPI_TYPED_IDENTIFIER_TABLE
 *
	mLowîCa£TabÀ
;

249 
ACPI_STRING_TABLE
 *
	mSour˚SåögTabÀ
;

250 
ACPI_IDENTIFIER_TABLE
 *
	mSour˚LöeTabÀ
;

251 
ACPI_IDENTIFIER_TABLE
 *
	mSour˚C⁄dôi⁄ÆTabÀ
;

252 
ACPI_IDENTIFIER_TABLE
 *
	mSour˚Ma¸oTabÀ
;

253 
ACPI_TYPED_IDENTIFIER_TABLE
 *
	mSour˚Såu˘TabÀ
;

254 
ACPI_IDENTIFIER_TABLE
 *
	mSour˚S≥cülMa¸oTabÀ
;

255 
UINT32
 
	mSour˚Fun˘i⁄s
;

257 
ACPI_STRING_TABLE
 *
	mHódîSåögTabÀ
;

258 
ACPI_IDENTIFIER_TABLE
 *
	mHódîLöeTabÀ
;

259 
ACPI_IDENTIFIER_TABLE
 *
	mHódîC⁄dôi⁄ÆTabÀ
;

260 
ACPI_IDENTIFIER_TABLE
 *
	mHódîMa¸oTabÀ
;

261 
ACPI_TYPED_IDENTIFIER_TABLE
 *
	mHódîSåu˘TabÀ
;

262 
ACPI_IDENTIFIER_TABLE
 *
	mHódîS≥cülMa¸oTabÀ
;

263 
UINT32
 
	mHódîFun˘i⁄s
;

265 
ACPI_STRING_TABLE
 *
	mP©chSåögTabÀ
;

266 
ACPI_IDENTIFIER_TABLE
 *
	mP©chLöeTabÀ
;

267 
ACPI_IDENTIFIER_TABLE
 *
	mP©chC⁄dôi⁄ÆTabÀ
;

268 
ACPI_IDENTIFIER_TABLE
 *
	mP©chMa¸oTabÀ
;

269 
ACPI_TYPED_IDENTIFIER_TABLE
 *
	mP©chSåu˘TabÀ
;

270 
ACPI_IDENTIFIER_TABLE
 *
	mP©chS≥cülMa¸oTabÀ
;

271 
UINT32
 
	mP©chFun˘i⁄s
;

273 } 
	tACPI_CONVERSION_TABLE
;

278 
ACPI_CONVERSION_TABLE
 
LöuxC⁄vîsi⁄TabÀ
;

279 
ACPI_CONVERSION_TABLE
 
CÀ™upC⁄vîsi⁄TabÀ
;

280 
ACPI_CONVERSION_TABLE
 
SètsC⁄vîsi⁄TabÀ
;

281 
ACPI_CONVERSION_TABLE
 
Cu°omC⁄vîsi⁄TabÀ
;

282 
ACPI_CONVERSION_TABLE
 
Li˚n£C⁄vîsi⁄TabÀ
;

283 
ACPI_CONVERSION_TABLE
 
IndítC⁄vîsi⁄TabÀ
;

286 * (*
	tAS_SCAN_CALLBACK
) (

287 *
	tBuf„r
,

288 *
	tFûíame
,

289 
	tUINT32
 
	tLöeNumbî
);

291 
	sas_bø˚_öfo


293 *
	mO≥øt‹
;

294 
UINT32
 
	mLígth
;

296 } 
	tAS_BRACE_INFO
;

302 
AsSkùU¡ûCh¨
 (

303 *
Buf„r
,

304 
T¨gë
);

307 
AsSkùPa°Ch¨
 (

308 *
Buf„r
,

309 
T¨gë
);

312 
AsRïœ˚D©a
 (

313 *
Buf„r
,

314 
UINT32
 
LígthToRemove
,

315 *
Buf„rToAdd
,

316 
UINT32
 
LígthToAdd
);

319 
AsRïœ˚Såög
 (

320 *
T¨gë
,

321 *
Rïœ˚mít
,

322 
UINT8
 
Ty≥
,

323 *
Buf„r
);

326 
AsLowîCa£Såög
 (

327 *
T¨gë
,

328 *
Buf„r
);

331 
AsRemoveLöe
 (

332 *
Buf„r
,

333 *
Keyw‹d
);

336 
AsRemoveMa¸o
 (

337 *
Buf„r
,

338 *
Keyw‹d
);

341 
AsCheckF‹Bø˚s
 (

342 *
Buf„r
,

343 *
Fûíame
);

346 
AsTrimLöes
 (

347 *
Buf„r
,

348 *
Fûíame
);

351 
AsMixedCa£ToUndîsc‹es
 (

352 *
Buf„r
,

353 *
Fûíame
);

356 
AsCou¡Tabs
 (

357 *
Buf„r
,

358 *
Fûíame
);

361 
AsBø˚sOnSameLöe
 (

362 *
Buf„r
);

365 
AsLowîCa£Idítifõrs
 (

366 *
Buf„r
);

369 
AsRedu˚Ty≥defs
 (

370 *
Buf„r
,

371 *
Keyw‹d
);

374 
AsRemoveDebugMa¸os
 (

375 *
Buf„r
);

378 
AsRemoveEm±yBlocks
 (

379 *
Buf„r
,

380 *
Fûíame
);

383 
AsCÀ™upS≥cülMa¸o
 (

384 *
Buf„r
,

385 *
Keyw‹d
);

388 
AsCou¡Sour˚Löes
 (

389 *
Buf„r
,

390 *
Fûíame
);

393 
AsCou¡N⁄AnsiCommíts
 (

394 *
Buf„r
,

395 *
Fûíame
);

398 
AsTrimWhôe•a˚
 (

399 *
Buf„r
);

402 
AsTabify4
 (

403 *
Buf„r
);

406 
AsTabify8
 (

407 *
Buf„r
);

410 
AsRemoveC⁄dôi⁄ÆCompûe
 (

411 *
Buf„r
,

412 *
Keyw‹d
);

414 
ACPI_NATIVE_INT


415 
AsPro˚ssTªe
 (

416 
ACPI_CONVERSION_TABLE
 *
C⁄vîsi⁄TabÀ
,

417 *
Sour˚P©h
,

418 *
T¨gëP©h
);

421 
AsGëFûe
 (

422 *
FûeName
,

423 **
FûeBuf„r
,

424 
UINT32
 *
FûeSize
);

427 
AsPutFûe
 (

428 *
P©h«me
,

429 *
FûeBuf„r
,

430 
UINT32
 
Sy°emFœgs
);

433 
AsRïœ˚Hódî
 (

434 *
Buf„r
,

435 *
NewHódî
);

438 
AsC⁄vîtFûe
 (

439 
ACPI_CONVERSION_TABLE
 *
C⁄vîsi⁄TabÀ
,

440 *
FûeBuf„r
,

441 *
Fûíame
,

442 
ACPI_NATIVE_INT
 
FûeTy≥
);

444 
ACPI_NATIVE_INT


445 
AsPro˚ssO√Fûe
 (

446 
ACPI_CONVERSION_TABLE
 *
C⁄vîsi⁄TabÀ
,

447 *
Sour˚P©h
,

448 *
T¨gëP©h
,

449 
MaxP©hLígth
,

450 *
Fûíame
,

451 
ACPI_NATIVE_INT
 
FûeTy≥
);

453 
ACPI_NATIVE_INT


454 
AsCheckF‹Dúe˘‹y
 (

455 *
Sour˚DúP©h
,

456 *
T¨gëDúP©h
,

457 *
Fûíame
,

458 **
Sour˚P©h
,

459 **
T¨gëP©h
);

462 
AsRemoveExåaLöes
 (

463 *
FûeBuf„r
,

464 *
Fûíame
);

467 
AsRemoveS∑˚sA·îPîiod
 (

468 *
FûeBuf„r
,

469 *
Fûíame
);

471 
BOOLEAN


472 
AsM©chExa˘W‹d
 (

473 *
W‹d
,

474 
UINT32
 
W‹dLígth
);

477 
AsPröt
 (

478 *
Mesßge
,

479 
UINT32
 
Cou¡
,

480 *
Fûíame
);

483 
AsIn£πPªfix
 (

484 *
Buf„r
,

485 *
Keyw‹d
,

486 
UINT8
 
Ty≥
);

489 
AsIn£πD©a
 (

490 *
Buf„r
,

491 *
Buf„rToAdd
,

492 
UINT32
 
LígthToAdd
);

495 
AsRemoveD©a
 (

496 *
SèπPoöãr
,

497 *
EndPoöãr
);

500 
AsIn£πC¨rügeRëu∫s
 (

501 *
Buf„r
);

504 
AsC⁄vîtToLöeFìds
 (

505 *
Buf„r
);

508 
AsSålwr
 (

509 *
SrcSåög
);

	@src/extern/acpica/source/tools/examples/examples.h

116 #i‚de‡
_EXAMPLES_H


117 
	#_EXAMPLES_H


	)

119 
	~"a˝i.h
"

120 
	~"accomm⁄.h
"

121 
	~"aˇµs.h
"

122 
	~"../a˝õxec/´comm⁄.h
"

124 
	~<°dio.h
>

128 
ExInôülizeA˝iTabÀs
 (

	@src/extern/acpica/tests/templates/Makefile

2 
	gPROG

ãm∂©es


4 
ãm∂©es
 :

5 
sh
 
ãm∂©es
.sh

7 
˛ón
 :

8 
rm
 -
f
 *.
a¶
 *.
aml
 *.
d¶
 *.
hex
 
diff
.
log


	@src/extern/cdi/Makefile

1 
	gSRCDIR
:=
$
(
CURDIR
)/../..

2 
ö˛ude
 
$
(
SRCDIR
)/
Makefûe
.
c⁄fig


4 
LFLAGS
=-
Iö˛ude


5 
CFLAGS
+=-
ö˛ude
 
cdi_glue
.
h
 
$
(
LFLAGS
Ë-
Wno
-
f‹m©
 -Wno-
sign
-
com∑ª


6 
CXXFLAGS
+=
	$$
(
LFLAGS
)

8 
SOURCES
=
	`$
(
wûdˇrd
 *

	@src/extern/cdi/Makefile.dep

1 
	gdevi˚
.
	go
: 
e1000
/
devi˚
.
c
 
cdi_glue
.
h
 
ö˛ude
/
cdi
.h in˛ude/cdi-
osdï
.h \

2 
ö˛ude
/
cdi
/
li°s
.
h
 in˛ude/cdi/
misc
.h in˛ude/cdi/
pci
.h \

3 
ö˛ude
/
cdi
/
mem
.
h
 
e1000
/
devi˚
.h in˛ude/cdi/
√t
.hÉ1000/
e1000_io
.h \

4 
ö˛ude
/
cdi
/
io
.
h


5 
maö
.
o
: 
e1000
/maö.
c
 
cdi_glue
.
h
 
ö˛ude
/
cdi
/
√t
.h include/cdi.h \

6 
ö˛ude
/
cdi
-
osdï
.
h
 in˛ude/cdi/
li°s
.h in˛ude/cdi/
pci
.h \

7 
ö˛ude
/
cdi
/
misc
.
h
 
e1000
/
devi˚
.h

8 
cdi_glue
.
o
: cdi_glue.
cc
 \

9 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
ã°›ti⁄s
.
h
 \

10 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
ru¡ime
/
BlockögSync
.
h
 \

11 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
gíîic
/
EmbeddedC⁄èöîs
.
h
 \

12 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
gíîic
/
basics
.
h
 \

13 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
ö˛ude
/
ko°y≥s
.
h
 \

14 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
kî√l
/
OuçutBasic
.
h
 \

15 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
ru¡ime
/
Ru¡ime
.
h
 \

16 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
kî√l
/
AddªssS∑˚
.
h
 \

17 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
kî√l
/
FømeM™agî
.
h
 \

18 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
gíîic
/
Bôm≠
.
h
 \

19 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
gíîic
/
bôm™ù
.
h
 \

20 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
kî√l
/
Mem‹yM™agî
.
h
 \

21 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
Mem‹y
.
h
 \

22 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
asmsh¨e
.
h
 \

23 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
SpöLock
.
h
 \

24 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
CPU
.
h
 \

25 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
Pro˚ss‹
.
h
 \

26 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
asmde˛
.
h
 \

27 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
Des¸ùt‹s
.
h
 \

28 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
kî√l
/
Ouçut
.
h
 \

29 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
Pagög
.
h
 \

30 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
machöe
/
Machöe
.
h
 \

31 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
ru¡ime
/
ScheduÀr
.
h
 \

32 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
ru¡ime
/
Thªad
.
h
 \

33 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
cdi
/../../
devi˚s
/
PCI
.
h
 \

34 
ö˛ude
/
cdi
.
h
 in˛ude/cdi-
osdï
.h in˛ude/cdi/
li°s
.h in˛ude/cdi/
pci
.h \

35 
ö˛ude
/
cdi
/
mem
.
h
 in˛ude/cdi/
misc
.h in˛ude/cdi/
√t
.h

	@src/extern/cdi/cdi_glue.cc

17 
	~"ru¡ime/BlockögSync.h
"

18 
	~"kî√l/Mem‹yM™agî.h
"

19 
	~"kî√l/Ouçut.h
"

20 
	~"machöe/Machöe.h
"

21 
	~"machöe/Pagög.h
"

22 
	~"machöe/Pro˚ss‹.h
"

23 
	~"devi˚s/PCI.h
"

25 
	~<c°d¨g
>

26 
	~<li°
>

27 #unde‡
__STRICT_ANSI__


28 
	~<c°dio
>

30 "C" 
	$cdi_¥ötf
(c⁄° * 
fmt
, ...) {

31 
va_li°
 
¨gs
;

32 
	`va_°¨t
(
¨gs
, 
fmt
);

33 
	`Exã∫DebugPrötf
(
DBG
::
CDI
, 
fmt
, 
¨gs
);

34 
	`va_íd
(
¨gs
);

35 
	}
}

37 
	~"cdi.h
"

38 
	~"cdi/pci.h
"

41 
cdi_drivî
* 
__°¨t_cdi_drivîs
;

42 
cdi_drivî
* 
__°›_cdi_drivîs
;

44 
	gli°
<
	gcdi_drivî
*> 
	gdrivîLi°
;

46 
	g√tif
;

47 
√tif
* 
	glwù_√tif
 = 
nuŒ±r
;

48 
√tif
* 
lwù_add_√tif
(*
ëhif
);

49 
lwù_√t_ª˚ive
(
√tif
*, 
buÂå_t
 
buf„r
, 
size_t
 
size
);

51 
	$öôCdiDrivîs
() {

52 
cdi_drivî
** 
pdrv
 = &
__°¨t_cdi_drivîs
;Ödrv < &
__°›_cdi_drivîs
;Ödrv += 1) {

53 
cdi_drivî
* 
drv
 = *
pdrv
;

54 i‡(
drv
->
öô
Ëdrv->
	`öô
();

55 
	`cdi_drivî_ªgi°î
(
drv
);

57 
	}
}

59 
boﬁ
 
	$födCdiDrivî
(c⁄° 
PCIDevi˚
 &
pciDev
) {

61 
cdi_pci_devi˚
* 
˝d
 = 
k√w
<cdi_pci_device>();

62 
˝d
->
bus_d©a
.
bus_ty≥
 = 
CDI_PCI
;

64 
˝d
->
víd‹_id
 = 
PCI
::
	`Víd‹ID
(
pciDev
);

65 
˝d
->
devi˚_id
 = 
PCI
::
	`Devi˚ID
(
pciDev
);

66 
˝d
->
˛ass_id
 = 
PCI
::
	`CœssCode
(
pciDev
);

67 
˝d
->
sub˛ass_id
 = 
PCI
::
	`SubCœss
(
pciDev
);

68 
˝d
->
öãrÁ˚_id
 = 
PCI
::
	`ProgIF
(
pciDev
);

69 
˝d
->
ªv_id
 = 
PCI
::
	`Revisi⁄ID
(
pciDev
);

70 
˝d
->
bus
 = 
pciDev
.
	`gëBus
();

71 
˝d
->
dev
 = 
pciDev
.
	`gëDevi˚
();

72 
˝d
->
fun˘i⁄
 = 
pciDev
.
	`gëFun˘i⁄
();

73 
˝d
->
úq
 = 
pciDev
.
	`gëIrq
();

74 
˝d
->
ªsour˚s
 = 
	`cdi_li°_¸óã
();

78 
PCI
::
wrôeC⁄fig
<32>(
pciDev
, 4, PCI::
ªadC⁄fig
<32>(pciDev, 4) | 0x7);

80 
PCI
::
Comm™d
 
	`c
(
pciDev
);

81 
PCI
::
Comm™d
::
	`wrôe
(
pciDev
, 
c
 | PCI::
	`IOS∑˚
(Ë| PCI::
	`Mem‹yS∑˚
(Ë| PCI::
	`BusMa°î
());

85 
uöt8_t
 
numB¨s
 = ((
PCI
::
	`HódîTy≥
(
pciDev
) & 0x7f) == 0) ? 6 : 2;

86 
i
 = 0; i < 
numB¨s
; i++) {

87 
uöt32_t
 
b¨
 = 
PCI
::
	`BAR
(
pciDev
,
i
);

88 i‡(
b¨
 == 0) ;

89 
cdi_pci_ªsour˚
* 
ªs
 = 
k√w
<cdi_pci_resource>();

90 
ªs
->
Àngth
 = 
pciDev
.
	`gëBARSize
(
i
);

91 
ªs
->
ödex
 = 
i
;

92 
ªs
->
addªss
 = 0;

93 i‡(
b¨
 & 0x1) {

94 
ªs
->
ty≥
 = 
CDI_PCI_IOPORTS
;

95 
ªs
->
°¨t
 = (
b¨
 & 0xfffffffc);

96 
ªs
->
Àngth
 &= 0xffff;

98 
ªs
->
ty≥
 = 
CDI_PCI_MEMORY
;

99 
ªs
->
°¨t
 = (
b¨
 & 0xfffffff0);

100 (
b¨
 & 0x6) >> 1) {

102 0x01: 
	`KABORT1
("BAR"); ;

104 
ªs
->
°¨t
 +(
	`uöt64_t
(
PCI
::
	`BAR
(
pciDev
,
i
+1)) << 32);

105 
ªs
->
Àngth
 +(
	`uöt64_t
(
pciDev
.
	`gëBARSize
(
i
+1)) << 32);

106 
i
 += 1;

108 : 
	`KABORT1
(
	`FmtHex
(
b¨
)); ;

111 
	`cdi_li°_push
(
˝d
->
ªsour˚s
, 
ªs
);

115 autÿ
ô
 = 
drivîLi°
.
	`begö
(); ià!drivîLi°.
	`íd
(); ++it) {

116 i‡((*
ô
)->
bus
 =
CDI_PCI
 && (*ô)->
öô_devi˚
) {

117 
cdi_devi˚
* 
devi˚
 = (*
ô
)->
	`öô_devi˚
(&
˝d
->
bus_d©a
);

118 i‡(
devi˚
) {

119 
devi˚
->
drivî
 = (*
ô
);

120 
	`cdi_li°_push
((*
ô
)->
devi˚s
, 
devi˚
);

121 
	`cdi_¥ötf
("PCI devi˚ %02X:%02X:%02X - drivî found: %s\n", 
˝d
->
bus
, cpd->
dev
, cpd->
fun˘i⁄
, (*
ô
)->
«me
);

122 
lwù_√tif
 = 
	`lwù_add_√tif
(
devi˚
);

123  
åue
;

129 
cdi_pci_ªsour˚
* 
ªs
;

130 
i
 = 0;; ++i) {

131 
ªs
 = (
cdi_pci_ªsour˚
*)
	`cdi_li°_gë
(
˝d
->
ªsour˚s
,
i
);

132 i‡(!
ªs
) ;

133 
	`kdñëe
(
ªs
);

135 
	`kdñëe
(
˝d
);

136  
Ál£
;

137 
	}
}

139 
	$cdi_drivî_öô
(
cdi_drivî
* 
drivî
) {

140 
drivî
->
devi˚s
 = 
	`cdi_li°_¸óã
();

141 
	}
}

143 
	$cdi_drivî_de°roy
(
cdi_drivî
* 
drivî
) {

144 
	`cdi_li°_de°roy
(
drivî
->
devi˚s
);

145 
	}
}

148 
	$cdi_drivî_ªgi°î
(
cdi_drivî
* 
drivî
) {

149 
drivîLi°
.
	`push_back
(
drivî
);

150 
	}
}

152 
	~"cdi/mem.h
"

154 
cdi_mem_¨ó
* 
	$cdi_mem_Æloc
(
size_t
 
size
, 
cdi_mem_Êags_t
 
Êags
) {

155 
vaddr
 
vAddr
;

156 
mw‹d
 
sgSize
;

157 
	`KASSERT1
(!(
Êags
 & 
CDI_MEM_DMA_16M
), flags);

158 i‡–
Êags
 & 
CDI_MEM_PHYS_CONTIGUOUS
 ) {

159 
∑ddr
 
Æign
 = 
pow2
<∑ddr>(
Êags
 & 
CDI_MEM_ALIGN_MASK
);

160 
∑ddr
 
limô
 = (
Êags
 & 
CDI_MEM_DMA_4G
Ë? 
pow2
<∑ddr>(32Ë: 
t›addr
;

161 
vAddr
 = 
Mem‹yM™agî
::
	`ÆlocC⁄tig
(
size
, 
Æign
, 
limô
);

162 
sgSize
 = 
size
;

163 } i‡(
size
 >
kî√Õs
) {

164 
size
 = 
	`Æign_up
(size, 
kî√Õs
);

165 
vAddr
 = 
Mem‹yM™agî
::
	`m≠
(
size
);

166 
sgSize
 = 
kî√Õs
;

168 
size
 = 
	`Æign_up
(size, 
∑gesize
<1>());

169 
vAddr
 = 
Mem‹yM™agî
::
	`m≠
(
size
);

170 
sgSize
 = 
∑gesize
<1>();

172 
	`KASSERT0
(
vAddr
 !
t›addr
);

173 
cdi_mem_¨ó
* 
¨ó
 = 
k√w
<cdi_mem_area>();

174 
¨ó
->
size
 = size;

175 
¨ó
->
vaddr
 = (
±r_t
)
vAddr
;

176 
¨ó
->
osdï
.
Æloˇãd
 = 
åue
;

177 
¨ó
->
∑ddr
.
num
 = 
	`divup
(
size
, 
sgSize
);

178 
¨ó
->
∑ddr
.
ôems
 = 
k√wN
<
cdi_mem_sg_ôem
>◊ªa->∑ddr.
num
);

179 
mw‹d
 
i
 = 0; i < 
¨ó
->
∑ddr
.
num
; i += 1) {

180 
DBG
::
	`oué
(DBG::
CDI
, "cdi_mem_Æloc(): ", 
	`FmtHex
(
Pagög
::
	`vt›
(
vAddr
)), '/', FmtHex(
sgSize
), " -> ", FmtHex(vAddr));

181 
¨ó
->
∑ddr
.
ôems
[
i
].
°¨t
 = 
Pagög
::
	`vt›
(
vAddr
);

182 
¨ó
->
∑ddr
.
ôems
[
i
].
size
 = 
sgSize
;

183 
vAddr
 +
sgSize
;

185  
¨ó
;

186 
	}
}

188 
cdi_mem_¨ó
* 
	$cdi_mem_m≠
(
uöçå_t
 
pAddr
, 
size_t
 
size
) {

190 
vaddr
 
vAddr
 = 
Mem‹yM™agî
::
	`m≠
(
size
, 
	`∑ddr
(
pAddr
));

191 
	`KASSERT0
(
vAddr
 !
t›addr
);

192 
DBG
::
	`oué
(DBG::
CDI
, "cdi_mem_m≠(): ", 
	`FmtHex
(
pAddr
), '/', FmtHex(
size
), " -> ", FmtHex(
vAddr
));

193 
cdi_mem_¨ó
* 
¨ó
 = 
k√w
<cdi_mem_area>();

194 
¨ó
->
size
 = size;

195 
¨ó
->
vaddr
 = (
±r_t
)
vAddr
;

196 
¨ó
->
osdï
.
Æloˇãd
 = 
Ál£
;

197 
¨ó
->
∑ddr
.
num
 = 1;

198 
¨ó
->
∑ddr
.
ôems
 = 
k√w
<
cdi_mem_sg_ôem
>();

199 
¨ó
->
∑ddr
.
ôems
->
°¨t
 = 
pAddr
;

200 
¨ó
->
∑ddr
.
ôems
->
size
 = size;

201  
¨ó
;

202 
	}
}

204 
	$cdi_mem_‰ì
(
cdi_mem_¨ó
* 
¨ó
) {

205 
	`KASSERT0
(
¨ó
 &&áªa->
vaddr
);

206 
DBG
::
	`oué
(DBG::
CDI
, "cdi_mem_‰ì(): ", 
	`FmtHex
(
Pagög
::
	`vt›
(
	`vaddr
(
¨ó
->
vaddr
))), '/', FmtHex◊ªa->
size
), " -> ", FmtHex(area->vaddr));

207 
Mem‹yM™agî
::
	`unm≠
–
	`vaddr
(
¨ó
->
vaddr
),áªa->
size
,áªa->
osdï
.
Æloˇãd
 );

208 
	`kdñëe
(
¨ó
->
∑ddr
.
ôems
,áªa->∑ddr.
num
);

209 
	`kdñëe
(
¨ó
);

210 
	}
}

212 
	~"cdi/misc.h
"

214 
cdi_ªgi°î_úq
(
uöt8_t
 
úq
, (*
h™dÀr
)(
cdi_devi˚
 *), cdi_devi˚* 
devi˚
) {

215 
Machöe
::
	`ªgi°îIrqAsync
(
úq
, (
funcvoid1_t
)
h™dÀr
, (*)
devi˚
);

216 
	}
}

218 
	$cdi_¶ìp_ms
(
uöt32_t
 
ms
) {

219 
Timeout
::
	`¶ìp
(
ms
);

220 
	}
}

222 
	~"cdi/√t.h
"

224 
	g√tˇrd_highe°_id
 = 0;

225 
cdi_li°_t
 
	g√tˇrd_li°
 = 
nuŒ±r
;

227 
	$cdi_√t_drivî_öô
(
cdi_√t_drivî
* 
drivî
) {

228 
drivî
->
drv
.
ty≥
 = 
CDI_NETWORK
;

229 
	`cdi_drivî_öô
((
cdi_drivî
*)
drivî
);

230 i‡(
√tˇrd_li°
 =
nuŒ±r
Ë√tˇrd_li° = 
	`cdi_li°_¸óã
();

231 
	}
}

233 
	$cdi_√t_drivî_de°roy
(
cdi_√t_drivî
* 
drivî
) {

234 
	`cdi_drivî_de°roy
((
cdi_drivî
*)
drivî
);

235 
	}
}

237 
	$cdi_√t_devi˚_öô
(
cdi_√t_devi˚
* 
devi˚
) {

238 
devi˚
->
numbî
 = 
√tˇrd_highe°_id
;

239 
	`cdi_li°_push
(
√tˇrd_li°
, 
devi˚
);

240 
√tˇrd_highe°_id
 += 1;

241 
	}
}

243 
	$cdi_√t_ª˚ive
(
cdi_√t_devi˚
* 
devi˚
, 
±r_t
 
buf„r
, 
size_t
 
size
) {

245 i‡(
lwù_√tif
Ë
	`lwù_√t_ª˚ive
÷wù_√tif, (
buÂå_t
)
buf„r
, 
size
);

246 
	}
}

249 
	$cdi_√t_£nd
(
±r_t
 
buf„r
, 
size_t
 
size
) {

250 
cdi_√t_devi˚
* 
dev
 = (cdi_√t_devi˚*)
	`cdi_li°_gë
(
√tˇrd_li°
, 0);

251 
cdi_√t_drivî
* 
drivî
 = (cdi_√t_drivî*)
dev
->dev.driver;

252 
drivî
->
	`£nd_∑ckë
(
dev
, 
buf„r
, 
size
);

254 
	}
}

256 
	~"cdi/pci.h
"

258 
	$cdi_pci_Æloc_i›‹ts
(
cdi_pci_devi˚
* 
devi˚
) {

259 
cdi_pci_ªsour˚
* 
ªs
;

260 
i
 = 0; (
ªs
 = (
cdi_pci_ªsour˚
 *)
	`cdi_li°_gë
(
devi˚
->
ªsour˚s
, i)); i++) {

261 i‡(
ªs
->
ty≥
 =
CDI_PCI_IOPORTS
) {

265 
	}
}

267 
	$cdi_pci_‰ì_i›‹ts
(
cdi_pci_devi˚
* 
devi˚
) {

268 
cdi_pci_ªsour˚
* 
ªs
;

269 
i
 = 0; (
ªs
 = (
cdi_pci_ªsour˚
 *)
	`cdi_li°_gë
(
devi˚
->
ªsour˚s
, i)); i++) {

270 i‡(
ªs
->
ty≥
 =
CDI_PCI_IOPORTS
) {

274 
	}
}

276 
	scdi_li°_im∂emíèti⁄
 {

277 
	mli°
<
	m±r_t
> 
	mim∂
;

280 
	~"cdi/li°s.h
"

282 
cdi_li°_t
 
	$cdi_li°_¸óã
() {

283  
k√w
<
cdi_li°_im∂emíèti⁄
>();

284 
	}
}

286 
	$cdi_li°_de°roy
(
cdi_li°_t
 
li°
) {

287 
	`kdñëe
(
li°
);

288 
	}
}

290 
cdi_li°_t
 
	$cdi_li°_push
(
cdi_li°_t
 
li°
, 
±r_t
 
vÆue
) {

291 
li°
->
im∂
.
	`push_‰⁄t
(
vÆue
);

292  
li°
;

293 
	}
}

295 
±r_t
 
	$cdi_li°_p›
(
cdi_li°_t
 
li°
) {

296 i‡(
li°
->
im∂
.
	`em±y
()Ë 
nuŒ±r
;

297 
±r_t
 
ñem
 = 
li°
->
im∂
.
	`‰⁄t
();

298 
li°
->
im∂
.
	`p›_‰⁄t
();

299  
ñem
;

300 
	}
}

302 
size_t
 
	$cdi_li°_em±y
(
cdi_li°_t
 
li°
) {

303  
li°
->
im∂
.
	`em±y
();

304 
	}
}

306 
±r_t
 
	$cdi_li°_gë
(
cdi_li°_t
 
li°
, 
size_t
 
ödex
) {

307 autÿ
ô
 = 
li°
->
im∂
.
	`begö
(); ià!li°->im∂.
	`íd
(); ++it) {

308 i‡(
ödex
 =0Ë *
ô
;

309 
ödex
 -= 1;

311  
nuŒ±r
;

312 
	}
}

314 
cdi_li°_t
 
	$cdi_li°_ö£π
(
cdi_li°_t
 
li°
, 
size_t
 
ödex
, 
±r_t
 
vÆue
) {

315 autÿ
ô
 = 
li°
->
im∂
.
	`begö
(); ià!li°->im∂.
	`íd
(); ++it) {

316 i‡(
ödex
 == 0) {

317 
li°
->
im∂
.
	`ö£π
(
ô
, 
vÆue
);

318  
li°
;

320 
ödex
 -= 1;

322  
nuŒ±r
;

323 
	}
}

325 
±r_t
 
	$cdi_li°_ªmove
(
cdi_li°_t
 
li°
, 
size_t
 
ödex
) {

326 autÿ
ô
 = 
li°
->
im∂
.
	`begö
(); ià!li°->im∂.
	`íd
(); ++it) {

327 i‡(
ödex
 == 0) {

328 
±r_t
 
ñem
 = *
ô
;

329 
li°
->
im∂
.
	`îa£
(
ô
);

330  
ñem
;

332 
ödex
 -= 1;

334  
nuŒ±r
;

335 
	}
}

337 
size_t
 
	$cdi_li°_size
(
cdi_li°_t
 
li°
) {

338  
li°
->
im∂
.
	`size
();

339 
	}
}

	@src/extern/cdi/cdi_glue.h

1 #i‚de‡
_cdi_glue_h_


2 
	#_cdi_glue_h_
 1

	)

4 
	#¥ötf
 
cdi_¥ötf


	)

	@src/extern/cdi/e1000/device.h

29 #i‚de‡
_E1000_DEVICE_H_


30 
	#_E1000_DEVICE_H_


	)

32 
	~<°döt.h
>

34 
	~"cdi.h
"

35 
	~"cdi/√t.h
"

40 
	mREG_CTL
 = 0x0,

41 
	mREG_STATUS
 = 0x8,

42 
	mREG_EECD
 = 0x10,

43 
	mREG_EEPROM_READ
 = 0x14,

44 
	mREG_VET
 = 0x38,

46 
	mREG_INTR_CAUSE
 = 0xc0,

47 
	mREG_INTR_MASK
 = 0xd0,

48 
	mREG_INTR_MASK_CLR
 = 0xd8,

51 
	mREG_RX_CTL
 = 0x100,

52 
	mREG_TX_CTL
 = 0x400,

54 
	mREG_RXDESC_ADDR_LO
 = 0x2800,

55 
	mREG_RXDESC_ADDR_HI
 = 0x2804,

56 
	mREG_RXDESC_LEN
 = 0x2808,

57 
	mREG_RXDESC_HEAD
 = 0x2810,

58 
	mREG_RXDESC_TAIL
 = 0x2818,

60 
	mREG_RX_DELAY_TIMER
 = 0x2820,

61 
	mREG_RADV
 = 0x282c,

64 
	mREG_TXDESC_ADDR_LO
 = 0x3800,

65 
	mREG_TXDESC_ADDR_HI
 = 0x3804,

66 
	mREG_TXDESC_LEN
 = 0x3808,

67 
	mREG_TXDESC_HEAD
 = 0x3810,

68 
	mREG_TXDESC_TAIL
 = 0x3818,

70 
	mREG_TX_DELAY_TIMER
 = 0x3820,

71 
	mREG_TADV
 = 0x382c,

73 
	mREG_RECV_ADDR_LIST
 = 0x5400,

77 
	mCTL_AUTO_SPEED
 = (1 << 5),

78 
	mCTL_LINK_UP
 = (1 << 6),

79 
	mCTL_RESET
 = (1 << 26),

80 
	mCTL_PHY_RESET
 = (1 << 31),

84 
	mRCTL_ENABLE
 = (1 << 1),

85 
	mRCTL_BROADCAST
 = (1 << 15),

86 
	mRCTL_2K_BUFSIZE
 = (0 << 16),

90 
	mTCTL_ENABLE
 = (1 << 1),

91 
	mTCTL_PADDING
 = (1 << 2),

92 
	mTCTL_COLL_TSH
 = (0x0f << 4),

93 
	mTCTL_COLL_DIST
 = (0x40 << 12),

97 
	mICR_TRANSMIT
 = (1 << 0),

98 
	mICR_RECEIVE
 = (1 << 7),

102 
	mEEPROM_OFS_MAC
 = 0x0,

105 
	#RAH_VALID
 (1 << 31Ë

	)

107 
	#EERD_START
 (1 << 0)

	)

108 
	#EERD_DONE
 (1 << 4)

	)

111 
	#E1000_EECD_SK
 0x00000001

	)

112 
	#E1000_EECD_CS
 0x00000002

	)

113 
	#E1000_EECD_DI
 0x00000004

	)

114 
	#E1000_EECD_DO
 0x00000008

	)

115 
	#E1000_EECD_FWE_MASK
 0x00000030

	)

116 
	#E1000_EECD_FWE_DIS
 0x00000010

	)

117 
	#E1000_EECD_FWE_EN
 0x00000020

	)

118 
	#E1000_EECD_FWE_SHIFT
 4

	)

119 
	#E1000_EECD_SIZE
 0x00000200

	)

120 
	#E1000_EECD_REQ
 0x00000040

	)

121 
	#E1000_EECD_GNT
 0x00000080

	)

122 
	#E1000_EECD_PRES
 0x00000100

	)

124 
	#EEPROM_READ_OPCODE
 0x6

	)

128 
	#TX_BUFFER_SIZE
 2048

	)

131 
	#RX_BUFFER_SIZE
 2048

	)

135 
	#RX_BUFFER_NUM
 8

	)

136 
	#TX_BUFFER_NUM
 8

	)

138 
	se1000_tx_des¸ùt‹
 {

139 
uöt64_t
 
	mbuf„r
;

140 
uöt16_t
 
	mÀngth
;

141 
uöt8_t
 
	mchecksum_off£t
;

142 
uöt8_t
 
	mcmd
;

143 
uöt8_t
 
	m°©us
;

144 
uöt8_t
 
	mchecksum_°¨t
;

145 
uöt16_t
 
	m•ecül
;

146 } 
__©åibuã__
((
∑cked
)Ë__©åibuã__((
Æig√d
 (4)));

149 
	mTX_CMD_EOP
 = 0x01,

150 
	mTX_CMD_IFCS
 = 0x02,

153 
	se1000_rx_des¸ùt‹
 {

154 
uöt64_t
 
	mbuf„r
;

155 
uöt16_t
 
	mÀngth
;

156 
uöt16_t
 
	m∑ddög
;

157 
uöt8_t
 
	m°©us
;

158 
uöt8_t
 
	mîr‹
;

159 
uöt16_t
 
	m∑ddög2
;

160 } 
__©åibuã__
((
∑cked
)Ë__©åibuã__((
Æig√d
 (4)));

162 
	se1000_devi˚
 {

163 
cdi_√t_devi˚
 
	m√t
;

165 
uöçå_t
 
	mphys
;

167 
e1000_tx_des¸ùt‹
 
	mtx_desc
[
TX_BUFFER_NUM
] 
__©åibuã__
((
Æig√d
(16)));

168 
uöt8_t
 
	mtx_buf„r
[
TX_BUFFER_NUM
 * 
TX_BUFFER_SIZE
];

169 
uöt32_t
 
	mtx_cur_buf„r
;

171 
e1000_rx_des¸ùt‹
 
	mrx_desc
[
RX_BUFFER_NUM
] 
__©åibuã__
((
Æig√d
(16)));

172 
uöt8_t
 
	mrx_buf„r
[
RX_BUFFER_NUM
 * 
RX_BUFFER_SIZE
];

173 
uöt32_t
 
	mrx_cur_buf„r
;

175 * 
	mmem_ba£
;

176 
uöt8_t
 
	mªvisi⁄
;

179 
cdi_devi˚
* 
e1000_öô_devi˚
(
cdi_bus_d©a
* 
bus_d©a
);

180 
e1000_ªmove_devi˚
(
cdi_devi˚
* 
devi˚
);

182 
	ge1000_£nd_∑ckë


183 (
cdi_√t_devi˚
* 
	gdevi˚
, * 
	gd©a
, 
size_t
 
	gsize
);

	@src/extern/cdi/e1000/e1000_io.h

29 #i‚de‡
_E1000_IO_H_


30 
	#_E1000_IO_H_


	)

32 
	~<°döt.h
>

33 
	~"cdi/io.h
"

35 
	~"devi˚.h
"

38 
ölöe
 
	gªg_outb


39 (
e1000_devi˚
* 
	g√tˇrd
, 
uöt16_t
 
	gªg
, 
uöt8_t
 
	gvÆue
)

41 
cdi_outb
(
√tˇrd
->
p‹t_ba£
 + 
ªg
, 
vÆue
);

44 
ölöe
 
	gªg_outw


45 (
e1000_devi˚
* 
	g√tˇrd
, 
uöt16_t
 
	gªg
, uöt16_à
	gvÆue
)

47 
cdi_outw
(
√tˇrd
->
p‹t_ba£
 + 
ªg
, 
vÆue
);

51 
ölöe
 
	gªg_oué


52 (
e1000_devi˚
* 
	g√tˇrd
, 
uöt16_t
 
	gªg
, 
uöt32_t
 
	gvÆue
)

54 vﬁ©ûê
uöt32_t
* 
	gmmio
 = (uöt32_t*Ë(((*)
√tˇrd
->
mem_ba£
Ë+ 
ªg
);

55 *
	gmmio
 = 
vÆue
;

60 
ölöe
 
uöt8_t
 
	$ªg_öb
(
e1000_devi˚
* 
√tˇrd
, 
uöt16_t
 
ªg
)

62  
	`cdi_öb
(
√tˇrd
->
p‹t_ba£
 + 
ªg
);

63 
	}
}

65 
ölöe
 
uöt16_t
 
	$ªg_öw
(
e1000_devi˚
* 
√tˇrd
, 
uöt16_t
 
ªg
)

67  
	`cdi_öw
(
√tˇrd
->
p‹t_ba£
 + 
ªg
);

68 
	}
}

71 
ölöe
 
uöt32_t
 
	$ªg_öl
(
e1000_devi˚
* 
√tˇrd
, 
uöt16_t
 
ªg
)

73 vﬁ©ûê
uöt32_t
* 
mmio
 = (uöt32_t*Ë(((*)
√tˇrd
->
mem_ba£
Ë+ 
ªg
);

74  *
mmio
;

75 
	}
}

	@src/extern/cdi/include/cdi-osdep.h

11 #i‚de‡
_CDI_OSDEP_H_


12 
	#_CDI_OSDEP_H_


	)

34 
	#cdi_drivî_glue
(
x
, 
y
Ë
cdi_drivî
 ## 
_
 ## x ## _ ## 
	)
y

35 
	#cdi_drivî_de˛
(
«me
, 
drv
, 
cou¡î
) \

36 c⁄° * 
	`__©åibuã__
((
	`£˘i⁄
("cdi_drivîs"), 
u£d
)) \

37 
	`cdi_drivî_glue
(
«me
,
cou¡î
Ë&
drv
;

	)

38 
	#CDI_DRIVER
(
«me
, 
drv
, 
dïs
...Ë
	`cdi_drivî_de˛
“ame, drv, 
__COUNTER__
)

	)

50 } 
	gcdi_pci_devi˚_osdï
;

62 } 
	gcdi_dma_osdï
;

73 
	mÆloˇãd
;

74 } 
	tcdi_mem_osdï
;

85 } 
	gcdi_fs_osdï
;

	@src/extern/cdi/include/cdi.h

100 #i‚de‡
_CDI_H_


101 
	#_CDI_H_


	)

103 
	~<°döt.h
>

105 
	~<cdi-osdï.h
>

106 
	~<cdi/li°s.h
>

109 
	mCDI_UNKNOWN
 = 0,

110 
	mCDI_NETWORK
 = 1,

111 
	mCDI_STORAGE
 = 2,

112 
	mCDI_SCSI
 = 3,

113 
	mCDI_VIDEO
 = 4,

114 
	mCDI_AUDIO
 = 5,

115 
	mCDI_AUDIO_MIXER
 = 6,

116 
	mCDI_USB_HCD
 = 7,

117 
	mCDI_USB
 = 8,

118 
	mCDI_FILESYSTEM
 = 9,

119 
	mCDI_PCI
 = 10,

120 } 
	tcdi_devi˚_ty≥_t
;

122 
	gcdi_drivî
;

137 
	scdi_bus_d©a
 {

138 
cdi_devi˚_ty≥_t
 
	mbus_ty≥
;

149 
	scdi_devi˚
 {

158 c⁄° * 
	m«me
;

168 
cdi_drivî
* 
	mdrivî
;

178 
cdi_bus_d©a
* 
	mbus_d©a
;

181 * 
	mbackdev
;

192 
	scdi_drivî
 {

193 
cdi_devi˚_ty≥_t
 
	mty≥
;

194 
cdi_devi˚_ty≥_t
 
	mbus
;

195 c⁄° * 
	m«me
;

205 
cdi_li°_t
 
	mdevi˚s
;

226 
	mcdi_devi˚
* (*
	möô_devi˚
)(
cdi_bus_d©a
* 
	mbus_d©a
);

227 (*
	mªmove_devi˚
)(
cdi_devi˚
* 
	mdevi˚
);

229 (*
	möô
)();

230 (*
	mde°roy
)();

254 
cdi_öô
();

266 
cdi_drivî_öô
(
cdi_drivî
* 
drivî
);

278 
cdi_drivî_de°roy
(
cdi_drivî
* 
drivî
);

291 
cdi_drivî_ªgi°î
(
cdi_drivî
* 
drivî
);

347 
cdi_¥ovide_devi˚
(
cdi_bus_d©a
* 
devi˚
);

	@src/extern/cdi/include/cdi/io.h

11 #i‚de‡
_CDI_IO_H_


12 
	#_CDI_IO_H_


	)

14 
	~<°döt.h
>

16 #ifde‡
__˝lu•lus


20 
ölöe
 
uöt16_t
 
cdi_öw
(uöt16_à
_p‹t
)

22 
uöt16_t
 
ªsu…
;

23 
asm
 vﬁ©ûê("öw %1, %0" : "˜" (
ªsu…
Ë: "Nd" (
_p‹t
));

24  
ªsu…
;

27 
ölöe
 
uöt8_t
 
cdi_öb
(
uöt16_t
 
_p‹t
)

29 
uöt8_t
 
ªsu…
;

30 
asm
 vﬁ©ûê("öb %1, %0" : "˜" (
ªsu…
Ë: "Nd" (
_p‹t
));

31  
ªsu…
;

34 
ölöe
 
uöt32_t
 
cdi_öl
(
uöt16_t
 
_p‹t
)

36 
uöt32_t
 
ªsu…
;

37 
asm
 vﬁ©ûe("ö»%1, %0" : "˜" (
ªsu…
Ë: "Nd" (
_p‹t
));

38  
ªsu…
;

43 
ölöe
 
cdi_outw
(
uöt16_t
 
_p‹t
, uöt16_à
_d©a
)

45 
asm
 vﬁ©ûê("outw %0, %1" : : "a" (
_d©a
), "Nd" (
_p‹t
));

48 
ölöe
 
cdi_outb
(
uöt16_t
 
_p‹t
, 
uöt8_t
 
_d©a
)

50 
asm
 vﬁ©ûê("outb %0, %1" : : "a" (
_d©a
), "Nd" (
_p‹t
));

53 
ölöe
 
cdi_oué
(
uöt16_t
 
_p‹t
, 
uöt32_t
 
_d©a
)

55 
asm
 vﬁ©ûê("oué %0, %1" : : "a"(
_d©a
), "Nd" (
_p‹t
));

58 #ifde‡
__˝lu•lus


	@src/extern/cdi/include/cdi/lists.h

22 #i‚de‡
_CDI_LISTS_


23 
	#_CDI_LISTS_


	)

24 
	~<°ddef.h
>

25 
	~<°döt.h
>

42 
cdi_li°_im∂emíèti⁄
* 
	tcdi_li°_t
;

44 #ifde‡
__˝lu•lus


63 
cdi_li°_t
 
cdi_li°_¸óã
();

76 
cdi_li°_de°roy
(
cdi_li°_t
 
li°
);

99 
cdi_li°_t
 
cdi_li°_push
(cdi_li°_à
li°
, * 
vÆue
);

118 * 
cdi_li°_p›
(
cdi_li°_t
 
li°
);

135 
size_t
 
cdi_li°_em±y
(
cdi_li°_t
 
li°
);

158 * 
cdi_li°_gë
(
cdi_li°_t
 
li°
, 
size_t
 
ödex
);

187 
cdi_li°_t
 
cdi_li°_ö£π
(cdi_li°_à
li°
, 
size_t
 
ödex
, * 
vÆue
);

210 * 
cdi_li°_ªmove
(
cdi_li°_t
 
li°
, 
size_t
 
ödex
);

225 
size_t
 
cdi_li°_size
(
cdi_li°_t
 
li°
);

227 #ifde‡
__˝lu•lus


	@src/extern/cdi/include/cdi/mem.h

11 #i‚de‡
_CDI_MEM_H_


12 
	#_CDI_MEM_H_


	)

14 
	~<°döt.h
>

15 
	~"cdi.h
"

17 #ifde‡
__˝lu•lus


40 
CDI_MEM_ALIGN_MASK
 = 0x1f,

50 
CDI_MEM_VIRT_ONLY
 = 0x20,

60 
CDI_MEM_PHYS_CONTIGUOUS
 = 0x40,

70 
CDI_MEM_DMA_16M
 = 0x80,

80 
CDI_MEM_DMA_4G
 = 0x100,

92 
CDI_MEM_NOINIT
 = 0x200,

93 } 
	tcdi_mem_Êags_t
;

104 
	scdi_mem_sg_ôem
 {

105 
uöçå_t
 
°¨t
;

106 
size_t
 
size
;

119 
	scdi_mem_sg_li°
 {

120 
size_t
 
num
;

121 
cdi_mem_sg_ôem
* 
ôems
;

134 
	scdi_mem_¨ó
 {

135 
size_t
 
size
;

136 * 
vaddr
;

137 
cdi_mem_sg_li°
 
∑ddr
;

139 
cdi_mem_osdï
 
osdï
;

160 
cdi_mem_¨ó
* 
cdi_mem_Æloc
(
size_t
 
size
, 
cdi_mem_Êags_t
 
Êags
);

180 
cdi_mem_¨ó
* 
cdi_mem_m≠
(
uöçå_t
 
∑ddr
, 
size_t
 
size
);

192 
cdi_mem_‰ì
(
cdi_mem_¨ó
* 
p
);

221 
cdi_mem_¨ó
* 
cdi_mem_ªquúe_Êags
(cdi_mem_¨ó* 
p
,

222 
cdi_mem_Êags_t
 
Êags
);

248 
cdi_mem_c›y
(
cdi_mem_¨ó
* 
de°
, cdi_mem_¨ó* 
§c
);

250 #ifde‡
__˝lu•lus


	@src/extern/cdi/include/cdi/misc.h

11 #i‚de‡
_CDI_MISC_H_


12 
	#_CDI_MISC_H_


	)

14 
	~<°döt.h
>

16 
	~<cdi.h
>

18 #ifde‡
__˝lu•lus


29 
cdi_ªgi°î_úq
(
uöt8_t
 
úq
, (*
h™dÀr
)(
cdi_devi˚
*),

30 
cdi_devi˚
* 
devi˚
);

39 
cdi_ª£t_waô_úq
(
uöt8_t
 
úq
);

61 
cdi_waô_úq
(
uöt8_t
 
úq
, 
uöt32_t
 
timeout
);

68 
cdi_i›‹ts_Æloc
(
uöt16_t
 
°¨t
, uöt16_à
cou¡
);

75 
cdi_i›‹ts_‰ì
(
uöt16_t
 
°¨t
, uöt16_à
cou¡
);

80 
cdi_¶ìp_ms
(
uöt32_t
 
ms
);

82 #ifde‡
__˝lu•lus


	@src/extern/cdi/include/cdi/net.h

17 #i‚de‡
_CDI_NET_H_


18 
	#_CDI_NET_H_


	)

20 
	~<°döt.h
>

21 
	~<°ddef.h
>

23 
	~<cdi.h
>

25 
	scdi_√t_devi˚
 {

26 
cdi_devi˚
 
	mdev
;

27 
uöt64_t
 
	mmac
 : 48;

28 
	mnumbî
;

31 
	scdi_√t_drivî
 {

32 
cdi_drivî
 
	mdrv
;

34 (*
	m£nd_∑ckë
)

35 (
cdi_√t_devi˚
* 
	mdevi˚
, * 
	md©a
, 
size_t
 
	msize
);

39 #ifde‡
__˝lu•lus


47 
cdi_√t_drivî_öô
(
cdi_√t_drivî
* 
drivî
);

53 
cdi_√t_drivî_de°roy
(
cdi_√t_drivî
* 
drivî
);

58 
cdi_√t_devi˚_öô
(
cdi_√t_devi˚
* 
devi˚
);

64 
cdi_√t_ª˚ive
(

65 
cdi_√t_devi˚
* 
devi˚
, * 
buf„r
, 
size_t
 
size
);

67 #ifde‡
__˝lu•lus


	@src/extern/cdi/include/cdi/pci.h

11 #i‚de‡
_CDI_PCI_H_


12 
	#_CDI_PCI_H_


	)

14 
	~<°döt.h
>

16 
	~<cdi.h
>

17 
	~<cdi-osdï.h
>

18 
	~<cdi/li°s.h
>

20 
	#PCI_CLASS_MULTIMEDIA
 0x04

	)

21 
	#PCI_SUBCLASS_MM_HDAUDIO
 0x03

	)

32 
	scdi_pci_devi˚
 {

33 
cdi_bus_d©a
 
	mbus_d©a
;

35 
uöt16_t
 
	mbus
;

36 
uöt16_t
 
	mdev
;

37 
uöt16_t
 
	mfun˘i⁄
;

39 
uöt16_t
 
	mvíd‹_id
;

40 
uöt16_t
 
	mdevi˚_id
;

42 
uöt8_t
 
	m˛ass_id
;

43 
uöt8_t
 
	msub˛ass_id
;

44 
uöt8_t
 
	möãrÁ˚_id
;

46 
uöt8_t
 
	mªv_id
;

48 
uöt8_t
 
	múq
;

60 
cdi_li°_t
 
	mªsour˚s
;

62 
cdi_pci_devi˚_osdï
 
	mmëa
;

74 
	mCDI_PCI_MEMORY
,

75 
	mCDI_PCI_IOPORTS


76 } 
	tcdi_ªs_t
;

86 
	scdi_pci_ªsour˚
 {

95 
cdi_ªs_t
 
	mty≥
;

105 
uöçå_t
 
	m°¨t
;

115 
size_t
 
	mÀngth
;

125 
	mödex
;

137 * 
	maddªss
;

141 #ifde‡
__˝lu•lus


155 
cdi_pci_gë_Æl_devi˚s
(
cdi_li°_t
 
li°
);

165 
cdi_pci_devi˚_de°roy
(
cdi_pci_devi˚
* 
devi˚
);

175 
cdi_pci_Æloc_i›‹ts
(
cdi_pci_devi˚
* 
devi˚
);

185 
cdi_pci_‰ì_i›‹ts
(
cdi_pci_devi˚
* 
devi˚
);

195 
cdi_pci_Æloc_mem‹y
(
cdi_pci_devi˚
* 
devi˚
);

205 
cdi_pci_‰ì_mem‹y
(
cdi_pci_devi˚
* 
devi˚
);

214 
	#CDI_PCI_DIRECT_ACCESS


	)

233 
uöt8_t
 
cdi_pci_c⁄fig_ªadb
(
cdi_pci_devi˚
* 
devi˚
, uöt8_à
off£t
);

252 
uöt16_t
 
cdi_pci_c⁄fig_ªadw
(
cdi_pci_devi˚
* 
devi˚
, 
uöt8_t
 
off£t
);

271 
uöt32_t
 
cdi_pci_c⁄fig_ªadl
(
cdi_pci_devi˚
* 
devi˚
, 
uöt8_t
 
off£t
);

288 
cdi_pci_c⁄fig_wrôeb
(
cdi_pci_devi˚
* 
devi˚
, 
uöt8_t
 
off£t
,

289 
uöt8_t
 
vÆue
);

306 
cdi_pci_c⁄fig_wrôew
(
cdi_pci_devi˚
* 
devi˚
, 
uöt8_t
 
off£t
,

307 
uöt16_t
 
vÆue
);

324 
cdi_pci_c⁄fig_wrôñ
(
cdi_pci_devi˚
* 
devi˚
, 
uöt8_t
 
off£t
,

325 
uöt32_t
 
vÆue
);

327 #ifde‡
__˝lu•lus


	@src/extern/dlmalloc/Makefile

1 
	gSRCDIR
:=
$
(
CURDIR
)/../..

2 
ö˛ude
 
$
(
SRCDIR
)/
Makefûe
.
c⁄fig


4 #CXXFLAGS+=-
DHAVE_MMAP
=0 -
DNO_MALLOC_STATS
 -
DmÆloc_gë∑gesize
=4096\

5 #-
DUSE_DL_PREFIX
=1 -
DLACKS_TIME_H
 -
DABORT_ON_ASSERT_FAILURE
=0 -
DDEBUG


7 
CXXFLAGS
+=-
ö˛ude
 
mÆloc_glue
.
h
 -
DDEBUG


9 
SOURCES
=
	$$
(
wûdˇrd
 *.
c
)

10 
OBJECTS
=
	`$
(
SOURCES
:%.
c
=%.
o
)

12 
Æl
: 
	`$
(
OBJECTS
)

14 
	$$
(
OBJECTS
): %.
o
: %.
c


15 
	`$
(
CXX
Ë$(
CXXFLAGS
Ë-
c
 
$
< -
o
 $@

17 
˛ón
:

18 
rm
 -
f
 
	$$
(
OBJECTS
)

20 
v˛ón
: 
˛ón


22 
dï
 
dïíd
 
Makefûe
.dep:

	@src/extern/dlmalloc/malloc.h

23 #i‚de‡
MALLOC_280_H


24 
	#MALLOC_280_H


	)

26 #ifde‡
__˝lu•lus


30 
	~<°ddef.h
>

32 #i‚de‡
ONLY_MSPACES


33 
	#ONLY_MSPACES
 0

	)

34 #ñi‡
ONLY_MSPACES
 != 0

35 
	#ONLY_MSPACES
 1

	)

37 #i‚de‡
NO_MALLINFO


38 
	#NO_MALLINFO
 0

	)

41 #i‚de‡
MSPACES


42 #i‡
ONLY_MSPACES


43 
	#MSPACES
 1

	)

45 
	#MSPACES
 0

	)

49 #i‡!
ONLY_MSPACES


51 #i‚de‡
USE_DL_PREFIX


52 
	#dlˇŒoc
 
ˇŒoc


	)

53 
	#dl‰ì
 
‰ì


	)

54 
	#dlmÆloc
 
mÆloc


	)

55 
	#dlmemÆign
 
memÆign


	)

56 
	#dÕosix_memÆign
 
posix_memÆign


	)

57 
	#dÃóŒoc
 
ªÆloc


	)

58 
	#dlvÆloc
 
vÆloc


	)

59 
	#dÕvÆloc
 
pvÆloc


	)

60 
	#dlmÆlöfo
 
mÆlöfo


	)

61 
	#dlmÆl›t
 
mÆl›t


	)

62 
	#dlmÆloc_åim
 
mÆloc_åim


	)

63 
	#dlmÆloc_°©s
 
mÆloc_°©s


	)

64 
	#dlmÆloc_ußbÀ_size
 
mÆloc_ußbÀ_size


	)

65 
	#dlmÆloc_foŸ¥öt
 
mÆloc_foŸ¥öt


	)

66 
	#dlmÆloc_max_foŸ¥öt
 
mÆloc_max_foŸ¥öt


	)

67 
	#dlmÆloc_foŸ¥öt_limô
 
mÆloc_foŸ¥öt_limô


	)

68 
	#dlmÆloc_£t_foŸ¥öt_limô
 
mÆloc_£t_foŸ¥öt_limô


	)

69 
	#dlmÆloc_ö•e˘_Æl
 
mÆloc_ö•e˘_Æl


	)

70 
	#dlödïídít_ˇŒoc
 
ödïídít_ˇŒoc


	)

71 
	#dlödïídít_comÆloc
 
ödïídít_comÆloc


	)

72 
	#dlbulk_‰ì
 
bulk_‰ì


	)

75 #i‡!
NO_MALLINFO


76 #i‚de‡
HAVE_USR_INCLUDE_MALLOC_H


77 #i‚de‡
_MALLOC_H


78 #i‚de‡
MALLINFO_FIELD_TYPE


79 
	#MALLINFO_FIELD_TYPE
 
size_t


	)

81 #i‚de‡
STRUCT_MALLINFO_DECLARED


82 
	#STRUCT_MALLINFO_DECLARED
 1

	)

83 
	smÆlöfo
 {

84 
MALLINFO_FIELD_TYPE
 
¨ía
;

85 
MALLINFO_FIELD_TYPE
 
‹dblks
;

86 
MALLINFO_FIELD_TYPE
 
smblks
;

87 
MALLINFO_FIELD_TYPE
 
hblks
;

88 
MALLINFO_FIELD_TYPE
 
hblkhd
;

89 
MALLINFO_FIELD_TYPE
 
usmblks
;

90 
MALLINFO_FIELD_TYPE
 
fsmblks
;

91 
MALLINFO_FIELD_TYPE
 
u‹dblks
;

92 
MALLINFO_FIELD_TYPE
 
f‹dblks
;

93 
MALLINFO_FIELD_TYPE
 
kìpco°
;

114 * 
dlmÆloc
(
size_t
);

123 
dl‰ì
(*);

130 * 
dlˇŒoc
(
size_t
, size_t);

154 * 
dÃóŒoc
(*, 
size_t
);

169 * 
dÃóŒoc_ö_∂a˚
(*, 
size_t
);

183 * 
dlmemÆign
(
size_t
, size_t);

193 
dÕosix_memÆign
(**, 
size_t
, size_t);

200 * 
dlvÆloc
(
size_t
);

218 
dlmÆl›t
(, );

220 
	#M_TRIM_THRESHOLD
 (-1)

	)

221 
	#M_GRANULARITY
 (-2)

	)

222 
	#M_MMAP_THRESHOLD
 (-3)

	)

234 
size_t
 
dlmÆloc_foŸ¥öt
();

247 
size_t
 
dlmÆloc_max_foŸ¥öt
();

258 
size_t
 
dlmÆloc_foŸ¥öt_limô
();

272 
size_t
 
dlmÆloc_£t_foŸ¥öt_limô
(size_à
byãs
);

302 
dlmÆloc_ö•e˘_Æl
((*
h™dÀr
)(*, *, 
size_t
, *),

303 * 
¨g
);

305 #i‡!
NO_MALLINFO


329 
mÆlöfo
 
dlmÆlöfo
();

381 ** 
dlödïídít_ˇŒoc
(
size_t
, size_t, **);

439 ** 
dlödïídít_comÆloc
(
size_t
, size_t*, **);

450 
size_t
 
dlbulk_‰ì
(**, size_à
n_ñemíts
);

457 * 
dÕvÆloc
(
size_t
);

480 
dlmÆloc_åim
(
size_t
);

503 
dlmÆloc_°©s
();

521 
size_t
 
dlmÆloc_ußbÀ_size
(const *);

523 #i‡
MSPACES


529 * 
	tm•a˚
;

542 
m•a˚
 
¸óã_m•a˚
(
size_t
 
ˇ∑côy
, 
locked
);

550 
size_t
 
de°roy_m•a˚
(
m•a˚
 
m•
);

561 
m•a˚
 
¸óã_m•a˚_wôh_ba£
(* 
ba£
, 
size_t
 
ˇ∑côy
, 
locked
);

574 
m•a˚_åack_œrge_chunks
(
m•a˚
 
m•
, 
íabÀ
);

576 #i‡!
NO_MALLINFO


581 
mÆlöfo
 
m•a˚_mÆlöfo
(
m•a˚
 
m•
);

587 
m•a˚_mÆl›t
(, );

593 * 
m•a˚_mÆloc
(
m•a˚
 
m•
, 
size_t
 
byãs
);

594 
m•a˚_‰ì
(
m•a˚
 
m•
, * 
mem
);

595 * 
m•a˚_ˇŒoc
(
m•a˚
 
m•
, 
size_t
 
n_ñemíts
, size_à
ñem_size
);

596 * 
m•a˚_ªÆloc
(
m•a˚
 
m•
, * 
mem
, 
size_t
 
√wsize
);

597 * 
m•a˚_ªÆloc_ö_∂a˚
(
m•a˚
 
m•
, * 
mem
, 
size_t
 
√wsize
);

598 * 
m•a˚_memÆign
(
m•a˚
 
m•
, 
size_t
 
Æignmít
, size_à
byãs
);

599 ** 
m•a˚_ödïídít_ˇŒoc
(
m•a˚
 
m•
, 
size_t
 
n_ñemíts
,

600 
size_t
 
ñem_size
, * 
chunks
[]);

601 ** 
m•a˚_ödïídít_comÆloc
(
m•a˚
 
m•
, 
size_t
 
n_ñemíts
,

602 
size_t
 
sizes
[], * 
chunks
[]);

603 
size_t
 
m•a˚_bulk_‰ì
(
m•a˚
 
m•
, **, size_à
n_ñemíts
);

604 
size_t
 
m•a˚_ußbÀ_size
(c⁄° * 
mem
);

605 
m•a˚_mÆloc_°©s
(
m•a˚
 
m•
);

606 
m•a˚_åim
(
m•a˚
 
m•
, 
size_t
 
∑d
);

607 
size_t
 
m•a˚_foŸ¥öt
(
m•a˚
 
m•
);

608 
size_t
 
m•a˚_max_foŸ¥öt
(
m•a˚
 
m•
);

609 
size_t
 
m•a˚_foŸ¥öt_limô
(
m•a˚
 
m•
);

610 
size_t
 
m•a˚_£t_foŸ¥öt_limô
(
m•a˚
 
m•
, size_à
byãs
);

611 
m•a˚_ö•e˘_Æl
(
m•a˚
 
m•
,

612 (*
h™dÀr
)(*, *, 
size_t
, *),

613 * 
¨g
);

616 #ifde‡
__˝lu•lus


	@src/extern/dlmalloc/malloc_glue.h

1 
	~<c°ddef
>

2 
	~<sys/ty≥s.h
>

6 
	#ONLY_MSPACES
 1

	)

7 
	#NO_MALLOC_STATS
 1

	)

8 
	#LACKS_SYS_MMAN_H


	)

9 
	#LACKS_TIME_H


	)

10 
	#ABORT_ON_ASSERT_FAILURE
 0

	)

11 
	#MMAP_CLEARS
 0

	)

12 
	#mÆloc_gë∑gesize
 2097152

13 
	#DEFAULT_GRANULARITY
 2097152

	)

14 #i‡
deföed
(
__˛™g__
)

15 
	#NO_MALLINFO
 1

	)

18 
kas£π¥öts
(c⁄° * c⁄° 
loc
, 
löe
, c⁄° * c⁄° 
func
);

19 
kas£π¥öã
();

20 
	#ABORT
 { 
	`kas£π¥öts
–"ABORT : " " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öã
(); 
	`ab‹t
(); }

	)

24 
	#MAP_ANONYMOUS
 0

25 
	#PROT_READ
 0

	)

26 
	#PROT_WRITE
 0

	)

27 
	#MAP_PRIVATE
 0

	)

29 
	#MMAP
(
s
) \

30 
	`dl_mm≠
(0, (
s
), 
MMAP_PROT
, 
MMAP_FLAGS
, -1, 0)

	)

32 
	#MUNMAP
(
a
,
s
) \

33 
	`dl_munm≠
(
a
,
s
)

	)

35 
	#DIRECT_MMAP
(
s
Ë
	`MMAP
(s)

	)

37 "C" *
dl_mm≠
(*, 
size_t
, , , , 
_off64_t
);

38 "C" 
dl_munm≠
(*, 
size_t
);

	@src/extern/lwip/Makefile

1 
	gSRCDIR
:=
$
(
CURDIR
)/../..

2 
ö˛ude
 
$
(
SRCDIR
)/
Makefûe
.
c⁄fig


4 
LFLAGS
=-
I
. -
Ilwù
/
§c
/
ö˛ude
 -Ilwù/§c/ö˛ude/
ùv4
 #-Ilwù/§c/ö˛ude/
ùv6


5 
CFLAGS
+=
$
(
LFLAGS
Ë-
Wno
-
addªss
 -Wno--
subs¸ùts
 #-Wno-
sign
-
com∑ª


6 
CXXFLAGS
+=
	$$
(
LFLAGS
)

8 
COREFILES
=
	`$
(
wûdˇrd
 
lwù
/
§c
/
c‹e


	@src/extern/lwip/Makefile.dep

1 
	gdh˝
.
	go
: 
lwù
/
§c
/
c‹e
/
dh˝
.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

2 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

3 
lwù
/
§c
/
ö˛ude
/lwù/
°©s
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

4 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

5 
lwù
/
§c
/
ö˛ude
/lwù/
udp
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

6 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

7 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

8 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
dh˝
.h \

9 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
autoù
.
h
Üwù/§c/ö˛ude/lwù/
dns
.h \

10 
lwù
/
§c
/
ö˛ude
/
√tif
/
ëh¨p
.
h


11 
mem
.
o
: 
lwù
/
§c
/
c‹e
/mem.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

12 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

13 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

14 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h 
¨ch
/
sys_¨ch
.h \

15 
lwù
/
§c
/
ö˛ude
/lwù/
°©s
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

16 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h


17 
öô
.
o
: 
lwù
/
§c
/
c‹e
/öô.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

18 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

19 
lwù
/
§c
/
ö˛ude
/lwù/
öô
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

20 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

21 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h
Üwù/§c/ö˛ude/lwù/
sys
.h \

22 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
 
¨ch
/
sys_¨ch
.hÜwù/§c/ö˛ude/lwù/
pbuf
.h \

23 
lwù
/
§c
/
ö˛ude
/lwù/
√tif
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

24 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
sockës
.h \

25 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë
.
h
Üwù/§c/ö˛ude/ùv4/lwù/
ù
.h \

26 
lwù
/
§c
/
ö˛ude
/lwù/
øw
.
h
Üwù/§c/ö˛ude/lwù/
udp
.h \

27 
lwù
/
§c
/
ö˛ude
/lwù/
t˝_im∂
.
h
Üwù/§c/ö˛ude/lwù/
t˝
.h \

28 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
icmp
.
h
Üwù/§c/ö˛ude/lwù/
¢mp_msg
.h \

29 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h
Üwù/§c/ö˛ude/lwù/
¢mp_°ru˘s
.h \

30 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
autoù
.
h
Üwù/§c/ö˛ude/ùv4/lwù/
igmp
.h \

31 
lwù
/
§c
/
ö˛ude
/lwù/
dns
.
h
Üwù/§c/ö˛ude/lwù/
timîs
.h \

32 
lwù
/
§c
/
ö˛ude
/
√tif
/
ëh¨p
.
h
Üwù/§c/ö˛ude/lwù/
≠i
.h \

33 
lwù
/
§c
/
ö˛ude
/lwù/
√tbuf
.
h


34 
memp
.
o
: 
lwù
/
§c
/
c‹e
/memp.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

35 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

36 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

37 
lwù
/
§c
/
ö˛ude
/lwù/
pbuf
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h \

38 
lwù
/
§c
/
ö˛ude
/lwù/
udp
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

39 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

40 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
øw
.h \

41 
lwù
/
§c
/
ö˛ude
/lwù/
t˝_im∂
.
h
Üwù/§c/ö˛ude/lwù/
t˝
.h \

42 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
icmp
.h \

43 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
igmp
.
h
Üwù/§c/ö˛ude/lwù/
≠i
.h \

44 
lwù
/
§c
/
ö˛ude
/lwù/
√tbuf
.
h
Üwù/§c/ö˛ude/lwù/
sys
.h \

45 
¨ch
/
sys_¨ch
.
h
 
lwù
/
§c
/
ö˛ude
/lwù/
≠i_msg
.h \

46 
lwù
/
§c
/
ö˛ude
/lwù/
t˝ù
.
h
Üwù/§c/ö˛ude/lwù/
√tiÁpi
.h \

47 
lwù
/
§c
/
ö˛ude
/lwù/
timîs
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

48 
lwù
/
§c
/
ö˛ude
/
√tif
/
ëh¨p
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_‰ag
.h \

49 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp_°ru˘s
.
h
Üwù/§c/ö˛ude/lwù/
¢mp_msg
.h \

50 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h
Üwù/§c/ö˛ude/lwù/
dns
.h \

51 
lwù
/
§c
/
ö˛ude
/
√tif
/
µp_€
.
h


52 
sys
.
o
: 
lwù
/
§c
/
c‹e
/sys.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

53 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

54 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h 
¨ch
/
sys_¨ch
.h

55 
t˝_ö
.
o
: 
lwù
/
§c
/
c‹e
/t˝_ö.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

56 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

57 
lwù
/
§c
/
ö˛ude
/lwù/
t˝_im∂
.
h
Üwù/§c/ö˛ude/lwù/
t˝
.h \

58 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

59 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù
.h \

60 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

61 
lwù
/
§c
/
ö˛ude
/lwù/
√tif
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
icmp
.h \

62 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

63 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë_chksum
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

64 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h
 
¨ch
/
≥rf
.h

65 
dns
.
o
: 
lwù
/
§c
/
c‹e
/dns.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

66 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h

67 
øw
.
o
: 
lwù
/
§c
/
c‹e
/øw.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

68 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

69 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

70 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

71 
lwù
/
§c
/
ö˛ude
/lwù/
√tif
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h \

72 
lwù
/
§c
/
ö˛ude
/lwù/
pbuf
.
h
Üwù/§c/ö˛ude/lwù/
øw
.h \

73 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

74 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
 
¨ch
/
≥rf
.h

75 
t˝
.
o
: 
lwù
/
§c
/
c‹e
/t˝.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

76 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

77 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

78 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

79 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

80 
lwù
/
§c
/
ö˛ude
/lwù/
t˝
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

81 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù
.h \

82 
lwù
/
§c
/
ö˛ude
/lwù/
√tif
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
icmp
.h \

83 
lwù
/
§c
/
ö˛ude
/lwù/
t˝_im∂
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h

84 
pbuf
.
o
: 
lwù
/
§c
/
c‹e
/pbuf.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

85 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

86 
lwù
/
§c
/
ö˛ude
/lwù/
°©s
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

87 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

88 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

89 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/lwù/
sys
.h 
¨ch
/
sys_¨ch
.h \

90 
¨ch
/
≥rf
.
h
 
lwù
/
§c
/
ö˛ude
/lwù/
t˝_im∂
.hÜwù/§c/ö˛ude/lwù/
t˝
.h \

91 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/ùv4/lwù/
ù_addr
.h \

92 
lwù
/
§c
/
ö˛ude
/lwù/
√tif
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
icmp
.h \

93 
lwù
/
§c
/
ö˛ude
/lwù/
t˝ù
.
h
Üwù/§c/ö˛ude/lwù/
≠i_msg
.h \

94 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
igmp
.
h
Üwù/§c/ö˛ude/lwù/
≠i
.h \

95 
lwù
/
§c
/
ö˛ude
/lwù/
√tbuf
.
h
Üwù/§c/ö˛ude/lwù/
√tiÁpi
.h \

96 
lwù
/
§c
/
ö˛ude
/lwù/
timîs
.
h


97 
√tif
.
o
: 
lwù
/
§c
/
c‹e
/√tif.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

98 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

99 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

100 
lwù
/
§c
/
ö˛ude
/lwù/
√tif
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h \

101 
lwù
/
§c
/
ö˛ude
/lwù/
pbuf
.
h
Üwù/§c/ö˛ude/lwù/
t˝_im∂
.h \

102 
lwù
/
§c
/
ö˛ude
/lwù/
t˝
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

103 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/ùv4/lwù/
icmp
.h \

104 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
igmp
.h \

105 
lwù
/
§c
/
ö˛ude
/
√tif
/
ëh¨p
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

106 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

107 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
 
¨ch
/
sys_¨ch
.h \

108 
lwù
/
§c
/
ö˛ude
/lwù/
t˝ù
.
h
Üwù/§c/ö˛ude/lwù/
≠i_msg
.h \

109 
lwù
/
§c
/
ö˛ude
/lwù/
≠i
.
h
Üwù/§c/ö˛ude/lwù/
√tbuf
.h \

110 
lwù
/
§c
/
ö˛ude
/lwù/
√tiÁpi
.
h
Üwù/§c/ö˛ude/lwù/
timîs
.h \

111 
lwù
/
§c
/
ö˛ude
/lwù/
dh˝
.
h
Üwù/§c/ö˛ude/lwù/
udp
.h

112 
°©s
.
o
: 
lwù
/
§c
/
c‹e
/°©s.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

113 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

114 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

115 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

116 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h


117 
timîs
.
o
: 
lwù
/
§c
/
c‹e
/timîs.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

118 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

119 
lwù
/
§c
/
ö˛ude
/lwù/
timîs
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h \

120 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
 
¨ch
/
sys_¨ch
.h \

121 
lwù
/
§c
/
ö˛ude
/lwù/
t˝_im∂
.
h
Üwù/§c/ö˛ude/lwù/
t˝
.h \

122 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

123 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

124 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

125 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
icmp
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

126 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h
Üwù/§c/ö˛ude/lwù/
t˝ù
.h \

127 
lwù
/
§c
/
ö˛ude
/lwù/
≠i_msg
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
igmp
.h \

128 
lwù
/
§c
/
ö˛ude
/lwù/
≠i
.
h
Üwù/§c/ö˛ude/lwù/
√tbuf
.h \

129 
lwù
/
§c
/
ö˛ude
/lwù/
√tiÁpi
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_‰ag
.h \

130 
lwù
/
§c
/
ö˛ude
/
√tif
/
ëh¨p
.
h
Üwù/§c/ö˛ude/lwù/
dh˝
.h \

131 
lwù
/
§c
/
ö˛ude
/lwù/
udp
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
autoù
.h \

132 
lwù
/
§c
/
ö˛ude
/lwù/
dns
.
h


133 
def
.
o
: 
lwù
/
§c
/
c‹e
/def.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

134 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

135 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h


136 
udp
.
o
: 
lwù
/
§c
/
c‹e
/udp.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

137 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

138 
lwù
/
§c
/
ö˛ude
/lwù/
udp
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

139 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

140 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

141 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

142 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h
 \

143 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë_chksum
.
h
 \

144 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
icmp
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

145 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/lwù/
¢mp
.h 
¨ch
/
≥rf
.h \

146 
lwù
/
§c
/
ö˛ude
/lwù/
dh˝
.
h


147 
t˝_out
.
o
: 
lwù
/
§c
/
c‹e
/t˝_out.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

148 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

149 
lwù
/
§c
/
ö˛ude
/lwù/
t˝_im∂
.
h
Üwù/§c/ö˛ude/lwù/
t˝
.h \

150 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

151 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù
.h \

152 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

153 
lwù
/
§c
/
ö˛ude
/lwù/
√tif
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
icmp
.h \

154 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

155 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë_chksum
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

156 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h


157 
ù_‰ag
.
o
: 
lwù
/
§c
/
c‹e
/
ùv4
/ù_‰ag.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 \

158 
lwù›ts
.
h
 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.hÜwù/§c/ö˛ude/lwù/
¨ch
.h \

159 
¨ch
/
cc
.
h
 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_‰ag
.h \

160 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

161 
lwù
/
§c
/
ö˛ude
/lwù/
√tif
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

162 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù
.h \

163 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë_chksum
.
h
Üwù/§c/ö˛ude/lwù/
¢mp
.h \

164 
lwù
/
§c
/
ö˛ude
/lwù/
°©s
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

165 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

166 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
icmp
.
h


167 
öë
.
o
: 
lwù
/
§c
/
c‹e
/
ùv4
/öë.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

168 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

169 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

170 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h


171 
ù_addr
.
o
: 
lwù
/
§c
/
c‹e
/
ùv4
/ù_addr.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 \

172 
lwù›ts
.
h
 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.hÜwù/§c/ö˛ude/lwù/
¨ch
.h \

173 
¨ch
/
cc
.
h
 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.h \

174 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

175 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h

176 
igmp
.
o
: 
lwù
/
§c
/
c‹e
/
ùv4
/igmp.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

177 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h

178 
ù
.
o
: 
lwù
/
§c
/
c‹e
/
ùv4
/ù.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

179 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

180 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

181 
lwù
/
§c
/
ö˛ude
/lwù/
pbuf
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h \

182 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

183 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_‰ag
.h \

184 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë_chksum
.
h
 \

185 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
icmp
.
h
Üwù/§c/ö˛ude/ùv4/lwù/
igmp
.h \

186 
lwù
/
§c
/
ö˛ude
/lwù/
øw
.
h
Üwù/§c/ö˛ude/lwù/
udp
.h \

187 
lwù
/
§c
/
ö˛ude
/lwù/
t˝_im∂
.
h
Üwù/§c/ö˛ude/lwù/
t˝
.h \

188 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h
Üwù/§c/ö˛ude/lwù/
dh˝
.h \

189 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
autoù
.
h
Üwù/§c/ö˛ude/lwù/
°©s
.h \

190 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

191 
¨ch
/
≥rf
.
h


192 
autoù
.
o
: 
lwù
/
§c
/
c‹e
/
ùv4
/autoù.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 \

193 
lwù›ts
.
h
 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.hÜwù/§c/ö˛ude/lwù/
¨ch
.h \

194 
¨ch
/
cc
.
h


195 
öë_chksum
.
o
: 
lwù
/
§c
/
c‹e
/
ùv4
/öë_chksum.
c
 \

196 
lwù
/
§c
/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.hÜwù/§c/ö˛ude/lwù/
debug
.h \

197 
lwù
/
§c
/
ö˛ude
/lwù/
¨ch
.
h
árch/
cc
.h \

198 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë_chksum
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

199 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

200 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h


201 
icmp
.
o
: 
lwù
/
§c
/
c‹e
/
ùv4
/icmp.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

202 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

203 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
icmp
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

204 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

205 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

206 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
öë_chksum
.
h
Üwù/§c/ö˛ude/ùv4/lwù/
ù
.h \

207 
lwù
/
§c
/
ö˛ude
/lwù/
°©s
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

208 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

209 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h


210 
¶ùif
.
o
: 
lwù
/
§c
/
√tif
/¶ùif.
c
Üwù/§c/
ö˛ude
/√tif/¶ùif.
h
 \

211 
lwù
/
§c
/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.hÜwù/§c/ö˛ude/lwù/
debug
.h \

212 
lwù
/
§c
/
ö˛ude
/lwù/
¨ch
.
h
árch/
cc
.hÜwù/§c/ö˛ude/lwù/
√tif
.h \

213 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

214 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h

215 
ëh¨p
.
o
: 
lwù
/
§c
/
√tif
/ëh¨p.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

216 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

217 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

218 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

219 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

220 
lwù
/
§c
/
ö˛ude
/lwù/
°©s
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

221 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

222 
lwù
/
§c
/
ö˛ude
/lwù/
¢mp
.
h
Üwù/§c/ö˛ude/lwù/
dh˝
.h \

223 
lwù
/
§c
/
ö˛ude
/lwù/
udp
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
autoù
.h \

224 
lwù
/
§c
/
ö˛ude
/
√tif
/
ëh¨p
.
h


225 
ëhî√tif
.
o
: 
lwù
/
§c
/
√tif
/ëhî√tif.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 \

226 
lwù›ts
.
h
 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.hÜwù/§c/ö˛ude/lwù/
¨ch
.h \

227 
¨ch
/
cc
.
h


228 
√tdb
.
o
: 
lwù
/
§c
/
≠i
/√tdb.
c
Üwù/§c/
ö˛ude
/lwù/√tdb.
h
 \

229 
lwù
/
§c
/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.hÜwù/§c/ö˛ude/lwù/
debug
.h \

230 
lwù
/
§c
/
ö˛ude
/lwù/
¨ch
.
h
árch/
cc
.h

231 
≠i_lib
.
o
: 
lwù
/
§c
/
≠i
/≠i_lib.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

232 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

233 
lwù
/
§c
/
ö˛ude
/lwù/
≠i
.
h
Üwù/§c/ö˛ude/lwù/
√tbuf
.h \

234 
lwù
/
§c
/
ö˛ude
/lwù/
pbuf
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h \

235 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

236 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
 
¨ch
/
sys_¨ch
.h \

237 
lwù
/
§c
/
ö˛ude
/lwù/
t˝ù
.
h
Üwù/§c/ö˛ude/lwù/
≠i_msg
.h \

238 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
igmp
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

239 
lwù
/
§c
/
ö˛ude
/lwù/
√tiÁpi
.
h
Üwù/§c/ö˛ude/lwù/
timîs
.h \

240 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

241 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
øw
.h \

242 
lwù
/
§c
/
ö˛ude
/lwù/
udp
.
h
Üwù/§c/ö˛ude/lwù/
t˝
.h \

243 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
icmp
.h

244 
√tiÁpi
.
o
: 
lwù
/
§c
/
≠i
/√tiÁpi.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 \

245 
lwù›ts
.
h
 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.hÜwù/§c/ö˛ude/lwù/
¨ch
.h \

246 
¨ch
/
cc
.
h


247 
t˝ù
.
o
: 
lwù
/
§c
/
≠i
/t˝ù.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

248 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

249 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h 
¨ch
/
sys_¨ch
.h \

250 
lwù
/
§c
/
ö˛ude
/lwù/
memp
.
h
Üwù/§c/ö˛ude/lwù/
memp_°d
.h \

251 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

252 
lwù
/
§c
/
ö˛ude
/lwù/
t˝ù
.
h
Üwù/§c/ö˛ude/lwù/
≠i_msg
.h \

253 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù_addr
.
h
Üwù/§c/ö˛ude/lwù/
def
.h \

254 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
igmp
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

255 
lwù
/
§c
/
ö˛ude
/lwù/
≠i
.
h
Üwù/§c/ö˛ude/lwù/
√tbuf
.h \

256 
lwù
/
§c
/
ö˛ude
/lwù/
√tiÁpi
.
h
Üwù/§c/ö˛ude/lwù/
timîs
.h \

257 
lwù
/
§c
/
ö˛ude
/lwù/
öô
.
h
Üwù/§c/ö˛ude/
√tif
/
ëh¨p
.h \

258 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/
√tif
/
µp_€
.h

259 
√tbuf
.
o
: 
lwù
/
§c
/
≠i
/√tbuf.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

260 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

261 
lwù
/
§c
/
ö˛ude
/lwù/
√tbuf
.
h
Üwù/§c/ö˛ude/lwù/
pbuf
.h \

262 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

263 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

264 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h


265 
îr
.
o
: 
lwù
/
§c
/
≠i
/îr.
c
Üwù/§c/
ö˛ude
/lwù/îr.
h
 \

266 
lwù
/
§c
/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.hÜwù/§c/ö˛ude/lwù/
debug
.h \

267 
lwù
/
§c
/
ö˛ude
/lwù/
¨ch
.
h
árch/
cc
.h

268 
≠i_msg
.
o
: 
lwù
/
§c
/
≠i
/≠i_msg.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

269 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

270 
lwù
/
§c
/
ö˛ude
/lwù/
≠i_msg
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

271 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h \

272 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
 
¨ch
/
sys_¨ch
.h \

273 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
igmp
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

274 
lwù
/
§c
/
ö˛ude
/lwù/
pbuf
.
h
Üwù/§c/ö˛ude/lwù/
≠i
.h \

275 
lwù
/
§c
/
ö˛ude
/lwù/
√tbuf
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù
.h \

276 
lwù
/
§c
/
ö˛ude
/lwù/
udp
.
h
Üwù/§c/ö˛ude/lwù/
t˝
.h \

277 
lwù
/
§c
/
ö˛ude
/lwù/
mem
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
icmp
.h \

278 
lwù
/
§c
/
ö˛ude
/lwù/
øw
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

279 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h
Üwù/§c/ö˛ude/lwù/
t˝ù
.h \

280 
lwù
/
§c
/
ö˛ude
/lwù/
√tiÁpi
.
h
Üwù/§c/ö˛ude/lwù/
timîs
.h \

281 
lwù
/
§c
/
ö˛ude
/lwù/
dns
.
h


282 
sockës
.
o
: 
lwù
/
§c
/
≠i
/sockës.
c
Üwù/§c/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.h \

283 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

284 
lwù
/
§c
/
ö˛ude
/lwù/
sockës
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

285 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
öë
.h \

286 
lwù
/
§c
/
ö˛ude
/lwù/
≠i
.
h
Üwù/§c/ö˛ude/lwù/
√tbuf
.h \

287 
lwù
/
§c
/
ö˛ude
/lwù/
pbuf
.
h
Üwù/§c/ö˛ude/lwù/
îr
.h \

288 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
 
¨ch
/
sys_¨ch
.h \

289 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
igmp
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

290 
lwù
/
§c
/
ö˛ude
/lwù/
t˝
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

291 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/ùv4/lwù/
icmp
.h \

292 
lwù
/
§c
/
ö˛ude
/lwù/
øw
.
h
Üwù/§c/ö˛ude/lwù/
udp
.h \

293 
lwù
/
§c
/
ö˛ude
/lwù/
t˝ù
.
h
Üwù/§c/ö˛ude/lwù/
≠i_msg
.h \

294 
lwù
/
§c
/
ö˛ude
/lwù/
√tiÁpi
.
h
Üwù/§c/ö˛ude/lwù/
timîs
.h

295 
lwù_glue
.
o
:Üwù_glue.
cc
 \

296 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ã°›ti⁄s
.
h
 \

297 
lwù
/
§c
/
ö˛ude
/lwù/
def
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

298 
lwù
/
§c
/
ö˛ude
/lwù/
›t
.
h
 
lwù›ts
.hÜwù/§c/ö˛ude/lwù/
debug
.h \

299 
lwù
/
§c
/
ö˛ude
/lwù/
dh˝
.
h
Üwù/§c/ö˛ude/lwù/
√tif
.h \

300 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
ù_addr
.h \

301 
lwù
/
§c
/
ö˛ude
/lwù/
pbuf
.
h
Üwù/§c/ö˛ude/lwù/
udp
.h \

302 
lwù
/
§c
/
ö˛ude
/
ùv4
/lwù/
ù
.
h
Üwù/§c/ö˛ude/lwù/
mem
.h \

303 
lwù
/
§c
/
ö˛ude
/lwù/
√tbuf
.
h
Üwù/§c/ö˛ude/lwù/
¢mp
.h \

304 
lwù
/
§c
/
ö˛ude
/lwù/
°©s
.
h
Üwù/§c/ö˛ude/lwù/
memp
.h \

305 
lwù
/
§c
/
ö˛ude
/lwù/
memp_°d
.
h
Üwù/§c/ö˛ude/lwù/
sys
.h \

306 
¨ch
/
sys_¨ch
.
h
 
lwù
/
§c
/
ö˛ude
/lwù/
t˝ù
.h \

307 
lwù
/
§c
/
ö˛ude
/lwù/
≠i_msg
.
h
Üwù/§c/ö˛ude/
ùv4
/lwù/
igmp
.h \

308 
lwù
/
§c
/
ö˛ude
/lwù/
≠i
.
h
Üwù/§c/ö˛ude/lwù/
√tiÁpi
.h \

309 
lwù
/
§c
/
ö˛ude
/lwù/
timîs
.
h
Üwù/§c/ö˛ude/
√tif
/
ëh¨p
.h \

310 
lwù
/
§c
/
ö˛ude
/
√tif
/
µp_€
.
h
 \

311 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
Mem‹yM™agî
.
h
 \

312 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
Mem‹y
.
h
 \

313 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
gíîic
/
bôm™ù
.
h
 \

314 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
gíîic
/
basics
.
h
 \

315 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ö˛ude
/
ko°y≥s
.
h
 \

316 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
OuçutBasic
.
h
 \

317 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
asmsh¨e
.
h
 \

318 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
SpöLock
.
h
 \

319 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
CPU
.
h
 \

320 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
Pro˚ss‹
.
h
 \

321 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
asmde˛
.
h
 \

322 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
Des¸ùt‹s
.
h
 \

323 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
Ouçut
.
h
 \

324 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
gíîic
/
Bôm≠
.
h


325 
sys_¨ch
.
o
: sys_¨ch.
cc
 \

326 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ã°›ti⁄s
.
h
 \

327 
lwù
/
§c
/
ö˛ude
/lwù/
sys
.
h
Üwù/§c/ö˛ude/lwù/
›t
.h 
lwù›ts
.h \

328 
lwù
/
§c
/
ö˛ude
/lwù/
debug
.
h
Üwù/§c/ö˛ude/lwù/
¨ch
.hárch/
cc
.h \

329 
lwù
/
§c
/
ö˛ude
/lwù/
îr
.
h
 
¨ch
/
sys_¨ch
.h \

330 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
gíîic
/
Buf„rs
.
h
 \

331 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
gíîic
/
basics
.
h
 \

332 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ö˛ude
/
ko°y≥s
.
h
 \

333 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
OuçutBasic
.
h
 \

334 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ru¡ime
/
SyncQueues
.
h
 \

335 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ru¡ime
/
BlockögSync
.
h
 \

336 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
gíîic
/
EmbeddedC⁄èöîs
.
h
 \

337 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ru¡ime
/
Ru¡ime
.
h
 \

338 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
AddªssS∑˚
.
h
 \

339 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
FømeM™agî
.
h
 \

340 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
gíîic
/
Bôm≠
.
h
 \

341 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
gíîic
/
bôm™ù
.
h
 \

342 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
Mem‹yM™agî
.
h
 \

343 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
Mem‹y
.
h
 \

344 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
asmsh¨e
.
h
 \

345 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
SpöLock
.
h
 \

346 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
CPU
.
h
 \

347 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
Pro˚ss‹
.
h
 \

348 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
asmde˛
.
h
 \

349 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
Des¸ùt‹s
.
h
 \

350 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
Ouçut
.
h
 \

351 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
Pagög
.
h
 \

352 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
machöe
/
Machöe
.
h
 \

353 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ru¡ime
/
ScheduÀr
.
h
 \

354 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
ru¡ime
/
Thªad
.
h
 \

355 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
//
lwù
/../../
kî√l
/
Clock
.
h


	@src/extern/lwip/arch/cc.h

1 #i‚de‡
_LWIP_ARCH_CC_H_


2 
	#_LWIP_ARCH_CC_H_
 1

	)

4 
	~<˘y≥.h
>

5 
	~<°döt.h
>

6 
	~<sys/∑øm.h
>

7 
	~<sys/ty≥s.h
>

10 
uöt8_t
 
	tu8_t
;

11 
öt8_t
 
	ts8_t
;

12 
uöt16_t
 
	tu16_t
;

13 
öt16_t
 
	ts16_t
;

14 
uöt32_t
 
	tu32_t
;

15 
öt32_t
 
	ts32_t
;

17 
uöçå_t
 
	tmem_±r_t
;

20 
	#X8_F
 "02x"

	)

21 
	#U16_F
 "hu"

	)

22 
	#S16_F
 "hd"

	)

23 
	#X16_F
 "hx"

	)

24 
	#U32_F
 "u"

	)

25 
	#S32_F
 "d"

	)

26 
	#X32_F
 "x"

	)

28 #i‡
deföed
(
__x86_64__
)

29 
	#SZT_F
 "lu"

	)

31 
	#SZT_F
 "u"

	)

35 #i‚de‡
BYTE_ORDER


36 
	#BYTE_ORDER
 
LITTLE_ENDIAN


	)

40 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

41 
	#PACK_STRUCT_STRUCT
 
	`__©åibuã__
((
∑cked
))

	)

42 
	#PACK_STRUCT_BEGIN


	)

43 
	#PACK_STRUCT_END


	)

46 
lwù_¥ötf
(c⁄° * 
fmt
, ...);

47 
lwù_as£π
(c⁄° * c⁄° 
loc
, 
löe
, c⁄° * c⁄° 
func
, c⁄° * c⁄° 
msg
);

49 
	#LWIP_PLATFORM_DIAG
(
x
Ë
lwù_¥ötf
 
	)
x

50 
	#LWIP_PLATFORM_ASSERT
(
x
Ë
	`lwù_as£π
(
__FILE__
, 
__LINE__
, 
__func__
, x)

	)

	@src/extern/lwip/arch/perf.h

1 #i‚de‡
_LWIP_ARCH_PERF_H_


2 
	#_LWIP_ARCH_PERF_H_
 1

	)

4 
	#PERF_START


	)

5 
	#PERF_STOP
(
x
)

	)

	@src/extern/lwip/arch/sys_arch.h

1 #i‚de‡
_LWIP_ARCH_SYS_ARCH_H_


2 
	#_LWIP_ARCH_SYS_ARCH_H_
 1

	)

4 
sys_öô
();

5 
u32_t
 
sys_now
();

7 * 
	tsys_£m_t
;

8 * 
	tsys_mbox_t
;

9 * 
	tsys_thªad_t
;

11 
	tsys_¥Ÿ_t
;

	@src/extern/lwip/lwip/src/include/ipv4/lwip/autoip.h

44 #i‚de‡
__LWIP_AUTOIP_H__


45 
	#__LWIP_AUTOIP_H__


	)

47 
	~"lwù/›t.h
"

49 #i‡
LWIP_AUTOIP


51 
	~"lwù/√tif.h
"

52 
	~"lwù/udp.h
"

53 
	~"√tif/ëh¨p.h
"

55 #ifde‡
__˝lu•lus


60 
	#AUTOIP_TMR_INTERVAL
 100

	)

61 
	#AUTOIP_TICKS_PER_SECOND
 (1000 / 
AUTOIP_TMR_INTERVAL
)

	)

64 
	#PROBE_WAIT
 1

	)

65 
	#PROBE_MIN
 1

	)

66 
	#PROBE_MAX
 2

	)

67 
	#PROBE_NUM
 3

	)

68 
	#ANNOUNCE_NUM
 2

	)

69 
	#ANNOUNCE_INTERVAL
 2

	)

70 
	#ANNOUNCE_WAIT
 2

	)

71 
	#MAX_CONFLICTS
 10

	)

72 
	#RATE_LIMIT_INTERVAL
 60

	)

73 
	#DEFEND_INTERVAL
 10

	)

76 
	#AUTOIP_STATE_OFF
 0

	)

77 
	#AUTOIP_STATE_PROBING
 1

	)

78 
	#AUTOIP_STATE_ANNOUNCING
 2

	)

79 
	#AUTOIP_STATE_BOUND
 3

	)

81 
	sautoù


83 
ù_addr_t
 
Œùaddr
;

84 
u8_t
 
°©e
;

85 
u8_t
 
£¡_num
;

86 
u16_t
 
âw
;

87 
u8_t
 
œ°c⁄Êi˘
;

88 
u8_t
 
åõd_Œùaddr
;

92 
	#autoù_öô
(Ë

	)

95 
autoù_£t_°ru˘
(
√tif
 *√tif, 
autoù
 *autoip);

98 
îr_t
 
autoù_°¨t
(
√tif
 *netif);

101 
îr_t
 
autoù_°›
(
√tif
 *netif);

104 
autoù_¨p_ª∂y
(
√tif
 *√tif, 
ëh¨p_hdr
 *
hdr
);

107 
autoù_tmr
();

110 
autoù_√tw‹k_ch™ged
(
√tif
 *netif);

112 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv4/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

38 
	~"lwù/√tif.h
"

40 #ifde‡
__˝lu•lus


44 
	#ICMP_ER
 0

	)

45 
	#ICMP_DUR
 3

	)

46 
	#ICMP_SQ
 4

	)

47 
	#ICMP_RD
 5

	)

48 
	#ICMP_ECHO
 8

	)

49 
	#ICMP_TE
 11

	)

50 
	#ICMP_PP
 12

	)

51 
	#ICMP_TS
 13

	)

52 
	#ICMP_TSR
 14

	)

53 
	#ICMP_IRQ
 15

	)

54 
	#ICMP_IR
 16

	)

56 
	eicmp_dur_ty≥
 {

57 
ICMP_DUR_NET
 = 0,

58 
ICMP_DUR_HOST
 = 1,

59 
ICMP_DUR_PROTO
 = 2,

60 
ICMP_DUR_PORT
 = 3,

61 
ICMP_DUR_FRAG
 = 4,

62 
ICMP_DUR_SR
 = 5

65 
	eicmp_ã_ty≥
 {

66 
ICMP_TE_TTL
 = 0,

67 
ICMP_TE_FRAG
 = 1

70 #ifde‡
PACK_STRUCT_USE_INCLUDES


71 
	~"¨ch/bp°ru˘.h
"

78 
PACK_STRUCT_BEGIN


79 
	sicmp_echo_hdr
 {

80 
PACK_STRUCT_FIELD
(
u8_t
 
ty≥
);

81 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

82 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

83 
PACK_STRUCT_FIELD
(
u16_t
 
id
);

84 
PACK_STRUCT_FIELD
(
u16_t
 
£qno
);

85 } 
PACK_STRUCT_STRUCT
;

86 
PACK_STRUCT_END


87 #ifde‡
PACK_STRUCT_USE_INCLUDES


88 
	~"¨ch/ï°ru˘.h
"

91 
	#ICMPH_TYPE
(
hdr
Ë((hdr)->
ty≥
)

	)

92 
	#ICMPH_CODE
(
hdr
Ë((hdr)->
code
)

	)

95 
	#ICMPH_TYPE_SET
(
hdr
, 
t
Ë((hdr)->
ty≥
 = (t))

	)

96 
	#ICMPH_CODE_SET
(
hdr
, 
c
Ë((hdr)->
code
 = (c))

	)

99 #i‡
LWIP_ICMP


101 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

102 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

103 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

107 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv4/lwip/igmp.h

35 #i‚de‡
__LWIP_IGMP_H__


36 
	#__LWIP_IGMP_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/pbuf.h
"

43 #i‡
LWIP_IGMP


45 #ifde‡
__˝lu•lus


51 
	#IGMP_TMR_INTERVAL
 100

	)

52 
	#IGMP_V1_DELAYING_MEMBER_TMR
 (1000/
IGMP_TMR_INTERVAL
)

	)

53 
	#IGMP_JOIN_DELAYING_MEMBER_TMR
 (500 /
IGMP_TMR_INTERVAL
)

	)

57 
	#IGMP_DEL_MAC_FILTER
 0

	)

58 
	#IGMP_ADD_MAC_FILTER
 1

	)

72 
	sigmp_group
 {

74 
igmp_group
 *
√xt
;

76 
√tif
 *netif;

78 
ù_addr_t
 
group_addªss
;

80 
u8_t
 
œ°_ªp‹ãr_Êag
;

82 
u8_t
 
group_°©e
;

84 
u16_t
 
timî
;

86 
u8_t
 
u£
;

90 
igmp_öô
();

91 
îr_t
 
igmp_°¨t
(
√tif
 *netif);

92 
îr_t
 
igmp_°›
(
√tif
 *netif);

93 
igmp_ªp‹t_groups
(
√tif
 *netif);

94 
igmp_group
 *
igmp_lookf‹_group
(
√tif
 *
iÂ
, 
ù_addr_t
 *
addr
);

95 
igmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
, 
ù_addr_t
 *
de°
);

96 
îr_t
 
igmp_joögroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
);

97 
îr_t
 
igmp_Àavegroup
(
ù_addr_t
 *
iÁddr
, ip_addr_à*
grou∑ddr
);

98 
igmp_tmr
();

100 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv4/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


44 
	sö_addr
 {

45 
u32_t
 
s_addr
;

49 
	#INADDR_NONE
 
IPADDR_NONE


	)

51 
	#INADDR_LOOPBACK
 
IPADDR_LOOPBACK


	)

53 
	#INADDR_ANY
 
IPADDR_ANY


	)

55 
	#INADDR_BROADCAST
 
IPADDR_BROADCAST


	)

61 
	#IN_CLASSA
(
a
Ë
	`IP_CLASSA
◊)

	)

62 
	#IN_CLASSA_NET
 
IP_CLASSA_NET


	)

63 
	#IN_CLASSA_NSHIFT
 
IP_CLASSA_NSHIFT


	)

64 
	#IN_CLASSA_HOST
 
IP_CLASSA_HOST


	)

65 
	#IN_CLASSA_MAX
 
IP_CLASSA_MAX


	)

67 
	#IN_CLASSB
(
b
Ë
	`IP_CLASSB
(b)

	)

68 
	#IN_CLASSB_NET
 
IP_CLASSB_NET


	)

69 
	#IN_CLASSB_NSHIFT
 
IP_CLASSB_NSHIFT


	)

70 
	#IN_CLASSB_HOST
 
IP_CLASSB_HOST


	)

71 
	#IN_CLASSB_MAX
 
IP_CLASSB_MAX


	)

73 
	#IN_CLASSC
(
c
Ë
	`IP_CLASSC
(c)

	)

74 
	#IN_CLASSC_NET
 
IP_CLASSC_NET


	)

75 
	#IN_CLASSC_NSHIFT
 
IP_CLASSC_NSHIFT


	)

76 
	#IN_CLASSC_HOST
 
IP_CLASSC_HOST


	)

77 
	#IN_CLASSC_MAX
 
IP_CLASSC_MAX


	)

79 
	#IN_CLASSD
(
d
Ë
	`IP_CLASSD
(d)

	)

80 
	#IN_CLASSD_NET
 
IP_CLASSD_NET


	)

81 
	#IN_CLASSD_NSHIFT
 
IP_CLASSD_NSHIFT


	)

82 
	#IN_CLASSD_HOST
 
IP_CLASSD_HOST


	)

83 
	#IN_CLASSD_MAX
 
IP_CLASSD_MAX


	)

85 
	#IN_MULTICAST
(
a
Ë
	`IP_MULTICAST
◊)

	)

87 
	#IN_EXPERIMENTAL
(
a
Ë
	`IP_EXPERIMENTAL
◊)

	)

88 
	#IN_BADCLASS
(
a
Ë
	`IP_BADCLASS
◊)

	)

90 
	#IN_LOOPBACKNET
 
IP_LOOPBACKNET


	)

92 
	#öë_addr_‰om_ùaddr
(
èrgë_öaddr
, 
sour˚_ùaddr
Ë(—¨gë_öaddr)->
s_addr
 = 
	`ù4_addr_gë_u32
(sour˚_ùaddr))

	)

93 
	#öë_addr_to_ùaddr
(
èrgë_ùaddr
, 
sour˚_öaddr
Ë(
	`ù4_addr_£t_u32
—¨gë_ùaddr, (sour˚_öaddr)->
s_addr
))

	)

95 
	#öë_addr_to_ùaddr_p
(
èrgë_ùaddr_p
, 
sour˚_öaddr
Ë(—¨gë_ùaddr_pË(
ù_addr_t
*)&((sour˚_öaddr)->
s_addr
))

	)

98 
	#öë_addr
(
˝
Ë
	`ùaddr_addr
(˝)

	)

99 
	#öë_©⁄
(
˝
, 
addr
Ë
	`ùaddr_©⁄
(˝, (
ù_addr_t
*Ôddr)

	)

100 
	#öë_¡ﬂ
(
addr
Ë
	`ùaddr_¡ﬂ
((
ù_addr_t
*)&◊ddr))

	)

101 
	#öë_¡ﬂ_r
(
addr
, 
buf
, 
buÊí
Ë
	`ùaddr_¡ﬂ_r
((
ù_addr_t
*)&◊ddr), buf, buÊí)

	)

103 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv4/lwip/inet_chksum.h

32 #i‚de‡
__LWIP_INET_CHKSUM_H__


33 
	#__LWIP_INET_CHKSUM_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

41 #i‚de‡
SWAP_BYTES_IN_WORD


42 #i‡
LWIP_PLATFORM_BYTESWAP
 && (
BYTE_ORDER
 =
LITTLE_ENDIAN
)

44 
	#SWAP_BYTES_IN_WORD
(
w
Ë
	`LWIP_PLATFORM_HTONS
(w)

	)

47 
	#SWAP_BYTES_IN_WORD
(
w
Ë(((wË& 0xffË<< 8Ë| (((wË& 0xff00Ë>> 8)

	)

52 #i‚de‡
FOLD_U32T


53 
	#FOLD_U32T
(
u
Ë(((uË>> 16Ë+ ((uË& 0x0000ffffUL))

	)

56 #i‡
LWIP_CHECKSUM_ON_COPY


59 #i‚de‡
LWIP_CHKSUM_COPY


60 
	#LWIP_CHKSUM_COPY
(
d°
, 
§c
, 
Àn
Ë
	`lwù_chksum_c›y
(d°, src,Üí)

	)

61 #i‚de‡
LWIP_CHKSUM_COPY_ALGORITHM


62 
	#LWIP_CHKSUM_COPY_ALGORITHM
 1

	)

66 
	#LWIP_CHKSUM_COPY_ALGORITHM
 0

	)

69 #ifde‡
__˝lu•lus


73 
u16_t
 
öë_chksum
(*
d©≠å
, u16_à
Àn
);

74 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

75 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

76 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

77 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
);

78 
u16_t
 
öë_chksum_p£udo_∑πül
(
pbuf
 *
p
,

79 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

80 
u8_t
 
¥Ÿo
, 
u16_t
 
¥Ÿo_Àn
, u16_à
chksum_Àn
);

81 #i‡
LWIP_CHKSUM_COPY_ALGORITHM


82 
u16_t
 
lwù_chksum_c›y
(*
d°
, c⁄° *
§c
, u16_à
Àn
);

85 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv4/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/def.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

41 
	~"lwù/√tif.h
"

43 #ifde‡
__˝lu•lus


48 
	#IP_OPTIONS_SEND
 
LWIP_IGMP


	)

50 
	#IP_HLEN
 20

	)

52 
	#IP_PROTO_ICMP
 1

	)

53 
	#IP_PROTO_IGMP
 2

	)

54 
	#IP_PROTO_UDP
 17

	)

55 
	#IP_PROTO_UDPLITE
 136

	)

56 
	#IP_PROTO_TCP
 6

	)

61 #ifde‡
IP_HDRINCL


62 #unde‡
IP_HDRINCL


64 
	#IP_HDRINCL
 
NULL


	)

66 #i‡
LWIP_NETIF_HWADDRHINT


67 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

69 
	#IP_PCB_ADDRHINT


	)

76 
	#IP_PCB
 \

78 
ù_addr_t
 
loˇl_ù
; \

79 
ù_addr_t
 
ªmŸe_ù
; \

81 
u8_t
 
so_›ti⁄s
; \

83 
u8_t
 
tos
; \

85 
u8_t
 
âl
 \

87 
IP_PCB_ADDRHINT


	)

89 
	sù_pcb
 {

91 
IP_PCB
;

98 
	#SOF_ACCEPTCONN
 0x02U

	)

99 
	#SOF_REUSEADDR
 0x04U

	)

100 
	#SOF_KEEPALIVE
 0x08U

	)

102 
	#SOF_BROADCAST
 0x20U

	)

104 
	#SOF_LINGER
 0x80U

	)

109 
	#SOF_INHERITED
 (
SOF_REUSEADDR
|
SOF_KEEPALIVE
|
SOF_LINGER
 )

	)

112 #ifde‡
PACK_STRUCT_USE_INCLUDES


113 
	~"¨ch/bp°ru˘.h
"

115 
PACK_STRUCT_BEGIN


116 
	sù_hdr
 {

118 
PACK_STRUCT_FIELD
(
u8_t
 
_v_hl
);

120 
PACK_STRUCT_FIELD
(
u8_t
 
_tos
);

122 
PACK_STRUCT_FIELD
(
u16_t
 
_Àn
);

124 
PACK_STRUCT_FIELD
(
u16_t
 
_id
);

126 
PACK_STRUCT_FIELD
(
u16_t
 
_off£t
);

127 
	#IP_RF
 0x8000U

	)

128 
	#IP_DF
 0x4000U

	)

129 
	#IP_MF
 0x2000U

	)

130 
	#IP_OFFMASK
 0x1fffU

	)

132 
PACK_STRUCT_FIELD
(
u8_t
 
_âl
);

134 
PACK_STRUCT_FIELD
(
u8_t
 
_¥Ÿo
);

136 
PACK_STRUCT_FIELD
(
u16_t
 
_chksum
);

138 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
§c
);

139 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
de°
);

140 } 
PACK_STRUCT_STRUCT
;

141 
PACK_STRUCT_END


142 #ifde‡
PACK_STRUCT_USE_INCLUDES


143 
	~"¨ch/ï°ru˘.h
"

146 
	#IPH_V
(
hdr
Ë((hdr)->
_v_hl
 >> 4)

	)

147 
	#IPH_HL
(
hdr
Ë((hdr)->
_v_hl
 & 0x0f)

	)

148 
	#IPH_TOS
(
hdr
Ë((hdr)->
_tos
)

	)

149 
	#IPH_LEN
(
hdr
Ë((hdr)->
_Àn
)

	)

150 
	#IPH_ID
(
hdr
Ë((hdr)->
_id
)

	)

151 
	#IPH_OFFSET
(
hdr
Ë((hdr)->
_off£t
)

	)

152 
	#IPH_TTL
(
hdr
Ë((hdr)->
_âl
)

	)

153 
	#IPH_PROTO
(
hdr
Ë((hdr)->
_¥Ÿo
)

	)

154 
	#IPH_CHKSUM
(
hdr
Ë((hdr)->
_chksum
)

	)

156 
	#IPH_VHL_SET
(
hdr
, 
v
, 
hl
Ë(hdr)->
_v_hl
 = (((vË<< 4Ë| (hl))

	)

157 
	#IPH_TOS_SET
(
hdr
, 
tos
Ë(hdr)->
_tos
 = (tos)

	)

158 
	#IPH_LEN_SET
(
hdr
, 
Àn
Ë(hdr)->
_Àn
 = (Àn)

	)

159 
	#IPH_ID_SET
(
hdr
, 
id
Ë(hdr)->
_id
 = (id)

	)

160 
	#IPH_OFFSET_SET
(
hdr
, 
off
Ë(hdr)->
_off£t
 = (off)

	)

161 
	#IPH_TTL_SET
(
hdr
, 
âl
Ë(hdr)->
_âl
 = (
u8_t
)—é)

	)

162 
	#IPH_PROTO_SET
(
hdr
, 
¥Ÿo
Ë(hdr)->
_¥Ÿo
 = (
u8_t
)’rŸo)

	)

163 
	#IPH_CHKSUM_SET
(
hdr
, 
chksum
Ë(hdr)->
_chksum
 = (chksum)

	)

166 
√tif
 *
cuºít_√tif
;

168 c⁄° 
ù_hdr
 *
cuºít_hódî
;

170 
ù_addr_t
 
cuºít_ùhdr_§c
;

172 
ù_addr_t
 
cuºít_ùhdr_de°
;

174 
	#ù_öô
(Ë

	)

175 
√tif
 *
ù_rouã
(
ù_addr_t
 *
de°
);

176 
îr_t
 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

177 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

178 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
);

179 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

180 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
,

181 
√tif
 *netif);

182 #i‡
LWIP_NETIF_HWADDRHINT


183 
îr_t
 
ù_ouçut_höãd
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

184 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, u8_à*
addr_höt
);

186 #i‡
IP_OPTIONS_SEND


187 
îr_t
 
ù_ouçut_if_›t
(
pbuf
 *
p
, 
ù_addr_t
 *
§c
, ip_addr_à*
de°
,

188 
u8_t
 
âl
, u8_à
tos
, u8_à
¥Ÿo
, 
√tif
 *√tif, *
ù_›ti⁄s
,

189 
u16_t
 
›éí
);

194 
	#ù_cuºít_√tif
(Ë(
cuºít_√tif
)

	)

198 
	#ù_cuºít_hódî
(Ë(
cuºít_hódî
)

	)

200 
	#ù_cuºít_§c_addr
(Ë(&
cuºít_ùhdr_§c
)

	)

202 
	#ù_cuºít_de°_addr
(Ë(&
cuºít_ùhdr_de°
)

	)

205 
	#ù_gë_›ti⁄
(
pcb
, 
›t
Ë(’cb)->
so_›ti⁄s
 & (›t))

	)

207 
	#ù_£t_›ti⁄
(
pcb
, 
›t
Ë(’cb)->
so_›ti⁄s
 |(›t))

	)

209 
	#ù_ª£t_›ti⁄
(
pcb
, 
›t
Ë(’cb)->
so_›ti⁄s
 &~(›t))

	)

211 #i‡
IP_DEBUG


212 
ù_debug_¥öt
(
pbuf
 *
p
);

214 
	#ù_debug_¥öt
(
p
)

	)

217 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv4/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

38 #ifde‡
__˝lu•lus


44 
	sù_addr
 {

45 
u32_t
 
addr
;

50 #ifde‡
PACK_STRUCT_USE_INCLUDES


51 
	~"¨ch/bp°ru˘.h
"

53 
PACK_STRUCT_BEGIN


54 
	sù_addr_∑cked
 {

55 
PACK_STRUCT_FIELD
(
u32_t
 
addr
);

56 } 
PACK_STRUCT_STRUCT
;

57 
PACK_STRUCT_END


58 #ifde‡
PACK_STRUCT_USE_INCLUDES


59 
	~"¨ch/ï°ru˘.h
"

64 
ù_addr
 
	tù_addr_t
;

65 
ù_addr_∑cked
 
	tù_addr_p_t
;

71 #ifde‡
PACK_STRUCT_USE_INCLUDES


72 
	~"¨ch/bp°ru˘.h
"

74 
PACK_STRUCT_BEGIN


75 
	sù_addr2
 {

76 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

77 } 
PACK_STRUCT_STRUCT
;

78 
PACK_STRUCT_END


79 #ifde‡
PACK_STRUCT_USE_INCLUDES


80 
	~"¨ch/ï°ru˘.h
"

84 
√tif
;

86 c⁄° 
ù_addr_t
 
ù_addr_™y
;

87 c⁄° 
ù_addr_t
 
ù_addr_brﬂdˇ°
;

92 
	#IP_ADDR_ANY
 ((
ù_addr_t
 *)&
ù_addr_™y
)

	)

93 
	#IP_ADDR_BROADCAST
 ((
ù_addr_t
 *)&
ù_addr_brﬂdˇ°
)

	)

96 
	#IPADDR_NONE
 ((
u32_t
)0xffffffffUL)

	)

98 
	#IPADDR_LOOPBACK
 ((
u32_t
)0x7f000001UL)

	)

100 
	#IPADDR_ANY
 ((
u32_t
)0x00000000UL)

	)

102 
	#IPADDR_BROADCAST
 ((
u32_t
)0xffffffffUL)

	)

108 
	#IP_CLASSA
(
a
Ë((((
u32_t
)◊)Ë& 0x80000000ULË=0)

	)

109 
	#IP_CLASSA_NET
 0xff000000

	)

110 
	#IP_CLASSA_NSHIFT
 24

	)

111 
	#IP_CLASSA_HOST
 (0xfffffff‡& ~
IP_CLASSA_NET
)

	)

112 
	#IP_CLASSA_MAX
 128

	)

114 
	#IP_CLASSB
(
a
Ë((((
u32_t
)◊)Ë& 0xc0000000ULË=0x80000000UL)

	)

115 
	#IP_CLASSB_NET
 0xffff0000

	)

116 
	#IP_CLASSB_NSHIFT
 16

	)

117 
	#IP_CLASSB_HOST
 (0xfffffff‡& ~
IP_CLASSB_NET
)

	)

118 
	#IP_CLASSB_MAX
 65536

	)

120 
	#IP_CLASSC
(
a
Ë((((
u32_t
)◊)Ë& 0xe0000000ULË=0xc0000000UL)

	)

121 
	#IP_CLASSC_NET
 0xffffff00

	)

122 
	#IP_CLASSC_NSHIFT
 8

	)

123 
	#IP_CLASSC_HOST
 (0xfffffff‡& ~
IP_CLASSC_NET
)

	)

125 
	#IP_CLASSD
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xe0000000UL)

	)

126 
	#IP_CLASSD_NET
 0xf0000000

	)

127 
	#IP_CLASSD_NSHIFT
 28

	)

128 
	#IP_CLASSD_HOST
 0x0ffffff‡

	)

129 
	#IP_MULTICAST
(
a
Ë
	`IP_CLASSD
◊)

	)

131 
	#IP_EXPERIMENTAL
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

132 
	#IP_BADCLASS
(
a
Ë(((
u32_t
)◊Ë& 0xf0000000ULË=0xf0000000UL)

	)

134 
	#IP_LOOPBACKNET
 127

	)

137 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


139 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

140 (
ùaddr
)->
addr
 = ((
u32_t
)((
a
) & 0xff) << 24) | \

141 ((
u32_t
)((
b
) & 0xff) << 16) | \

142 ((
u32_t
)((
c
) & 0xff) << 8) | \

143 (
u32_t
)((
d
Ë& 0xff)

	)

147 
	#IP4_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
) \

148 (
ùaddr
)->
addr
 = ((
u32_t
)((
d
) & 0xff) << 24) | \

149 ((
u32_t
)((
c
) & 0xff) << 16) | \

150 ((
u32_t
)((
b
) & 0xff) << 8) | \

151 (
u32_t
)((
a
Ë& 0xff)

	)

157 #i‚de‡
IPADDR2_COPY


158 
	#IPADDR2_COPY
(
de°
, 
§c
Ë
	`SMEMCPY
(de°, src, (
ù_addr_t
))

	)

162 
	#ù_addr_c›y
(
de°
, 
§c
Ë((de°).
addr
 = (§c).addr)

	)

164 
	#ù_addr_£t
(
de°
, 
§c
Ë((de°)->
addr
 = \

165 ((
§c
Ë=
NULL
 ? 0 : \

166 (
§c
)->
addr
))

	)

168 
	#ù_addr_£t_zîo
(
ùaddr
Ë((ùaddr)->
addr
 = 0)

	)

170 
	#ù_addr_£t_™y
(
ùaddr
Ë((ùaddr)->
addr
 = 
IPADDR_ANY
)

	)

172 
	#ù_addr_£t_lo›back
(
ùaddr
Ë((ùaddr)->
addr
 = 
	`PP_HTONL
(
IPADDR_LOOPBACK
))

	)

175 
	#ù_addr_£t_ht⁄
(
de°
, 
§c
Ë((de°)->
addr
 = \

176 ((
§c
Ë=
NULL
 ? 0:\

177 
	`ht⁄l
((
§c
)->
addr
)))

	)

179 
	#ù4_addr_£t_u32
(
de°_ùaddr
, 
§c_u32
Ë((de°_ùaddr)->
addr
 = (§c_u32))

	)

181 
	#ù4_addr_gë_u32
(
§c_ùaddr
Ë((§c_ùaddr)->
addr
)

	)

184 
	#ù_addr_gë_√tw‹k
(
èrgë
, 
ho°
, 
√tmask
Ë(—¨gë)->
addr
 = ((ho°)->addrË& (“ëmask)->addr))

	)

194 
	#ù_addr_√tcmp
(
addr1
, 
addr2
, 
mask
Ë((◊ddr1)->
addr
 & \

195 (
mask
)->
addr
) == \

196 ((
addr2
)->
addr
 & \

197 (
mask
)->
addr
))

	)

198 
	#ù_addr_cmp
(
addr1
, 
addr2
Ë(◊ddr1)->
addr
 =◊ddr2)->addr)

	)

200 
	#ù_addr_ißny
(
addr1
Ë(◊ddr1Ë=
NULL
 || (addr1)->
addr
 =
IPADDR_ANY
)

	)

202 
	#ù_addr_isbrﬂdˇ°
(
ùaddr
, 
√tif
Ë
	`ù4_addr_isbrﬂdˇ°
((ùaddr)->
addr
, (√tif))

	)

203 
u8_t
 
ù4_addr_isbrﬂdˇ°
(
u32_t
 
addr
, c⁄° 
√tif
 *netif);

205 
	#ù_addr_√tmask_vÆid
(
√tmask
Ë
	`ù4_addr_√tmask_vÆid
(“ëmask)->
addr
)

	)

206 
u8_t
 
ù4_addr_√tmask_vÆid
(
u32_t
 
√tmask
);

208 
	#ù_addr_ismu…iˇ°
(
addr1
Ë((◊ddr1)->
addr
 & 
	`PP_HTONL
(0xf0000000UL)Ë=PP_HTONL(0xe0000000UL))

	)

210 
	#ù_addr_i¶ökloˇl
(
addr1
Ë((◊ddr1)->
addr
 & 
	`PP_HTONL
(0xffff0000UL)Ë=PP_HTONL(0xa9„0000UL))

	)

212 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

213 
	`LWIP_DEBUGF
(
debug
, ("%" 
U16_F
 ".%" U16_F ".%" U16_F ".%" U16_F, \

214 
ùaddr
 !
NULL
 ? 
	`ù4_addr1_16
(ipaddr) : 0, \

215 
ùaddr
 !
NULL
 ? 
	`ù4_addr2_16
(ipaddr) : 0, \

216 
ùaddr
 !
NULL
 ? 
	`ù4_addr3_16
(ipaddr) : 0, \

217 
ùaddr
 !
NULL
 ? 
	`ù4_addr4_16
(ùaddrË: 0))

	)

220 
	#ù4_addr1
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[0])

	)

221 
	#ù4_addr2
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[1])

	)

222 
	#ù4_addr3
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[2])

	)

223 
	#ù4_addr4
(
ùaddr
Ë(((
u8_t
*)(ùaddr))[3])

	)

226 
	#ù4_addr1_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr1
(ùaddr))

	)

227 
	#ù4_addr2_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr2
(ùaddr))

	)

228 
	#ù4_addr3_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr3
(ùaddr))

	)

229 
	#ù4_addr4_16
(
ùaddr
Ë((
u16_t
)
	`ù4_addr4
(ùaddr))

	)

232 
	#ù_¡ﬂ
(
ùaddr
Ë
	`ùaddr_¡ﬂ
(ùaddr)

	)

234 
u32_t
 
ùaddr_addr
(c⁄° *
˝
);

235 
ùaddr_©⁄
(c⁄° *
˝
, 
ù_addr_t
 *
addr
);

237 *
ùaddr_¡ﬂ
(c⁄° 
ù_addr_t
 *
addr
);

238 *
ùaddr_¡ﬂ_r
(c⁄° 
ù_addr_t
 *
addr
, *
buf
, 
buÊí
);

240 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv4/lwip/ip_frag.h

33 #i‚de‡
__LWIP_IP_FRAG_H__


34 
	#__LWIP_IP_FRAG_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

38 
	~"lwù/pbuf.h
"

39 
	~"lwù/√tif.h
"

40 
	~"lwù/ù_addr.h
"

41 
	~"lwù/ù.h
"

43 #ifde‡
__˝lu•lus


47 #i‡
IP_REASSEMBLY


49 
	#IP_TMR_INTERVAL
 1000

	)

54 
	sù_ªassd©a
 {

55 
ù_ªassd©a
 *
√xt
;

56 
pbuf
 *
p
;

57 
ù_hdr
 
ùhdr
;

58 
u16_t
 
d©agøm_Àn
;

59 
u8_t
 
Êags
;

60 
u8_t
 
timî
;

63 
ù_ªass_öô
();

64 
ù_ªass_tmr
();

65 
pbuf
 * 
ù_ªass
(pbu‡*
p
);

68 #i‡
IP_FRAG


69 #i‡!
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF


73 
	spbuf_cu°om_ªf
 {

75 
pbuf_cu°om
 
	mpc
;

77 
pbuf
 *
	m‹igöÆ
;

81 
îr_t
 
ù_‰ag
(
pbuf
 *
p
, 
√tif
 *√tif, 
ù_addr_t
 *
de°
);

84 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv6/lwip/icmp.h

32 #i‚de‡
__LWIP_ICMP_H__


33 
	#__LWIP_ICMP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_ICMP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

42 #ifde‡
__˝lu•lus


46 
	#ICMP6_DUR
 1

	)

47 
	#ICMP6_TE
 3

	)

48 
	#ICMP6_ECHO
 128

	)

49 
	#ICMP6_ER
 129

	)

52 
	eicmp_dur_ty≥
 {

53 
ICMP_DUR_NET
 = 0,

54 
ICMP_DUR_HOST
 = 1,

55 
ICMP_DUR_PROTO
 = 2,

56 
ICMP_DUR_PORT
 = 3,

57 
ICMP_DUR_FRAG
 = 4,

58 
ICMP_DUR_SR
 = 5

61 
	eicmp_ã_ty≥
 {

62 
ICMP_TE_TTL
 = 0,

63 
ICMP_TE_FRAG
 = 1

66 
icmp_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

68 
icmp_de°_uƒóch
(
pbuf
 *
p
, 
icmp_dur_ty≥
 
t
);

69 
icmp_time_ex˚eded
(
pbuf
 *
p
, 
icmp_ã_ty≥
 
t
);

71 
	sicmp_echo_hdr
 {

72 
u8_t
 
ty≥
;

73 
u8_t
 
icode
;

74 
u16_t
 
chksum
;

75 
u16_t
 
id
;

76 
u16_t
 
£qno
;

79 
	sicmp_dur_hdr
 {

80 
u8_t
 
ty≥
;

81 
u8_t
 
icode
;

82 
u16_t
 
chksum
;

83 
u32_t
 
unu£d
;

86 
	sicmp_ã_hdr
 {

87 
u8_t
 
ty≥
;

88 
u8_t
 
icode
;

89 
u16_t
 
chksum
;

90 
u32_t
 
unu£d
;

93 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv6/lwip/inet.h

32 #i‚de‡
__LWIP_INET_H__


33 
	#__LWIP_INET_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


43 
u16_t
 
öë_chksum
(*
d©a
, u16_à
Àn
);

44 
u16_t
 
öë_chksum_pbuf
(
pbuf
 *
p
);

45 
u16_t
 
öë_chksum_p£udo
(
pbuf
 *
p
,

46 
ù_addr
 *
§c
, ù_add∏*
de°
,

47 
u8_t
 
¥Ÿo
, 
u32_t
 
¥Ÿo_Àn
);

49 
u32_t
 
öë_addr
(c⁄° *
˝
);

50 
s8_t
 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

52 #i‚de‡
_MACHINE_ENDIAN_H_


53 #i‚de‡
_NETINET_IN_H


54 #i‚de‡
_LINUX_BYTEORDER_GENERIC_H


55 
u16_t
 
ht⁄s
(u16_à
n
);

56 
u16_t
 
¡ohs
(u16_à
n
);

57 
u32_t
 
ht⁄l
(u32_à
n
);

58 
u32_t
 
¡ohl
(u32_à
n
);

63 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv6/lwip/ip.h

32 #i‚de‡
__LWIP_IP_H__


33 
	#__LWIP_IP_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/def.h
"

37 
	~"lwù/pbuf.h
"

38 
	~"lwù/ù_addr.h
"

40 
	~"lwù/îr.h
"

42 #ifde‡
__˝lu•lus


46 
	#IP_HLEN
 40

	)

48 
	#IP_PROTO_ICMP
 58

	)

49 
	#IP_PROTO_UDP
 17

	)

50 
	#IP_PROTO_UDPLITE
 136

	)

51 
	#IP_PROTO_TCP
 6

	)

56 #ifde‡
IP_HDRINCL


57 #unde‡
IP_HDRINCL


59 
	#IP_HDRINCL
 
NULL


	)

61 #i‡
LWIP_NETIF_HWADDRHINT


62 
	#IP_PCB_ADDRHINT
 ;
u8_t
 
addr_höt


	)

64 
	#IP_PCB_ADDRHINT


	)

71 
	#IP_PCB
 
ù_addr
 
loˇl_ù
; \

72 
ù_addr
 
ªmŸe_ù
; \

74 
u16_t
 
so_›ti⁄s
; \

76 
u8_t
 
tos
; \

78 
u8_t
 
âl
; \

80 
IP_PCB_ADDRHINT


	)

84 
	sù_hdr
 {

85 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


86 
u8_t
 
t˛ass1
:4, 
v
:4;

87 
u8_t
 
Êow1
:4, 
t˛ass2
:4;

89 
u8_t
 
v
:4, 
t˛ass1
:4;

90 
u8_t
 
t˛ass2
:8, 
Êow1
:4;

92 
u16_t
 
Êow2
;

93 
u16_t
 
Àn
;

94 
u8_t
 
√xthdr
;

95 
u8_t
 
h›lim
;

96 
ù_addr
 
§c
, 
de°
;

99 
	#IPH_PROTO
(
hdr
Ë(
ùhdr
->
√xthdr
)

	)

101 
ù_öô
();

103 
	~"lwù/√tif.h
"

105 
√tif
 *
ù_rouã
(
ù_addr
 *
de°
);

107 
ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

110 
îr_t
 
ù_ouçut
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

111 
u8_t
 
âl
, u8_à
¥Ÿo
);

113 
îr_t
 
ù_ouçut_if
(
pbuf
 *
p
, 
ù_addr
 *
§c
, ù_add∏*
de°
,

114 
u8_t
 
âl
, u8_à
¥Ÿo
,

115 
√tif
 *netif);

117 
	#ù_cuºít_√tif
(Ë
NULL


	)

118 
	#ù_cuºít_hódî
(Ë
NULL


	)

120 #i‡
IP_DEBUG


121 
ù_debug_¥öt
(
pbuf
 *
p
);

124 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/ipv6/lwip/ip_addr.h

32 #i‚de‡
__LWIP_IP_ADDR_H__


33 
	#__LWIP_IP_ADDR_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 
	#IP_ADDR_ANY
 0

	)

43 #ifde‡
PACK_STRUCT_USE_INCLUDES


44 
	~"¨ch/bp°ru˘.h
"

46 
PACK_STRUCT_BEGIN


47 
	sù_addr
 {

48 
PACK_STRUCT_FIELD
(
u32_t
 
addr
[4]);

49 } 
PACK_STRUCT_STRUCT
;

50 
PACK_STRUCT_END


51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/ï°ru˘.h
"

59 #ifde‡
PACK_STRUCT_USE_INCLUDES


60 
	~"¨ch/bp°ru˘.h
"

62 
PACK_STRUCT_BEGIN


63 
	sù_addr2
 {

64 
PACK_STRUCT_FIELD
(
u16_t
 
addrw
[2]);

65 } 
PACK_STRUCT_STRUCT
;

66 
PACK_STRUCT_END


67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/ï°ru˘.h
"

71 
	#IP6_ADDR
(
ùaddr
, 
a
,
b
,
c
,
d
,
e
,
f
,
g
,
h
Ëdÿ{ (ùaddr)->
addr
[0] = 
	`ht⁄l
((
u32_t
)((a & 0xffff) << 16) | (b & 0xffff)); \

72 (
ùaddr
)->
addr
[1] = 
	`ht⁄l
(((
c
 & 0xffffË<< 16Ë| (
d
 & 0xffff)); \

73 (
ùaddr
)->
addr
[2] = 
	`ht⁄l
(((
e
 & 0xffffË<< 16Ë| (
f
 & 0xffff)); \

74 (
ùaddr
)->
addr
[3] = 
	`ht⁄l
(((
g
 & 0xffffË<< 16Ë| (
h
 & 0xffff)); } 0)

	)

76 
u8_t
 
ù_addr_√tcmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
,

77 
ù_addr
 *
mask
);

78 
u8_t
 
ù_addr_cmp
(
ù_addr
 *
addr1
, ù_add∏*
addr2
);

79 
ù_addr_£t
(
ù_addr
 *
de°
, ù_add∏*
§c
);

80 
u8_t
 
ù_addr_ißny
(
ù_addr
 *
addr
);

82 
	#ù_addr_debug_¥öt
(
debug
, 
ùaddr
) \

83 
	`LWIP_DEBUGF
(
debug
, ("%"
X32_F
":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F":%"X32_F"\n", \

84 (
	`¡ohl
(
ùaddr
->
addr
[0]) >> 16) & 0xffff, \

85 
	`¡ohl
(
ùaddr
->
addr
[0]) & 0xffff, \

86 (
	`¡ohl
(
ùaddr
->
addr
[1]) >> 16) & 0xffff, \

87 
	`¡ohl
(
ùaddr
->
addr
[1]) & 0xffff, \

88 (
	`¡ohl
(
ùaddr
->
addr
[2]) >> 16) & 0xffff, \

89 
	`¡ohl
(
ùaddr
->
addr
[2]) & 0xffff, \

90 (
	`¡ohl
(
ùaddr
->
addr
[3]) >> 16) & 0xffff, \

91 
	`¡ohl
(
ùaddr
->
addr
[3]Ë& 0xffff));

	)

93 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/api.h

32 #i‚de‡
__LWIP_API_H__


33 
	#__LWIP_API_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/√tbuf.h
"

42 
	~"lwù/sys.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


55 
	#NETCONN_NOFLAG
 0x00

	)

56 
	#NETCONN_NOCOPY
 0x00

	)

57 
	#NETCONN_COPY
 0x01

	)

58 
	#NETCONN_MORE
 0x02

	)

59 
	#NETCONN_DONTBLOCK
 0x04

	)

65 
	#NETCONN_FLAG_WRITE_DELAYED
 0x01

	)

67 
	#NETCONN_FLAG_NON_BLOCKING
 0x02

	)

69 
	#NETCONN_FLAG_IN_NONBLOCKING_CONNECT
 0x04

	)

72 
	#NETCONN_FLAG_NO_AUTO_RECVED
 0x08

	)

75 
	#NETCONN_FLAG_CHECK_WRITESPACE
 0x10

	)

79 
	#NETCONNTYPE_GROUP
(
t
Ë—&0xF0)

	)

80 
	#NETCONNTYPE_DATAGRAM
(
t
Ë—&0xE0)

	)

83 
	e√tc⁄n_ty≥
 {

84 
NETCONN_INVALID
 = 0,

86 
NETCONN_TCP
 = 0x10,

88 
NETCONN_UDP
 = 0x20,

89 
NETCONN_UDPLITE
 = 0x21,

90 
NETCONN_UDPNOCHKSUM
= 0x22,

92 
NETCONN_RAW
 = 0x40

97 
	e√tc⁄n_°©e
 {

98 
NETCONN_NONE
,

99 
NETCONN_WRITE
,

100 
NETCONN_LISTEN
,

101 
NETCONN_CONNECT
,

102 
NETCONN_CLOSE


106 
	e√tc⁄n_evt
 {

107 
NETCONN_EVT_RCVPLUS
,

108 
NETCONN_EVT_RCVMINUS
,

109 
NETCONN_EVT_SENDPLUS
,

110 
NETCONN_EVT_SENDMINUS
,

111 
NETCONN_EVT_ERROR


114 #i‡
LWIP_IGMP


116 
	e√tc⁄n_igmp
 {

117 
NETCONN_JOIN
,

118 
NETCONN_LEAVE


123 
ù_pcb
;

124 
t˝_pcb
;

125 
udp_pcb
;

126 
øw_pcb
;

127 
√tc⁄n
;

128 
≠i_msg_msg
;

131 (* 
√tc⁄n_ˇŒback
)(
	t√tc⁄n
 *, 
	t√tc⁄n_evt
, 
	tu16_t
 
	tÀn
);

134 
	s√tc⁄n
 {

136 
√tc⁄n_ty≥
 
ty≥
;

138 
√tc⁄n_°©e
 
°©e
;

141 
ù_pcb
 *
ù
;

142 
t˝_pcb
 *
t˝
;

143 
udp_pcb
 *
udp
;

144 
øw_pcb
 *
øw
;

145 } 
pcb
;

147 
îr_t
 
œ°_îr
;

149 
sys_£m_t
 
›_com∂ëed
;

152 
sys_mbox_t
 
ªcvmbox
;

153 #i‡
LWIP_TCP


156 
sys_mbox_t
 
ac˚±mbox
;

159 #i‡
LWIP_SOCKET


160 
sockë
;

162 #i‡
LWIP_SO_SNDTIMEO


165 
s32_t
 
£nd_timeout
;

167 #i‡
LWIP_SO_RCVTIMEO


170 
ªcv_timeout
;

172 #i‡
LWIP_SO_RCVBUF


175 
ªcv_bufsize
;

179 
s16_t
 
ªcv_avaû
;

182 
u8_t
 
Êags
;

183 #i‡
LWIP_TCP


186 
size_t
 
wrôe_off£t
;

190 
≠i_msg_msg
 *
cuºít_msg
;

193 
√tc⁄n_ˇŒback
 
ˇŒback
;

197 
	#API_EVENT
(
c
,
e
,
l
Ëi‡(c->
ˇŒback
) { \

198 (*
c
->
ˇŒback
)(c, 
e
, 
l
); \

199 }

	)

202 
	#NETCONN_SET_SAFE_ERR
(
c⁄n
, 
îr
) do { \

203 
	`SYS_ARCH_DECL_PROTECT
(
Àv
); \

204 
	`SYS_ARCH_PROTECT
(
Àv
); \

205 i‡(!
	`ERR_IS_FATAL
((
c⁄n
)->
œ°_îr
)) { \

206 (
c⁄n
)->
œ°_îr
 = 
îr
; \

208 
	`SYS_ARCH_UNPROTECT
(
Àv
); \

209 } 0);

	)

212 
	#√tc⁄n_√w
(
t
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, 
NULL
)

	)

213 
	#√tc⁄n_√w_wôh_ˇŒback
(
t
, 
c
Ë
	`√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
—, 0, c)

	)

215 
√tc⁄n
 *
√tc⁄n_√w_wôh_¥Ÿo_™d_ˇŒback
(
√tc⁄n_ty≥
 
t
, 
u8_t
 
¥Ÿo
,

216 
√tc⁄n_ˇŒback
 
ˇŒback
);

217 
îr_t
 
√tc⁄n_dñëe
(
√tc⁄n
 *
c⁄n
);

219 
	#√tc⁄n_ty≥
(
c⁄n
Ë(c⁄n->
ty≥
)

	)

221 
îr_t
 
√tc⁄n_gëaddr
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
,

222 
u16_t
 *
p‹t
, 
u8_t
 
loˇl
);

223 
	#√tc⁄n_≥î
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,0)

	)

224 
	#√tc⁄n_addr
(
c
,
i
,
p
Ë
	`√tc⁄n_gëaddr
(c,i,p,1)

	)

226 
îr_t
 
√tc⁄n_böd
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

227 
îr_t
 
√tc⁄n_c⁄√˘
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

228 
îr_t
 
√tc⁄n_disc⁄√˘
 (
√tc⁄n
 *
c⁄n
);

229 
îr_t
 
√tc⁄n_li°í_wôh_backlog
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
backlog
);

230 
	#√tc⁄n_li°í
(
c⁄n
Ë
	`√tc⁄n_li°í_wôh_backlog
(c⁄n, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

231 
îr_t
 
√tc⁄n_ac˚±
(
√tc⁄n
 *
c⁄n
, √tc⁄¿**
√w_c⁄n
);

232 
îr_t
 
√tc⁄n_ªcv
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 **
√w_buf
);

233 
îr_t
 
√tc⁄n_ªcv_t˝_pbuf
(
√tc⁄n
 *
c⁄n
, 
pbuf
 **
√w_buf
);

234 
√tc⁄n_ªcved
(
√tc⁄n
 *
c⁄n
, 
u32_t
 
Àngth
);

235 
îr_t
 
√tc⁄n_£ndto
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
,

236 
ù_addr_t
 *
addr
, 
u16_t
 
p‹t
);

237 
îr_t
 
√tc⁄n_£nd
(
√tc⁄n
 *
c⁄n
, 
√tbuf
 *
buf
);

238 
îr_t
 
√tc⁄n_wrôe_∑πly
(
√tc⁄n
 *
c⁄n
, c⁄° *
d©≠å
, 
size_t
 
size
,

239 
u8_t
 
≠iÊags
, 
size_t
 *
byãs_wrôãn
);

240 
	#√tc⁄n_wrôe
(
c⁄n
, 
d©≠å
, 
size
, 
≠iÊags
) \

241 
	`√tc⁄n_wrôe_∑πly
(
c⁄n
, 
d©≠å
, 
size
, 
≠iÊags
, 
NULL
)

	)

242 
îr_t
 
√tc⁄n_˛o£
(
√tc⁄n
 *
c⁄n
);

243 
îr_t
 
√tc⁄n_shutdown
(
√tc⁄n
 *
c⁄n
, 
u8_t
 
shut_rx
, u8_à
shut_tx
);

245 #i‡
LWIP_IGMP


246 
îr_t
 
√tc⁄n_joö_Àave_group
(
√tc⁄n
 *
c⁄n
, 
ù_addr_t
 *
mu…üddr
,

247 
ù_addr_t
 *
√tif_addr
, 
√tc⁄n_igmp
 
joö_‹_Àave
);

249 #i‡
LWIP_DNS


250 
îr_t
 
√tc⁄n_gëho°by«me
(c⁄° *
«me
, 
ù_addr_t
 *
addr
);

253 
	#√tc⁄n_îr
(
c⁄n
Ë((c⁄n)->
œ°_îr
)

	)

254 
	#√tc⁄n_ªcv_bufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

257 
	#√tc⁄n_£t_n⁄blockög
(
c⁄n
, 
vÆ
) do { if(val) { \

258 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_NON_BLOCKING
; \

260 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_NON_BLOCKING
; }} 0)

	)

262 
	#√tc⁄n_is_n⁄blockög
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_NON_BLOCKING
Ë!0)

	)

265 
	#√tc⁄n_£t_nﬂut‹ecved
(
c⁄n
, 
vÆ
) do { if(val) { \

266 (
c⁄n
)->
Êags
 |
NETCONN_FLAG_NO_AUTO_RECVED
; \

268 (
c⁄n
)->
Êags
 &~ 
NETCONN_FLAG_NO_AUTO_RECVED
; }} 0)

	)

270 
	#√tc⁄n_gë_nﬂut‹ecved
(
c⁄n
Ë(((c⁄n)->
Êags
 & 
NETCONN_FLAG_NO_AUTO_RECVED
Ë!0)

	)

272 #i‡
LWIP_SO_SNDTIMEO


274 
	#√tc⁄n_£t_£ndtimeout
(
c⁄n
, 
timeout
Ë((c⁄n)->
£nd_timeout
 = (timeout))

	)

276 
	#√tc⁄n_gë_£ndtimeout
(
c⁄n
Ë((c⁄n)->
£nd_timeout
)

	)

278 #i‡
LWIP_SO_RCVTIMEO


280 
	#√tc⁄n_£t_ªcvtimeout
(
c⁄n
, 
timeout
Ë((c⁄n)->
ªcv_timeout
 = (timeout))

	)

282 
	#√tc⁄n_gë_ªcvtimeout
(
c⁄n
Ë((c⁄n)->
ªcv_timeout
)

	)

284 #i‡
LWIP_SO_RCVBUF


286 
	#√tc⁄n_£t_ªcvbufsize
(
c⁄n
, 
ªcvbufsize
Ë((c⁄n)->
ªcv_bufsize
 = (ªcvbufsize))

	)

288 
	#√tc⁄n_gë_ªcvbufsize
(
c⁄n
Ë((c⁄n)->
ªcv_bufsize
)

	)

291 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/api_msg.h

32 #i‚de‡
__LWIP_API_MSG_H__


33 
	#__LWIP_API_MSG_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_NETCONN


39 
	~<°ddef.h
>

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/igmp.h
"

45 
	~"lwù/≠i.h
"

47 #ifde‡
__˝lu•lus


52 
	#NETCONN_SHUT_RD
 1

	)

53 
	#NETCONN_SHUT_WR
 2

	)

54 
	#NETCONN_SHUT_RDWR
 (
NETCONN_SHUT_RD
 | 
NETCONN_SHUT_WR
)

	)

62 
	s≠i_msg_msg
 {

65 
√tc⁄n
 *
c⁄n
;

67 
îr_t
 
îr
;

71 
√tbuf
 *
b
;

74 
u8_t
 
¥Ÿo
;

75 } 
n
;

78 
ù_addr_t
 *
ùaddr
;

79 
u16_t
 
p‹t
;

80 } 
bc
;

83 
ù_addr_t
 *
ùaddr
;

84 
u16_t
 *
p‹t
;

85 
u8_t
 
loˇl
;

86 } 
ad
;

89 c⁄° *
d©≠å
;

90 
size_t
 
Àn
;

91 
u8_t
 
≠iÊags
;

92 #i‡
LWIP_SO_SNDTIMEO


93 
u32_t
 
time_°¨ãd
;

95 } 
w
;

98 
u32_t
 
Àn
;

99 } 
r
;

102 
u8_t
 
shut
;

103 } 
sd
;

104 #i‡
LWIP_IGMP


107 
ù_addr_t
 *
mu…üddr
;

108 
ù_addr_t
 *
√tif_addr
;

109 
√tc⁄n_igmp
 
joö_‹_Àave
;

110 } 
jl
;

112 #i‡
TCP_LISTEN_BACKLOG


114 
u8_t
 
backlog
;

115 } 
lb
;

117 } 
msg
;

123 
	s≠i_msg
 {

125 (* 
fun˘i⁄
)(
≠i_msg_msg
 *
msg
);

127 
≠i_msg_msg
 
msg
;

130 #i‡
LWIP_DNS


135 
	sdns_≠i_msg
 {

137 c⁄° *
«me
;

139 
ù_addr_t
 *
addr
;

142 
sys_£m_t
 *
£m
;

144 
îr_t
 *
îr
;

148 
do_√wc⁄n
 ( 
≠i_msg_msg
 *
msg
);

149 
do_dñc⁄n
 ( 
≠i_msg_msg
 *
msg
);

150 
do_böd
 ( 
≠i_msg_msg
 *
msg
);

151 
do_c⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

152 
do_disc⁄√˘
 ( 
≠i_msg_msg
 *
msg
);

153 
do_li°í
 ( 
≠i_msg_msg
 *
msg
);

154 
do_£nd
 ( 
≠i_msg_msg
 *
msg
);

155 
do_ªcv
 ( 
≠i_msg_msg
 *
msg
);

156 
do_wrôe
 ( 
≠i_msg_msg
 *
msg
);

157 
do_gëaddr
 ( 
≠i_msg_msg
 *
msg
);

158 
do_˛o£
 ( 
≠i_msg_msg
 *
msg
);

159 
do_shutdown
 ( 
≠i_msg_msg
 *
msg
);

160 #i‡
LWIP_IGMP


161 
do_joö_Àave_group
–
≠i_msg_msg
 *
msg
);

164 #i‡
LWIP_DNS


165 
do_gëho°by«me
(*
¨g
);

168 
√tc⁄n
* 
√tc⁄n_Æloc
(
√tc⁄n_ty≥
 
t
, 
√tc⁄n_ˇŒback
 
ˇŒback
);

169 
√tc⁄n_‰ì
(
√tc⁄n
 *
c⁄n
);

171 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/arch.h

32 #i‚de‡
__LWIP_ARCH_H__


33 
	#__LWIP_ARCH_H__


	)

35 #i‚de‡
LITTLE_ENDIAN


36 
	#LITTLE_ENDIAN
 1234

	)

39 #i‚de‡
BIG_ENDIAN


40 
	#BIG_ENDIAN
 4321

	)

43 
	~"¨ch/cc.h
"

46 #i‚de‡
SZT_F


47 
	#SZT_F
 
U32_F


	)

51 #i‚de‡
X8_F


52 
	#X8_F
 "02x"

	)

55 #ifde‡
__˝lu•lus


59 #i‚de‡
PACK_STRUCT_BEGIN


60 
	#PACK_STRUCT_BEGIN


	)

63 #i‚de‡
PACK_STRUCT_END


64 
	#PACK_STRUCT_END


	)

67 #i‚de‡
PACK_STRUCT_FIELD


68 
	#PACK_STRUCT_FIELD
(
x
Ë
	)
x

72 #i‚de‡
LWIP_UNUSED_ARG


73 
	#LWIP_UNUSED_ARG
(
x
Ë()
	)
x

77 #ifde‡
LWIP_PROVIDE_ERRNO


79 
	#EPERM
 1

	)

80 
	#ENOENT
 2

	)

81 
	#ESRCH
 3

	)

82 
	#EINTR
 4

	)

83 
	#EIO
 5

	)

84 
	#ENXIO
 6

	)

85 
	#E2BIG
 7

	)

86 
	#ENOEXEC
 8

	)

87 
	#EBADF
 9

	)

88 
	#ECHILD
 10

	)

89 
	#EAGAIN
 11

	)

90 
	#ENOMEM
 12

	)

91 
	#EACCES
 13

	)

92 
	#EFAULT
 14

	)

93 
	#ENOTBLK
 15

	)

94 
	#EBUSY
 16

	)

95 
	#EEXIST
 17

	)

96 
	#EXDEV
 18

	)

97 
	#ENODEV
 19

	)

98 
	#ENOTDIR
 20

	)

99 
	#EISDIR
 21

	)

100 
	#EINVAL
 22

	)

101 
	#ENFILE
 23

	)

102 
	#EMFILE
 24

	)

103 
	#ENOTTY
 25

	)

104 
	#ETXTBSY
 26

	)

105 
	#EFBIG
 27

	)

106 
	#ENOSPC
 28

	)

107 
	#ESPIPE
 29

	)

108 
	#EROFS
 30

	)

109 
	#EMLINK
 31

	)

110 
	#EPIPE
 32

	)

111 
	#EDOM
 33

	)

112 
	#ERANGE
 34

	)

113 
	#EDEADLK
 35

	)

114 
	#ENAMETOOLONG
 36

	)

115 
	#ENOLCK
 37

	)

116 
	#ENOSYS
 38

	)

117 
	#ENOTEMPTY
 39

	)

118 
	#ELOOP
 40

	)

119 
	#EWOULDBLOCK
 
EAGAIN


	)

120 
	#ENOMSG
 42

	)

121 
	#EIDRM
 43

	)

122 
	#ECHRNG
 44

	)

123 
	#EL2NSYNC
 45

	)

124 
	#EL3HLT
 46

	)

125 
	#EL3RST
 47

	)

126 
	#ELNRNG
 48

	)

127 
	#EUNATCH
 49

	)

128 
	#ENOCSI
 50

	)

129 
	#EL2HLT
 51

	)

130 
	#EBADE
 52

	)

131 
	#EBADR
 53

	)

132 
	#EXFULL
 54

	)

133 
	#ENOANO
 55

	)

134 
	#EBADRQC
 56

	)

135 
	#EBADSLT
 57

	)

137 
	#EDEADLOCK
 
EDEADLK


	)

139 
	#EBFONT
 59

	)

140 
	#ENOSTR
 60

	)

141 
	#ENODATA
 61

	)

142 
	#ETIME
 62

	)

143 
	#ENOSR
 63

	)

144 
	#ENONET
 64

	)

145 
	#ENOPKG
 65

	)

146 
	#EREMOTE
 66

	)

147 
	#ENOLINK
 67

	)

148 
	#EADV
 68

	)

149 
	#ESRMNT
 69

	)

150 
	#ECOMM
 70

	)

151 
	#EPROTO
 71

	)

152 
	#EMULTIHOP
 72

	)

153 
	#EDOTDOT
 73

	)

154 
	#EBADMSG
 74

	)

155 
	#EOVERFLOW
 75

	)

156 
	#ENOTUNIQ
 76

	)

157 
	#EBADFD
 77

	)

158 
	#EREMCHG
 78

	)

159 
	#ELIBACC
 79

	)

160 
	#ELIBBAD
 80

	)

161 
	#ELIBSCN
 81

	)

162 
	#ELIBMAX
 82

	)

163 
	#ELIBEXEC
 83

	)

164 
	#EILSEQ
 84

	)

165 
	#ERESTART
 85

	)

166 
	#ESTRPIPE
 86

	)

167 
	#EUSERS
 87

	)

168 
	#ENOTSOCK
 88

	)

169 
	#EDESTADDRREQ
 89

	)

170 
	#EMSGSIZE
 90

	)

171 
	#EPROTOTYPE
 91

	)

172 
	#ENOPROTOOPT
 92

	)

173 
	#EPROTONOSUPPORT
 93

	)

174 
	#ESOCKTNOSUPPORT
 94

	)

175 
	#EOPNOTSUPP
 95

	)

176 
	#EPFNOSUPPORT
 96

	)

177 
	#EAFNOSUPPORT
 97

	)

178 
	#EADDRINUSE
 98

	)

179 
	#EADDRNOTAVAIL
 99

	)

180 
	#ENETDOWN
 100

	)

181 
	#ENETUNREACH
 101

	)

182 
	#ENETRESET
 102

	)

183 
	#ECONNABORTED
 103

	)

184 
	#ECONNRESET
 104

	)

185 
	#ENOBUFS
 105

	)

186 
	#EISCONN
 106

	)

187 
	#ENOTCONN
 107

	)

188 
	#ESHUTDOWN
 108

	)

189 
	#ETOOMANYREFS
 109

	)

190 
	#ETIMEDOUT
 110

	)

191 
	#ECONNREFUSED
 111

	)

192 
	#EHOSTDOWN
 112

	)

193 
	#EHOSTUNREACH
 113

	)

194 
	#EALREADY
 114

	)

195 
	#EINPROGRESS
 115

	)

196 
	#ESTALE
 116

	)

197 
	#EUCLEAN
 117

	)

198 
	#ENOTNAM
 118

	)

199 
	#ENAVAIL
 119

	)

200 
	#EISNAM
 120

	)

201 
	#EREMOTEIO
 121

	)

202 
	#EDQUOT
 122

	)

204 
	#ENOMEDIUM
 123

	)

205 
	#EMEDIUMTYPE
 124

	)

207 #i‚de‡
î∫o


208 
î∫o
;

213 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/debug.h

32 #i‚de‡
__LWIP_DEBUG_H__


33 
	#__LWIP_DEBUG_H__


	)

35 
	~"lwù/¨ch.h
"

36 
	~"lwù/›t.h
"

44 
	#LWIP_DBG_LEVEL_ALL
 0x00

	)

45 
	#LWIP_DBG_LEVEL_OFF
 
LWIP_DBG_LEVEL_ALL


	)

46 
	#LWIP_DBG_LEVEL_WARNING
 0x01

	)

47 
	#LWIP_DBG_LEVEL_SERIOUS
 0x02

	)

48 
	#LWIP_DBG_LEVEL_SEVERE
 0x03

	)

49 
	#LWIP_DBG_MASK_LEVEL
 0x03

	)

52 
	#LWIP_DBG_ON
 0x80U

	)

54 
	#LWIP_DBG_OFF
 0x00U

	)

57 
	#LWIP_DBG_TRACE
 0x40U

	)

59 
	#LWIP_DBG_STATE
 0x20U

	)

61 
	#LWIP_DBG_FRESH
 0x10U

	)

63 
	#LWIP_DBG_HALT
 0x08U

	)

65 #i‚de‡
LWIP_NOASSERT


66 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
) do { if(!(assertion)) \

67 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); } 0)

	)

69 
	#LWIP_ASSERT
(
mesßge
, 
as£πi⁄
)

	)

73 #i‚de‡
LWIP_ERROR


74 
	#LWIP_ERROR
(
mesßge
, 
ex¥essi⁄
, 
h™dÀr
) do { if (!(expression)) { \

75 
	`LWIP_PLATFORM_ASSERT
(
mesßge
); 
h™dÀr
;}} 0)

	)

78 #ifde‡
LWIP_DEBUG


82 
	#LWIP_DEBUGF
(
debug
, 
mesßge
) do { \

84 ((
debug
Ë& 
LWIP_DBG_ON
) && \

85 ((
debug
Ë& 
LWIP_DBG_TYPES_ON
) && \

86 ((
s16_t
)((
debug
Ë& 
LWIP_DBG_MASK_LEVEL
Ë>
LWIP_DBG_MIN_LEVEL
)) { \

87 
	`LWIP_PLATFORM_DIAG
(
mesßge
); \

88 i‡((
debug
Ë& 
LWIP_DBG_HALT
) { \

92 } 0)

	)

95 
	#LWIP_DEBUGF
(
debug
, 
mesßge
)

	)

	@src/extern/lwip/lwip/src/include/lwip/def.h

32 #i‚de‡
__LWIP_DEF_H__


33 
	#__LWIP_DEF_H__


	)

36 
	~"lwù/¨ch.h
"

37 
	~"lwù/›t.h
"

39 #ifde‡
__˝lu•lus


43 
	#LWIP_MAX
(
x
 , 
y
Ë(((xË> (y)Ë? (xË: (y))

	)

44 
	#LWIP_MIN
(
x
 , 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

46 #i‚de‡
NULL


47 
	#NULL
 ((*)0)

	)

51 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN


52 
	#LWIP_MAKE_U16
(
a
, 
b
Ë(◊ << 8Ë| b)

	)

54 
	#LWIP_MAKE_U16
(
a
, 
b
Ë((b << 8Ë|á)

	)

57 #i‚de‡
LWIP_PLATFORM_BYTESWAP


58 
	#LWIP_PLATFORM_BYTESWAP
 0

	)

61 #i‚de‡
LWIP_PREFIX_BYTEORDER_FUNCS


64 #ifde‡
ht⁄s


65 #unde‡
ht⁄s


67 #ifde‡
ht⁄l


68 #unde‡
ht⁄l


70 #ifde‡
¡ohs


71 #unde‡
¡ohs


73 #ifde‡
¡ohl


74 #unde‡
¡ohl


77 
	#ht⁄s
(
x
Ë
	`lwù_ht⁄s
(x)

	)

78 
	#¡ohs
(
x
Ë
	`lwù_¡ohs
(x)

	)

79 
	#ht⁄l
(
x
Ë
	`lwù_ht⁄l
(x)

	)

80 
	#¡ohl
(
x
Ë
	`lwù_¡ohl
(x)

	)

83 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


84 
	#lwù_ht⁄s
(
x
Ë(x)

	)

85 
	#lwù_¡ohs
(
x
Ë(x)

	)

86 
	#lwù_ht⁄l
(
x
Ë(x)

	)

87 
	#lwù_¡ohl
(
x
Ë(x)

	)

88 
	#PP_HTONS
(
x
Ë(x)

	)

89 
	#PP_NTOHS
(
x
Ë(x)

	)

90 
	#PP_HTONL
(
x
Ë(x)

	)

91 
	#PP_NTOHL
(
x
Ë(x)

	)

93 #i‡
LWIP_PLATFORM_BYTESWAP


94 
	#lwù_ht⁄s
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

95 
	#lwù_¡ohs
(
x
Ë
	`LWIP_PLATFORM_HTONS
(x)

	)

96 
	#lwù_ht⁄l
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

97 
	#lwù_¡ohl
(
x
Ë
	`LWIP_PLATFORM_HTONL
(x)

	)

99 
u16_t
 
lwù_ht⁄s
(u16_à
x
);

100 
u16_t
 
lwù_¡ohs
(u16_à
x
);

101 
u32_t
 
lwù_ht⁄l
(u32_à
x
);

102 
u32_t
 
lwù_¡ohl
(u32_à
x
);

108 
	#PP_HTONS
(
x
Ë((((xË& 0xffË<< 8Ë| (((xË& 0xff00Ë>> 8))

	)

109 
	#PP_NTOHS
(
x
Ë
	`PP_HTONS
(x)

	)

110 
	#PP_HTONL
(
x
) ((((x) & 0xff) << 24) | \

111 (((
x
) & 0xff00) << 8) | \

112 (((
x
) & 0xff0000UL) >> 8) | \

113 (((
x
Ë& 0xff000000ULË>> 24))

	)

114 
	#PP_NTOHL
(
x
Ë
	`PP_HTONL
(x)

	)

118 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/dhcp.h

4 #i‚de‡
__LWIP_DHCP_H__


5 
	#__LWIP_DHCP_H__


	)

7 
	~"lwù/›t.h
"

9 #i‡
LWIP_DHCP


11 
	~"lwù/√tif.h
"

12 
	~"lwù/udp.h
"

14 #ifde‡
__˝lu•lus


19 
	#DHCP_COARSE_TIMER_SECS
 60

	)

21 
	#DHCP_COARSE_TIMER_MSECS
 (
DHCP_COARSE_TIMER_SECS
 * 1000UL)

	)

23 
	#DHCP_FINE_TIMER_MSECS
 500

	)

25 
	#DHCP_CHADDR_LEN
 16U

	)

26 
	#DHCP_SNAME_LEN
 64U

	)

27 
	#DHCP_FILE_LEN
 128U

	)

29 
	sdh˝


32 
u32_t
 
xid
;

34 
udp_pcb
 *
pcb
;

36 
dh˝_msg
 *
msg_ö
;

38 
u8_t
 
°©e
;

40 
u8_t
 
åõs
;

41 #i‡
LWIP_DHCP_AUTOIP_COOP


42 
u8_t
 
autoù_co›_°©e
;

44 
u8_t
 
sub√t_mask_giví
;

46 
pbuf
 *
p_out
;

47 
dh˝_msg
 *
msg_out
;

48 
u16_t
 
›ti⁄s_out_Àn
;

49 
u16_t
 
ªque°_timeout
;

50 
u16_t
 
t1_timeout
;

51 
u16_t
 
t2_timeout
;

52 
ù_addr_t
 
£rvî_ù_addr
;

53 
ù_addr_t
 
of„ªd_ù_addr
;

54 
ù_addr_t
 
of„ªd_¢_mask
;

55 
ù_addr_t
 
of„ªd_gw_addr
;

57 
u32_t
 
of„ªd_t0_Àa£
;

58 
u32_t
 
of„ªd_t1_ª√w
;

59 
u32_t
 
of„ªd_t2_ªböd
;

62 #i‡
LWIP_DHCP_BOOTP_FILE


63 
ù_addr_t
 
of„ªd_si_addr
;

64 
boŸ_fûe_«me
[
DHCP_FILE_LEN
];

69 #ifde‡
PACK_STRUCT_USE_INCLUDES


70 
	~"¨ch/bp°ru˘.h
"

72 
PACK_STRUCT_BEGIN


74 
	sdh˝_msg


76 
PACK_STRUCT_FIELD
(
u8_t
 
›
);

77 
PACK_STRUCT_FIELD
(
u8_t
 
hty≥
);

78 
PACK_STRUCT_FIELD
(
u8_t
 
hÀn
);

79 
PACK_STRUCT_FIELD
(
u8_t
 
h›s
);

80 
PACK_STRUCT_FIELD
(
u32_t
 
xid
);

81 
PACK_STRUCT_FIELD
(
u16_t
 
£cs
);

82 
PACK_STRUCT_FIELD
(
u16_t
 
Êags
);

83 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
cüddr
);

84 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
yüddr
);

85 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
süddr
);

86 
PACK_STRUCT_FIELD
(
ù_addr_p_t
 
güddr
);

87 
PACK_STRUCT_FIELD
(
u8_t
 
chaddr
[
DHCP_CHADDR_LEN
]);

88 
PACK_STRUCT_FIELD
(
u8_t
 
¢ame
[
DHCP_SNAME_LEN
]);

89 
PACK_STRUCT_FIELD
(
u8_t
 
fûe
[
DHCP_FILE_LEN
]);

90 
PACK_STRUCT_FIELD
(
u32_t
 
cookõ
);

91 
	#DHCP_MIN_OPTIONS_LEN
 68U

	)

93 #i‡((
deföed
(
DHCP_OPTIONS_LEN
)Ë&& (DHCP_OPTIONS_LEN < 
DHCP_MIN_OPTIONS_LEN
))

94 #unde‡
DHCP_OPTIONS_LEN


97 #i‡(!
deföed
(
DHCP_OPTIONS_LEN
))

99 
	#DHCP_OPTIONS_LEN
 
DHCP_MIN_OPTIONS_LEN


	)

101 
PACK_STRUCT_FIELD
(
u8_t
 
›ti⁄s
[
DHCP_OPTIONS_LEN
]);

102 } 
PACK_STRUCT_STRUCT
;

103 
PACK_STRUCT_END


104 #ifde‡
PACK_STRUCT_USE_INCLUDES


105 
	~"¨ch/ï°ru˘.h
"

108 
dh˝_£t_°ru˘
(
√tif
 *√tif, 
dh˝
 *dhcp);

110 
	#dh˝_ªmove_°ru˘
(
√tif
Ëdÿ{ (√tif)->
dh˝
 = 
NULL
; } 0)

	)

111 
dh˝_˛ónup
(
√tif
 *netif);

113 
îr_t
 
dh˝_°¨t
(
√tif
 *netif);

115 
îr_t
 
dh˝_ª√w
(
√tif
 *netif);

117 
îr_t
 
dh˝_ªÀa£
(
√tif
 *netif);

119 
dh˝_°›
(
√tif
 *netif);

121 
dh˝_öf‹m
(
√tif
 *netif);

123 
dh˝_√tw‹k_ch™ged
(
√tif
 *netif);

126 #i‡
DHCP_DOES_ARP_CHECK


127 
dh˝_¨p_ª∂y
(
√tif
 *√tif, 
ù_addr_t
 *
addr
);

131 
dh˝_cﬂr£_tmr
();

133 
dh˝_föe_tmr
();

136 
	#DHCP_OP_OFS
 0

	)

137 
	#DHCP_HTYPE_OFS
 1

	)

138 
	#DHCP_HLEN_OFS
 2

	)

139 
	#DHCP_HOPS_OFS
 3

	)

140 
	#DHCP_XID_OFS
 4

	)

141 
	#DHCP_SECS_OFS
 8

	)

142 
	#DHCP_FLAGS_OFS
 10

	)

143 
	#DHCP_CIADDR_OFS
 12

	)

144 
	#DHCP_YIADDR_OFS
 16

	)

145 
	#DHCP_SIADDR_OFS
 20

	)

146 
	#DHCP_GIADDR_OFS
 24

	)

147 
	#DHCP_CHADDR_OFS
 28

	)

148 
	#DHCP_SNAME_OFS
 44

	)

149 
	#DHCP_FILE_OFS
 108

	)

150 
	#DHCP_MSG_LEN
 236

	)

152 
	#DHCP_COOKIE_OFS
 
DHCP_MSG_LEN


	)

153 
	#DHCP_OPTIONS_OFS
 (
DHCP_MSG_LEN
 + 4)

	)

155 
	#DHCP_CLIENT_PORT
 68

	)

156 
	#DHCP_SERVER_PORT
 67

	)

159 
	#DHCP_OFF
 0

	)

160 
	#DHCP_REQUESTING
 1

	)

161 
	#DHCP_INIT
 2

	)

162 
	#DHCP_REBOOTING
 3

	)

163 
	#DHCP_REBINDING
 4

	)

164 
	#DHCP_RENEWING
 5

	)

165 
	#DHCP_SELECTING
 6

	)

166 
	#DHCP_INFORMING
 7

	)

167 
	#DHCP_CHECKING
 8

	)

168 
	#DHCP_PERMANENT
 9

	)

169 
	#DHCP_BOUND
 10

	)

171 
	#DHCP_BACKING_OFF
 12

	)

174 
	#DHCP_AUTOIP_COOP_STATE_OFF
 0

	)

175 
	#DHCP_AUTOIP_COOP_STATE_ON
 1

	)

177 
	#DHCP_BOOTREQUEST
 1

	)

178 
	#DHCP_BOOTREPLY
 2

	)

181 
	#DHCP_DISCOVER
 1

	)

182 
	#DHCP_OFFER
 2

	)

183 
	#DHCP_REQUEST
 3

	)

184 
	#DHCP_DECLINE
 4

	)

185 
	#DHCP_ACK
 5

	)

186 
	#DHCP_NAK
 6

	)

187 
	#DHCP_RELEASE
 7

	)

188 
	#DHCP_INFORM
 8

	)

191 
	#DHCP_HTYPE_ETH
 1

	)

193 
	#DHCP_MAGIC_COOKIE
 0x63825363UL

	)

198 
	#DHCP_OPTION_PAD
 0

	)

199 
	#DHCP_OPTION_SUBNET_MASK
 1

	)

200 
	#DHCP_OPTION_ROUTER
 3

	)

201 
	#DHCP_OPTION_DNS_SERVER
 6

	)

202 
	#DHCP_OPTION_HOSTNAME
 12

	)

203 
	#DHCP_OPTION_IP_TTL
 23

	)

204 
	#DHCP_OPTION_MTU
 26

	)

205 
	#DHCP_OPTION_BROADCAST
 28

	)

206 
	#DHCP_OPTION_TCP_TTL
 37

	)

207 
	#DHCP_OPTION_END
 255

	)

210 
	#DHCP_OPTION_REQUESTED_IP
 50

	)

211 
	#DHCP_OPTION_LEASE_TIME
 51

	)

212 
	#DHCP_OPTION_OVERLOAD
 52

	)

214 
	#DHCP_OPTION_MESSAGE_TYPE
 53

	)

215 
	#DHCP_OPTION_MESSAGE_TYPE_LEN
 1

	)

217 
	#DHCP_OPTION_SERVER_ID
 54

	)

218 
	#DHCP_OPTION_PARAMETER_REQUEST_LIST
 55

	)

220 
	#DHCP_OPTION_MAX_MSG_SIZE
 57

	)

221 
	#DHCP_OPTION_MAX_MSG_SIZE_LEN
 2

	)

223 
	#DHCP_OPTION_T1
 58

	)

224 
	#DHCP_OPTION_T2
 59

	)

225 
	#DHCP_OPTION_US
 60

	)

226 
	#DHCP_OPTION_CLIENT_ID
 61

	)

227 
	#DHCP_OPTION_TFTP_SERVERNAME
 66

	)

228 
	#DHCP_OPTION_BOOTFILE
 67

	)

231 
	#DHCP_OVERLOAD_NONE
 0

	)

232 
	#DHCP_OVERLOAD_FILE
 1

	)

233 
	#DHCP_OVERLOAD_SNAME
 2

	)

234 
	#DHCP_OVERLOAD_SNAME_FILE
 3

	)

236 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/dns.h

34 #i‚de‡
__LWIP_DNS_H__


35 
	#__LWIP_DNS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_DNS


41 #ifde‡
__˝lu•lus


46 
	#DNS_TMR_INTERVAL
 1000

	)

49 
	#DNS_RRTYPE_A
 1

	)

50 
	#DNS_RRTYPE_NS
 2

	)

51 
	#DNS_RRTYPE_MD
 3

	)

52 
	#DNS_RRTYPE_MF
 4

	)

53 
	#DNS_RRTYPE_CNAME
 5

	)

54 
	#DNS_RRTYPE_SOA
 6

	)

55 
	#DNS_RRTYPE_MB
 7

	)

56 
	#DNS_RRTYPE_MG
 8

	)

57 
	#DNS_RRTYPE_MR
 9

	)

58 
	#DNS_RRTYPE_NULL
 10

	)

59 
	#DNS_RRTYPE_WKS
 11

	)

60 
	#DNS_RRTYPE_PTR
 12

	)

61 
	#DNS_RRTYPE_HINFO
 13

	)

62 
	#DNS_RRTYPE_MINFO
 14

	)

63 
	#DNS_RRTYPE_MX
 15

	)

64 
	#DNS_RRTYPE_TXT
 16

	)

67 
	#DNS_RRCLASS_IN
 1

	)

68 
	#DNS_RRCLASS_CS
 2

	)

69 
	#DNS_RRCLASS_CH
 3

	)

70 
	#DNS_RRCLASS_HS
 4

	)

71 
	#DNS_RRCLASS_FLUSH
 0x800

	)

78 
	#NETDB_ELEM_SIZE
 (32 + 16 + 
DNS_MAX_NAME_LENGTH
 + 1)

	)

80 #i‡
DNS_LOCAL_HOSTLIST


82 
	sloˇl_ho°li°_íåy
 {

84 c⁄° *
«me
;

86 
ù_addr_t
 
addr
;

87 
loˇl_ho°li°_íåy
 *
√xt
;

89 #i‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


90 #i‚de‡
DNS_LOCAL_HOSTLIST_MAX_NAMELEN


91 
	#DNS_LOCAL_HOSTLIST_MAX_NAMELEN
 
DNS_MAX_NAME_LENGTH


	)

93 
	#LOCALHOSTLIST_ELEM_SIZE
 (((
loˇl_ho°li°_íåy
Ë+ 
DNS_LOCAL_HOSTLIST_MAX_NAMELEN
 + 1))

	)

104 (*
dns_found_ˇŒback
)(c⁄° *
	t«me
, 
	tù_addr_t
 *
	tùaddr
, *
	tˇŒback_¨g
);

106 
dns_öô
();

107 
dns_tmr
();

108 
dns_£t£rvî
(
u8_t
 
numdns
, 
ù_addr_t
 *
dns£rvî
);

109 
ù_addr_t
 
dns_gë£rvî
(
u8_t
 
numdns
);

110 
îr_t
 
dns_gëho°by«me
(c⁄° *
ho°«me
, 
ù_addr_t
 *
addr
,

111 
dns_found_ˇŒback
 
found
, *
ˇŒback_¨g
);

113 #i‡
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


114 
dns_loˇl_ªmoveho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr_t
 *
addr
);

115 
îr_t
 
dns_loˇl_addho°
(c⁄° *
ho°«me
, c⁄° 
ù_addr_t
 *
addr
);

118 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/err.h

32 #i‚de‡
__LWIP_ERR_H__


33 
	#__LWIP_ERR_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/¨ch.h
"

38 #ifde‡
__˝lu•lus


44 #ifde‡
LWIP_ERR_T


45 
LWIP_ERR_T
 
	tîr_t
;

47 
s8_t
 
	tîr_t
;

52 
	#ERR_OK
 0

	)

53 
	#ERR_MEM
 -1

	)

54 
	#ERR_BUF
 -2

	)

55 
	#ERR_TIMEOUT
 -3

	)

56 
	#ERR_RTE
 -4

	)

57 
	#ERR_INPROGRESS
 -5

	)

58 
	#ERR_VAL
 -6

	)

59 
	#ERR_WOULDBLOCK
 -7

	)

60 
	#ERR_USE
 -8

	)

61 
	#ERR_ISCONN
 -9

	)

63 
	#ERR_IS_FATAL
(
e
Ë(”Ë< 
ERR_ISCONN
)

	)

65 
	#ERR_ABRT
 -10

	)

66 
	#ERR_RST
 -11

	)

67 
	#ERR_CLSD
 -12

	)

68 
	#ERR_CONN
 -13

	)

70 
	#ERR_ARG
 -14

	)

72 
	#ERR_IF
 -15

	)

75 #ifde‡
LWIP_DEBUG


76 c⁄° *
lwù_°ªº
(
îr_t
 
îr
);

78 
	#lwù_°ªº
(
x
Ë""

	)

81 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/init.h

32 #i‚de‡
__LWIP_INIT_H__


33 
	#__LWIP_INIT_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


42 
	#LWIP_VERSION_MAJOR
 1U

	)

44 
	#LWIP_VERSION_MINOR
 4U

	)

46 
	#LWIP_VERSION_REVISION
 1U

	)

50 
	#LWIP_VERSION_RC
 255U

	)

53 
	#LWIP_RC_RELEASE
 255U

	)

55 
	#LWIP_RC_DEVELOPMENT
 0U

	)

57 
	#LWIP_VERSION_IS_RELEASE
 (
LWIP_VERSION_RC
 =
LWIP_RC_RELEASE
)

	)

58 
	#LWIP_VERSION_IS_DEVELOPMENT
 (
LWIP_VERSION_RC
 =
LWIP_RC_DEVELOPMENT
)

	)

59 
	#LWIP_VERSION_IS_RC
 ((
LWIP_VERSION_RC
 !
LWIP_RC_RELEASE
Ë&& (LWIP_VERSION_RC !
LWIP_RC_DEVELOPMENT
))

	)

62 
	#LWIP_VERSION
 (
LWIP_VERSION_MAJOR
 << 24 | 
LWIP_VERSION_MINOR
 << 16 | \

63 
LWIP_VERSION_REVISION
 << 8 | 
LWIP_VERSION_RC
)

	)

66 
lwù_öô
();

68 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/mem.h

32 #i‚de‡
__LWIP_MEM_H__


33 
	#__LWIP_MEM_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
MEM_LIBC_MALLOC


43 
	~<°ddef.h
>

45 
size_t
 
	tmem_size_t
;

46 
	#MEM_SIZE_F
 
SZT_F


	)

49 
	#mem_öô
()

	)

53 #i‚de‡
mem_‰ì


54 
	#mem_‰ì
 
‰ì


	)

56 #i‚de‡
mem_mÆloc


57 
	#mem_mÆloc
 
mÆloc


	)

59 #i‚de‡
mem_ˇŒoc


60 
	#mem_ˇŒoc
 
ˇŒoc


	)

64 #i‚de‡
mem_åim


65 
	#mem_åim
(
mem
, 
size
Ë(mem)

	)

72 #i‡
MEM_SIZE
 > 64000L

73 
u32_t
 
	tmem_size_t
;

74 
	#MEM_SIZE_F
 
U32_F


	)

76 
u16_t
 
	tmem_size_t
;

77 
	#MEM_SIZE_F
 
U16_F


	)

80 #i‡
MEM_USE_POOLS


82 
	#mem_öô
()

	)

85 
	#mem_åim
(
mem
, 
size
Ë(mem)

	)

88 
mem_öô
();

89 *
mem_åim
(*
mem
, 
mem_size_t
 
size
);

91 *
mem_mÆloc
(
mem_size_t
 
size
);

92 *
mem_ˇŒoc
(
mem_size_t
 
cou¡
, mem_size_à
size
);

93 
mem_‰ì
(*
mem
);

100 #i‚de‡
LWIP_MEM_ALIGN_SIZE


101 
	#LWIP_MEM_ALIGN_SIZE
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1Ë& ~(MEM_ALIGNMENT-1))

	)

108 #i‚de‡
LWIP_MEM_ALIGN_BUFFER


109 
	#LWIP_MEM_ALIGN_BUFFER
(
size
Ë(((sizeË+ 
MEM_ALIGNMENT
 - 1))

	)

115 #i‚de‡
LWIP_MEM_ALIGN


116 
	#LWIP_MEM_ALIGN
(
addr
Ë((*)(((
mem_±r_t
)◊ddrË+ 
MEM_ALIGNMENT
 - 1Ë& ~(mem_±r_t)(MEM_ALIGNMENT-1)))

	)

119 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/memp.h

33 #i‚de‡
__LWIP_MEMP_H__


34 
	#__LWIP_MEMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


44 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
Ë
MEMP_
##«me,

	)

45 
	~"lwù/memp_°d.h
"

46 
MEMP_MAX


47 } 
	tmemp_t
;

49 #i‡
MEM_USE_POOLS


54 
MEMP_POOL_HELPER_FIRST
 = ((
u8_t
)

55 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

56 
	#LWIP_MALLOC_MEMPOOL_START
 1

	)

57 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë* 
MEMP_POOL_
##sizê+ 0

	)

58 
	#LWIP_MALLOC_MEMPOOL_END


	)

59 
	~"lwù/memp_°d.h
"

63 
MEMP_POOL_HELPER_LAST
 = ((
u8_t
)

64 
	#LWIP_MEMPOOL
(
«me
,
num
,
size
,
desc
)

	)

65 
	#LWIP_MALLOC_MEMPOOL_START


	)

66 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë0 + 
MEMP_POOL_
##sizê*

	)

67 
	#LWIP_MALLOC_MEMPOOL_END
 1

	)

68 
	~"lwù/memp_°d.h
"

70 } 
	tmemp_poﬁ_hñ≥r_t
;

74 
	#MEMP_POOL_FIRST
 ((
memp_t
Ë
MEMP_POOL_HELPER_FIRST
)

	)

75 
	#MEMP_POOL_LAST
 ((
memp_t
Ë
MEMP_POOL_HELPER_LAST
)

	)

78 #i‡
MEMP_MEM_MALLOC
 || 
MEM_USE_POOLS


79 c⁄° 
u16_t
 
memp_sizes
[
MEMP_MAX
];

82 #i‡
MEMP_MEM_MALLOC


84 
	~"mem.h
"

86 
	#memp_öô
()

	)

87 
	#memp_mÆloc
(
ty≥
Ë
	`mem_mÆloc
(
memp_sizes
[ty≥])

	)

88 
	#memp_‰ì
(
ty≥
, 
mem
Ë
	`mem_‰ì
(mem)

	)

92 #i‡
MEM_USE_POOLS


94 
	smemp_mÆloc_hñ≥r


96 
memp_t
 
	gpoﬁƒ
;

100 
memp_öô
();

102 #i‡
MEMP_OVERFLOW_CHECK


103 *
memp_mÆloc_‚
(
memp_t
 
ty≥
, c⁄° * 
fûe
, c⁄° 
löe
);

104 
	#memp_mÆloc
(
t
Ë
	`memp_mÆloc_‚
(—), 
__FILE__
, 
__LINE__
)

	)

106 *
memp_mÆloc
(
memp_t
 
ty≥
);

108 
memp_‰ì
(
memp_t
 
ty≥
, *
mem
);

112 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/memp_std.h

12 #i‚de‡
LWIP_MALLOC_MEMPOOL


15 
	#LWIP_MALLOC_MEMPOOL
(
num
, 
size
Ë
	`LWIP_MEMPOOL
(
POOL_
##size,Çum, (sizê+ (
memp_mÆloc_hñ≥r
)), "MALLOC_"#size)

	)

16 
	#LWIP_MALLOC_MEMPOOL_START


	)

17 
	#LWIP_MALLOC_MEMPOOL_END


	)

20 #i‚de‡
LWIP_PBUF_MEMPOOL


23 
	#LWIP_PBUF_MEMPOOL
(
«me
, 
num
, 
∑ylﬂd
, 
desc
Ë
	`LWIP_MEMPOOL
“ame,Çum, (
	`MEMP_ALIGN_SIZE
((
pbuf
)Ë+ MEMP_ALIGN_SIZE’aylﬂd)), desc)

	)

33 #i‡
LWIP_RAW


34 
LWIP_MEMPOOL
(
RAW_PCB
, 
MEMP_NUM_RAW_PCB
, (
øw_pcb
), "RAW_PCB")

37 #i‡
LWIP_UDP


38 
LWIP_MEMPOOL
(
UDP_PCB
, 
MEMP_NUM_UDP_PCB
, (
udp_pcb
), "UDP_PCB")

41 #i‡
LWIP_TCP


42 
LWIP_MEMPOOL
(
TCP_PCB
, 
MEMP_NUM_TCP_PCB
, (
t˝_pcb
), "TCP_PCB")

43 
LWIP_MEMPOOL
(
TCP_PCB_LISTEN
, 
MEMP_NUM_TCP_PCB_LISTEN
, (
t˝_pcb_li°í
), "TCP_PCB_LISTEN")

44 
LWIP_MEMPOOL
(
TCP_SEG
, 
MEMP_NUM_TCP_SEG
, (
t˝_£g
), "TCP_SEG")

47 #i‡
IP_REASSEMBLY


48 
LWIP_MEMPOOL
(
REASSDATA
, 
MEMP_NUM_REASSDATA
, (
ù_ªassd©a
), "REASSDATA")

50 #i‡
IP_FRAG
 && !
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF


51 
LWIP_MEMPOOL
(
FRAG_PBUF
, 
MEMP_NUM_FRAG_PBUF
, (
pbuf_cu°om_ªf
),"FRAG_PBUF")

54 #i‡
LWIP_NETCONN


55 
LWIP_MEMPOOL
(
NETBUF
, 
MEMP_NUM_NETBUF
, (
√tbuf
), "NETBUF")

56 
LWIP_MEMPOOL
(
NETCONN
, 
MEMP_NUM_NETCONN
, (
√tc⁄n
), "NETCONN")

59 #i‡
NO_SYS
==0

60 
LWIP_MEMPOOL
(
TCPIP_MSG_API
, 
MEMP_NUM_TCPIP_MSG_API
, (
t˝ù_msg
), "TCPIP_MSG_API")

61 #i‡!
LWIP_TCPIP_CORE_LOCKING_INPUT


62 
LWIP_MEMPOOL
(
TCPIP_MSG_INPKT
,
MEMP_NUM_TCPIP_MSG_INPKT
, (
t˝ù_msg
), "TCPIP_MSG_INPKT")

66 #i‡
LWIP_ARP
 && 
ARP_QUEUEING


67 
LWIP_MEMPOOL
(
ARP_QUEUE
, 
MEMP_NUM_ARP_QUEUE
, (
ëh¨p_q_íåy
), "ARP_QUEUE")

70 #i‡
LWIP_IGMP


71 
LWIP_MEMPOOL
(
IGMP_GROUP
, 
MEMP_NUM_IGMP_GROUP
, (
igmp_group
), "IGMP_GROUP")

74 #i‡(!
NO_SYS
 || (NO_SYS && !
NO_SYS_NO_TIMERS
))

75 
LWIP_MEMPOOL
(
SYS_TIMEOUT
, 
MEMP_NUM_SYS_TIMEOUT
, (
sys_timeo
), "SYS_TIMEOUT")

78 #i‡
LWIP_SNMP


79 
LWIP_MEMPOOL
(
SNMP_ROOTNODE
, 
MEMP_NUM_SNMP_ROOTNODE
, (
mib_li°_roŸnode
), "SNMP_ROOTNODE")

80 
LWIP_MEMPOOL
(
SNMP_NODE
, 
MEMP_NUM_SNMP_NODE
, (
mib_li°_node
), "SNMP_NODE")

81 
LWIP_MEMPOOL
(
SNMP_VARBIND
, 
MEMP_NUM_SNMP_VARBIND
, (
¢mp_v¨böd
), "SNMP_VARBIND")

82 
LWIP_MEMPOOL
(
SNMP_VALUE
, 
MEMP_NUM_SNMP_VALUE
, 
SNMP_MAX_VALUE_SIZE
, "SNMP_VALUE")

84 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


85 
LWIP_MEMPOOL
(
NETDB
, 
MEMP_NUM_NETDB
, 
NETDB_ELEM_SIZE
, "NETDB")

87 #i‡
LWIP_DNS
 && 
DNS_LOCAL_HOSTLIST
 && 
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


88 
LWIP_MEMPOOL
(
LOCALHOSTLIST
, 
MEMP_NUM_LOCALHOSTLIST
, 
LOCALHOSTLIST_ELEM_SIZE
, "LOCALHOSTLIST")

90 #i‡
PPP_SUPPORT
 && 
PPPOE_SUPPORT


91 
LWIP_MEMPOOL
(
PPPOE_IF
, 
MEMP_NUM_PPPOE_INTERFACES
, (
µp€_so·c
), "PPPOE_IF")

102 
LWIP_PBUF_MEMPOOL
(
PBUF
, 
MEMP_NUM_PBUF
, 0, "PBUF_REF/ROM")

103 
LWIP_PBUF_MEMPOOL
(
PBUF_POOL
, 
PBUF_POOL_SIZE
, 
PBUF_POOL_BUFSIZE
, "PBUF_POOL")

110 #i‡
MEMP_USE_CUSTOM_POOLS


111 
	~"lwùpoﬁs.h
"

118 #unde‡
LWIP_MEMPOOL


119 #unde‡
LWIP_MALLOC_MEMPOOL


120 #unde‡
LWIP_MALLOC_MEMPOOL_START


121 #unde‡
LWIP_MALLOC_MEMPOOL_END


122 #unde‡
LWIP_PBUF_MEMPOOL


	@src/extern/lwip/lwip/src/include/lwip/netbuf.h

32 #i‚de‡
__LWIP_NETBUF_H__


33 
	#__LWIP_NETBUF_H__


	)

35 
	~"lwù/›t.h
"

36 
	~"lwù/pbuf.h
"

37 
	~"lwù/ù_addr.h
"

39 #ifde‡
__˝lu•lus


44 
	#NETBUF_FLAG_DESTADDR
 0x01

	)

46 
	#NETBUF_FLAG_CHKSUM
 0x02

	)

48 
	s√tbuf
 {

49 
pbuf
 *
p
, *
±r
;

50 
ù_addr_t
 
addr
;

51 
u16_t
 
p‹t
;

52 #i‡
LWIP_NETBUF_RECVINFO
 || 
LWIP_CHECKSUM_ON_COPY


53 #i‡
LWIP_CHECKSUM_ON_COPY


54 
u8_t
 
Êags
;

56 
u16_t
 
t›‹t_chksum
;

57 #i‡
LWIP_NETBUF_RECVINFO


58 
ù_addr_t
 
tﬂddr
;

64 
√tbuf
 * 
√tbuf_√w
 ();

65 
√tbuf_dñëe
 (
√tbuf
 *
buf
);

66 * 
√tbuf_Æloc
 (
√tbuf
 *
buf
, 
u16_t
 
size
);

67 
√tbuf_‰ì
 (
√tbuf
 *
buf
);

68 
îr_t
 
√tbuf_ªf
 (
√tbuf
 *
buf
,

69 c⁄° *
d©≠å
, 
u16_t
 
size
);

70 
√tbuf_chaö
 (
√tbuf
 *
hód
,

71 
√tbuf
 *
èû
);

73 
îr_t
 
√tbuf_d©a
 (
√tbuf
 *
buf
,

74 **
d©≠å
, 
u16_t
 *
Àn
);

75 
s8_t
 
√tbuf_√xt
 (
√tbuf
 *
buf
);

76 
√tbuf_fú°
 (
√tbuf
 *
buf
);

79 
	#√tbuf_c›y_∑πül
(
buf
, 
d©≠å
, 
Àn
, 
off£t
) \

80 
	`pbuf_c›y_∑πül
((
buf
)->
p
, (
d©≠å
), (
Àn
), (
off£t
))

	)

81 
	#√tbuf_c›y
(
buf
,
d©≠å
,
Àn
Ë
	`√tbuf_c›y_∑πül
(buf, d©≠å,Üí, 0)

	)

82 
	#√tbuf_èke
(
buf
, 
d©≠å
, 
Àn
Ë
	`pbuf_èke
((buf)->
p
, d©≠å,Üí)

	)

83 
	#√tbuf_Àn
(
buf
Ë((buf)->
p
->
tŸ_Àn
)

	)

84 
	#√tbuf_‰omaddr
(
buf
Ë(&((buf)->
addr
))

	)

85 
	#√tbuf_£t_‰omaddr
(
buf
, 
‰omaddr
Ë
	`ù_addr_£t
((&(buf)->
addr
), fromaddr)

	)

86 
	#√tbuf_‰omp‹t
(
buf
Ë((buf)->
p‹t
)

	)

87 #i‡
LWIP_NETBUF_RECVINFO


88 
	#√tbuf_de°addr
(
buf
Ë(&((buf)->
tﬂddr
))

	)

89 
	#√tbuf_£t_de°addr
(
buf
, 
de°addr
Ë
	`ù_addr_£t
((&(buf)->
addr
), de°addr)

	)

90 
	#√tbuf_de°p‹t
(
buf
Ë(((buf)->
Êags
 & 
NETBUF_FLAG_DESTADDR
Ë? (buf)->
t›‹t_chksum
 : 0)

	)

92 #i‡
LWIP_CHECKSUM_ON_COPY


93 
	#√tbuf_£t_chksum
(
buf
, 
chksum
Ëdÿ{ (buf)->
Êags
 = 
NETBUF_FLAG_CHKSUM
; \

94 (
buf
)->
t›‹t_chksum
 = 
chksum
; } 0)

	)

97 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/netdb.h

29 #i‚de‡
__LWIP_NETDB_H__


30 
	#__LWIP_NETDB_H__


	)

32 
	~"lwù/›t.h
"

34 #i‡
LWIP_DNS
 && 
LWIP_SOCKET


36 
	~<°ddef.h
>

38 
	~"lwù/öë.h
"

39 
	~"lwù/sockës.h
"

41 #ifde‡
__˝lu•lus


46 #i‚de‡
LWIP_DNS_API_DECLARE_H_ERRNO


47 
	#LWIP_DNS_API_DECLARE_H_ERRNO
 1

	)

50 #i‚de‡
LWIP_DNS_API_DEFINE_ERRORS


51 
	#LWIP_DNS_API_DEFINE_ERRORS
 1

	)

54 #i‚de‡
LWIP_DNS_API_DECLARE_STRUCTS


55 
	#LWIP_DNS_API_DECLARE_STRUCTS
 1

	)

58 #i‡
LWIP_DNS_API_DEFINE_ERRORS


60 
	#EAI_NONAME
 200

	)

61 
	#EAI_SERVICE
 201

	)

62 
	#EAI_FAIL
 202

	)

63 
	#EAI_MEMORY
 203

	)

65 
	#HOST_NOT_FOUND
 210

	)

66 
	#NO_DATA
 211

	)

67 
	#NO_RECOVERY
 212

	)

68 
	#TRY_AGAIN
 213

	)

71 #i‡
LWIP_DNS_API_DECLARE_STRUCTS


72 
	sho°ít
 {

73 *
h_«me
;

74 **
h_Æü£s
;

76 
h_addπy≥
;

77 
h_Àngth
;

78 **
h_addr_li°
;

80 
	#h_addr
 
h_addr_li°
[0]

	)

83 
	saddröfo
 {

84 
	mai_Êags
;

85 
	mai_Ámûy
;

86 
	mai_sockty≥
;

87 
	mai_¥Ÿocﬁ
;

88 
sockÀn_t
 
	mai_addæí
;

89 
sockaddr
 *
	mai_addr
;

90 *
	mai_ˇn⁄«me
;

91 
addröfo
 *
	mai_√xt
;

95 #i‡
LWIP_DNS_API_DECLARE_H_ERRNO


97 
h_î∫o
;

100 
ho°ít
 *
lwù_gëho°by«me
(c⁄° *
«me
);

101 
lwù_gëho°by«me_r
(c⁄° *
«me
, 
ho°ít
 *
ªt
, *
buf
,

102 
size_t
 
buÊí
, 
ho°ít
 **
ªsu…
, *
h_î∫›
);

103 
lwù_‰ìaddröfo
(
addröfo
 *
ai
);

104 
lwù_gëaddröfo
(c⁄° *
nodíame
,

105 c⁄° *
£rv«me
,

106 c⁄° 
addröfo
 *
höts
,

107 
addröfo
 **
ªs
);

109 #i‡
LWIP_COMPAT_SOCKETS


110 
	#gëho°by«me
(
«me
Ë
	`lwù_gëho°by«me
“ame)

	)

111 
	#gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
) \

112 
	`lwù_gëho°by«me_r
(
«me
, 
ªt
, 
buf
, 
buÊí
, 
ªsu…
, 
h_î∫›
)

	)

113 
	#‰ìaddröfo
(
addröfo
Ë
	`lwù_‰ìaddröfo
◊ddröfo)

	)

114 
	#gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
) \

115 
	`lwù_gëaddröfo
(
nod«me
, 
£rv«me
, 
höts
, 
ªs
)

	)

118 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/netif.h

32 #i‚de‡
__LWIP_NETIF_H__


33 
	#__LWIP_NETIF_H__


	)

35 
	~"lwù/›t.h
"

37 
	#ENABLE_LOOPBACK
 (
LWIP_NETIF_LOOPBACK
 || 
LWIP_HAVE_LOOPIF
)

	)

39 
	~"lwù/îr.h
"

41 
	~"lwù/ù_addr.h
"

43 
	~"lwù/def.h
"

44 
	~"lwù/pbuf.h
"

45 #i‡
LWIP_DHCP


46 
	gdh˝
;

48 #i‡
LWIP_AUTOIP


49 
	gautoù
;

52 #ifde‡
__˝lu•lus


61 
	#NETIF_MAX_HWADDR_LEN
 6U

	)

69 
	#NETIF_FLAG_UP
 0x01U

	)

72 
	#NETIF_FLAG_BROADCAST
 0x02U

	)

75 
	#NETIF_FLAG_POINTTOPOINT
 0x04U

	)

78 
	#NETIF_FLAG_DHCP
 0x08U

	)

84 
	#NETIF_FLAG_LINK_UP
 0x10U

	)

88 
	#NETIF_FLAG_ETHARP
 0x20U

	)

92 
	#NETIF_FLAG_ETHERNET
 0x40U

	)

95 
	#NETIF_FLAG_IGMP
 0x80U

	)

102 
îr_t
 (*
	t√tif_öô_‚
)(
	t√tif
 *netif);

109 
îr_t
 (*
	t√tif_öput_‚
)(
	tpbuf
 *
	tp
, 
	t√tif
 *
	töp
);

118 
îr_t
 (*
	t√tif_ouçut_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
,

119 
	tù_addr_t
 *
	tùaddr
);

126 
îr_t
 (*
	t√tif_lökouçut_‚
)(
	t√tif
 *√tif, 
	tpbuf
 *
	tp
);

128 (*
√tif_°©us_ˇŒback_‚
)(
	t√tif
 *netif);

130 
îr_t
 (*
	t√tif_igmp_mac_fûãr_‚
)(
	t√tif
 *netif,

131 
	tù_addr_t
 *
	tgroup
, 
	tu8_t
 
	ta˘i⁄
);

136 
	s√tif
 {

138 
√tif
 *
√xt
;

141 
ù_addr_t
 
ù_addr
;

142 
ù_addr_t
 
√tmask
;

143 
ù_addr_t
 
gw
;

147 
√tif_öput_‚
 
öput
;

151 
√tif_ouçut_‚
 
ouçut
;

155 
√tif_lökouçut_‚
 
lökouçut
;

156 #i‡
LWIP_NETIF_STATUS_CALLBACK


159 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
;

161 #i‡
LWIP_NETIF_LINK_CALLBACK


164 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
;

166 #i‡
LWIP_NETIF_REMOVE_CALLBACK


168 
√tif_°©us_ˇŒback_‚
 
ªmove_ˇŒback
;

172 *
°©e
;

173 #i‡
LWIP_DHCP


175 
dh˝
 *dhcp;

177 #i‡
LWIP_AUTOIP


179 
autoù
 *autoip;

181 #i‡
LWIP_NETIF_HOSTNAME


183 * 
ho°«me
;

186 
u16_t
 
mtu
;

188 
u8_t
 
hwaddr_Àn
;

190 
u8_t
 
hwaddr
[
NETIF_MAX_HWADDR_LEN
];

192 
u8_t
 
Êags
;

194 
«me
[2];

196 
u8_t
 
num
;

197 #i‡
LWIP_SNMP


199 
u8_t
 
lök_ty≥
;

201 
u32_t
 
lök_•ìd
;

203 
u32_t
 
ts
;

205 
u32_t
 
iföo˘ës
;

206 
u32_t
 
iföuˇ°pkts
;

207 
u32_t
 
ifönuˇ°pkts
;

208 
u32_t
 
ifödisˇrds
;

209 
u32_t
 
ifouto˘ës
;

210 
u32_t
 
ifoutuˇ°pkts
;

211 
u32_t
 
ifouäuˇ°pkts
;

212 
u32_t
 
ifoutdisˇrds
;

214 #i‡
LWIP_IGMP


217 
√tif_igmp_mac_fûãr_‚
 
igmp_mac_fûãr
;

219 #i‡
LWIP_NETIF_HWADDRHINT


220 
u8_t
 *
addr_höt
;

222 #i‡
ENABLE_LOOPBACK


224 
pbuf
 *
lo›_fú°
;

225 
pbuf
 *
lo›_œ°
;

226 #i‡
LWIP_LOOPBACK_MAX_PBUFS


227 
u16_t
 
lo›_˙t_cuºít
;

232 #i‡
LWIP_SNMP


233 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
) \

235 (
√tif
)->
lök_ty≥
 = (
ty≥
); \

237 (
√tif
)->
lök_•ìd
 = (
•ìd
); \

238 (
√tif
)->
ts
 = 0; \

239 (
√tif
)->
iföo˘ës
 = 0; \

240 (
√tif
)->
iföuˇ°pkts
 = 0; \

241 (
√tif
)->
ifönuˇ°pkts
 = 0; \

242 (
√tif
)->
ifödisˇrds
 = 0; \

243 (
√tif
)->
ifouto˘ës
 = 0; \

244 (
√tif
)->
ifoutuˇ°pkts
 = 0; \

245 (
√tif
)->
ifouäuˇ°pkts
 = 0; \

246 (
√tif
)->
ifoutdisˇrds
 = 0

	)

248 
	#NETIF_INIT_SNMP
(
√tif
, 
ty≥
, 
•ìd
)

	)

253 
√tif
 *
√tif_li°
;

255 
√tif
 *
√tif_deÁu…
;

257 
√tif_öô
();

259 
√tif
 *
√tif_add
(√ti‡*√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

260 
ù_addr_t
 *
gw
, *
°©e
, 
√tif_öô_‚
 
öô
, 
√tif_öput_‚
 
öput
);

263 
√tif_£t_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, ip_addr_à*
√tmask
,

264 
ù_addr_t
 *
gw
);

265 
√tif_ªmove
(
√tif
 *Çetif);

271 
√tif
 *
√tif_föd
(*
«me
);

273 
√tif_£t_deÁu…
(
√tif
 *netif);

275 
√tif_£t_ùaddr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
);

276 
√tif_£t_√tmask
(
√tif
 *√tif, 
ù_addr_t
 *
√tmask
);

277 
√tif_£t_gw
(
√tif
 *√tif, 
ù_addr_t
 *
gw
);

279 
√tif_£t_up
(
√tif
 *netif);

280 
√tif_£t_down
(
√tif
 *netif);

282 
	#√tif_is_up
(
√tif
Ë((“ëif)->
Êags
 & 
NETIF_FLAG_UP
Ë? (
u8_t
)1 : (u8_t)0)

	)

284 #i‡
LWIP_NETIF_STATUS_CALLBACK


285 
√tif_£t_°©us_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
);

287 #i‡
LWIP_NETIF_REMOVE_CALLBACK


288 
√tif_£t_ªmove_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
ªmove_ˇŒback
);

291 
√tif_£t_lök_up
(
√tif
 *netif);

292 
√tif_£t_lök_down
(
√tif
 *netif);

294 
	#√tif_is_lök_up
(
√tif
Ë((“ëif)->
Êags
 & 
NETIF_FLAG_LINK_UP
Ë? (
u8_t
)1 : (u8_t)0)

	)

296 #i‡
LWIP_NETIF_LINK_CALLBACK


297 
√tif_£t_lök_ˇŒback
(
√tif
 *√tif, 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
);

300 #i‡
LWIP_NETIF_HOSTNAME


301 
	#√tif_£t_ho°«me
(
√tif
, 
«me
Ëdÿ{ if(“ëifË!
NULL
Ë{ (√tif)->
ho°«me
 =Çame; }}0)

	)

302 
	#√tif_gë_ho°«me
(
√tif
Ë((“ëifË!
NULL
Ë? (“ëif)->
ho°«me
Ë: NULL)

	)

305 #i‡
LWIP_IGMP


306 
	#√tif_£t_igmp_mac_fûãr
(
√tif
, 
fun˘i⁄
Ëdÿ{ if(“ëifË!
NULL
Ë{ (√tif)->
igmp_mac_fûãr
 = fun˘i⁄; }}0)

	)

307 
	#√tif_gë_igmp_mac_fûãr
(
√tif
Ë((“ëifË!
NULL
Ë? (“ëif)->
igmp_mac_fûãr
Ë: NULL)

	)

310 #i‡
ENABLE_LOOPBACK


311 
îr_t
 
√tif_lo›_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
, 
ù_addr_t
 *
de°_ù
);

312 
√tif_pﬁl
(
√tif
 *netif);

313 #i‡!
LWIP_NETIF_LOOPBACK_MULTITHREADING


314 
√tif_pﬁl_Æl
();

318 #i‡
LWIP_NETIF_HWADDRHINT


319 
	#NETIF_SET_HWADDRHINT
(
√tif
, 
höt
Ë(“ëif)->
addr_höt
 = (höt))

	)

321 
	#NETIF_SET_HWADDRHINT
(
√tif
, 
höt
)

	)

324 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/netifapi.h

28 #i‚de‡
__LWIP_NETIFAPI_H__


29 
	#__LWIP_NETIFAPI_H__


	)

31 
	~"lwù/›t.h
"

33 #i‡
LWIP_NETIF_API


35 
	~"lwù/sys.h
"

36 
	~"lwù/√tif.h
"

37 
	~"lwù/dh˝.h
"

38 
	~"lwù/autoù.h
"

40 #ifde‡
__˝lu•lus


44 (*
√tiÁpi_void_‚
)(
	t√tif
 *netif);

45 
îr_t
 (*
	t√tiÁpi_îπ_‚
)(
	t√tif
 *netif);

47 
	s√tiÁpi_msg_msg
 {

48 #i‡!
LWIP_TCPIP_CORE_LOCKING


49 
sys_£m_t
 
£m
;

51 
îr_t
 
îr
;

52 
√tif
 *netif;

55 
ù_addr_t
 *
ùaddr
;

56 
ù_addr_t
 *
√tmask
;

57 
ù_addr_t
 *
gw
;

58 *
°©e
;

59 
√tif_öô_‚
 
öô
;

60 
√tif_öput_‚
 
öput
;

61 } 
add
;

63 
√tiÁpi_void_‚
 
voidfunc
;

64 
√tiÁpi_îπ_‚
 
îπfunc
;

65 } 
comm⁄
;

66 } 
msg
;

69 
	s√tiÁpi_msg
 {

70 (* 
fun˘i⁄
)(
√tiÁpi_msg_msg
 *
msg
);

71 
√tiÁpi_msg_msg
 
msg
;

76 
îr_t
 
√tiÁpi_√tif_add
 ( 
√tif
 *netif,

77 
ù_addr_t
 *
ùaddr
,

78 
ù_addr_t
 *
√tmask
,

79 
ù_addr_t
 *
gw
,

80 *
°©e
,

81 
√tif_öô_‚
 
öô
,

82 
√tif_öput_‚
 
öput
);

84 
îr_t
 
√tiÁpi_√tif_£t_addr
 ( 
√tif
 *netif,

85 
ù_addr_t
 *
ùaddr
,

86 
ù_addr_t
 *
√tmask
,

87 
ù_addr_t
 *
gw
 );

89 
îr_t
 
√tiÁpi_√tif_comm⁄
 ( 
√tif
 *netif,

90 
√tiÁpi_void_‚
 
voidfunc
,

91 
√tiÁpi_îπ_‚
 
îπfunc
);

93 
	#√tiÁpi_√tif_ªmove
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_ªmove
, 
NULL
)

	)

94 
	#√tiÁpi_√tif_£t_up
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_up
, 
NULL
)

	)

95 
	#√tiÁpi_√tif_£t_down
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_down
, 
NULL
)

	)

96 
	#√tiÁpi_√tif_£t_deÁu…
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
√tif_£t_deÁu…
, 
NULL
)

	)

97 
	#√tiÁpi_dh˝_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
dh˝_°¨t
)

	)

98 
	#√tiÁpi_dh˝_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
dh˝_°›
, 
NULL
)

	)

99 
	#√tiÁpi_autoù_°¨t
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°¨t
)

	)

100 
	#√tiÁpi_autoù_°›
(
n
Ë
	`√tiÁpi_√tif_comm⁄
“, 
NULL
, 
autoù_°›
)

	)

102 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/opt.h

38 #i‚de‡
__LWIP_OPT_H__


39 
	#__LWIP_OPT_H__


	)

45 
	~"lwù›ts.h
"

46 
	~"lwù/debug.h
"

59 #i‚de‡
SYS_LIGHTWEIGHT_PROT


60 
	#SYS_LIGHTWEIGHT_PROT
 0

	)

67 #i‚de‡
NO_SYS


68 
	#NO_SYS
 0

	)

75 #i‚de‡
NO_SYS_NO_TIMERS


76 
	#NO_SYS_NO_TIMERS
 0

	)

83 #i‚de‡
MEMCPY


84 
	#MEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

91 #i‚de‡
SMEMCPY


92 
	#SMEMCPY
(
d°
,
§c
,
Àn
Ë
	`mem˝y
(d°,§c,Àn)

	)

105 #i‚de‡
MEM_LIBC_MALLOC


106 
	#MEM_LIBC_MALLOC
 0

	)

114 #i‚de‡
MEMP_MEM_MALLOC


115 
	#MEMP_MEM_MALLOC
 0

	)

123 #i‚de‡
MEM_ALIGNMENT


124 
	#MEM_ALIGNMENT
 1

	)

131 #i‚de‡
MEM_SIZE


132 
	#MEM_SIZE
 1600

	)

140 #i‚de‡
MEMP_SEPARATE_POOLS


141 
	#MEMP_SEPARATE_POOLS
 0

	)

153 #i‚de‡
MEMP_OVERFLOW_CHECK


154 
	#MEMP_OVERFLOW_CHECK
 0

	)

161 #i‚de‡
MEMP_SANITY_CHECK


162 
	#MEMP_SANITY_CHECK
 0

	)

171 #i‚de‡
MEM_USE_POOLS


172 
	#MEM_USE_POOLS
 0

	)

179 #i‚de‡
MEM_USE_POOLS_TRY_BIGGER_POOL


180 
	#MEM_USE_POOLS_TRY_BIGGER_POOL
 0

	)

189 #i‚de‡
MEMP_USE_CUSTOM_POOLS


190 
	#MEMP_USE_CUSTOM_POOLS
 0

	)

211 #i‚de‡
LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT


212 
	#LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
 0

	)

225 #i‚de‡
MEMP_NUM_PBUF


226 
	#MEMP_NUM_PBUF
 16

	)

233 #i‚de‡
MEMP_NUM_RAW_PCB


234 
	#MEMP_NUM_RAW_PCB
 4

	)

242 #i‚de‡
MEMP_NUM_UDP_PCB


243 
	#MEMP_NUM_UDP_PCB
 4

	)

250 #i‚de‡
MEMP_NUM_TCP_PCB


251 
	#MEMP_NUM_TCP_PCB
 5

	)

258 #i‚de‡
MEMP_NUM_TCP_PCB_LISTEN


259 
	#MEMP_NUM_TCP_PCB_LISTEN
 8

	)

266 #i‚de‡
MEMP_NUM_TCP_SEG


267 
	#MEMP_NUM_TCP_SEG
 16

	)

274 #i‚de‡
MEMP_NUM_REASSDATA


275 
	#MEMP_NUM_REASSDATA
 5

	)

285 #i‚de‡
MEMP_NUM_FRAG_PBUF


286 
	#MEMP_NUM_FRAG_PBUF
 15

	)

295 #i‚de‡
MEMP_NUM_ARP_QUEUE


296 
	#MEMP_NUM_ARP_QUEUE
 30

	)

305 #i‚de‡
MEMP_NUM_IGMP_GROUP


306 
	#MEMP_NUM_IGMP_GROUP
 8

	)

315 #i‚de‡
MEMP_NUM_SYS_TIMEOUT


316 
	#MEMP_NUM_SYS_TIMEOUT
 (
LWIP_TCP
 + 
IP_REASSEMBLY
 + 
LWIP_ARP
 + (2*
LWIP_DHCP
Ë+ 
LWIP_AUTOIP
 + 
LWIP_IGMP
 + 
LWIP_DNS
 + 
PPP_SUPPORT
)

	)

323 #i‚de‡
MEMP_NUM_NETBUF


324 
	#MEMP_NUM_NETBUF
 2

	)

331 #i‚de‡
MEMP_NUM_NETCONN


332 
	#MEMP_NUM_NETCONN
 4

	)

340 #i‚de‡
MEMP_NUM_TCPIP_MSG_API


341 
	#MEMP_NUM_TCPIP_MSG_API
 8

	)

349 #i‚de‡
MEMP_NUM_TCPIP_MSG_INPKT


350 
	#MEMP_NUM_TCPIP_MSG_INPKT
 8

	)

356 #i‚de‡
MEMP_NUM_SNMP_NODE


357 
	#MEMP_NUM_SNMP_NODE
 50

	)

364 #i‚de‡
MEMP_NUM_SNMP_ROOTNODE


365 
	#MEMP_NUM_SNMP_ROOTNODE
 30

	)

373 #i‚de‡
MEMP_NUM_SNMP_VARBIND


374 
	#MEMP_NUM_SNMP_VARBIND
 2

	)

382 #i‚de‡
MEMP_NUM_SNMP_VALUE


383 
	#MEMP_NUM_SNMP_VALUE
 3

	)

390 #i‚de‡
MEMP_NUM_NETDB


391 
	#MEMP_NUM_NETDB
 1

	)

398 #i‚de‡
MEMP_NUM_LOCALHOSTLIST


399 
	#MEMP_NUM_LOCALHOSTLIST
 1

	)

406 #i‚de‡
MEMP_NUM_PPPOE_INTERFACES


407 
	#MEMP_NUM_PPPOE_INTERFACES
 1

	)

413 #i‚de‡
PBUF_POOL_SIZE


414 
	#PBUF_POOL_SIZE
 16

	)

425 #i‚de‡
LWIP_ARP


426 
	#LWIP_ARP
 1

	)

432 #i‚de‡
ARP_TABLE_SIZE


433 
	#ARP_TABLE_SIZE
 10

	)

443 #i‚de‡
ARP_QUEUEING


444 
	#ARP_QUEUEING
 0

	)

457 #i‚de‡
ETHARP_TRUST_IP_MAC


458 
	#ETHARP_TRUST_IP_MAC
 0

	)

469 #i‚de‡
ETHARP_SUPPORT_VLAN


470 
	#ETHARP_SUPPORT_VLAN
 0

	)

476 #i‚de‡
LWIP_ETHERNET


477 
	#LWIP_ETHERNET
 (
LWIP_ARP
 || 
PPPOE_SUPPORT
)

	)

485 #i‚de‡
ETH_PAD_SIZE


486 
	#ETH_PAD_SIZE
 0

	)

492 #i‚de‡
ETHARP_SUPPORT_STATIC_ENTRIES


493 
	#ETHARP_SUPPORT_STATIC_ENTRIES
 0

	)

507 #i‚de‡
IP_FORWARD


508 
	#IP_FORWARD
 0

	)

516 #i‚de‡
IP_OPTIONS_ALLOWED


517 
	#IP_OPTIONS_ALLOWED
 1

	)

525 #i‚de‡
IP_REASSEMBLY


526 
	#IP_REASSEMBLY
 1

	)

534 #i‚de‡
IP_FRAG


535 
	#IP_FRAG
 1

	)

543 #i‚de‡
IP_REASS_MAXAGE


544 
	#IP_REASS_MAXAGE
 3

	)

553 #i‚de‡
IP_REASS_MAX_PBUFS


554 
	#IP_REASS_MAX_PBUFS
 10

	)

564 #i‚de‡
IP_FRAG_USES_STATIC_BUF


565 
	#IP_FRAG_USES_STATIC_BUF
 0

	)

572 #i‡
IP_FRAG_USES_STATIC_BUF
 && !
deföed
(
IP_FRAG_MAX_MTU
)

573 
	#IP_FRAG_MAX_MTU
 1500

	)

579 #i‚de‡
IP_DEFAULT_TTL


580 
	#IP_DEFAULT_TTL
 255

	)

588 #i‚de‡
IP_SOF_BROADCAST


589 
	#IP_SOF_BROADCAST
 0

	)

596 #i‚de‡
IP_SOF_BROADCAST_RECV


597 
	#IP_SOF_BROADCAST_RECV
 0

	)

607 #i‚de‡
IP_FORWARD_ALLOW_TX_ON_RX_NETIF


608 
	#IP_FORWARD_ALLOW_TX_ON_RX_NETIF
 0

	)

616 #i‚de‡
LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS


617 
	#LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS
 0

	)

629 #i‚de‡
LWIP_ICMP


630 
	#LWIP_ICMP
 1

	)

636 #i‚de‡
ICMP_TTL


637 
	#ICMP_TTL
 (
IP_DEFAULT_TTL
)

	)

643 #i‚de‡
LWIP_BROADCAST_PING


644 
	#LWIP_BROADCAST_PING
 0

	)

650 #i‚de‡
LWIP_MULTICAST_PING


651 
	#LWIP_MULTICAST_PING
 0

	)

662 #i‚de‡
LWIP_RAW


663 
	#LWIP_RAW
 1

	)

669 #i‚de‡
RAW_TTL


670 
	#RAW_TTL
 (
IP_DEFAULT_TTL
)

	)

681 #i‚de‡
LWIP_DHCP


682 
	#LWIP_DHCP
 0

	)

688 #i‚de‡
DHCP_DOES_ARP_CHECK


689 
	#DHCP_DOES_ARP_CHECK
 ((
LWIP_DHCP
Ë&& (
LWIP_ARP
))

	)

700 #i‚de‡
LWIP_AUTOIP


701 
	#LWIP_AUTOIP
 0

	)

708 #i‚de‡
LWIP_DHCP_AUTOIP_COOP


709 
	#LWIP_DHCP_AUTOIP_COOP
 0

	)

719 #i‚de‡
LWIP_DHCP_AUTOIP_COOP_TRIES


720 
	#LWIP_DHCP_AUTOIP_COOP_TRIES
 9

	)

732 #i‚de‡
LWIP_SNMP


733 
	#LWIP_SNMP
 0

	)

741 #i‚de‡
SNMP_CONCURRENT_REQUESTS


742 
	#SNMP_CONCURRENT_REQUESTS
 1

	)

749 #i‚de‡
SNMP_TRAP_DESTINATIONS


750 
	#SNMP_TRAP_DESTINATIONS
 1

	)

758 #i‚de‡
SNMP_PRIVATE_MIB


759 
	#SNMP_PRIVATE_MIB
 0

	)

767 #i‚de‡
SNMP_SAFE_REQUESTS


768 
	#SNMP_SAFE_REQUESTS
 1

	)

775 #i‚de‡
SNMP_MAX_OCTET_STRING_LEN


776 
	#SNMP_MAX_OCTET_STRING_LEN
 127

	)

784 #i‚de‡
SNMP_MAX_TREE_DEPTH


785 
	#SNMP_MAX_TREE_DEPTH
 15

	)

792 #i‚de‡
SNMP_MAX_VALUE_SIZE


793 
	#SNMP_MAX_VALUE_SIZE
 
	`LWIP_MAX
((
SNMP_MAX_OCTET_STRING_LEN
)+1, (
s32_t
)*(
SNMP_MAX_TREE_DEPTH
))

	)

804 #i‚de‡
LWIP_IGMP


805 
	#LWIP_IGMP
 0

	)

817 #i‚de‡
LWIP_DNS


818 
	#LWIP_DNS
 0

	)

822 #i‚de‡
DNS_TABLE_SIZE


823 
	#DNS_TABLE_SIZE
 4

	)

827 #i‚de‡
DNS_MAX_NAME_LENGTH


828 
	#DNS_MAX_NAME_LENGTH
 256

	)

832 #i‚de‡
DNS_MAX_SERVERS


833 
	#DNS_MAX_SERVERS
 2

	)

837 #i‚de‡
DNS_DOES_NAME_CHECK


838 
	#DNS_DOES_NAME_CHECK
 1

	)

842 #i‚de‡
DNS_MSG_SIZE


843 
	#DNS_MSG_SIZE
 512

	)

856 #i‚de‡
DNS_LOCAL_HOSTLIST


857 
	#DNS_LOCAL_HOSTLIST
 0

	)

862 #i‚de‡
DNS_LOCAL_HOSTLIST_IS_DYNAMIC


863 
	#DNS_LOCAL_HOSTLIST_IS_DYNAMIC
 0

	)

874 #i‚de‡
LWIP_UDP


875 
	#LWIP_UDP
 1

	)

881 #i‚de‡
LWIP_UDPLITE


882 
	#LWIP_UDPLITE
 0

	)

888 #i‚de‡
UDP_TTL


889 
	#UDP_TTL
 (
IP_DEFAULT_TTL
)

	)

895 #i‚de‡
LWIP_NETBUF_RECVINFO


896 
	#LWIP_NETBUF_RECVINFO
 0

	)

907 #i‚de‡
LWIP_TCP


908 
	#LWIP_TCP
 1

	)

914 #i‚de‡
TCP_TTL


915 
	#TCP_TTL
 (
IP_DEFAULT_TTL
)

	)

922 #i‚de‡
TCP_WND


923 
	#TCP_WND
 (4 * 
TCP_MSS
)

	)

929 #i‚de‡
TCP_MAXRTX


930 
	#TCP_MAXRTX
 12

	)

936 #i‚de‡
TCP_SYNMAXRTX


937 
	#TCP_SYNMAXRTX
 6

	)

944 #i‚de‡
TCP_QUEUE_OOSEQ


945 
	#TCP_QUEUE_OOSEQ
 (
LWIP_TCP
)

	)

955 #i‚de‡
TCP_MSS


956 
	#TCP_MSS
 536

	)

967 #i‚de‡
TCP_CALCULATE_EFF_SEND_MSS


968 
	#TCP_CALCULATE_EFF_SEND_MSS
 1

	)

976 #i‚de‡
TCP_SND_BUF


977 
	#TCP_SND_BUF
 (2 * 
TCP_MSS
)

	)

984 #i‚de‡
TCP_SND_QUEUELEN


985 
	#TCP_SND_QUEUELEN
 ((4 * (
TCP_SND_BUF
Ë+ (
TCP_MSS
 - 1))/(TCP_MSS))

	)

993 #i‚de‡
TCP_SNDLOWAT


994 
	#TCP_SNDLOWAT
 
	`LWIP_MIN
(
	`LWIP_MAX
(((
TCP_SND_BUF
)/2), (2 * 
TCP_MSS
Ë+ 1), (TCP_SND_BUFË- 1)

	)

1002 #i‚de‡
TCP_SNDQUEUELOWAT


1003 
	#TCP_SNDQUEUELOWAT
 
	`LWIP_MAX
(((
TCP_SND_QUEUELEN
)/2), 5)

	)

1010 #i‚de‡
TCP_OOSEQ_MAX_BYTES


1011 
	#TCP_OOSEQ_MAX_BYTES
 0

	)

1018 #i‚de‡
TCP_OOSEQ_MAX_PBUFS


1019 
	#TCP_OOSEQ_MAX_PBUFS
 0

	)

1025 #i‚de‡
TCP_LISTEN_BACKLOG


1026 
	#TCP_LISTEN_BACKLOG
 0

	)

1034 #i‚de‡
TCP_DEFAULT_LISTEN_BACKLOG


1035 
	#TCP_DEFAULT_LISTEN_BACKLOG
 0xff

	)

1052 #i‚de‡
TCP_OVERSIZE


1053 
	#TCP_OVERSIZE
 
TCP_MSS


	)

1059 #i‚de‡
LWIP_TCP_TIMESTAMPS


1060 
	#LWIP_TCP_TIMESTAMPS
 0

	)

1067 #i‚de‡
TCP_WND_UPDATE_THRESHOLD


1068 
	#TCP_WND_UPDATE_THRESHOLD
 (
TCP_WND
 / 4)

	)

1078 #i‡!
deföed
(
LWIP_EVENT_API
Ë&& !deföed(
LWIP_CALLBACK_API
)

1079 
	#LWIP_EVENT_API
 0

	)

1080 
	#LWIP_CALLBACK_API
 1

	)

1094 #i‚de‡
PBUF_LINK_HLEN


1095 
	#PBUF_LINK_HLEN
 (14 + 
ETH_PAD_SIZE
)

	)

1103 #i‚de‡
PBUF_POOL_BUFSIZE


1104 
	#PBUF_POOL_BUFSIZE
 
	`LWIP_MEM_ALIGN_SIZE
(
TCP_MSS
+40+
PBUF_LINK_HLEN
)

	)

1116 #i‚de‡
LWIP_NETIF_HOSTNAME


1117 
	#LWIP_NETIF_HOSTNAME
 0

	)

1123 #i‚de‡
LWIP_NETIF_API


1124 
	#LWIP_NETIF_API
 0

	)

1131 #i‚de‡
LWIP_NETIF_STATUS_CALLBACK


1132 
	#LWIP_NETIF_STATUS_CALLBACK
 0

	)

1139 #i‚de‡
LWIP_NETIF_LINK_CALLBACK


1140 
	#LWIP_NETIF_LINK_CALLBACK
 0

	)

1147 #i‚de‡
LWIP_NETIF_REMOVE_CALLBACK


1148 
	#LWIP_NETIF_REMOVE_CALLBACK
 0

	)

1158 #i‚de‡
LWIP_NETIF_HWADDRHINT


1159 
	#LWIP_NETIF_HWADDRHINT
 0

	)

1166 #i‚de‡
LWIP_NETIF_LOOPBACK


1167 
	#LWIP_NETIF_LOOPBACK
 0

	)

1174 #i‚de‡
LWIP_LOOPBACK_MAX_PBUFS


1175 
	#LWIP_LOOPBACK_MAX_PBUFS
 0

	)

1191 #i‚de‡
LWIP_NETIF_LOOPBACK_MULTITHREADING


1192 
	#LWIP_NETIF_LOOPBACK_MULTITHREADING
 (!
NO_SYS
)

	)

1204 #i‚de‡
LWIP_NETIF_TX_SINGLE_PBUF


1205 
	#LWIP_NETIF_TX_SINGLE_PBUF
 0

	)

1216 #i‚de‡
LWIP_HAVE_LOOPIF


1217 
	#LWIP_HAVE_LOOPIF
 0

	)

1228 #i‚de‡
LWIP_HAVE_SLIPIF


1229 
	#LWIP_HAVE_SLIPIF
 0

	)

1240 #i‚de‡
TCPIP_THREAD_NAME


1241 
	#TCPIP_THREAD_NAME
 "t˝ù_thªad"

	)

1249 #i‚de‡
TCPIP_THREAD_STACKSIZE


1250 
	#TCPIP_THREAD_STACKSIZE
 0

	)

1258 #i‚de‡
TCPIP_THREAD_PRIO


1259 
	#TCPIP_THREAD_PRIO
 1

	)

1267 #i‚de‡
TCPIP_MBOX_SIZE


1268 
	#TCPIP_MBOX_SIZE
 0

	)

1274 #i‚de‡
SLIPIF_THREAD_NAME


1275 
	#SLIPIF_THREAD_NAME
 "¶ùif_lo›"

	)

1283 #i‚de‡
SLIPIF_THREAD_STACKSIZE


1284 
	#SLIPIF_THREAD_STACKSIZE
 0

	)

1292 #i‚de‡
SLIPIF_THREAD_PRIO


1293 
	#SLIPIF_THREAD_PRIO
 1

	)

1299 #i‚de‡
PPP_THREAD_NAME


1300 
	#PPP_THREAD_NAME
 "µpI≈utThªad"

	)

1308 #i‚de‡
PPP_THREAD_STACKSIZE


1309 
	#PPP_THREAD_STACKSIZE
 0

	)

1317 #i‚de‡
PPP_THREAD_PRIO


1318 
	#PPP_THREAD_PRIO
 1

	)

1324 #i‚de‡
DEFAULT_THREAD_NAME


1325 
	#DEFAULT_THREAD_NAME
 "lwIP"

	)

1333 #i‚de‡
DEFAULT_THREAD_STACKSIZE


1334 
	#DEFAULT_THREAD_STACKSIZE
 0

	)

1342 #i‚de‡
DEFAULT_THREAD_PRIO


1343 
	#DEFAULT_THREAD_PRIO
 1

	)

1351 #i‚de‡
DEFAULT_RAW_RECVMBOX_SIZE


1352 
	#DEFAULT_RAW_RECVMBOX_SIZE
 0

	)

1360 #i‚de‡
DEFAULT_UDP_RECVMBOX_SIZE


1361 
	#DEFAULT_UDP_RECVMBOX_SIZE
 0

	)

1369 #i‚de‡
DEFAULT_TCP_RECVMBOX_SIZE


1370 
	#DEFAULT_TCP_RECVMBOX_SIZE
 0

	)

1378 #i‚de‡
DEFAULT_ACCEPTMBOX_SIZE


1379 
	#DEFAULT_ACCEPTMBOX_SIZE
 0

	)

1391 #i‚de‡
LWIP_TCPIP_CORE_LOCKING


1392 
	#LWIP_TCPIP_CORE_LOCKING
 0

	)

1399 #i‚de‡
LWIP_TCPIP_CORE_LOCKING_INPUT


1400 
	#LWIP_TCPIP_CORE_LOCKING_INPUT
 0

	)

1406 #i‚de‡
LWIP_NETCONN


1407 
	#LWIP_NETCONN
 1

	)

1413 #i‚de‡
LWIP_TCPIP_TIMEOUT


1414 
	#LWIP_TCPIP_TIMEOUT
 1

	)

1425 #i‚de‡
LWIP_SOCKET


1426 
	#LWIP_SOCKET
 1

	)

1433 #i‚de‡
LWIP_COMPAT_SOCKETS


1434 
	#LWIP_COMPAT_SOCKETS
 1

	)

1442 #i‚de‡
LWIP_POSIX_SOCKETS_IO_NAMES


1443 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 1

	)

1451 #i‚de‡
LWIP_TCP_KEEPALIVE


1452 
	#LWIP_TCP_KEEPALIVE
 0

	)

1459 #i‚de‡
LWIP_SO_SNDTIMEO


1460 
	#LWIP_SO_SNDTIMEO
 0

	)

1467 #i‚de‡
LWIP_SO_RCVTIMEO


1468 
	#LWIP_SO_RCVTIMEO
 0

	)

1474 #i‚de‡
LWIP_SO_RCVBUF


1475 
	#LWIP_SO_RCVBUF
 0

	)

1481 #i‚de‡
RECV_BUFSIZE_DEFAULT


1482 
	#RECV_BUFSIZE_DEFAULT
 
INT_MAX


	)

1488 #i‚de‡
SO_REUSE


1489 
	#SO_REUSE
 0

	)

1497 #i‚de‡
SO_REUSE_RXTOALL


1498 
	#SO_REUSE_RXTOALL
 0

	)

1509 #i‚de‡
LWIP_STATS


1510 
	#LWIP_STATS
 1

	)

1513 #i‡
LWIP_STATS


1518 #i‚de‡
LWIP_STATS_DISPLAY


1519 
	#LWIP_STATS_DISPLAY
 0

	)

1525 #i‚de‡
LINK_STATS


1526 
	#LINK_STATS
 1

	)

1532 #i‚de‡
ETHARP_STATS


1533 
	#ETHARP_STATS
 (
LWIP_ARP
)

	)

1539 #i‚de‡
IP_STATS


1540 
	#IP_STATS
 1

	)

1547 #i‚de‡
IPFRAG_STATS


1548 
	#IPFRAG_STATS
 (
IP_REASSEMBLY
 || 
IP_FRAG
)

	)

1554 #i‚de‡
ICMP_STATS


1555 
	#ICMP_STATS
 1

	)

1561 #i‚de‡
IGMP_STATS


1562 
	#IGMP_STATS
 (
LWIP_IGMP
)

	)

1569 #i‚de‡
UDP_STATS


1570 
	#UDP_STATS
 (
LWIP_UDP
)

	)

1577 #i‚de‡
TCP_STATS


1578 
	#TCP_STATS
 (
LWIP_TCP
)

	)

1584 #i‚de‡
MEM_STATS


1585 
	#MEM_STATS
 ((
MEM_LIBC_MALLOC
 =0Ë&& (
MEM_USE_POOLS
 =0))

	)

1591 #i‚de‡
MEMP_STATS


1592 
	#MEMP_STATS
 (
MEMP_MEM_MALLOC
 =0)

	)

1598 #i‚de‡
SYS_STATS


1599 
	#SYS_STATS
 (
NO_SYS
 =0)

	)

1604 
	#LINK_STATS
 0

	)

1605 
	#IP_STATS
 0

	)

1606 
	#IPFRAG_STATS
 0

	)

1607 
	#ICMP_STATS
 0

	)

1608 
	#IGMP_STATS
 0

	)

1609 
	#UDP_STATS
 0

	)

1610 
	#TCP_STATS
 0

	)

1611 
	#MEM_STATS
 0

	)

1612 
	#MEMP_STATS
 0

	)

1613 
	#SYS_STATS
 0

	)

1614 
	#LWIP_STATS_DISPLAY
 0

	)

1626 #i‚de‡
PPP_SUPPORT


1627 
	#PPP_SUPPORT
 0

	)

1633 #i‚de‡
PPPOE_SUPPORT


1634 
	#PPPOE_SUPPORT
 0

	)

1640 #i‚de‡
PPPOS_SUPPORT


1641 
	#PPPOS_SUPPORT
 
PPP_SUPPORT


	)

1644 #i‡
PPP_SUPPORT


1649 #i‚de‡
NUM_PPP


1650 
	#NUM_PPP
 1

	)

1656 #i‚de‡
PAP_SUPPORT


1657 
	#PAP_SUPPORT
 0

	)

1663 #i‚de‡
CHAP_SUPPORT


1664 
	#CHAP_SUPPORT
 0

	)

1670 #i‚de‡
MSCHAP_SUPPORT


1671 
	#MSCHAP_SUPPORT
 0

	)

1677 #i‚de‡
CBCP_SUPPORT


1678 
	#CBCP_SUPPORT
 0

	)

1684 #i‚de‡
CCP_SUPPORT


1685 
	#CCP_SUPPORT
 0

	)

1691 #i‚de‡
VJ_SUPPORT


1692 
	#VJ_SUPPORT
 0

	)

1698 #i‚de‡
MD5_SUPPORT


1699 
	#MD5_SUPPORT
 0

	)

1705 #i‚de‡
FSM_DEFTIMEOUT


1706 
	#FSM_DEFTIMEOUT
 6

	)

1709 #i‚de‡
FSM_DEFMAXTERMREQS


1710 
	#FSM_DEFMAXTERMREQS
 2

	)

1713 #i‚de‡
FSM_DEFMAXCONFREQS


1714 
	#FSM_DEFMAXCONFREQS
 10

	)

1717 #i‚de‡
FSM_DEFMAXNAKLOOPS


1718 
	#FSM_DEFMAXNAKLOOPS
 5

	)

1721 #i‚de‡
UPAP_DEFTIMEOUT


1722 
	#UPAP_DEFTIMEOUT
 6

	)

1725 #i‚de‡
UPAP_DEFREQTIME


1726 
	#UPAP_DEFREQTIME
 30

	)

1729 #i‚de‡
CHAP_DEFTIMEOUT


1730 
	#CHAP_DEFTIMEOUT
 6

	)

1733 #i‚de‡
CHAP_DEFTRANSMITS


1734 
	#CHAP_DEFTRANSMITS
 10

	)

1738 #i‚de‡
LCP_ECHOINTERVAL


1739 
	#LCP_ECHOINTERVAL
 0

	)

1743 #i‚de‡
LCP_MAXECHOFAILS


1744 
	#LCP_MAXECHOFAILS
 3

	)

1748 #i‚de‡
PPP_MAXIDLEFLAG


1749 
	#PPP_MAXIDLEFLAG
 100

	)

1760 
	#PPP_MTU
 1500

	)

1761 #i‚de‡
PPP_MAXMTU


1763 
	#PPP_MAXMTU
 1500

	)

1765 
	#PPP_MINMTU
 64

	)

1766 
	#PPP_MRU
 1500

	)

1767 
	#PPP_MAXMRU
 1500

	)

1768 #i‚de‡
PPP_DEFMRU


1769 
	#PPP_DEFMRU
 296

	)

1771 
	#PPP_MINMRU
 128

	)

1773 #i‚de‡
MAXNAMELEN


1774 
	#MAXNAMELEN
 256

	)

1776 #i‚de‡
MAXSECRETLEN


1777 
	#MAXSECRETLEN
 256

	)

1790 #i‚de‡
CHECKSUM_GEN_IP


1791 
	#CHECKSUM_GEN_IP
 1

	)

1797 #i‚de‡
CHECKSUM_GEN_UDP


1798 
	#CHECKSUM_GEN_UDP
 1

	)

1804 #i‚de‡
CHECKSUM_GEN_TCP


1805 
	#CHECKSUM_GEN_TCP
 1

	)

1811 #i‚de‡
CHECKSUM_GEN_ICMP


1812 
	#CHECKSUM_GEN_ICMP
 1

	)

1818 #i‚de‡
CHECKSUM_CHECK_IP


1819 
	#CHECKSUM_CHECK_IP
 1

	)

1825 #i‚de‡
CHECKSUM_CHECK_UDP


1826 
	#CHECKSUM_CHECK_UDP
 1

	)

1832 #i‚de‡
CHECKSUM_CHECK_TCP


1833 
	#CHECKSUM_CHECK_TCP
 1

	)

1840 #i‚de‡
LWIP_CHECKSUM_ON_COPY


1841 
	#LWIP_CHECKSUM_ON_COPY
 0

	)

1882 #i‚de‡
LWIP_DBG_MIN_LEVEL


1883 
	#LWIP_DBG_MIN_LEVEL
 
LWIP_DBG_LEVEL_ALL


	)

1890 #i‚de‡
LWIP_DBG_TYPES_ON


1891 
	#LWIP_DBG_TYPES_ON
 
LWIP_DBG_ON


	)

1897 #i‚de‡
ETHARP_DEBUG


1898 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

1904 #i‚de‡
NETIF_DEBUG


1905 
	#NETIF_DEBUG
 
LWIP_DBG_OFF


	)

1911 #i‚de‡
PBUF_DEBUG


1912 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

1918 #i‚de‡
API_LIB_DEBUG


1919 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

1925 #i‚de‡
API_MSG_DEBUG


1926 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

1932 #i‚de‡
SOCKETS_DEBUG


1933 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

1939 #i‚de‡
ICMP_DEBUG


1940 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

1946 #i‚de‡
IGMP_DEBUG


1947 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

1953 #i‚de‡
INET_DEBUG


1954 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

1960 #i‚de‡
IP_DEBUG


1961 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

1967 #i‚de‡
IP_REASS_DEBUG


1968 
	#IP_REASS_DEBUG
 
LWIP_DBG_OFF


	)

1974 #i‚de‡
RAW_DEBUG


1975 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

1981 #i‚de‡
MEM_DEBUG


1982 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

1988 #i‚de‡
MEMP_DEBUG


1989 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

1995 #i‚de‡
SYS_DEBUG


1996 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

2002 #i‚de‡
TIMERS_DEBUG


2003 
	#TIMERS_DEBUG
 
LWIP_DBG_OFF


	)

2009 #i‚de‡
TCP_DEBUG


2010 
	#TCP_DEBUG
 
LWIP_DBG_OFF


	)

2016 #i‚de‡
TCP_INPUT_DEBUG


2017 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

2023 #i‚de‡
TCP_FR_DEBUG


2024 
	#TCP_FR_DEBUG
 
LWIP_DBG_OFF


	)

2031 #i‚de‡
TCP_RTO_DEBUG


2032 
	#TCP_RTO_DEBUG
 
LWIP_DBG_OFF


	)

2038 #i‚de‡
TCP_CWND_DEBUG


2039 
	#TCP_CWND_DEBUG
 
LWIP_DBG_OFF


	)

2045 #i‚de‡
TCP_WND_DEBUG


2046 
	#TCP_WND_DEBUG
 
LWIP_DBG_OFF


	)

2052 #i‚de‡
TCP_OUTPUT_DEBUG


2053 
	#TCP_OUTPUT_DEBUG
 
LWIP_DBG_OFF


	)

2059 #i‚de‡
TCP_RST_DEBUG


2060 
	#TCP_RST_DEBUG
 
LWIP_DBG_OFF


	)

2066 #i‚de‡
TCP_QLEN_DEBUG


2067 
	#TCP_QLEN_DEBUG
 
LWIP_DBG_OFF


	)

2073 #i‚de‡
UDP_DEBUG


2074 
	#UDP_DEBUG
 
LWIP_DBG_OFF


	)

2080 #i‚de‡
TCPIP_DEBUG


2081 
	#TCPIP_DEBUG
 
LWIP_DBG_OFF


	)

2087 #i‚de‡
PPP_DEBUG


2088 
	#PPP_DEBUG
 
LWIP_DBG_OFF


	)

2094 #i‚de‡
SLIP_DEBUG


2095 
	#SLIP_DEBUG
 
LWIP_DBG_OFF


	)

2101 #i‚de‡
DHCP_DEBUG


2102 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

2108 #i‚de‡
AUTOIP_DEBUG


2109 
	#AUTOIP_DEBUG
 
LWIP_DBG_OFF


	)

2115 #i‚de‡
SNMP_MSG_DEBUG


2116 
	#SNMP_MSG_DEBUG
 
LWIP_DBG_OFF


	)

2122 #i‚de‡
SNMP_MIB_DEBUG


2123 
	#SNMP_MIB_DEBUG
 
LWIP_DBG_OFF


	)

2129 #i‚de‡
DNS_DEBUG


2130 
	#DNS_DEBUG
 
LWIP_DBG_OFF


	)

	@src/extern/lwip/lwip/src/include/lwip/pbuf.h

33 #i‚de‡
__LWIP_PBUF_H__


34 
	#__LWIP_PBUF_H__


	)

36 
	~"lwù/›t.h
"

37 
	~"lwù/îr.h
"

39 #ifde‡
__˝lu•lus


45 
	#LWIP_SUPPORT_CUSTOM_PBUF
 (
IP_FRAG
 && !
IP_FRAG_USES_STATIC_BUF
 && !
LWIP_NETIF_TX_SINGLE_PBUF
)

	)

47 
	#PBUF_TRANSPORT_HLEN
 20

	)

48 
	#PBUF_IP_HLEN
 20

	)

51 
PBUF_TRANSPORT
,

52 
PBUF_IP
,

53 
PBUF_LINK
,

54 
PBUF_RAW


55 } 
	tpbuf_œyî
;

58 
PBUF_RAM
,

59 
PBUF_ROM
,

60 
PBUF_REF
,

61 
PBUF_POOL


62 } 
	tpbuf_ty≥
;

66 
	#PBUF_FLAG_PUSH
 0x01U

	)

69 
	#PBUF_FLAG_IS_CUSTOM
 0x02U

	)

71 
	#PBUF_FLAG_MCASTLOOP
 0x04U

	)

73 
	#PBUF_FLAG_LLBCAST
 0x08U

	)

75 
	#PBUF_FLAG_LLMCAST
 0x10U

	)

77 
	#PBUF_FLAG_TCP_FIN
 0x20U

	)

79 
	spbuf
 {

81 
pbuf
 *
√xt
;

84 *
∑ylﬂd
;

93 
u16_t
 
tŸ_Àn
;

96 
u16_t
 
Àn
;

99 
u8_t
 
ty≥
;

102 
u8_t
 
Êags
;

109 
u16_t
 
ªf
;

112 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


114 (*
pbuf_‰ì_cu°om_‚
)(
	tpbuf
 *
	tp
);

117 
	spbuf_cu°om
 {

119 
pbuf
Öbuf;

121 
pbuf_‰ì_cu°om_‚
 
cu°om_‰ì_fun˘i⁄
;

125 #i‡
LWIP_TCP
 && 
TCP_QUEUE_OOSEQ


127 #i‚de‡
PBUF_POOL_FREE_OOSEQ


128 
	#PBUF_POOL_FREE_OOSEQ
 1

	)

130 #i‡
NO_SYS
 && 
PBUF_POOL_FREE_OOSEQ


131 vﬁ©ûê
u8_t
 
pbuf_‰ì_oo£q_≥ndög
;

132 
pbuf_‰ì_oo£q
();

136 
	#PBUF_CHECK_FREE_OOSEQ
(Ëdÿ{ if(
pbuf_‰ì_oo£q_≥ndög
) { \

139 
	`pbuf_‰ì_oo£q
(); }}0)

	)

144 
	#pbuf_öô
()

	)

146 
pbuf
 *
pbuf_Æloc
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
);

147 #i‡
LWIP_SUPPORT_CUSTOM_PBUF


148 
pbuf
 *
pbuf_Ælo˚d_cu°om
(
pbuf_œyî
 
l
, 
u16_t
 
Àngth
, 
pbuf_ty≥
 
ty≥
,

149 
pbuf_cu°om
 *
p
, *
∑ylﬂd_mem
,

150 
u16_t
 
∑ylﬂd_mem_Àn
);

152 
pbuf_ªÆloc
(
pbuf
 *
p
, 
u16_t
 
size
);

153 
u8_t
 
pbuf_hódî
(
pbuf
 *
p
, 
s16_t
 
hódî_size
);

154 
pbuf_ªf
(
pbuf
 *
p
);

155 
u8_t
 
pbuf_‰ì
(
pbuf
 *
p
);

156 
u8_t
 
pbuf_˛í
(
pbuf
 *
p
);

157 
pbuf_ˇt
(
pbuf
 *
hód
, pbu‡*
èû
);

158 
pbuf_chaö
(
pbuf
 *
hód
, pbu‡*
èû
);

159 
pbuf
 *
pbuf_dechaö
(pbu‡*
p
);

160 
îr_t
 
pbuf_c›y
(
pbuf
 *
p_to
, pbu‡*
p_‰om
);

161 
u16_t
 
pbuf_c›y_∑πül
(
pbuf
 *
p
, *
d©≠å
, u16_à
Àn
, u16_à
off£t
);

162 
îr_t
 
pbuf_èke
(
pbuf
 *
buf
, c⁄° *
d©≠å
, 
u16_t
 
Àn
);

163 
pbuf
 *
pbuf_cﬂÀs˚
(pbu‡*
p
, 
pbuf_œyî
 
œyî
);

164 #i‡
LWIP_CHECKSUM_ON_COPY


165 
îr_t
 
pbuf_fûl_chksum
(
pbuf
 *
p
, 
u16_t
 
°¨t_off£t
, c⁄° *
d©≠å
,

166 
u16_t
 
Àn
, u16_à*
chksum
);

169 
u8_t
 
pbuf_gë_©
(
pbuf
* 
p
, 
u16_t
 
off£t
);

170 
u16_t
 
pbuf_memcmp
(
pbuf
* 
p
, u16_à
off£t
, c⁄° * 
s2
, u16_à
n
);

171 
u16_t
 
pbuf_memföd
(
pbuf
* 
p
, c⁄° * 
mem
, u16_à
mem_Àn
, u16_à
°¨t_off£t
);

172 
u16_t
 
pbuf_°r°r
(
pbuf
* 
p
, c⁄° * 
sub°r
);

174 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/raw.h

32 #i‚de‡
__LWIP_RAW_H__


33 
	#__LWIP_RAW_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_RAW


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/def.h
"

41 
	~"lwù/ù.h
"

42 
	~"lwù/ù_addr.h
"

44 #ifde‡
__˝lu•lus


48 
øw_pcb
;

60 
u8_t
 (*
	tøw_ªcv_‚
)(*
	t¨g
, 
	tøw_pcb
 *
	tpcb
, 
	tpbuf
 *
	tp
,

61 
	tù_addr_t
 *
	taddr
);

63 
	søw_pcb
 {

65 
IP_PCB
;

67 
øw_pcb
 *
√xt
;

69 
u8_t
 
¥Ÿocﬁ
;

72 
øw_ªcv_‚
 
ªcv
;

74 *
ªcv_¨g
;

79 
øw_pcb
 * 
øw_√w
 (
u8_t
 
¥Ÿo
);

80 
øw_ªmove
 (
øw_pcb
 *
pcb
);

81 
îr_t
 
øw_böd
 (
øw_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
);

82 
îr_t
 
øw_c⁄√˘
 (
øw_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
);

84 
øw_ªcv
 (
øw_pcb
 *
pcb
, 
øw_ªcv_‚
 
ªcv
, *
ªcv_¨g
);

85 
îr_t
 
øw_£ndto
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
, 
ù_addr_t
 *
ùaddr
);

86 
îr_t
 
øw_£nd
 (
øw_pcb
 *
pcb
, 
pbuf
 *
p
);

89 
u8_t
 
øw_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

90 
	#øw_öô
(Ë

	)

92 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/sio.h

35 #i‚de‡
__SIO_H__


36 
	#__SIO_H__


	)

38 
	~"lwù/¨ch.h
"

40 #ifde‡
__˝lu•lus


46 #i‚de‡
__sio_fd_t_deföed


47 * 
	tsio_fd_t
;

53 #i‚de‡
sio_›í


60 
sio_fd_t
 
sio_›í
(
u8_t
 
devnum
);

63 #i‚de‡
sio_£nd


72 
sio_£nd
(
u8_t
 
c
, 
sio_fd_t
 
fd
);

75 #i‚de‡
sio_ªcv


83 
u8_t
 
sio_ªcv
(
sio_fd_t
 
fd
);

86 #i‚de‡
sio_ªad


98 
u32_t
 
sio_ªad
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

101 #i‚de‡
sio_åyªad


111 
u32_t
 
sio_åyªad
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

114 #i‚de‡
sio_wrôe


125 
u32_t
 
sio_wrôe
(
sio_fd_t
 
fd
, 
u8_t
 *
d©a
, u32_à
Àn
);

128 #i‚de‡
sio_ªad_ab‹t


134 
sio_ªad_ab‹t
(
sio_fd_t
 
fd
);

137 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/snmp.h

33 #i‚de‡
__LWIP_SNMP_H__


34 
	#__LWIP_SNMP_H__


	)

36 
	~"lwù/›t.h
"

38 #ifde‡
__˝lu•lus


42 
	~"lwù/ù_addr.h
"

44 
udp_pcb
;

45 
√tif
;

50 
	e¢mp_ifTy≥
 {

51 
¢mp_ifTy≥_Ÿhî
=1,

52 
¢mp_ifTy≥_ªguœr1822
,

53 
¢mp_ifTy≥_hdh1822
,

54 
¢mp_ifTy≥_ddn_x25
,

55 
¢mp_ifTy≥_rfc877_x25
,

56 
¢mp_ifTy≥_ëhî√t_csmacd
,

57 
¢mp_ifTy≥_iso88023_csmacd
,

58 
¢mp_ifTy≥_iso88024_tokíBus
,

59 
¢mp_ifTy≥_iso88025_tokíRög
,

60 
¢mp_ifTy≥_iso88026_m™
,

61 
¢mp_ifTy≥_°¨L™
,

62 
¢mp_ifTy≥_¥Ÿe⁄_10Mbô
,

63 
¢mp_ifTy≥_¥Ÿe⁄_80Mbô
,

64 
¢mp_ifTy≥_hy≥rch™√l
,

65 
¢mp_ifTy≥_fddi
,

66 
¢mp_ifTy≥_œpb
,

67 
¢mp_ifTy≥_sdlc
,

68 
¢mp_ifTy≥_ds1
,

69 
¢mp_ifTy≥_e1
,

70 
¢mp_ifTy≥_basicISDN
,

71 
¢mp_ifTy≥_¥im¨yISDN
,

72 
¢mp_ifTy≥_¥›PoötToPoötSîül
,

73 
¢mp_ifTy≥_µp
,

74 
¢mp_ifTy≥_so·w¨eLo›back
,

75 
¢mp_ifTy≥_e⁄
,

76 
¢mp_ifTy≥_ëhî√t_3Mbô
,

77 
¢mp_ifTy≥_nsù
,

78 
¢mp_ifTy≥_¶ù
,

79 
¢mp_ifTy≥_u…ø
,

80 
¢mp_ifTy≥_ds3
,

81 
¢mp_ifTy≥_sù
,

82 
¢mp_ifTy≥_‰ame_ªœy


85 #i‡
LWIP_SNMP


88 
	#SNMP_SYSUPTIME_INTERVAL
 10

	)

91 
	#LWIP_SNMP_OBJ_ID_LEN
 32

	)

94 
	s¢mp_obj_id


96 
u8_t
 
Àn
;

97 
s32_t
 
id
[
LWIP_SNMP_OBJ_ID_LEN
];

101 
¢mp_£t_sysde§
(
u8_t
* 
°r
, u8_t* 
Àn
);

102 
¢mp_£t_sysobjid
(
¢mp_obj_id
 *
oid
);

103 
¢mp_gë_sysobjid_±r
(
¢mp_obj_id
 **
oid
);

104 
¢mp_öc_sysu±ime
();

105 
¢mp_add_sysu±ime
(
u32_t
 
vÆue
);

106 
¢mp_gë_sysu±ime
(
u32_t
 *
vÆue
);

107 
¢mp_£t_sysc⁄è˘
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

108 
¢mp_£t_sy¢ame
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

109 
¢mp_£t_sy¶oˇti⁄
(
u8_t
 *
oc°r
, u8_à*
oc°æí
);

112 
¢mp_add_iföo˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

113 
¢mp_öc_iföuˇ°pkts
(
√tif
 *
ni
);

114 
¢mp_öc_ifönuˇ°pkts
(
√tif
 *
ni
);

115 
¢mp_öc_ifödisˇrds
(
√tif
 *
ni
);

116 
¢mp_add_ifouto˘ës
(
√tif
 *
ni
, 
u32_t
 
vÆue
);

117 
¢mp_öc_ifoutuˇ°pkts
(
√tif
 *
ni
);

118 
¢mp_öc_ifouäuˇ°pkts
(
√tif
 *
ni
);

119 
¢mp_öc_ifoutdisˇrds
(
√tif
 *
ni
);

120 
¢mp_öc_iÊi°
();

121 
¢mp_dec_iÊi°
();

124 
¢mp_ö£π_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr_t
 *
ù
);

125 
¢mp_dñëe_¨pidx_åì
(
√tif
 *
ni
, 
ù_addr_t
 *
ù
);

128 
¢mp_öc_ùöª˚ives
();

129 
¢mp_öc_ùöhdªº‹s
();

130 
¢mp_öc_ùöaddªº‹s
();

131 
¢mp_öc_ùf‹wd©agøms
();

132 
¢mp_öc_ùöunknow≈rŸos
();

133 
¢mp_öc_ùödisˇrds
();

134 
¢mp_öc_ùödñivîs
();

135 
¢mp_öc_ùouåeque°s
();

136 
¢mp_öc_ùoutdisˇrds
();

137 
¢mp_öc_ùouä‹ouãs
();

138 
¢mp_öc_ùªasmªqds
();

139 
¢mp_öc_ùªasmoks
();

140 
¢mp_öc_ùªasmÁûs
();

141 
¢mp_öc_ù‰agoks
();

142 
¢mp_öc_ù‰agÁûs
();

143 
¢mp_öc_ù‰ag¸óãs
();

144 
¢mp_öc_ùroutögdisˇrds
();

145 
¢mp_ö£π_ùaddridx_åì
(
√tif
 *
ni
);

146 
¢mp_dñëe_ùaddridx_åì
(
√tif
 *
ni
);

147 
¢mp_ö£π_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

148 
¢mp_dñëe_ùπeidx_åì
(
u8_t
 
dÊt
, 
√tif
 *
ni
);

151 
¢mp_öc_icmpömsgs
();

152 
¢mp_öc_icmpöîr‹s
();

153 
¢mp_öc_icmpöde°uƒóchs
();

154 
¢mp_öc_icmpötimìxcds
();

155 
¢mp_öc_icmpö∑rm¥obs
();

156 
¢mp_öc_icmpö§cquíchs
();

157 
¢mp_öc_icmpöªdúe˘s
();

158 
¢mp_öc_icmpöechos
();

159 
¢mp_öc_icmpöech‹ïs
();

160 
¢mp_öc_icmpötime°amps
();

161 
¢mp_öc_icmpötime°am¥ïs
();

162 
¢mp_öc_icmpöaddrmasks
();

163 
¢mp_öc_icmpöaddrmaskªps
();

164 
¢mp_öc_icmpoutmsgs
();

165 
¢mp_öc_icmpouãº‹s
();

166 
¢mp_öc_icmpoutde°uƒóchs
();

167 
¢mp_öc_icmpouâimìxcds
();

168 
¢mp_öc_icmpouç¨m¥obs
();

169 
¢mp_öc_icmpout§cquíchs
();

170 
¢mp_öc_icmpouåedúe˘s
();

171 
¢mp_öc_icmpouãchos
();

172 
¢mp_öc_icmpouãch‹ïs
();

173 
¢mp_öc_icmpouâime°amps
();

174 
¢mp_öc_icmpouâime°am¥ïs
();

175 
¢mp_öc_icmpouèddrmasks
();

176 
¢mp_öc_icmpouèddrmaskªps
();

179 
¢mp_öc_t˝a˘ive›ís
();

180 
¢mp_öc_t˝∑ssive›ís
();

181 
¢mp_öc_t˝©ãm±Áûs
();

182 
¢mp_öc_t˝e°abª£ts
();

183 
¢mp_öc_t˝ö£gs
();

184 
¢mp_öc_t˝out£gs
();

185 
¢mp_öc_t˝ªå™s£gs
();

186 
¢mp_öc_t˝öîrs
();

187 
¢mp_öc_t˝ouå°s
();

190 
¢mp_öc_udpöd©agøms
();

191 
¢mp_öc_ud≤›‹ts
();

192 
¢mp_öc_udpöîr‹s
();

193 
¢mp_öc_udpoutd©agøms
();

194 
¢mp_ö£π_udpidx_åì
(
udp_pcb
 *
pcb
);

195 
¢mp_dñëe_udpidx_åì
(
udp_pcb
 *
pcb
);

198 
¢mp_öc_¢mpöpkts
();

199 
¢mp_öc_¢mpouçkts
();

200 
¢mp_öc_¢mpöbadvîsi⁄s
();

201 
¢mp_öc_¢mpöbadcommunôy«mes
();

202 
¢mp_öc_¢mpöbadcommunôyu£s
();

203 
¢mp_öc_¢mpöa¢∑r£îrs
();

204 
¢mp_öc_¢mpötoobigs
();

205 
¢mp_öc_¢mpönosuch«mes
();

206 
¢mp_öc_¢mpöbadvÆues
();

207 
¢mp_öc_¢mpöªad⁄lys
();

208 
¢mp_öc_¢mpögíîrs
();

209 
¢mp_add_¢mpötŸÆªqv¨s
(
u8_t
 
vÆue
);

210 
¢mp_add_¢mpötŸÆ£tv¨s
(
u8_t
 
vÆue
);

211 
¢mp_öc_¢mpögëªque°s
();

212 
¢mp_öc_¢mpögë√xts
();

213 
¢mp_öc_¢mpö£åeque°s
();

214 
¢mp_öc_¢mpögëª•⁄£s
();

215 
¢mp_öc_¢mpöå≠s
();

216 
¢mp_öc_¢mpouâoobigs
();

217 
¢mp_öc_¢mpouäosuch«mes
();

218 
¢mp_öc_¢mpoutbadvÆues
();

219 
¢mp_öc_¢mpoutgíîrs
();

220 
¢mp_öc_¢mpoutgëªque°s
();

221 
¢mp_öc_¢mpoutgë√xts
();

222 
¢mp_öc_¢mpout£åeque°s
();

223 
¢mp_öc_¢mpoutgëª•⁄£s
();

224 
¢mp_öc_¢mpouâøps
();

225 
¢mp_gë_¢mpgΩid_±r
(
¢mp_obj_id
 **
oid
);

226 
¢mp_£t_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

227 
¢mp_gë_¢m≥«bÀauthíå≠s
(
u8_t
 *
vÆue
);

234 
	#¢mp_£t_sysde§
(
°r
, 
Àn
)

	)

235 
	#¢mp_£t_sysobjid
(
oid
);

	)

236 
	#¢mp_gë_sysobjid_±r
(
oid
)

	)

237 
	#¢mp_öc_sysu±ime
()

	)

238 
	#¢mp_add_sysu±ime
(
vÆue
)

	)

239 
	#¢mp_gë_sysu±ime
(
vÆue
)

	)

240 
	#¢mp_£t_sysc⁄è˘
(
oc°r
, 
oc°æí
);

	)

241 
	#¢mp_£t_sy¢ame
(
oc°r
, 
oc°æí
);

	)

242 
	#¢mp_£t_sy¶oˇti⁄
(
oc°r
, 
oc°æí
);

	)

245 
	#¢mp_add_iföo˘ës
(
ni
,
vÆue
)

	)

246 
	#¢mp_öc_iföuˇ°pkts
(
ni
)

	)

247 
	#¢mp_öc_ifönuˇ°pkts
(
ni
)

	)

248 
	#¢mp_öc_ifödisˇrds
(
ni
)

	)

249 
	#¢mp_add_ifouto˘ës
(
ni
,
vÆue
)

	)

250 
	#¢mp_öc_ifoutuˇ°pkts
(
ni
)

	)

251 
	#¢mp_öc_ifouäuˇ°pkts
(
ni
)

	)

252 
	#¢mp_öc_ifoutdisˇrds
(
ni
)

	)

253 
	#¢mp_öc_iÊi°
()

	)

254 
	#¢mp_dec_iÊi°
()

	)

257 
	#¢mp_ö£π_¨pidx_åì
(
ni
,
ù
)

	)

258 
	#¢mp_dñëe_¨pidx_åì
(
ni
,
ù
)

	)

261 
	#¢mp_öc_ùöª˚ives
()

	)

262 
	#¢mp_öc_ùöhdªº‹s
()

	)

263 
	#¢mp_öc_ùöaddªº‹s
()

	)

264 
	#¢mp_öc_ùf‹wd©agøms
()

	)

265 
	#¢mp_öc_ùöunknow≈rŸos
()

	)

266 
	#¢mp_öc_ùödisˇrds
()

	)

267 
	#¢mp_öc_ùödñivîs
()

	)

268 
	#¢mp_öc_ùouåeque°s
()

	)

269 
	#¢mp_öc_ùoutdisˇrds
()

	)

270 
	#¢mp_öc_ùouä‹ouãs
()

	)

271 
	#¢mp_öc_ùªasmªqds
()

	)

272 
	#¢mp_öc_ùªasmoks
()

	)

273 
	#¢mp_öc_ùªasmÁûs
()

	)

274 
	#¢mp_öc_ù‰agoks
()

	)

275 
	#¢mp_öc_ù‰agÁûs
()

	)

276 
	#¢mp_öc_ù‰ag¸óãs
()

	)

277 
	#¢mp_öc_ùroutögdisˇrds
()

	)

278 
	#¢mp_ö£π_ùaddridx_åì
(
ni
)

	)

279 
	#¢mp_dñëe_ùaddridx_åì
(
ni
)

	)

280 
	#¢mp_ö£π_ùπeidx_åì
(
dÊt
, 
ni
)

	)

281 
	#¢mp_dñëe_ùπeidx_åì
(
dÊt
, 
ni
)

	)

284 
	#¢mp_öc_icmpömsgs
()

	)

285 
	#¢mp_öc_icmpöîr‹s
()

	)

286 
	#¢mp_öc_icmpöde°uƒóchs
()

	)

287 
	#¢mp_öc_icmpötimìxcds
()

	)

288 
	#¢mp_öc_icmpö∑rm¥obs
()

	)

289 
	#¢mp_öc_icmpö§cquíchs
()

	)

290 
	#¢mp_öc_icmpöªdúe˘s
()

	)

291 
	#¢mp_öc_icmpöechos
()

	)

292 
	#¢mp_öc_icmpöech‹ïs
()

	)

293 
	#¢mp_öc_icmpötime°amps
()

	)

294 
	#¢mp_öc_icmpötime°am¥ïs
()

	)

295 
	#¢mp_öc_icmpöaddrmasks
()

	)

296 
	#¢mp_öc_icmpöaddrmaskªps
()

	)

297 
	#¢mp_öc_icmpoutmsgs
()

	)

298 
	#¢mp_öc_icmpouãº‹s
()

	)

299 
	#¢mp_öc_icmpoutde°uƒóchs
()

	)

300 
	#¢mp_öc_icmpouâimìxcds
()

	)

301 
	#¢mp_öc_icmpouç¨m¥obs
()

	)

302 
	#¢mp_öc_icmpout§cquíchs
()

	)

303 
	#¢mp_öc_icmpouåedúe˘s
()

	)

304 
	#¢mp_öc_icmpouãchos
()

	)

305 
	#¢mp_öc_icmpouãch‹ïs
()

	)

306 
	#¢mp_öc_icmpouâime°amps
()

	)

307 
	#¢mp_öc_icmpouâime°am¥ïs
()

	)

308 
	#¢mp_öc_icmpouèddrmasks
()

	)

309 
	#¢mp_öc_icmpouèddrmaskªps
()

	)

311 
	#¢mp_öc_t˝a˘ive›ís
()

	)

312 
	#¢mp_öc_t˝∑ssive›ís
()

	)

313 
	#¢mp_öc_t˝©ãm±Áûs
()

	)

314 
	#¢mp_öc_t˝e°abª£ts
()

	)

315 
	#¢mp_öc_t˝ö£gs
()

	)

316 
	#¢mp_öc_t˝out£gs
()

	)

317 
	#¢mp_öc_t˝ªå™s£gs
()

	)

318 
	#¢mp_öc_t˝öîrs
()

	)

319 
	#¢mp_öc_t˝ouå°s
()

	)

322 
	#¢mp_öc_udpöd©agøms
()

	)

323 
	#¢mp_öc_ud≤›‹ts
()

	)

324 
	#¢mp_öc_udpöîr‹s
()

	)

325 
	#¢mp_öc_udpoutd©agøms
()

	)

326 
	#¢mp_ö£π_udpidx_åì
(
pcb
)

	)

327 
	#¢mp_dñëe_udpidx_åì
(
pcb
)

	)

330 
	#¢mp_öc_¢mpöpkts
()

	)

331 
	#¢mp_öc_¢mpouçkts
()

	)

332 
	#¢mp_öc_¢mpöbadvîsi⁄s
()

	)

333 
	#¢mp_öc_¢mpöbadcommunôy«mes
()

	)

334 
	#¢mp_öc_¢mpöbadcommunôyu£s
()

	)

335 
	#¢mp_öc_¢mpöa¢∑r£îrs
()

	)

336 
	#¢mp_öc_¢mpötoobigs
()

	)

337 
	#¢mp_öc_¢mpönosuch«mes
()

	)

338 
	#¢mp_öc_¢mpöbadvÆues
()

	)

339 
	#¢mp_öc_¢mpöªad⁄lys
()

	)

340 
	#¢mp_öc_¢mpögíîrs
()

	)

341 
	#¢mp_add_¢mpötŸÆªqv¨s
(
vÆue
)

	)

342 
	#¢mp_add_¢mpötŸÆ£tv¨s
(
vÆue
)

	)

343 
	#¢mp_öc_¢mpögëªque°s
()

	)

344 
	#¢mp_öc_¢mpögë√xts
()

	)

345 
	#¢mp_öc_¢mpö£åeque°s
()

	)

346 
	#¢mp_öc_¢mpögëª•⁄£s
()

	)

347 
	#¢mp_öc_¢mpöå≠s
()

	)

348 
	#¢mp_öc_¢mpouâoobigs
()

	)

349 
	#¢mp_öc_¢mpouäosuch«mes
()

	)

350 
	#¢mp_öc_¢mpoutbadvÆues
()

	)

351 
	#¢mp_öc_¢mpoutgíîrs
()

	)

352 
	#¢mp_öc_¢mpoutgëªque°s
()

	)

353 
	#¢mp_öc_¢mpoutgë√xts
()

	)

354 
	#¢mp_öc_¢mpout£åeque°s
()

	)

355 
	#¢mp_öc_¢mpoutgëª•⁄£s
()

	)

356 
	#¢mp_öc_¢mpouâøps
()

	)

357 
	#¢mp_gë_¢mpgΩid_±r
(
oid
)

	)

358 
	#¢mp_£t_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

359 
	#¢mp_gë_¢m≥«bÀauthíå≠s
(
vÆue
)

	)

363 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/snmp_asn1.h

35 #i‚de‡
__LWIP_SNMP_ASN1_H__


36 
	#__LWIP_SNMP_ASN1_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/îr.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/¢mp.h
"

43 #i‡
LWIP_SNMP


45 #ifde‡
__˝lu•lus


49 
	#SNMP_ASN1_UNIV
 (0Ë

	)

50 
	#SNMP_ASN1_APPLIC
 (0x40Ë

	)

51 
	#SNMP_ASN1_CONTXT
 (0x80Ë

	)

53 
	#SNMP_ASN1_CONSTR
 (0x20Ë

	)

54 
	#SNMP_ASN1_PRIMIT
 (0Ë

	)

57 
	#SNMP_ASN1_INTEG
 2

	)

58 
	#SNMP_ASN1_OC_STR
 4

	)

59 
	#SNMP_ASN1_NUL
 5

	)

60 
	#SNMP_ASN1_OBJ_ID
 6

	)

61 
	#SNMP_ASN1_SEQ
 16

	)

64 
	#SNMP_ASN1_IPADDR
 0

	)

65 
	#SNMP_ASN1_COUNTER
 1

	)

66 
	#SNMP_ASN1_GAUGE
 2

	)

67 
	#SNMP_ASN1_TIMETICKS
 3

	)

68 
	#SNMP_ASN1_OPAQUE
 4

	)

71 
	#SNMP_ASN1_PDU_GET_REQ
 0

	)

72 
	#SNMP_ASN1_PDU_GET_NEXT_REQ
 1

	)

73 
	#SNMP_ASN1_PDU_GET_RESP
 2

	)

74 
	#SNMP_ASN1_PDU_SET_REQ
 3

	)

75 
	#SNMP_ASN1_PDU_TRAP
 4

	)

77 
îr_t
 
¢mp_a¢1_dec_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
ty≥
);

78 
îr_t
 
¢mp_a¢1_dec_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 *
o˘ës_u£d
, u16_à*
Àngth
);

79 
îr_t
 
¢mp_a¢1_dec_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
u32_t
 *
vÆue
);

80 
îr_t
 
¢mp_a¢1_dec_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
s32_t
 *
vÆue
);

81 
îr_t
 
¢mp_a¢1_dec_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, 
¢mp_obj_id
 *
oid
);

82 
îr_t
 
¢mp_a¢1_dec_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àn
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

84 
¢mp_a¢1_íc_Àngth_˙t
(
u16_t
 
Àngth
, 
u8_t
 *
o˘ës_√eded
);

85 
¢mp_a¢1_íc_u32t_˙t
(
u32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

86 
¢mp_a¢1_íc_s32t_˙t
(
s32_t
 
vÆue
, 
u16_t
 *
o˘ës_√eded
);

87 
¢mp_a¢1_íc_oid_˙t
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
u16_t
 *
o˘ës_√eded
);

88 
îr_t
 
¢mp_a¢1_íc_ty≥
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
ty≥
);

89 
îr_t
 
¢mp_a¢1_íc_Àngth
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
Àngth
);

90 
îr_t
 
¢mp_a¢1_íc_u32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
o˘ës_√eded
, 
u32_t
 
vÆue
);

91 
îr_t
 
¢mp_a¢1_íc_s32t
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
o˘ës_√eded
, 
s32_t
 
vÆue
);

92 
îr_t
 
¢mp_a¢1_íc_oid
(
pbuf
 *
p
, 
u16_t
 
ofs
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
);

93 
îr_t
 
¢mp_a¢1_íc_øw
(
pbuf
 *
p
, 
u16_t
 
ofs
, u16_à
øw_Àn
, 
u8_t
 *
øw
);

95 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/snmp_msg.h

35 #i‚de‡
__LWIP_SNMP_MSG_H__


36 
	#__LWIP_SNMP_MSG_H__


	)

38 
	~"lwù/›t.h
"

39 
	~"lwù/¢mp.h
"

40 
	~"lwù/¢mp_°ru˘s.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/îr.h
"

44 #i‡
LWIP_SNMP


46 #i‡
SNMP_PRIVATE_MIB


49 
	~"¥iv©e_mib.h
"

52 #ifde‡
__˝lu•lus


58 #i‚de‡
SNMP_IN_PORT


59 
	#SNMP_IN_PORT
 161

	)

63 #i‚de‡
SNMP_TRAP_PORT


64 
	#SNMP_TRAP_PORT
 162

	)

67 
	#SNMP_ES_NOERROR
 0

	)

68 
	#SNMP_ES_TOOBIG
 1

	)

69 
	#SNMP_ES_NOSUCHNAME
 2

	)

70 
	#SNMP_ES_BADVALUE
 3

	)

71 
	#SNMP_ES_READONLY
 4

	)

72 
	#SNMP_ES_GENERROR
 5

	)

74 
	#SNMP_GENTRAP_COLDSTART
 0

	)

75 
	#SNMP_GENTRAP_WARMSTART
 1

	)

76 
	#SNMP_GENTRAP_AUTHFAIL
 4

	)

77 
	#SNMP_GENTRAP_ENTERPRISESPC
 6

	)

79 
	s¢mp_v¨böd


82 
¢mp_v¨böd
 *
√xt
;

84 
¢mp_v¨böd
 *
¥ev
;

87 
u8_t
 
idít_Àn
;

89 
s32_t
 *
idít
;

92 
u8_t
 
vÆue_ty≥
;

94 
u8_t
 
vÆue_Àn
;

96 *
vÆue
;

99 
u8_t
 
£qÀ∆í
;

101 
u8_t
 
ﬁíÀn
;

103 
u8_t
 
vÀ∆í
;

105 
u16_t
 
£qÀn
;

107 
u16_t
 
ﬁí
;

109 
u16_t
 
vÀn
;

112 
	s¢mp_v¨böd_roŸ


114 
¢mp_v¨böd
 *
hód
;

115 
¢mp_v¨böd
 *
èû
;

117 
u8_t
 
cou¡
;

119 
u8_t
 
£qÀ∆í
;

121 
u16_t
 
£qÀn
;

125 
	s¢mp_ª•_hódî_Àngths


128 
u8_t
 
îridxÀ∆í
;

130 
u8_t
 
îr°©À∆í
;

132 
u8_t
 
ridÀ∆í
;

134 
u8_t
 
pduÀ∆í
;

136 
u8_t
 
comÀ∆í
;

138 
u8_t
 
vîÀ∆í
;

140 
u8_t
 
£qÀ∆í
;

143 
u16_t
 
îridxÀn
;

145 
u16_t
 
îr°©Àn
;

147 
u16_t
 
ridÀn
;

149 
u16_t
 
pduÀn
;

151 
u16_t
 
comÀn
;

153 
u16_t
 
vîÀn
;

155 
u16_t
 
£qÀn
;

159 
	s¢mp_å≠_hódî_Àngths


162 
u8_t
 
t¶íÀn
;

164 
u8_t
 
°ΩÀ∆í
;

166 
u8_t
 
gå∂íÀn
;

168 
u8_t
 
ØddæíÀn
;

170 
u8_t
 
eidÀ∆í
;

172 
u8_t
 
pduÀ∆í
;

174 
u8_t
 
comÀ∆í
;

176 
u8_t
 
vîÀ∆í
;

178 
u8_t
 
£qÀ∆í
;

181 
u16_t
 
t¶í
;

183 
u16_t
 
°ΩÀn
;

185 
u16_t
 
gå∂í
;

187 
u16_t
 
Øddæí
;

189 
u16_t
 
eidÀn
;

191 
u16_t
 
pduÀn
;

193 
u16_t
 
comÀn
;

195 
u16_t
 
vîÀn
;

197 
u16_t
 
£qÀn
;

201 
	#SNMP_MSG_EMPTY
 0

	)

203 
	#SNMP_MSG_SEARCH_OBJ
 1

	)

206 
	#SNMP_MSG_INTERNAL_GET_OBJDEF
 2

	)

207 
	#SNMP_MSG_INTERNAL_GET_VALUE
 3

	)

208 
	#SNMP_MSG_INTERNAL_SET_TEST
 4

	)

209 
	#SNMP_MSG_INTERNAL_GET_OBJDEF_S
 5

	)

210 
	#SNMP_MSG_INTERNAL_SET_VALUE
 6

	)

214 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF
 7

	)

215 
	#SNMP_MSG_EXTERNAL_GET_VALUE
 8

	)

216 
	#SNMP_MSG_EXTERNAL_SET_TEST
 9

	)

217 
	#SNMP_MSG_EXTERNAL_GET_OBJDEF_S
 10

	)

218 
	#SNMP_MSG_EXTERNAL_SET_VALUE
 11

	)

220 
	#SNMP_COMMUNITY_STR_LEN
 64

	)

221 
	s¢mp_msg_p°©


224 
udp_pcb
 *
pcb
;

226 
ù_addr_t
 
sù
;

228 
u16_t
 
•
;

230 
u8_t
 
π
;

232 
s32_t
 
rid
;

234 
s32_t
 
îr‹_°©us
;

236 
s32_t
 
îr‹_ödex
;

238 
u8_t
 
communôy
[
SNMP_COMMUNITY_STR_LEN
 + 1];

240 
u8_t
 
com_°æí
;

242 
u8_t
 
°©e
;

244 
mib_exã∫Æ_node
 *
ext_mib_node
;

245 
¢mp_«me_±r
 
ext_«me_±r
;

246 
obj_def
 
ext_obje˘_def
;

247 
¢mp_obj_id
 
ext_oid
;

249 
u8_t
 
vb_idx
;

251 
¢mp_v¨böd
 *
vb_±r
;

253 
¢mp_v¨böd_roŸ
 
övb
;

255 
¢mp_v¨böd_roŸ
 
outvb
;

257 
¢mp_ª•_hódî_Àngths
 
rhl
;

260 
	s¢mp_msg_å≠


263 
udp_pcb
 *
pcb
;

265 
ù_addr_t
 
dù
;

268 
¢mp_obj_id
 *
íãΩri£
;

270 
u8_t
 
sù_øw
[4];

272 
u32_t
 
gí_å≠
;

274 
u32_t
 
•c_å≠
;

276 
u32_t
 
ts
;

278 
¢mp_v¨böd_roŸ
 
outvb
;

280 
¢mp_å≠_hódî_Àngths
 
thl
;

284 c⁄° 
s32_t
 
¢mp_vîsi⁄
;

286 c⁄° 
¢mp_publiccommunôy
[7];

288 
¢mp_msg_å≠
 
å≠_msg
;

291 
¢mp_öô
();

292 
¢mp_å≠_d°_íabÀ
(
u8_t
 
d°_idx
, u8_à
íabÀ
);

293 
¢mp_å≠_d°_ù_£t
(
u8_t
 
d°_idx
, 
ù_addr_t
 *
d°
);

296 
¢mp_v¨böd
* 
¢mp_v¨böd_Æloc
(
¢mp_obj_id
 *
oid
, 
u8_t
 
ty≥
, u8_à
Àn
);

297 
¢mp_v¨böd_‰ì
(
¢mp_v¨böd
 *
vb
);

298 
¢mp_v¨böd_li°_‰ì
(
¢mp_v¨böd_roŸ
 *
roŸ
);

299 
¢mp_v¨böd_èû_add
(
¢mp_v¨böd_roŸ
 *
roŸ
, 
¢mp_v¨böd
 *
vb
);

300 
¢mp_v¨böd
* 
¢mp_v¨böd_èû_ªmove
(
¢mp_v¨böd_roŸ
 *
roŸ
);

303 
¢mp_msg_evít
(
u8_t
 
ªque°_id
);

304 
îr_t
 
¢mp_£nd_ª•⁄£
(
¢mp_msg_p°©
 *
m_°©
);

305 
îr_t
 
¢mp_£nd_å≠
(
s8_t
 
gíîic_å≠
, 
¢mp_obj_id
 *
eoid
, 
s32_t
 
•ecific_å≠
);

306 
¢mp_cﬁd°¨t_å≠
();

307 
¢mp_authÁû_å≠
();

309 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/snmp_structs.h

37 #i‚de‡
__LWIP_SNMP_STRUCTS_H__


38 
	#__LWIP_SNMP_STRUCTS_H__


	)

40 
	~"lwù/›t.h
"

42 #i‡
LWIP_SNMP


44 
	~"lwù/¢mp.h
"

46 #i‡
SNMP_PRIVATE_MIB


49 
	~"¥iv©e_mib.h
"

52 #ifde‡
__˝lu•lus


57 
	#MIB_OBJECT_NONE
 0

	)

58 
	#MIB_OBJECT_SCALAR
 1

	)

59 
	#MIB_OBJECT_TAB
 2

	)

62 
	#MIB_ACCESS_READ
 1

	)

63 
	#MIB_ACCESS_WRITE
 2

	)

66 
	#MIB_OBJECT_READ_ONLY
 
MIB_ACCESS_READ


	)

67 
	#MIB_OBJECT_READ_WRITE
 (
MIB_ACCESS_READ
 | 
MIB_ACCESS_WRITE
)

	)

68 
	#MIB_OBJECT_WRITE_ONLY
 
MIB_ACCESS_WRITE


	)

69 
	#MIB_OBJECT_NOT_ACCESSIBLE
 0

	)

72 
	sobj_def


75 
u8_t
 
ö°™˚
;

77 
u8_t
 
ac˚ss
;

79 
u8_t
 
a¢_ty≥
;

81 
u16_t
 
v_Àn
;

83 
u8_t
 
id_ö°_Àn
;

85 
s32_t
 *
id_ö°_±r
;

88 
	s¢mp_«me_±r


90 
u8_t
 
idít_Àn
;

91 
s32_t
 *
idít
;

95 
	#MIB_NODE_SC
 0x01

	)

97 
	#MIB_NODE_AR
 0x02

	)

99 
	#MIB_NODE_RA
 0x03

	)

101 
	#MIB_NODE_LR
 0x04

	)

103 
	#MIB_NODE_EX
 0x05

	)

106 
	smib_node


109 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

112 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

114 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

116 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

118 
u8_t
 
node_ty≥
;

120 
u16_t
 
maxÀngth
;

124 
mib_node
 
	tmib_sˇœr_node
;

128 
	smib_¨øy_node


131 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

132 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

133 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

134 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

136 
u8_t
 
node_ty≥
;

137 
u16_t
 
maxÀngth
;

140 c⁄° 
s32_t
 *
objid
;

141 
mib_node
* c⁄° *
≈å
;

146 
	smib_øm_¨øy_node


149 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

150 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

151 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

152 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

154 
u8_t
 
node_ty≥
;

155 
u16_t
 
maxÀngth
;

158 
s32_t
 *
objid
;

159 
mib_node
 **
≈å
;

162 
	smib_li°_node


164 
mib_li°_node
 *
¥ev
;

165 
mib_li°_node
 *
√xt
;

166 
s32_t
 
objid
;

167 
mib_node
 *
≈å
;

172 
	smib_li°_roŸnode


175 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

176 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

177 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

178 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

180 
u8_t
 
node_ty≥
;

181 
u16_t
 
maxÀngth
;

184 
mib_li°_node
 *
hód
;

185 
mib_li°_node
 *
èû
;

187 
u16_t
 
cou¡
;

192 
	smib_exã∫Æ_node


195 (*
gë_obje˘_def
)(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

196 (*
gë_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

197 
u8_t
 (*
£t_ã°
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

198 (*
£t_vÆue
)(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

200 
u8_t
 
node_ty≥
;

201 
u16_t
 
maxÀngth
;

206 * 
addr_öf
;

208 
u8_t
 
åì_Àvñs
;

210 
u16_t
 (*
Àvñ_Àngth
)(* 
addr_öf
, 
u8_t
 
Àvñ
);

213 
s32_t
 (*
idít_cmp
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, s32_à
sub_id
);

214 (*
gë_objid
)(* 
addr_öf
, 
u8_t
 
Àvñ
, 
u16_t
 
idx
, 
s32_t
 *
sub_id
);

217 (*
gë_obje˘_def_q
)(* 
addr_öf
, 
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

218 (*
gë_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

219 (*
£t_ã°_q
)(
u8_t
 
rid
, 
obj_def
 *
od
);

220 (*
£t_vÆue_q
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

222 (*
gë_obje˘_def_a
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

223 (*
gë_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

224 
u8_t
 (*
£t_ã°_a
)(u8_à
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

225 (*
£t_vÆue_a
)(
u8_t
 
rid
, 
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

228 (*
gë_obje˘_def_pc
)(
u8_t
 
rid
, u8_à
idít_Àn
, 
s32_t
 *
idít
);

229 (*
gë_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

230 (*
£t_ã°_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

231 (*
£t_vÆue_pc
)(
u8_t
 
rid
, 
obj_def
 *
od
);

235 c⁄° 
mib_¨øy_node
 
öã∫ë
;

238 
nﬁófs_gë_obje˘_def
(
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
obj_def
 *
od
);

239 
nﬁófs_gë_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

240 
u8_t
 
nﬁófs_£t_ã°
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

241 
nﬁófs_£t_vÆue
(
obj_def
 *
od
, 
u16_t
 
Àn
, *
vÆue
);

243 
¢mp_oidtoù
(
s32_t
 *
idít
, 
ù_addr_t
 *
ù
);

244 
¢mp_ùtooid
(
ù_addr_t
 *
ù
, 
s32_t
 *
idít
);

245 
¢mp_ifödext⁄ëif
(
s32_t
 
ifödex
, 
√tif
 **netif);

246 
¢mp_√ti·oifödex
(
√tif
 *√tif, 
s32_t
 *
ifidx
);

248 
mib_li°_node
* 
¢mp_mib_ _Æloc
(
s32_t
 
id
);

249 
¢mp_mib_ _‰ì
(
mib_li°_node
 *
 
);

250 
mib_li°_roŸnode
* 
¢mp_mib_Ãn_Æloc
();

251 
¢mp_mib_Ãn_‰ì
(
mib_li°_roŸnode
 *
Ãn
);

253 
s8_t
 
¢mp_mib_node_ö£π
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
ö¢
);

254 
s8_t
 
¢mp_mib_node_föd
(
mib_li°_roŸnode
 *
∫
, 
s32_t
 
objid
, 
mib_li°_node
 **
‚
);

255 
mib_li°_roŸnode
 *
¢mp_mib_node_dñëe
(mib_li°_roŸnodê*
∫
, 
mib_li°_node
 *
n
);

257 
mib_node
* 
¢mp_£¨ch_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_«me_±r
 *
≈
);

258 
mib_node
* 
¢mp_ex∑nd_åì
(mib_nodê*
node
, 
u8_t
 
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

259 
u8_t
 
¢mp_iso_¥efix_t°
(u8_à
idít_Àn
, 
s32_t
 *
idít
);

260 
u8_t
 
¢mp_iso_¥efix_ex∑nd
(u8_à
idít_Àn
, 
s32_t
 *
idít
, 
¢mp_obj_id
 *
oidªt
);

262 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/sockets.h

34 #i‚de‡
__LWIP_SOCKETS_H__


35 
	#__LWIP_SOCKETS_H__


	)

37 
	~"lwù/›t.h
"

39 #i‡
LWIP_SOCKET


41 
	~<°ddef.h
>

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/öë.h
"

46 #ifde‡
__˝lu•lus


51 
	ssockaddr_ö
 {

52 
u8_t
 
sö_Àn
;

53 
u8_t
 
sö_Ámûy
;

54 
u16_t
 
sö_p‹t
;

55 
ö_addr
 
sö_addr
;

56 
sö_zîo
[8];

59 
	ssockaddr
 {

60 
u8_t
 
ß_Àn
;

61 
u8_t
 
ß_Ámûy
;

62 
ß_d©a
[14];

67 #i‡!
deföed
(
sockÀn_t
Ë&& !deföed(
SOCKLEN_T_DEFINED
)

68 
u32_t
 
	tsockÀn_t
;

72 
	#SOCK_STREAM
 1

	)

73 
	#SOCK_DGRAM
 2

	)

74 
	#SOCK_RAW
 3

	)

79 
	#SO_DEBUG
 0x0001

	)

80 
	#SO_ACCEPTCONN
 0x0002

	)

81 
	#SO_REUSEADDR
 0x0004

	)

82 
	#SO_KEEPALIVE
 0x0008

	)

83 
	#SO_DONTROUTE
 0x0010

	)

84 
	#SO_BROADCAST
 0x0020

	)

85 
	#SO_USELOOPBACK
 0x0040

	)

86 
	#SO_LINGER
 0x0080

	)

87 
	#SO_OOBINLINE
 0x0100

	)

88 
	#SO_REUSEPORT
 0x0200

	)

90 
	#SO_DONTLINGER
 (()(~
SO_LINGER
))

	)

95 
	#SO_SNDBUF
 0x1001

	)

96 
	#SO_RCVBUF
 0x1002

	)

97 
	#SO_SNDLOWAT
 0x1003

	)

98 
	#SO_RCVLOWAT
 0x1004

	)

99 
	#SO_SNDTIMEO
 0x1005

	)

100 
	#SO_RCVTIMEO
 0x1006

	)

101 
	#SO_ERROR
 0x1007

	)

102 
	#SO_TYPE
 0x1008

	)

103 
	#SO_CONTIMEO
 0x1009

	)

104 
	#SO_NO_CHECK
 0x100®

	)

110 
	slögî
 {

111 
l_⁄off
;

112 
l_lögî
;

118 
	#SOL_SOCKET
 0xff‡

	)

121 
	#AF_UNSPEC
 0

	)

122 
	#AF_INET
 2

	)

123 
	#PF_INET
 
AF_INET


	)

124 
	#PF_UNSPEC
 
AF_UNSPEC


	)

126 
	#IPPROTO_IP
 0

	)

127 
	#IPPROTO_TCP
 6

	)

128 
	#IPPROTO_UDP
 17

	)

129 
	#IPPROTO_UDPLITE
 136

	)

132 
	#MSG_PEEK
 0x01

	)

133 
	#MSG_WAITALL
 0x02

	)

134 
	#MSG_OOB
 0x04

	)

135 
	#MSG_DONTWAIT
 0x08

	)

136 
	#MSG_MORE
 0x10

	)

142 
	#IP_TOS
 1

	)

143 
	#IP_TTL
 2

	)

145 #i‡
LWIP_TCP


149 
	#TCP_NODELAY
 0x01

	)

150 
	#TCP_KEEPALIVE
 0x02

	)

151 
	#TCP_KEEPIDLE
 0x03

	)

152 
	#TCP_KEEPINTVL
 0x04

	)

153 
	#TCP_KEEPCNT
 0x05

	)

156 #i‡
LWIP_UDP
 && 
LWIP_UDPLITE


160 
	#UDPLITE_SEND_CSCOV
 0x01

	)

161 
	#UDPLITE_RECV_CSCOV
 0x02

	)

165 #i‡
LWIP_IGMP


169 
	#IP_ADD_MEMBERSHIP
 3

	)

170 
	#IP_DROP_MEMBERSHIP
 4

	)

171 
	#IP_MULTICAST_TTL
 5

	)

172 
	#IP_MULTICAST_IF
 6

	)

173 
	#IP_MULTICAST_LOOP
 7

	)

175 
	sù_mªq
 {

176 
ö_addr
 
imr_mu…üddr
;

177 
ö_addr
 
imr_öãrÁ˚
;

178 } 
	tù_mªq
;

197 
	#IPTOS_TOS_MASK
 0x1E

	)

198 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

199 
	#IPTOS_LOWDELAY
 0x10

	)

200 
	#IPTOS_THROUGHPUT
 0x08

	)

201 
	#IPTOS_RELIABILITY
 0x04

	)

202 
	#IPTOS_LOWCOST
 0x02

	)

203 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

214 
	#IPTOS_PREC_MASK
 0xe0

	)

215 
	#IPTOS_PREC
(
tos
Ë(—osË& 
IPTOS_PREC_MASK
)

	)

216 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

217 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

218 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

219 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

220 
	#IPTOS_PREC_FLASH
 0x60

	)

221 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

222 
	#IPTOS_PREC_PRIORITY
 0x20

	)

223 
	#IPTOS_PREC_ROUTINE
 0x00

	)

236 #i‡!
deföed
(
FIONREAD
Ë|| !deföed(
FIONBIO
)

237 
	#IOCPARM_MASK
 0x7fU

	)

238 
	#IOC_VOID
 0x20000000UL

	)

239 
	#IOC_OUT
 0x40000000UL

	)

240 
	#IOC_IN
 0x80000000UL

	)

241 
	#IOC_INOUT
 (
IOC_IN
|
IOC_OUT
)

	)

244 
	#_IO
(
x
,
y
Ë(
IOC_VOID
|((x)<<8)|(y))

	)

246 
	#_IOR
(
x
,
y
,
t
Ë(
IOC_OUT
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

248 
	#_IOW
(
x
,
y
,
t
Ë(
IOC_IN
|((()—)&
IOCPARM_MASK
)<<16)|((x)<<8)|(y))

	)

251 #i‚de‡
FIONREAD


252 
	#FIONREAD
 
	`_IOR
('f', 127, Ë

	)

254 #i‚de‡
FIONBIO


255 
	#FIONBIO
 
	`_IOW
('f', 126, Ë

	)

259 #i‚de‡
SIOCSHIWAT


260 
	#SIOCSHIWAT
 
	`_IOW
('s', 0, Ë

	)

261 
	#SIOCGHIWAT
 
	`_IOR
('s', 1, Ë

	)

262 
	#SIOCSLOWAT
 
	`_IOW
('s', 2, Ë

	)

263 
	#SIOCGLOWAT
 
	`_IOR
('s', 3, Ë

	)

264 
	#SIOCATMARK
 
	`_IOR
('s', 7, Ë

	)

268 #i‚de‡
F_GETFL


269 
	#F_GETFL
 3

	)

271 #i‚de‡
F_SETFL


272 
	#F_SETFL
 4

	)

277 #i‚de‡
O_NONBLOCK


278 
	#O_NONBLOCK
 1

	)

280 #i‚de‡
O_NDELAY


281 
	#O_NDELAY
 1

	)

284 #i‚de‡
SHUT_RD


285 
	#SHUT_RD
 0

	)

286 
	#SHUT_WR
 1

	)

287 
	#SHUT_RDWR
 2

	)

291 #i‚de‡
FD_SET


292 #unde‡
FD_SETSIZE


294 
	#FD_SETSIZE
 
MEMP_NUM_NETCONN


	)

295 
	#FD_SET
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] |(1 << (“Ë& 7)))

	)

296 
	#FD_CLR
(
n
, 
p
Ë(’)->
fd_bôs
[“)/8] &~(1 << (“Ë& 7)))

	)

297 
	#FD_ISSET
(
n
,
p
Ë(’)->
fd_bôs
[“)/8] & (1 << (“Ë& 7)))

	)

298 
	#FD_ZERO
(
p
Ë
	`mem£t
((*)’),0,(*’)))

	)

300 
	sfd_£t
 {

301 
fd_bôs
 [(
FD_SETSIZE
+7)/8];

302 } 
	tfd_£t
;

308 #i‚de‡
LWIP_TIMEVAL_PRIVATE


309 
	#LWIP_TIMEVAL_PRIVATE
 1

	)

312 #i‡
LWIP_TIMEVAL_PRIVATE


313 
	stimevÆ
 {

314 
tv_£c
;

315 
tv_u£c
;

319 
lwù_sockë_öô
();

321 
lwù_ac˚±
(
s
, 
sockaddr
 *
addr
, 
sockÀn_t
 *
addæí
);

322 
lwù_böd
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

323 
lwù_shutdown
(
s
, 
how
);

324 
lwù_gë≥î«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

325 
lwù_gësock«me
 (
s
, 
sockaddr
 *
«me
, 
sockÀn_t
 *
«mñí
);

326 
lwù_gësock›t
 (
s
, 
Àvñ
, 
›äame
, *
›tvÆ
, 
sockÀn_t
 *
›éí
);

327 
lwù_£tsock›t
 (
s
, 
Àvñ
, 
›äame
, c⁄° *
›tvÆ
, 
sockÀn_t
 
›éí
);

328 
lwù_˛o£
(
s
);

329 
lwù_c⁄√˘
(
s
, c⁄° 
sockaddr
 *
«me
, 
sockÀn_t
 
«mñí
);

330 
lwù_li°í
(
s
, 
backlog
);

331 
lwù_ªcv
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
);

332 
lwù_ªad
(
s
, *
mem
, 
size_t
 
Àn
);

333 
lwù_ªcv‰om
(
s
, *
mem
, 
size_t
 
Àn
, 
Êags
,

334 
sockaddr
 *
‰om
, 
sockÀn_t
 *
‰omÀn
);

335 
lwù_£nd
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
);

336 
lwù_£ndto
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
, 
Êags
,

337 c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
);

338 
lwù_sockë
(
domaö
, 
ty≥
, 
¥Ÿocﬁ
);

339 
lwù_wrôe
(
s
, c⁄° *
d©≠å
, 
size_t
 
size
);

340 
lwù_£À˘
(
maxfdp1
, 
fd_£t
 *
ªad£t
, fd_£à*
wrôe£t
, fd_£à*
ex˚±£t
,

341 
timevÆ
 *
timeout
);

342 
lwù_io˘l
(
s
, 
cmd
, *
¨gp
);

343 
lwù_f˙é
(
s
, 
cmd
, 
vÆ
);

345 #i‡
LWIP_COMPAT_SOCKETS


346 
	#ac˚±
(
a
,
b
,
c
Ë
	`lwù_ac˚±
◊,b,c)

	)

347 
	#böd
(
a
,
b
,
c
Ë
	`lwù_böd
◊,b,c)

	)

348 
	#shutdown
(
a
,
b
Ë
	`lwù_shutdown
◊,b)

	)

349 
	#˛o£sockë
(
s
Ë
	`lwù_˛o£
(s)

	)

350 
	#c⁄√˘
(
a
,
b
,
c
Ë
	`lwù_c⁄√˘
◊,b,c)

	)

351 
	#gësock«me
(
a
,
b
,
c
Ë
	`lwù_gësock«me
◊,b,c)

	)

352 
	#gë≥î«me
(
a
,
b
,
c
Ë
	`lwù_gë≥î«me
◊,b,c)

	)

353 
	#£tsock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£tsock›t
◊,b,c,d,e)

	)

354 
	#gësock›t
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_gësock›t
◊,b,c,d,e)

	)

355 
	#li°í
(
a
,
b
Ë
	`lwù_li°í
◊,b)

	)

356 
	#ªcv
(
a
,
b
,
c
,
d
Ë
	`lwù_ªcv
◊,b,c,d)

	)

357 
	#ªcv‰om
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_ªcv‰om
◊,b,c,d,e,f)

	)

358 
	#£nd
(
a
,
b
,
c
,
d
Ë
	`lwù_£nd
◊,b,c,d)

	)

359 
	#£ndto
(
a
,
b
,
c
,
d
,
e
,
f
Ë
	`lwù_£ndto
◊,b,c,d,e,f)

	)

360 
	#sockë
(
a
,
b
,
c
Ë
	`lwù_sockë
◊,b,c)

	)

361 
	#£À˘
(
a
,
b
,
c
,
d
,
e
Ë
	`lwù_£À˘
◊,b,c,d,e)

	)

362 
	#io˘lsockë
(
a
,
b
,
c
Ë
	`lwù_io˘l
◊,b,c)

	)

364 #i‡
LWIP_POSIX_SOCKETS_IO_NAMES


365 
	#ªad
(
a
,
b
,
c
Ë
	`lwù_ªad
◊,b,c)

	)

366 
	#wrôe
(
a
,
b
,
c
Ë
	`lwù_wrôe
◊,b,c)

	)

367 
	#˛o£
(
s
Ë
	`lwù_˛o£
(s)

	)

368 
	#f˙é
(
a
,
b
,
c
Ë
	`lwù_f˙é
◊,b,c)

	)

373 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/stats.h

32 #i‚de‡
__LWIP_STATS_H__


33 
	#__LWIP_STATS_H__


	)

35 
	~"lwù/›t.h
"

37 
	~"lwù/mem.h
"

38 
	~"lwù/memp.h
"

40 #ifde‡
__˝lu•lus


44 #i‡
LWIP_STATS


46 #i‚de‡
LWIP_STATS_LARGE


47 
	#LWIP_STATS_LARGE
 0

	)

50 #i‡
LWIP_STATS_LARGE


51 
	#STAT_COUNTER
 
u32_t


	)

52 
	#STAT_COUNTER_F
 
U32_F


	)

54 
	#STAT_COUNTER
 
u16_t


	)

55 
	#STAT_COUNTER_F
 
U16_F


	)

58 
	s°©s_¥Ÿo
 {

59 
STAT_COUNTER
 
xmô
;

60 
STAT_COUNTER
 
ªcv
;

61 
STAT_COUNTER
 
fw
;

62 
STAT_COUNTER
 
dr›
;

63 
STAT_COUNTER
 
chkîr
;

64 
STAT_COUNTER
 
À√º
;

65 
STAT_COUNTER
 
memîr
;

66 
STAT_COUNTER
 
πîr
;

67 
STAT_COUNTER
 
¥Ÿîr
;

68 
STAT_COUNTER
 
›ãº
;

69 
STAT_COUNTER
 
îr
;

70 
STAT_COUNTER
 
ˇchehô
;

73 
	s°©s_igmp
 {

74 
STAT_COUNTER
 
	mxmô
;

75 
STAT_COUNTER
 
	mªcv
;

76 
STAT_COUNTER
 
	mdr›
;

77 
STAT_COUNTER
 
	mchkîr
;

78 
STAT_COUNTER
 
	mÀ√º
;

79 
STAT_COUNTER
 
	mmemîr
;

80 
STAT_COUNTER
 
	m¥Ÿîr
;

81 
STAT_COUNTER
 
	mrx_v1
;

82 
STAT_COUNTER
 
	mrx_group
;

83 
STAT_COUNTER
 
	mrx_gíîÆ
;

84 
STAT_COUNTER
 
	mrx_ªp‹t
;

85 
STAT_COUNTER
 
	mtx_joö
;

86 
STAT_COUNTER
 
	mtx_Àave
;

87 
STAT_COUNTER
 
	mtx_ªp‹t
;

90 
	s°©s_mem
 {

91 #ifde‡
LWIP_DEBUG


92 c⁄° *
	m«me
;

94 
mem_size_t
 
	mavaû
;

95 
mem_size_t
 
	mu£d
;

96 
mem_size_t
 
	mmax
;

97 
STAT_COUNTER
 
	mîr
;

98 
STAT_COUNTER
 
	mûÀgÆ
;

101 
	s°©s_sy£Àm
 {

102 
STAT_COUNTER
 
	mu£d
;

103 
STAT_COUNTER
 
	mmax
;

104 
STAT_COUNTER
 
	mîr
;

107 
	s°©s_sys
 {

108 
°©s_sy£Àm
 
	m£m
;

109 
°©s_sy£Àm
 
	mmuãx
;

110 
°©s_sy£Àm
 
	mmbox
;

113 
	s°©s_
 {

114 #i‡
LINK_STATS


115 
°©s_¥Ÿo
 
	mlök
;

117 #i‡
ETHARP_STATS


118 
°©s_¥Ÿo
 
	mëh¨p
;

120 #i‡
IPFRAG_STATS


121 
°©s_¥Ÿo
 
	mù_‰ag
;

123 #i‡
IP_STATS


124 
°©s_¥Ÿo
 
	mù
;

126 #i‡
ICMP_STATS


127 
°©s_¥Ÿo
 
	micmp
;

129 #i‡
IGMP_STATS


130 
°©s_igmp
 
	migmp
;

132 #i‡
UDP_STATS


133 
°©s_¥Ÿo
 
	mudp
;

135 #i‡
TCP_STATS


136 
°©s_¥Ÿo
 
	mt˝
;

138 #i‡
MEM_STATS


139 
°©s_mem
 
	mmem
;

141 #i‡
MEMP_STATS


142 
°©s_mem
 
	mmemp
[
MEMP_MAX
];

144 #i‡
SYS_STATS


145 
°©s_sys
 
	msys
;

149 
°©s_
 
lwù_°©s
;

151 
°©s_öô
();

153 
	#STATS_INC
(
x
Ë++
lwù_°©s
.
	)
x

154 
	#STATS_DEC
(
x
Ë--
lwù_°©s
.
	)
x

155 
	#STATS_INC_USED
(
x
, 
y
Ëdÿ{ 
lwù_°©s
.x.
u£d
 += y; \

156 i‡(
lwù_°©s
.
x
.
max
 <Üwù_°©s.x.
u£d
) { \

157 
lwù_°©s
.
x
.
max
 =Üwù_°©s.x.
u£d
; \

159 } 0)

	)

161 
	#°©s_öô
()

	)

162 
	#STATS_INC
(
x
)

	)

163 
	#STATS_DEC
(
x
)

	)

164 
	#STATS_INC_USED
(
x
)

	)

167 #i‡
TCP_STATS


168 
	#TCP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

169 
	#TCP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
t˝
, "TCP")

	)

171 
	#TCP_STATS_INC
(
x
)

	)

172 
	#TCP_STATS_DISPLAY
()

	)

175 #i‡
UDP_STATS


176 
	#UDP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

177 
	#UDP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
udp
, "UDP")

	)

179 
	#UDP_STATS_INC
(
x
)

	)

180 
	#UDP_STATS_DISPLAY
()

	)

183 #i‡
ICMP_STATS


184 
	#ICMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

185 
	#ICMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
icmp
, "ICMP")

	)

187 
	#ICMP_STATS_INC
(
x
)

	)

188 
	#ICMP_STATS_DISPLAY
()

	)

191 #i‡
IGMP_STATS


192 
	#IGMP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

193 
	#IGMP_STATS_DISPLAY
(Ë
	`°©s_di•œy_igmp
(&
lwù_°©s
.
igmp
)

	)

195 
	#IGMP_STATS_INC
(
x
)

	)

196 
	#IGMP_STATS_DISPLAY
()

	)

199 #i‡
IP_STATS


200 
	#IP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

201 
	#IP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù
, "IP")

	)

203 
	#IP_STATS_INC
(
x
)

	)

204 
	#IP_STATS_DISPLAY
()

	)

207 #i‡
IPFRAG_STATS


208 
	#IPFRAG_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

209 
	#IPFRAG_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ù_‰ag
, "IP_FRAG")

	)

211 
	#IPFRAG_STATS_INC
(
x
)

	)

212 
	#IPFRAG_STATS_DISPLAY
()

	)

215 #i‡
ETHARP_STATS


216 
	#ETHARP_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

217 
	#ETHARP_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
ëh¨p
, "ETHARP")

	)

219 
	#ETHARP_STATS_INC
(
x
)

	)

220 
	#ETHARP_STATS_DISPLAY
()

	)

223 #i‡
LINK_STATS


224 
	#LINK_STATS_INC
(
x
Ë
	`STATS_INC
(x)

	)

225 
	#LINK_STATS_DISPLAY
(Ë
	`°©s_di•œy_¥Ÿo
(&
lwù_°©s
.
lök
, "LINK")

	)

227 
	#LINK_STATS_INC
(
x
)

	)

228 
	#LINK_STATS_DISPLAY
()

	)

231 #i‡
MEM_STATS


232 
	#MEM_STATS_AVAIL
(
x
, 
y
Ë
lwù_°©s
.
mem
.x = 
	)
y

233 
	#MEM_STATS_INC
(
x
Ë
	`STATS_INC
(
mem
.x)

	)

234 
	#MEM_STATS_INC_USED
(
x
, 
y
Ë
	`STATS_INC_USED
(
mem
, y)

	)

235 
	#MEM_STATS_DEC_USED
(
x
, 
y
Ë
lwù_°©s
.
mem
.x -
	)
y

236 
	#MEM_STATS_DISPLAY
(Ë
	`°©s_di•œy_mem
(&
lwù_°©s
.
mem
, "HEAP")

	)

238 
	#MEM_STATS_AVAIL
(
x
, 
y
)

	)

239 
	#MEM_STATS_INC
(
x
)

	)

240 
	#MEM_STATS_INC_USED
(
x
, 
y
)

	)

241 
	#MEM_STATS_DEC_USED
(
x
, 
y
)

	)

242 
	#MEM_STATS_DISPLAY
()

	)

245 #i‡
MEMP_STATS


246 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
Ë
lwù_°©s
.
memp
[i].x = 
	)
y

247 
	#MEMP_STATS_INC
(
x
, 
i
Ë
	`STATS_INC
(
memp
[i].x)

	)

248 
	#MEMP_STATS_DEC
(
x
, 
i
Ë
	`STATS_DEC
(
memp
[i].x)

	)

249 
	#MEMP_STATS_INC_USED
(
x
, 
i
Ë
	`STATS_INC_USED
(
memp
[i], 1)

	)

250 
	#MEMP_STATS_DISPLAY
(
i
Ë
	`°©s_di•œy_memp
(&
lwù_°©s
.
memp
[i], i)

	)

252 
	#MEMP_STATS_AVAIL
(
x
, 
i
, 
y
)

	)

253 
	#MEMP_STATS_INC
(
x
, 
i
)

	)

254 
	#MEMP_STATS_DEC
(
x
, 
i
)

	)

255 
	#MEMP_STATS_INC_USED
(
x
, 
i
)

	)

256 
	#MEMP_STATS_DISPLAY
(
i
)

	)

259 #i‡
SYS_STATS


260 
	#SYS_STATS_INC
(
x
Ë
	`STATS_INC
(
sys
.x)

	)

261 
	#SYS_STATS_DEC
(
x
Ë
	`STATS_DEC
(
sys
.x)

	)

262 
	#SYS_STATS_INC_USED
(
x
Ë
	`STATS_INC_USED
(
sys
.x, 1)

	)

263 
	#SYS_STATS_DISPLAY
(Ë
	`°©s_di•œy_sys
(&
lwù_°©s
.
sys
)

	)

265 
	#SYS_STATS_INC
(
x
)

	)

266 
	#SYS_STATS_DEC
(
x
)

	)

267 
	#SYS_STATS_INC_USED
(
x
)

	)

268 
	#SYS_STATS_DISPLAY
()

	)

272 #i‡
LWIP_STATS_DISPLAY


273 
°©s_di•œy
();

274 
°©s_di•œy_¥Ÿo
(
°©s_¥Ÿo
 *
¥Ÿo
, c⁄° *
«me
);

275 
°©s_di•œy_igmp
(
°©s_igmp
 *
igmp
);

276 
°©s_di•œy_mem
(
°©s_mem
 *
mem
, c⁄° *
«me
);

277 
°©s_di•œy_memp
(
°©s_mem
 *
mem
, 
ödex
);

278 
°©s_di•œy_sys
(
°©s_sys
 *
sys
);

280 
	#°©s_di•œy
()

	)

281 
	#°©s_di•œy_¥Ÿo
(
¥Ÿo
, 
«me
)

	)

282 
	#°©s_di•œy_igmp
(
igmp
)

	)

283 
	#°©s_di•œy_mem
(
mem
, 
«me
)

	)

284 
	#°©s_di•œy_memp
(
mem
, 
ödex
)

	)

285 
	#°©s_di•œy_sys
(
sys
)

	)

288 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/sys.h

32 #i‚de‡
__LWIP_SYS_H__


33 
	#__LWIP_SYS_H__


	)

35 
	~"lwù/›t.h
"

37 #ifde‡
__˝lu•lus


41 #i‡
NO_SYS


45 
u8_t
 
	tsys_£m_t
;

46 
u8_t
 
	tsys_muãx_t
;

47 
u8_t
 
	tsys_mbox_t
;

49 
	#sys_£m_√w
(
s
, 
c
Ë
ERR_OK


	)

50 
	#sys_£m_sig«l
(
s
)

	)

51 
	#sys_£m_waô
(
s
)

	)

52 
	#sys_¨ch_£m_waô
(
s
,
t
)

	)

53 
	#sys_£m_‰ì
(
s
)

	)

54 
	#sys_£m_vÆid
(
s
Ë0

	)

55 
	#sys_£m_£t_övÆid
(
s
)

	)

56 
	#sys_muãx_√w
(
mu
Ë
ERR_OK


	)

57 
	#sys_muãx_lock
(
mu
)

	)

58 
	#sys_muãx_u∆ock
(
mu
)

	)

59 
	#sys_muãx_‰ì
(
mu
)

	)

60 
	#sys_muãx_vÆid
(
mu
Ë0

	)

61 
	#sys_muãx_£t_övÆid
(
mu
)

	)

62 
	#sys_mbox_√w
(
m
, 
s
Ë
ERR_OK


	)

63 
	#sys_mbox_„tch
(
m
,
d
)

	)

64 
	#sys_mbox_åy„tch
(
m
,
d
)

	)

65 
	#sys_mbox_po°
(
m
,
d
)

	)

66 
	#sys_mbox_åypo°
(
m
,
d
)

	)

67 
	#sys_mbox_‰ì
(
m
)

	)

68 
	#sys_mbox_vÆid
(
m
)

	)

69 
	#sys_mbox_£t_övÆid
(
m
)

	)

71 
	#sys_thªad_√w
(
n
,
t
,
a
,
s
,
p
)

	)

73 
	#sys_m¶ìp
(
t
)

	)

78 
	#SYS_ARCH_TIMEOUT
 0xffffffffUL

	)

83 
	#SYS_MBOX_EMPTY
 
SYS_ARCH_TIMEOUT


	)

85 
	~"lwù/îr.h
"

86 
	~"¨ch/sys_¨ch.h
"

89 (*
	tlwù_thªad_‚
)(*
	t¨g
);

98 #i‡
LWIP_COMPAT_MUTEX


100 
	#sys_muãx_t
 
sys_£m_t


	)

101 
	#sys_muãx_√w
(
muãx
Ë
	`sys_£m_√w
(muãx, 1)

	)

102 
	#sys_muãx_lock
(
muãx
Ë
	`sys_£m_waô
(muãx)

	)

103 
	#sys_muãx_u∆ock
(
muãx
Ë
	`sys_£m_sig«l
(muãx)

	)

104 
	#sys_muãx_‰ì
(
muãx
Ë
	`sys_£m_‰ì
(muãx)

	)

105 
	#sys_muãx_vÆid
(
muãx
Ë
	`sys_£m_vÆid
(muãx)

	)

106 
	#sys_muãx_£t_övÆid
(
muãx
Ë
	`sys_£m_£t_övÆid
(muãx)

	)

113 
îr_t
 
	`sys_muãx_√w
(
sys_muãx_t
 *
muãx
);

116 
	`sys_muãx_lock
(
sys_muãx_t
 *
muãx
);

119 
	`sys_muãx_u∆ock
(
sys_muãx_t
 *
muãx
);

122 
	`sys_muãx_‰ì
(
sys_muãx_t
 *
muãx
);

123 #i‚de‡
sys_muãx_vÆid


125 
	`sys_muãx_vÆid
(
sys_muãx_t
 *
muãx
);

127 #i‚de‡
sys_muãx_£t_övÆid


129 
	`sys_muãx_£t_övÆid
(
sys_muãx_t
 *
muãx
);

139 
îr_t
 
	`sys_£m_√w
(
sys_£m_t
 *
£m
, 
u8_t
 
cou¡
);

142 
	`sys_£m_sig«l
(
sys_£m_t
 *
£m
);

148 
u32_t
 
	`sys_¨ch_£m_waô
(
sys_£m_t
 *
£m
, u32_à
timeout
);

151 
	`sys_£m_‰ì
(
sys_£m_t
 *
£m
);

153 
	#sys_£m_waô
(
£m
Ë
	`sys_¨ch_£m_waô
(£m, 0)

	)

154 #i‚de‡
sys_£m_vÆid


156 
	`sys_£m_vÆid
(
sys_£m_t
 *
£m
);

158 #i‚de‡
sys_£m_£t_övÆid


160 
	`sys_£m_£t_övÆid
(
sys_£m_t
 *
£m
);

164 #i‚de‡
sys_m¶ìp


165 
	`sys_m¶ìp
(
u32_t
 
ms
);

174 
îr_t
 
	`sys_mbox_√w
(
sys_mbox_t
 *
mbox
, 
size
);

179 
	`sys_mbox_po°
(
sys_mbox_t
 *
mbox
, *
msg
);

183 
îr_t
 
	`sys_mbox_åypo°
(
sys_mbox_t
 *
mbox
, *
msg
);

191 
u32_t
 
	`sys_¨ch_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
, u32_à
timeout
);

193 #i‚de‡
sys_¨ch_mbox_åy„tch


200 
u32_t
 
	`sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 *
mbox
, **
msg
);

203 
	#sys_mbox_åy„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_åy„tch
(mbox, msg)

	)

206 
	`sys_mbox_‰ì
(
sys_mbox_t
 *
mbox
);

207 
	#sys_mbox_„tch
(
mbox
, 
msg
Ë
	`sys_¨ch_mbox_„tch
(mbox, msg, 0)

	)

208 #i‚de‡
sys_mbox_vÆid


210 
	`sys_mbox_vÆid
(
sys_mbox_t
 *
mbox
);

212 #i‚de‡
sys_mbox_£t_övÆid


214 
	`sys_mbox_£t_övÆid
(
sys_mbox_t
 *
mbox
);

224 
sys_thªad_t
 
	`sys_thªad_√w
(c⁄° *
«me
, 
lwù_thªad_‚
 
thªad
, *
¨g
, 
°acksize
, 
¥io
);

229 
	`sys_öô
();

231 #i‚de‡
sys_jiffõs


233 
u32_t
 
	`sys_jiffõs
();

238 
u32_t
 
	`sys_now
();

245 #i‚de‡
SYS_ARCH_PROTECT


251 #i‡
SYS_LIGHTWEIGHT_PROT


258 
	#SYS_ARCH_DECL_PROTECT
(
Àv
Ë
sys_¥Ÿ_t
 
	)
lev

268 
	#SYS_ARCH_PROTECT
(
Àv
ËÀv = 
	`sys_¨ch_¥Ÿe˘
()

	)

277 
	#SYS_ARCH_UNPROTECT
(
Àv
Ë
	`sys_¨ch_u≈rŸe˘
÷ev)

	)

278 
sys_¥Ÿ_t
 
	`sys_¨ch_¥Ÿe˘
();

279 
	`sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
);

283 
	#SYS_ARCH_DECL_PROTECT
(
Àv
)

	)

284 
	#SYS_ARCH_PROTECT
(
Àv
)

	)

285 
	#SYS_ARCH_UNPROTECT
(
Àv
)

	)

296 #i‚de‡
SYS_ARCH_INC


297 
	#SYS_ARCH_INC
(
v¨
, 
vÆ
) do { \

298 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

299 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

300 
v¨
 +
vÆ
; \

301 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

302 } 0)

	)

305 #i‚de‡
SYS_ARCH_DEC


306 
	#SYS_ARCH_DEC
(
v¨
, 
vÆ
) do { \

307 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

308 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

309 
v¨
 -
vÆ
; \

310 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

311 } 0)

	)

314 #i‚de‡
SYS_ARCH_GET


315 
	#SYS_ARCH_GET
(
v¨
, 
ªt
) do { \

316 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

317 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

318 
ªt
 = 
v¨
; \

319 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

320 } 0)

	)

323 #i‚de‡
SYS_ARCH_SET


324 
	#SYS_ARCH_SET
(
v¨
, 
vÆ
) do { \

325 
	`SYS_ARCH_DECL_PROTECT
(
ﬁd_Àvñ
); \

326 
	`SYS_ARCH_PROTECT
(
ﬁd_Àvñ
); \

327 
v¨
 = 
vÆ
; \

328 
	`SYS_ARCH_UNPROTECT
(
ﬁd_Àvñ
); \

329 } 0)

	)

333 #ifde‡
__˝lu•lus


334 
	}
}

	@src/extern/lwip/lwip/src/include/lwip/tcp.h

32 #i‚de‡
__LWIP_TCP_H__


33 
	#__LWIP_TCP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/mem.h
"

40 
	~"lwù/pbuf.h
"

41 
	~"lwù/ù.h
"

42 
	~"lwù/icmp.h
"

43 
	~"lwù/îr.h
"

45 #ifde‡
__˝lu•lus


49 
t˝_pcb
;

60 
îr_t
 (*
	tt˝_ac˚±_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	t√wpcb
, 
	tîr_t
 
	tîr
);

72 
îr_t
 (*
	tt˝_ªcv_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
,

73 
	tpbuf
 *
	tp
, 
	tîr_t
 
	tîr
);

86 
îr_t
 (*
	tt˝_£¡_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
,

87 
	tu16_t
 
	tÀn
);

98 
îr_t
 (*
	tt˝_pﬁl_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
);

110 (*
t˝_îr_‚
)(*
	t¨g
, 
	tîr_t
 
	tîr
);

124 
îr_t
 (*
	tt˝_c⁄√˘ed_‚
)(*
	t¨g
, 
	tt˝_pcb
 *
	tçcb
, 
	tîr_t
 
	tîr
);

126 
	et˝_°©e
 {

127 
CLOSED
 = 0,

128 
LISTEN
 = 1,

129 
SYN_SENT
 = 2,

130 
SYN_RCVD
 = 3,

131 
ESTABLISHED
 = 4,

132 
FIN_WAIT_1
 = 5,

133 
FIN_WAIT_2
 = 6,

134 
CLOSE_WAIT
 = 7,

135 
CLOSING
 = 8,

136 
LAST_ACK
 = 9,

137 
TIME_WAIT
 = 10

140 #i‡
LWIP_CALLBACK_API


148 
	#DEF_ACCEPT_CALLBACK
 
t˝_ac˚±_‚
 
ac˚±
;

	)

150 
	#DEF_ACCEPT_CALLBACK


	)

156 
	#TCP_PCB_COMMON
(
ty≥
) \

157 
ty≥
 *
√xt
; \

158 *
ˇŒback_¨g
; \

160 
DEF_ACCEPT_CALLBACK
 \

161 
t˝_°©e
 
°©e
; \

162 
u8_t
 
¥io
; \

164 
u16_t
 
loˇl_p‹t


	)

168 
	st˝_pcb
 {

170 
IP_PCB
;

172 
TCP_PCB_COMMON
(
t˝_pcb
);

175 
u16_t
 
ªmŸe_p‹t
;

177 
u8_t
 
Êags
;

178 
	#TF_ACK_DELAY
 ((
u8_t
)0x01UË

	)

179 
	#TF_ACK_NOW
 ((
u8_t
)0x02UË

	)

180 
	#TF_INFR
 ((
u8_t
)0x04UË

	)

181 
	#TF_TIMESTAMP
 ((
u8_t
)0x08UË

	)

182 
	#TF_RXCLOSED
 ((
u8_t
)0x10UË

	)

183 
	#TF_FIN
 ((
u8_t
)0x20UË

	)

184 
	#TF_NODELAY
 ((
u8_t
)0x40UË

	)

185 
	#TF_NAGLEMEMERR
 ((
u8_t
)0x80UË

	)

191 
u8_t
 
pﬁ…mr
, 
pﬁlöãrvÆ
;

192 
u8_t
 
œ°_timî
;

193 
u32_t
 
tmr
;

196 
u32_t
 
rcv_nxt
;

197 
u16_t
 
rcv_wnd
;

198 
u16_t
 
rcv_™n_wnd
;

199 
u32_t
 
rcv_™n_right_edge
;

202 
s16_t
 
πime
;

204 
u16_t
 
mss
;

207 
u32_t
 
πã°
;

208 
u32_t
 
π£q
;

209 
s16_t
 
ß
, 
sv
;

211 
s16_t
 
πo
;

212 
u8_t
 
ƒtx
;

215 
u8_t
 
du∑cks
;

216 
u32_t
 
œ°ack
;

219 
u16_t
 
cwnd
;

220 
u16_t
 
s°hªsh
;

223 
u32_t
 
¢d_nxt
;

224 
u32_t
 
¢d_wl1
, 
¢d_wl2
;

226 
u32_t
 
¢d_lbb
;

227 
u16_t
 
¢d_wnd
;

228 
u16_t
 
¢d_wnd_max
;

230 
u16_t
 
acked
;

232 
u16_t
 
¢d_buf
;

233 
	#TCP_SNDQUEUELEN_OVERFLOW
 (0xffffU-3)

	)

234 
u16_t
 
¢d_queuñí
;

236 #i‡
TCP_OVERSIZE


238 
u16_t
 
un£¡_ovîsize
;

242 
t˝_£g
 *
un£¡
;

243 
t˝_£g
 *
u«cked
;

244 #i‡
TCP_QUEUE_OOSEQ


245 
t˝_£g
 *
oo£q
;

248 
pbuf
 *
ªfu£d_d©a
;

250 #i‡
LWIP_CALLBACK_API


252 
t˝_£¡_‚
 
£¡
;

254 
t˝_ªcv_‚
 
ªcv
;

256 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
;

258 
t˝_pﬁl_‚
 
pﬁl
;

260 
t˝_îr_‚
 
îrf
;

263 #i‡
LWIP_TCP_TIMESTAMPS


264 
u32_t
 
ts_œ°ack£¡
;

265 
u32_t
 
ts_ª˚¡
;

269 
u32_t
 
kìp_idÀ
;

270 #i‡
LWIP_TCP_KEEPALIVE


271 
u32_t
 
kìp_ötvl
;

272 
u32_t
 
kìp_˙t
;

276 
u8_t
 
≥rsi°_˙t
;

278 
u8_t
 
≥rsi°_backoff
;

281 
u8_t
 
kìp_˙t_£¡
;

284 
	st˝_pcb_li°í
 {

286 
IP_PCB
;

288 
TCP_PCB_COMMON
(
t˝_pcb_li°í
);

290 #i‡
TCP_LISTEN_BACKLOG


291 
u8_t
 
backlog
;

292 
u8_t
 
ac˚±s_≥ndög
;

296 #i‡
LWIP_EVENT_API


298 
	elwù_evít
 {

299 
LWIP_EVENT_ACCEPT
,

300 
LWIP_EVENT_SENT
,

301 
LWIP_EVENT_RECV
,

302 
LWIP_EVENT_CONNECTED
,

303 
LWIP_EVENT_POLL
,

304 
LWIP_EVENT_ERR


307 
îr_t
 
lwù_t˝_evít
(*
¨g
, 
t˝_pcb
 *
pcb
,

308 
lwù_evít
,

309 
pbuf
 *
p
,

310 
u16_t
 
size
,

311 
îr_t
 
îr
);

316 
t˝_pcb
 * 
t˝_√w
 ();

318 
t˝_¨g
 (
t˝_pcb
 *
pcb
, *
¨g
);

319 
t˝_ac˚±
 (
t˝_pcb
 *
pcb
, 
t˝_ac˚±_‚
 
ac˚±
);

320 
t˝_ªcv
 (
t˝_pcb
 *
pcb
, 
t˝_ªcv_‚
 
ªcv
);

321 
t˝_£¡
 (
t˝_pcb
 *
pcb
, 
t˝_£¡_‚
 
£¡
);

322 
t˝_pﬁl
 (
t˝_pcb
 *
pcb
, 
t˝_pﬁl_‚
 
pﬁl
, 
u8_t
 
öãrvÆ
);

323 
t˝_îr
 (
t˝_pcb
 *
pcb
, 
t˝_îr_‚
 
îr
);

325 
	#t˝_mss
(
pcb
Ë((’cb)->
Êags
 & 
TF_TIMESTAMP
Ë? (’cb)->
mss
 - 12Ë: (pcb)->mss)

	)

326 
	#t˝_¢dbuf
(
pcb
Ë(’cb)->
¢d_buf
)

	)

327 
	#t˝_¢dqueuñí
(
pcb
Ë(’cb)->
¢d_queuñí
)

	)

328 
	#t˝_«gÀ_dißbÀ
(
pcb
Ë(’cb)->
Êags
 |
TF_NODELAY
)

	)

329 
	#t˝_«gÀ_íabÀ
(
pcb
Ë(’cb)->
Êags
 &~
TF_NODELAY
)

	)

330 
	#t˝_«gÀ_dißbÀd
(
pcb
Ë((’cb)->
Êags
 & 
TF_NODELAY
Ë!0)

	)

332 #i‡
TCP_LISTEN_BACKLOG


333 
	#t˝_ac˚±ed
(
pcb
) do { \

334 
	`LWIP_ASSERT
("pcb->°©ê=LISTEN (ˇŒed f‹ wr⁄gÖcb?)", 
pcb
->
°©e
 =
LISTEN
); \

335 (((
t˝_pcb_li°í
 *)(
pcb
))->
ac˚±s_≥ndög
--); } 0)

	)

337 
	#t˝_ac˚±ed
(
pcb
Ë
	`LWIP_ASSERT
("pcb->state == LISTEN (called for wrongÖcb?)", \

338 (
pcb
)->
°©e
 =
LISTEN
)

	)

341 
t˝_ªcved
 (
t˝_pcb
 *
pcb
, 
u16_t
 
Àn
);

342 
îr_t
 
t˝_böd
 (
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

343 
u16_t
 
p‹t
);

344 
îr_t
 
t˝_c⁄√˘
 (
t˝_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

345 
u16_t
 
p‹t
, 
t˝_c⁄√˘ed_‚
 
c⁄√˘ed
);

347 
t˝_pcb
 * 
t˝_li°í_wôh_backlog
(t˝_pcb *
pcb
, 
u8_t
 
backlog
);

348 
	#t˝_li°í
(
pcb
Ë
	`t˝_li°í_wôh_backlog
’cb, 
TCP_DEFAULT_LISTEN_BACKLOG
)

	)

350 
t˝_ab‹t
 (
t˝_pcb
 *
pcb
);

351 
îr_t
 
t˝_˛o£
 (
t˝_pcb
 *
pcb
);

352 
îr_t
 
t˝_shutdown
(
t˝_pcb
 *
pcb
, 
shut_rx
, 
shut_tx
);

355 
	#TCP_WRITE_FLAG_COPY
 0x01

	)

356 
	#TCP_WRITE_FLAG_MORE
 0x02

	)

358 
îr_t
 
t˝_wrôe
 (
t˝_pcb
 *
pcb
, c⁄° *
d©≠å
, 
u16_t
 
Àn
,

359 
u8_t
 
≠iÊags
);

361 
t˝_£çrio
 (
t˝_pcb
 *
pcb
, 
u8_t
 
¥io
);

363 
	#TCP_PRIO_MIN
 1

	)

364 
	#TCP_PRIO_NORMAL
 64

	)

365 
	#TCP_PRIO_MAX
 127

	)

367 
îr_t
 
t˝_ouçut
 (
t˝_pcb
 *
pcb
);

370 c⁄° * 
t˝_debug_°©e_°r
(
t˝_°©e
 
s
);

373 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/tcp_impl.h

32 #i‚de‡
__LWIP_TCP_IMPL_H__


33 
	#__LWIP_TCP_IMPL_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_TCP


39 
	~"lwù/t˝.h
"

40 
	~"lwù/mem.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/ù.h
"

43 
	~"lwù/icmp.h
"

44 
	~"lwù/îr.h
"

46 #ifde‡
__˝lu•lus


53 
t˝_öô
 ();

54 
t˝_tmr
 ();

59 
t˝_¶owtmr
 ();

60 
t˝_Á°tmr
 ();

64 
t˝_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

66 
t˝_pcb
 * 
t˝_Æloc
 (
u8_t
 
¥io
);

67 
t˝_ab™d⁄
 (
t˝_pcb
 *
pcb
, 
ª£t
);

68 
îr_t
 
t˝_£nd_em±y_ack
(
t˝_pcb
 *
pcb
);

69 
t˝_ªxmô
 (
t˝_pcb
 *
pcb
);

70 
t˝_ªxmô_πo
 (
t˝_pcb
 *
pcb
);

71 
t˝_ªxmô_Á°
 (
t˝_pcb
 *
pcb
);

72 
u32_t
 
t˝_upd©e_rcv_™n_wnd
(
t˝_pcb
 *
pcb
);

73 
îr_t
 
t˝_¥o˚ss_ªfu£d_d©a
(
t˝_pcb
 *
pcb
);

84 
	#t˝_do_ouçut_«gÀ
(
çcb
Ë(((—pcb)->
u«cked
 =
NULL
) || \

85 ((
çcb
)->
Êags
 & (
TF_NODELAY
 | 
TF_INFR
)) || \

86 (((
çcb
)->
un£¡
 !
NULL
Ë&& ((—pcb)->un£¡->
√xt
 != NULL) || \

87 ((
çcb
)->
un£¡
->
Àn
 >—pcb)->
mss
))) || \

88 ((
	`t˝_¢dbuf
(
çcb
Ë=0Ë|| (
	`t˝_¢dqueuñí
—pcbË>
TCP_SND_QUEUELEN
)) \

89 Ë? 1 : 0)

	)

90 
	#t˝_ouçut_«gÀ
(
çcb
Ë(
	`t˝_do_ouçut_«gÀ
—pcbË? 
	`t˝_ouçut
—pcbË: 
ERR_OK
)

	)

93 
	#TCP_SEQ_LT
(
a
,
b
Ë((
s32_t
)((
u32_t
)◊Ë- (u32_t)(b)Ë< 0)

	)

94 
	#TCP_SEQ_LEQ
(
a
,
b
Ë((
s32_t
)((
u32_t
)◊Ë- (u32_t)(b)Ë<0)

	)

95 
	#TCP_SEQ_GT
(
a
,
b
Ë((
s32_t
)((
u32_t
)◊Ë- (u32_t)(b)Ë> 0)

	)

96 
	#TCP_SEQ_GEQ
(
a
,
b
Ë((
s32_t
)((
u32_t
)◊Ë- (u32_t)(b)Ë>0)

	)

99 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë((c)-(bË>◊)-(b))

	)

101 
	#TCP_SEQ_BETWEEN
(
a
,
b
,
c
Ë(
	`TCP_SEQ_GEQ
◊,bË&& 
	`TCP_SEQ_LEQ
◊,c))

	)

102 
	#TCP_FIN
 0x01U

	)

103 
	#TCP_SYN
 0x02U

	)

104 
	#TCP_RST
 0x04U

	)

105 
	#TCP_PSH
 0x08U

	)

106 
	#TCP_ACK
 0x10U

	)

107 
	#TCP_URG
 0x20U

	)

108 
	#TCP_ECE
 0x40U

	)

109 
	#TCP_CWR
 0x80U

	)

111 
	#TCP_FLAGS
 0x3fU

	)

114 
	#TCP_HLEN
 20

	)

116 #i‚de‡
TCP_TMR_INTERVAL


117 
	#TCP_TMR_INTERVAL
 250

	)

120 #i‚de‡
TCP_FAST_INTERVAL


121 
	#TCP_FAST_INTERVAL
 
TCP_TMR_INTERVAL


	)

124 #i‚de‡
TCP_SLOW_INTERVAL


125 
	#TCP_SLOW_INTERVAL
 (2*
TCP_TMR_INTERVAL
Ë

	)

128 
	#TCP_FIN_WAIT_TIMEOUT
 20000

	)

129 
	#TCP_SYN_RCVD_TIMEOUT
 20000

	)

131 
	#TCP_OOSEQ_TIMEOUT
 6U

	)

133 #i‚de‡
TCP_MSL


134 
	#TCP_MSL
 60000UL

	)

138 #i‚de‡ 
TCP_KEEPIDLE_DEFAULT


139 
	#TCP_KEEPIDLE_DEFAULT
 7200000UL

	)

142 #i‚de‡ 
TCP_KEEPINTVL_DEFAULT


143 
	#TCP_KEEPINTVL_DEFAULT
 75000UL

	)

146 #i‚de‡ 
TCP_KEEPCNT_DEFAULT


147 
	#TCP_KEEPCNT_DEFAULT
 9U

	)

150 
	#TCP_MAXIDLE
 
TCP_KEEPCNT_DEFAULT
 * 
TCP_KEEPINTVL_DEFAULT


	)

155 #ifde‡
PACK_STRUCT_USE_INCLUDES


156 
	~"¨ch/bp°ru˘.h
"

158 
PACK_STRUCT_BEGIN


159 
	st˝_hdr
 {

160 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

161 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

162 
PACK_STRUCT_FIELD
(
u32_t
 
£qno
);

163 
PACK_STRUCT_FIELD
(
u32_t
 
ackno
);

164 
PACK_STRUCT_FIELD
(
u16_t
 
_hdæí_rsvd_Êags
);

165 
PACK_STRUCT_FIELD
(
u16_t
 
wnd
);

166 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

167 
PACK_STRUCT_FIELD
(
u16_t
 
urgp
);

168 } 
PACK_STRUCT_STRUCT
;

169 
PACK_STRUCT_END


170 #ifde‡
PACK_STRUCT_USE_INCLUDES


171 
	~"¨ch/ï°ru˘.h
"

174 
	#TCPH_HDRLEN
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë>> 12)

	)

175 
	#TCPH_FLAGS
(
phdr
Ë(
	`¡ohs
(’hdr)->
_hdæí_rsvd_Êags
Ë& 
TCP_FLAGS
)

	)

177 
	#TCPH_HDRLEN_SET
(
phdr
, 
Àn
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| 
	`TCPH_FLAGS
’hdr))

	)

178 
	#TCPH_FLAGS_SET
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = ((’hdr)->_hdæí_rsvd_Êag†& 
	`PP_HTONS
((
u16_t
)(~(u16_t)(
TCP_FLAGS
)))Ë| 
	`ht⁄s
(Êags))

	)

179 
	#TCPH_HDRLEN_FLAGS_SET
(
phdr
, 
Àn
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
((÷íË<< 12Ë| (Êags))

	)

181 
	#TCPH_SET_FLAG
(
phdr
, 
Êags
 ) (phdr)->
_hdæí_rsvd_Êags
 = (’hdr)->_hdæí_rsvd_Êag†| 
	`ht⁄s
(Êags))

	)

182 
	#TCPH_UNSET_FLAG
(
phdr
, 
Êags
Ë’hdr)->
_hdæí_rsvd_Êags
 = 
	`ht⁄s
(
	`¡ohs
(’hdr)->_hdæí_rsvd_ÊagsË| (
	`TCPH_FLAGS
’hdrË& ~(Êags)Ë)

	)

184 
	#TCP_TCPLEN
(
£g
Ë((£g)->
Àn
 + ((
	`TCPH_FLAGS
((£g)->
t˝hdr
Ë& (
TCP_FIN
 | 
TCP_SYN
)Ë!0))

	)

188 
	#TF_RESET
 (
u8_t
)0x08U

	)

189 
	#TF_CLOSED
 (
u8_t
)0x10U

	)

190 
	#TF_GOT_FIN
 (
u8_t
)0x20U

	)

193 #i‡
LWIP_EVENT_API


195 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

196 
LWIP_EVENT_ACCEPT
, 
NULL
, 0, 
îr
)

	)

197 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

198 
LWIP_EVENT_SENT
, 
NULL
, 
•a˚
, 
ERR_OK
)

	)

199 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

200 
LWIP_EVENT_RECV
, (
p
), 0, (
îr
))

	)

201 
	#TCP_EVENT_CLOSED
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

202 
LWIP_EVENT_RECV
, 
NULL
, 0, 
ERR_OK
)

	)

203 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

204 
LWIP_EVENT_CONNECTED
, 
NULL
, 0, (
îr
))

	)

205 
	#TCP_EVENT_POLL
(
pcb
,
ªt
Ëªà
	`lwù_t˝_evít
(’cb)->
ˇŒback_¨g
, (pcb),\

206 
LWIP_EVENT_POLL
, 
NULL
, 0, 
ERR_OK
)

	)

207 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
Ë
	`lwù_t˝_evít
(◊rg), 
NULL
, \

208 
LWIP_EVENT_ERR
, 
NULL
, 0, (
îr
))

	)

212 
	#TCP_EVENT_ACCEPT
(
pcb
,
îr
,
ªt
) \

214 if((
pcb
)->
ac˚±
 !
NULL
) \

215 (
ªt
Ë(
pcb
)->
	`ac˚±
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

216 (
ªt
Ë
ERR_ARG
; \

217 } 0)

	)

219 
	#TCP_EVENT_SENT
(
pcb
,
•a˚
,
ªt
) \

221 if((
pcb
)->
£¡
 !
NULL
) \

222 (
ªt
Ë(
pcb
)->
	`£¡
(’cb)->
ˇŒback_¨g
,’cb),(
•a˚
)); \

223 (
ªt
Ë
ERR_OK
; \

224 } 0)

	)

226 
	#TCP_EVENT_RECV
(
pcb
,
p
,
îr
,
ªt
) \

228 if((
pcb
)->
ªcv
 !
NULL
) { \

229 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),(
p
),(
îr
));\

231 (
ªt
Ë
	`t˝_ªcv_nuŒ
(
NULL
, (
pcb
), (
p
), (
îr
)); \

233 } 0)

	)

235 
	#TCP_EVENT_CLOSED
(
pcb
,
ªt
) \

237 if(((
pcb
)->
ªcv
 !
NULL
)) { \

238 (
ªt
Ë(
pcb
)->
	`ªcv
(’cb)->
ˇŒback_¨g
,’cb),
NULL
,
ERR_OK
);\

240 (
ªt
Ë
ERR_OK
; \

242 } 0)

	)

244 
	#TCP_EVENT_CONNECTED
(
pcb
,
îr
,
ªt
) \

246 if((
pcb
)->
c⁄√˘ed
 !
NULL
) \

247 (
ªt
Ë(
pcb
)->
	`c⁄√˘ed
(’cb)->
ˇŒback_¨g
,’cb),(
îr
)); \

248 (
ªt
Ë
ERR_OK
; \

249 } 0)

	)

251 
	#TCP_EVENT_POLL
(
pcb
,
ªt
) \

253 if((
pcb
)->
pﬁl
 !
NULL
) \

254 (
ªt
Ë(
pcb
)->
	`pﬁl
(’cb)->
ˇŒback_¨g
,(pcb)); \

255 (
ªt
Ë
ERR_OK
; \

256 } 0)

	)

258 
	#TCP_EVENT_ERR
(
îrf
,
¨g
,
îr
) \

260 if((
îrf
Ë!
NULL
) \

261 (
îrf
)((
¨g
),(
îr
)); \

262 } 0)

	)

267 #i‡
TCP_OVERSIZE
 && 
deföed
(
LWIP_DEBUG
)

268 
	#TCP_OVERSIZE_DBGCHECK
 1

	)

270 
	#TCP_OVERSIZE_DBGCHECK
 0

	)

274 
	#TCP_CHECKSUM_ON_COPY
 (
LWIP_CHECKSUM_ON_COPY
 && 
CHECKSUM_GEN_TCP
)

	)

277 
	st˝_£g
 {

278 
t˝_£g
 *
√xt
;

279 
pbuf
 *
p
;

280 
u16_t
 
Àn
;

281 #i‡
TCP_OVERSIZE_DBGCHECK


282 
u16_t
 
ovîsize_À·
;

286 #i‡
TCP_CHECKSUM_ON_COPY


287 
u16_t
 
chksum
;

288 
u8_t
 
chksum_sw≠≥d
;

290 
u8_t
 
Êags
;

291 
	#TF_SEG_OPTS_MSS
 (
u8_t
)0x01U

	)

292 
	#TF_SEG_OPTS_TS
 (
u8_t
)0x02U

	)

293 
	#TF_SEG_DATA_CHECKSUMMED
 (
u8_t
)0x04U

	)

295 
t˝_hdr
 *
t˝hdr
;

298 
	#LWIP_TCP_OPT_LENGTH
(
Êags
) \

299 (
Êags
 & 
TF_SEG_OPTS_MSS
 ? 4 : 0) + \

300 (
Êags
 & 
TF_SEG_OPTS_TS
 ? 12 : 0)

	)

303 
	#TCP_BUILD_MSS_OPTION
(
mss
Ë
	`ht⁄l
(0x02040000 | ((mssË& 0xFFFF))

	)

306 
t˝_pcb
 *
t˝_öput_pcb
;

307 
u32_t
 
t˝_ticks
;

308 
u8_t
 
t˝_a˘ive_pcbs_ch™ged
;

311 
	ut˝_li°í_pcbs_t
 {

312 
t˝_pcb_li°í
 *
	gli°í_pcbs
;

313 
t˝_pcb
 *
	gpcbs
;

315 
t˝_pcb
 *
t˝_bound_pcbs
;

316 
t˝_li°í_pcbs_t
 
t˝_li°í_pcbs
;

317 
t˝_pcb
 *
t˝_a˘ive_pcbs
;

320 
t˝_pcb
 *
t˝_tw_pcbs
;

322 
t˝_pcb
 *
t˝_tmp_pcb
;

332 #i‚de‡
TCP_DEBUG_PCB_LISTS


333 
	#TCP_DEBUG_PCB_LISTS
 0

	)

335 #i‡
TCP_DEBUG_PCB_LISTS


336 
	#TCP_REG
(
pcbs
, 
≈cb
) do {\

337 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_REG %∞loˇ»p‹à%d\n", (
≈cb
), (≈cb)->
loˇl_p‹t
)); \

338 
t˝_tmp_pcb
 = *(
pcbs
); \

339 
t˝_tmp_pcb
 !
NULL
; \

340 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

341 
	`LWIP_ASSERT
("TCP_REG:áÃódyÑegi°îed\n", 
t˝_tmp_pcb
 !(
≈cb
)); \

343 
	`LWIP_ASSERT
("TCP_REG:Öcb->°©ê!CLOSED", ((
pcbs
Ë=&
t˝_bound_pcbs
Ë|| ((
≈cb
)->
°©e
 !
CLOSED
)); \

344 (
≈cb
)->
√xt
 = *(
pcbs
); \

345 
	`LWIP_ASSERT
("TCP_REG:Çpcb->√xà!≈cb", (
≈cb
)->
√xt
 != (npcb)); \

346 *(
pcbs
Ë(
≈cb
); \

347 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

348 
	`t˝_timî_√eded
(); \

349 } 0)

	)

350 
	#TCP_RMV
(
pcbs
, 
≈cb
) do { \

351 
	`LWIP_ASSERT
("TCP_RMV:Öcb†!NULL", *(
pcbs
Ë!
NULL
); \

352 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemovög %∞‰om %p\n", (
≈cb
), *(
pcbs
))); \

353 if(*(
pcbs
Ë=(
≈cb
)) { \

354 *(
pcbs
Ë(*pcbs)->
√xt
; \

355 } 
t˝_tmp_pcb
 = *(
pcbs
);Å˝_tmp_pcb !
NULL
;Å˝_tmp_pcb =Å˝_tmp_pcb->
√xt
) { \

356 if(
t˝_tmp_pcb
->
√xt
 =(
≈cb
)) { \

357 
t˝_tmp_pcb
->
√xt
 = (
≈cb
)->next; \

361 (
≈cb
)->
√xt
 = 
NULL
; \

362 
	`LWIP_ASSERT
("TCP_RMV:Å˝_pcb†ß√", 
	`t˝_pcbs_ß√
()); \

363 
	`LWIP_DEBUGF
(
TCP_DEBUG
, ("TCP_RMV:Ñemoved %∞‰om %p\n", (
≈cb
), *(
pcbs
))); \

364 } 0)

	)

368 
	#TCP_REG
(
pcbs
, 
≈cb
) \

370 (
≈cb
)->
√xt
 = *
pcbs
; \

371 *(
pcbs
Ë(
≈cb
); \

372 
	`t˝_timî_√eded
(); \

373 } 0)

	)

375 
	#TCP_RMV
(
pcbs
, 
≈cb
) \

377 if(*(
pcbs
Ë=(
≈cb
)) { \

378 (*(
pcbs
)Ë(*pcbs)->
√xt
; \

381 
t˝_tmp_pcb
 = *
pcbs
; \

382 
t˝_tmp_pcb
 !
NULL
; \

383 
t˝_tmp_pcb
 =Å˝_tmp_pcb->
√xt
) { \

384 if(
t˝_tmp_pcb
->
√xt
 =(
≈cb
)) { \

385 
t˝_tmp_pcb
->
√xt
 = (
≈cb
)->next; \

390 (
≈cb
)->
√xt
 = 
NULL
; \

391 } 0)

	)

395 
	#TCP_REG_ACTIVE
(
≈cb
) \

397 
	`TCP_REG
(&
t˝_a˘ive_pcbs
, 
≈cb
); \

398 
t˝_a˘ive_pcbs_ch™ged
 = 1; \

399 } 0)

	)

401 
	#TCP_RMV_ACTIVE
(
≈cb
) \

403 
	`TCP_RMV
(&
t˝_a˘ive_pcbs
, 
≈cb
); \

404 
t˝_a˘ive_pcbs_ch™ged
 = 1; \

405 } 0)

	)

407 
	#TCP_PCB_REMOVE_ACTIVE
(
pcb
) \

409 
	`t˝_pcb_ªmove
(&
t˝_a˘ive_pcbs
, 
pcb
); \

410 
t˝_a˘ive_pcbs_ch™ged
 = 1; \

411 } 0)

	)

415 
t˝_pcb
 *
t˝_pcb_c›y
(t˝_pcb *
pcb
);

416 
t˝_pcb_purge
(
t˝_pcb
 *
pcb
);

417 
t˝_pcb_ªmove
(
t˝_pcb
 **
pcbli°
, t˝_pcb *
pcb
);

419 
t˝_£gs_‰ì
(
t˝_£g
 *
£g
);

420 
t˝_£g_‰ì
(
t˝_£g
 *
£g
);

421 
t˝_£g
 *
t˝_£g_c›y
(t˝_£g *
£g
);

423 
	#t˝_ack
(
pcb
) \

425 if((
pcb
)->
Êags
 & 
TF_ACK_DELAY
) { \

426 (
pcb
)->
Êags
 &~
TF_ACK_DELAY
; \

427 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

430 (
pcb
)->
Êags
 |
TF_ACK_DELAY
; \

432 } 0)

	)

434 
	#t˝_ack_now
(
pcb
) \

436 (
pcb
)->
Êags
 |
TF_ACK_NOW
; \

437 } 0)

	)

439 
îr_t
 
t˝_£nd_fö
(
t˝_pcb
 *
pcb
);

440 
îr_t
 
t˝_íqueue_Êags
(
t˝_pcb
 *
pcb
, 
u8_t
 
Êags
);

442 
t˝_ªxmô_£g
(
t˝_pcb
 *
pcb
, 
t˝_£g
 *
£g
);

444 
t˝_r°
(
u32_t
 
£qno
, u32_à
ackno
,

445 
ù_addr_t
 *
loˇl_ù
, ip_addr_à*
ªmŸe_ù
,

446 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

448 
u32_t
 
t˝_√xt_iss
();

450 
t˝_kì∑live
(
t˝_pcb
 *
pcb
);

451 
t˝_zîo_wödow_¥obe
(
t˝_pcb
 *
pcb
);

453 #i‡
TCP_CALCULATE_EFF_SEND_MSS


454 
u16_t
 
t˝_eff_£nd_mss
(u16_à
£ndmss
, 
ù_addr_t
 *
addr
);

457 #i‡
LWIP_CALLBACK_API


458 
îr_t
 
t˝_ªcv_nuŒ
(*
¨g
, 
t˝_pcb
 *
pcb
, 
pbuf
 *
p
,Éº_à
îr
);

461 #i‡
TCP_DEBUG
 || 
TCP_INPUT_DEBUG
 || 
TCP_OUTPUT_DEBUG


462 
t˝_debug_¥öt
(
t˝_hdr
 *
t˝hdr
);

463 
t˝_debug_¥öt_Êags
(
u8_t
 
Êags
);

464 
t˝_debug_¥öt_°©e
(
t˝_°©e
 
s
);

465 
t˝_debug_¥öt_pcbs
();

466 
s16_t
 
t˝_pcbs_ß√
();

468 
	#t˝_debug_¥öt
(
t˝hdr
)

	)

469 
	#t˝_debug_¥öt_Êags
(
Êags
)

	)

470 
	#t˝_debug_¥öt_°©e
(
s
)

	)

471 
	#t˝_debug_¥öt_pcbs
()

	)

472 
	#t˝_pcbs_ß√
(Ë1

	)

477 
t˝_timî_√eded
();

480 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/tcpip.h

32 #i‚de‡
__LWIP_TCPIP_H__


33 
	#__LWIP_TCPIP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡!
NO_SYS


39 
	~"lwù/≠i_msg.h
"

40 
	~"lwù/√tiÁpi.h
"

41 
	~"lwù/pbuf.h
"

42 
	~"lwù/≠i.h
"

43 
	~"lwù/sys.h
"

44 
	~"lwù/timîs.h
"

45 
	~"lwù/√tif.h
"

47 #ifde‡
__˝lu•lus


53 #i‚de‡
LWIP_TCPIP_THREAD_ALIVE


54 
	#LWIP_TCPIP_THREAD_ALIVE
()

	)

57 #i‡
LWIP_TCPIP_CORE_LOCKING


59 
sys_muãx_t
 
lock_t˝ù_c‹e
;

60 
	#LOCK_TCPIP_CORE
(Ë
	`sys_muãx_lock
(&
lock_t˝ù_c‹e
)

	)

61 
	#UNLOCK_TCPIP_CORE
(Ë
	`sys_muãx_u∆ock
(&
lock_t˝ù_c‹e
)

	)

62 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg_lock
(m)

	)

63 
	#TCPIP_APIMSG_ACK
(
m
)

	)

64 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi_lock
(m)

	)

65 
	#TCPIP_NETIFAPI_ACK
(
m
)

	)

67 
	#LOCK_TCPIP_CORE
()

	)

68 
	#UNLOCK_TCPIP_CORE
()

	)

69 
	#TCPIP_APIMSG
(
m
Ë
	`t˝ù_≠imsg
(m)

	)

70 
	#TCPIP_APIMSG_ACK
(
m
Ë
	`sys_£m_sig«l
(&m->
c⁄n
->
›_com∂ëed
)

	)

71 
	#TCPIP_NETIFAPI
(
m
Ë
	`t˝ù_√tiÁpi
(m)

	)

72 
	#TCPIP_NETIFAPI_ACK
(
m
Ë
	`sys_£m_sig«l
(&m->
£m
)

	)

76 (*
	gt˝ù_öô_d⁄e_‚
)(*
	t¨g
);

78 (*
	gt˝ù_ˇŒback_‚
)(*
	t˘x
);

81 
	gt˝ù_ˇŒback_msg
;

83 
t˝ù_öô
(
t˝ù_öô_d⁄e_‚
 
t˝ù_öô_d⁄e
, *
¨g
);

85 #i‡
LWIP_NETCONN


86 
îr_t
 
t˝ù_≠imsg
(
≠i_msg
 *
≠imsg
);

87 #i‡
LWIP_TCPIP_CORE_LOCKING


88 
îr_t
 
t˝ù_≠imsg_lock
(
≠i_msg
 *
≠imsg
);

92 
îr_t
 
t˝ù_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

94 #i‡
LWIP_NETIF_API


95 
îr_t
 
t˝ù_√tiÁpi
(
√tiÁpi_msg
 *
√tiÁpimsg
);

96 #i‡
LWIP_TCPIP_CORE_LOCKING


97 
îr_t
 
t˝ù_√tiÁpi_lock
(
√tiÁpi_msg
 *
√tiÁpimsg
);

101 
îr_t
 
t˝ù_ˇŒback_wôh_block
(
t˝ù_ˇŒback_‚
 
fun˘i⁄
, *
˘x
, 
u8_t
 
block
);

102 
	#t˝ù_ˇŒback
(
f
, 
˘x
Ë
	`t˝ù_ˇŒback_wôh_block
(f, ctx, 1)

	)

104 
t˝ù_ˇŒback_msg
* 
t˝ù_ˇŒbackmsg_√w
(
t˝ù_ˇŒback_‚
 
fun˘i⁄
, *
˘x
);

105 
t˝ù_ˇŒbackmsg_dñëe
(
t˝ù_ˇŒback_msg
* 
msg
);

106 
îr_t
 
t˝ù_åyˇŒback
(
t˝ù_ˇŒback_msg
* 
msg
);

109 
îr_t
 
pbuf_‰ì_ˇŒback
(
pbuf
 *
p
);

110 
îr_t
 
mem_‰ì_ˇŒback
(*
m
);

112 #i‡
LWIP_TCPIP_TIMEOUT


113 
îr_t
 
t˝ù_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h
, *
¨g
);

114 
îr_t
 
t˝ù_u¡imeout
(
sys_timeout_h™dÀr
 
h
, *
¨g
);

117 
	et˝ù_msg_ty≥
 {

118 #i‡
LWIP_NETCONN


119 
	gTCPIP_MSG_API
,

121 
	gTCPIP_MSG_INPKT
,

122 #i‡
LWIP_NETIF_API


123 
	gTCPIP_MSG_NETIFAPI
,

125 #i‡
LWIP_TCPIP_TIMEOUT


126 
	gTCPIP_MSG_TIMEOUT
,

127 
	gTCPIP_MSG_UNTIMEOUT
,

129 
	gTCPIP_MSG_CALLBACK
,

130 
	gTCPIP_MSG_CALLBACK_STATIC


133 
	st˝ù_msg
 {

134 
t˝ù_msg_ty≥
 
	gty≥
;

135 
sys_£m_t
 *
	g£m
;

137 #i‡
LWIP_NETCONN


138 
≠i_msg
 *
	g≠imsg
;

140 #i‡
LWIP_NETIF_API


141 
√tiÁpi_msg
 *
	g√tiÁpimsg
;

144 
pbuf
 *
	gp
;

145 
√tif
 *
	g√tif
;

146 } 
	göp
;

148 
t˝ù_ˇŒback_‚
 
	gfun˘i⁄
;

149 *
	g˘x
;

150 } 
	gcb
;

151 #i‡
LWIP_TCPIP_TIMEOUT


153 
u32_t
 
	gm£cs
;

154 
sys_timeout_h™dÀr
 
	gh
;

155 *
	g¨g
;

156 } 
	gtmo
;

158 } 
	gmsg
;

161 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/timers.h

33 #i‚de‡
__LWIP_TIMERS_H__


34 
	#__LWIP_TIMERS_H__


	)

36 
	~"lwù/›t.h
"

39 
	#LWIP_TIMERS
 (!
NO_SYS
 || (NO_SYS && !
NO_SYS_NO_TIMERS
))

	)

41 #i‡
LWIP_TIMERS


43 
	~"lwù/îr.h
"

44 #i‡!
NO_SYS


45 
	~"lwù/sys.h
"

48 #ifde‡
__˝lu•lus


52 #i‚de‡
LWIP_DEBUG_TIMERNAMES


53 #ifde‡
LWIP_DEBUG


54 
	#LWIP_DEBUG_TIMERNAMES
 
SYS_DEBUG


	)

56 
	#LWIP_DEBUG_TIMERNAMES
 0

	)

65 (* 
sys_timeout_h™dÀr
)(*
	t¨g
);

67 
	ssys_timeo
 {

68 
sys_timeo
 *
√xt
;

69 
u32_t
 
time
;

70 
sys_timeout_h™dÀr
 
h
;

71 *
¨g
;

72 #i‡
LWIP_DEBUG_TIMERNAMES


73 c⁄° * 
h™dÀr_«me
;

77 
sys_timeouts_öô
();

79 #i‡
LWIP_DEBUG_TIMERNAMES


80 
sys_timeout_debug
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
, c⁄° * 
h™dÀr_«me
);

81 
	#sys_timeout
(
m£cs
, 
h™dÀr
, 
¨g
Ë
	`sys_timeout_debug
(m£cs, h™dÀr,árg, #h™dÀr)

	)

83 
sys_timeout
(
u32_t
 
m£cs
, 
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
);

86 
sys_u¡imeout
(
sys_timeout_h™dÀr
 
h™dÀr
, *
¨g
);

87 #i‡
NO_SYS


88 
sys_check_timeouts
();

89 
sys_ª°¨t_timeouts
();

91 
sys_timeouts_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
);

95 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/lwip/udp.h

32 #i‚de‡
__LWIP_UDP_H__


33 
	#__LWIP_UDP_H__


	)

35 
	~"lwù/›t.h
"

37 #i‡
LWIP_UDP


39 
	~"lwù/pbuf.h
"

40 
	~"lwù/√tif.h
"

41 
	~"lwù/ù_addr.h
"

42 
	~"lwù/ù.h
"

44 #ifde‡
__˝lu•lus


48 
	#UDP_HLEN
 8

	)

51 #ifde‡
PACK_STRUCT_USE_INCLUDES


52 
	~"¨ch/bp°ru˘.h
"

54 
PACK_STRUCT_BEGIN


55 
	sudp_hdr
 {

56 
PACK_STRUCT_FIELD
(
u16_t
 
§c
);

57 
PACK_STRUCT_FIELD
(
u16_t
 
de°
);

58 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

59 
PACK_STRUCT_FIELD
(
u16_t
 
chksum
);

60 } 
PACK_STRUCT_STRUCT
;

61 
PACK_STRUCT_END


62 #ifde‡
PACK_STRUCT_USE_INCLUDES


63 
	~"¨ch/ï°ru˘.h
"

66 
	#UDP_FLAGS_NOCHKSUM
 0x01U

	)

67 
	#UDP_FLAGS_UDPLITE
 0x02U

	)

68 
	#UDP_FLAGS_CONNECTED
 0x04U

	)

69 
	#UDP_FLAGS_MULTICAST_LOOP
 0x08U

	)

71 
udp_pcb
;

87 (*
udp_ªcv_‚
)(*
	t¨g
, 
	tudp_pcb
 *
	tpcb
, 
	tpbuf
 *
	tp
,

88 
	tù_addr_t
 *
	taddr
, 
	tu16_t
 
	tp‹t
);

91 
	sudp_pcb
 {

93 
IP_PCB
;

97 
udp_pcb
 *
√xt
;

99 
u8_t
 
Êags
;

101 
u16_t
 
loˇl_p‹t
, 
ªmŸe_p‹t
;

103 #i‡
LWIP_IGMP


105 
ù_addr_t
 
mu…iˇ°_ù
;

108 #i‡
LWIP_UDPLITE


110 
u16_t
 
chksum_Àn_rx
, 
chksum_Àn_tx
;

114 
udp_ªcv_‚
 
ªcv
;

116 *
ªcv_¨g
;

119 
udp_pcb
 *
udp_pcbs
;

123 
udp_pcb
 * 
udp_√w
 ();

124 
udp_ªmove
 (
udp_pcb
 *
pcb
);

125 
îr_t
 
udp_böd
 (
udp_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

126 
u16_t
 
p‹t
);

127 
îr_t
 
udp_c⁄√˘
 (
udp_pcb
 *
pcb
, 
ù_addr_t
 *
ùaddr
,

128 
u16_t
 
p‹t
);

129 
udp_disc⁄√˘
 (
udp_pcb
 *
pcb
);

130 
udp_ªcv
 (
udp_pcb
 *
pcb
, 
udp_ªcv_‚
 
ªcv
,

131 *
ªcv_¨g
);

132 
îr_t
 
udp_£ndto_if
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

133 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

134 
√tif
 *netif);

135 
îr_t
 
udp_£ndto
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

136 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
);

137 
îr_t
 
udp_£nd
 (
udp_pcb
 *
pcb
, 
pbuf
 *
p
);

139 #i‡
LWIP_CHECKSUM_ON_COPY


140 
îr_t
 
udp_£ndto_if_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

141 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

142 
√tif
 *√tif, 
u8_t
 
have_chksum
,

143 
u16_t
 
chksum
);

144 
îr_t
 
udp_£ndto_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

145 
ù_addr_t
 *
d°_ù
, 
u16_t
 
d°_p‹t
,

146 
u8_t
 
have_chksum
, 
u16_t
 
chksum
);

147 
îr_t
 
udp_£nd_chksum
(
udp_pcb
 *
pcb
, 
pbuf
 *
p
,

148 
u8_t
 
have_chksum
, 
u16_t
 
chksum
);

151 
	#udp_Êags
(
pcb
Ë(’cb)->
Êags
)

	)

152 
	#udp_£tÊags
(
pcb
, 
f
Ë(’cb)->
Êags
 = (f))

	)

155 
udp_öput
 (
pbuf
 *
p
, 
√tif
 *
öp
);

157 
udp_öô
 ();

159 #i‡
UDP_DEBUG


160 
udp_debug_¥öt
(
udp_hdr
 *
udphdr
);

162 
	#udp_debug_¥öt
(
udphdr
)

	)

165 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/netif/etharp.h

35 #i‚de‡
__NETIF_ETHARP_H__


36 
	#__NETIF_ETHARP_H__


	)

38 
	~"lwù/›t.h
"

40 #i‡
LWIP_ARP
 || 
LWIP_ETHERNET


42 
	~"lwù/pbuf.h
"

43 
	~"lwù/ù_addr.h
"

44 
	~"lwù/√tif.h
"

45 
	~"lwù/ù.h
"

47 #ifde‡
__˝lu•lus


51 #i‚de‡
ETHARP_HWADDR_LEN


52 
	#ETHARP_HWADDR_LEN
 6

	)

55 #ifde‡
PACK_STRUCT_USE_INCLUDES


56 
	~"¨ch/bp°ru˘.h
"

58 
PACK_STRUCT_BEGIN


59 
	sëh_addr
 {

60 
PACK_STRUCT_FIELD
(
u8_t
 
addr
[
ETHARP_HWADDR_LEN
]);

61 } 
PACK_STRUCT_STRUCT
;

62 
PACK_STRUCT_END


63 #ifde‡
PACK_STRUCT_USE_INCLUDES


64 
	~"¨ch/ï°ru˘.h
"

67 #ifde‡
PACK_STRUCT_USE_INCLUDES


68 
	~"¨ch/bp°ru˘.h
"

70 
PACK_STRUCT_BEGIN


72 
	sëh_hdr
 {

73 #i‡
ETH_PAD_SIZE


74 
PACK_STRUCT_FIELD
(
u8_t
 
∑ddög
[
ETH_PAD_SIZE
]);

76 
PACK_STRUCT_FIELD
(
ëh_addr
 
de°
);

77 
PACK_STRUCT_FIELD
(
ëh_addr
 
§c
);

78 
PACK_STRUCT_FIELD
(
u16_t
 
ty≥
);

79 } 
PACK_STRUCT_STRUCT
;

80 
PACK_STRUCT_END


81 #ifde‡
PACK_STRUCT_USE_INCLUDES


82 
	~"¨ch/ï°ru˘.h
"

85 
	#SIZEOF_ETH_HDR
 (14 + 
ETH_PAD_SIZE
)

	)

87 #i‡
ETHARP_SUPPORT_VLAN


89 #ifde‡
PACK_STRUCT_USE_INCLUDES


90 
	~"¨ch/bp°ru˘.h
"

92 
PACK_STRUCT_BEGIN


96 
	sëh_vœn_hdr
 {

97 
PACK_STRUCT_FIELD
(
u16_t
 
¥io_vid
);

98 
PACK_STRUCT_FIELD
(
u16_t
 
çid
);

99 } 
PACK_STRUCT_STRUCT
;

100 
PACK_STRUCT_END


101 #ifde‡
PACK_STRUCT_USE_INCLUDES


102 
	~"¨ch/ï°ru˘.h
"

105 
	#SIZEOF_VLAN_HDR
 4

	)

106 
	#VLAN_ID
(
vœn_hdr
Ë(
	`ht⁄s
((vœn_hdr)->
¥io_vid
Ë& 0xFFF)

	)

110 #ifde‡
PACK_STRUCT_USE_INCLUDES


111 
	~"¨ch/bp°ru˘.h
"

113 
PACK_STRUCT_BEGIN


115 
	sëh¨p_hdr
 {

116 
PACK_STRUCT_FIELD
(
u16_t
 
hwty≥
);

117 
PACK_STRUCT_FIELD
(
u16_t
 
¥Ÿo
);

118 
PACK_STRUCT_FIELD
(
u8_t
 
hwÀn
);

119 
PACK_STRUCT_FIELD
(
u8_t
 
¥Ÿﬁí
);

120 
PACK_STRUCT_FIELD
(
u16_t
 
›code
);

121 
PACK_STRUCT_FIELD
(
ëh_addr
 
shwaddr
);

122 
PACK_STRUCT_FIELD
(
ù_addr2
 
sùaddr
);

123 
PACK_STRUCT_FIELD
(
ëh_addr
 
dhwaddr
);

124 
PACK_STRUCT_FIELD
(
ù_addr2
 
dùaddr
);

125 } 
PACK_STRUCT_STRUCT
;

126 
PACK_STRUCT_END


127 #ifde‡
PACK_STRUCT_USE_INCLUDES


128 
	~"¨ch/ï°ru˘.h
"

131 
	#SIZEOF_ETHARP_HDR
 28

	)

132 
	#SIZEOF_ETHARP_PACKET
 (
SIZEOF_ETH_HDR
 + 
SIZEOF_ETHARP_HDR
)

	)

135 
	#ARP_TMR_INTERVAL
 5000

	)

137 
	#ETHTYPE_ARP
 0x0806U

	)

138 
	#ETHTYPE_IP
 0x0800U

	)

139 
	#ETHTYPE_VLAN
 0x8100U

	)

140 
	#ETHTYPE_PPPOEDISC
 0x8863U

	)

141 
	#ETHTYPE_PPPOE
 0x8864U

	)

145 #i‚de‡
ETHADDR32_COPY


146 
	#ETHADDR32_COPY
(
§c
, 
d°
Ë
	`SMEMCPY
(§c, d°, 
ETHARP_HWADDR_LEN
)

	)

151 #i‚de‡
ETHADDR16_COPY


152 
	#ETHADDR16_COPY
(
§c
, 
d°
Ë
	`SMEMCPY
(§c, d°, 
ETHARP_HWADDR_LEN
)

	)

155 #i‡
LWIP_ARP


158 
	#ARP_REQUEST
 1

	)

159 
	#ARP_REPLY
 2

	)

167 #i‚de‡
LWIP_ARP_FILTER_NETIF


168 
	#LWIP_ARP_FILTER_NETIF
 0

	)

171 #i‡
ARP_QUEUEING


175 
	sëh¨p_q_íåy
 {

176 
ëh¨p_q_íåy
 *
√xt
;

177 
pbuf
 *
p
;

181 
	#ëh¨p_öô
(Ë

	)

182 
ëh¨p_tmr
();

183 
s8_t
 
ëh¨p_föd_addr
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
,

184 
ëh_addr
 **
ëh_ªt
, 
ù_addr_t
 **
ù_ªt
);

185 
îr_t
 
ëh¨p_ouçut
(
√tif
 *√tif, 
pbuf
 *
q
, 
ù_addr_t
 *
ùaddr
);

186 
îr_t
 
ëh¨p_quîy
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
, 
pbuf
 *
q
);

187 
îr_t
 
ëh¨p_ªque°
(
√tif
 *√tif, 
ù_addr_t
 *
ùaddr
);

192 
	#ëh¨p_gøtuôous
(
√tif
Ë
	`ëh¨p_ªque°
(“ëif), &“ëif)->
ù_addr
)

	)

193 
ëh¨p_˛ónup_√tif
(
√tif
 *netif);

195 #i‡
ETHARP_SUPPORT_STATIC_ENTRIES


196 
îr_t
 
ëh¨p_add_°©ic_íåy
(
ù_addr_t
 *
ùaddr
, 
ëh_addr
 *
ëhaddr
);

197 
îr_t
 
ëh¨p_ªmove_°©ic_íåy
(
ù_addr_t
 *
ùaddr
);

200 #i‡
LWIP_AUTOIP


201 
îr_t
 
ëh¨p_øw
(
√tif
 *√tif, c⁄° 
ëh_addr
 *
ëh§c_addr
,

202 c⁄° 
ëh_addr
 *
ëhd°_addr
,

203 c⁄° 
ëh_addr
 *
hw§c_addr
, c⁄° 
ù_addr_t
 *
ù§c_addr
,

204 c⁄° 
ëh_addr
 *
hwd°_addr
, c⁄° 
ù_addr_t
 *
ùd°_addr
,

205 c⁄° 
u16_t
 
›code
);

210 
îr_t
 
ëhî√t_öput
(
pbuf
 *
p
, 
√tif
 *netif);

212 
	#ëh_addr_cmp
(
addr1
, 
addr2
Ë(
	`memcmp
(◊ddr1)->
addr
, (addr2)->addr, 
ETHARP_HWADDR_LEN
Ë=0)

	)

214 c⁄° 
ëh_addr
 
ëhbrﬂdˇ°
, 
ëhzîo
;

218 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/netif/ppp_oe.h

70 #i‚de‡
PPP_OE_H


71 
	#PPP_OE_H


	)

73 
	~"lwù/›t.h
"

75 #i‡
PPPOE_SUPPORT
 > 0

77 
	~"√tif/ëh¨p.h
"

79 #ifde‡
PACK_STRUCT_USE_INCLUDES


80 
	~"¨ch/bp°ru˘.h
"

82 
PACK_STRUCT_BEGIN


83 
	sµp€hdr
 {

84 
PACK_STRUCT_FIELD
(
u8_t
 
vîty≥
);

85 
PACK_STRUCT_FIELD
(
u8_t
 
code
);

86 
PACK_STRUCT_FIELD
(
u16_t
 
£ssi⁄
);

87 
PACK_STRUCT_FIELD
(
u16_t
 
∂í
);

88 } 
	gPACK_STRUCT_STRUCT
;

89 
	gPACK_STRUCT_END


90 #ifde‡
PACK_STRUCT_USE_INCLUDES


91 
	~"¨ch/ï°ru˘.h
"

94 #ifde‡
PACK_STRUCT_USE_INCLUDES


95 
	~"¨ch/bp°ru˘.h
"

97 
PACK_STRUCT_BEGIN


98 
	sµp€èg
 {

99 
PACK_STRUCT_FIELD
(
u16_t
 
èg
);

100 
PACK_STRUCT_FIELD
(
u16_t
 
Àn
);

101 } 
	gPACK_STRUCT_STRUCT
;

102 
	gPACK_STRUCT_END


103 #ifde‡
PACK_STRUCT_USE_INCLUDES


104 
	~"¨ch/ï°ru˘.h
"

108 
	#PPPOE_STATE_INITIAL
 0

	)

109 
	#PPPOE_STATE_PADI_SENT
 1

	)

110 
	#PPPOE_STATE_PADR_SENT
 2

	)

111 
	#PPPOE_STATE_SESSION
 3

	)

112 
	#PPPOE_STATE_CLOSING
 4

	)

114 
	#PPPOE_STATE_PADO_SENT
 1

	)

116 
	#PPPOE_HEADERLEN
 (
µp€hdr
)

	)

117 
	#PPPOE_VERTYPE
 0x11

	)

119 
	#PPPOE_TAG_EOL
 0x0000

	)

120 
	#PPPOE_TAG_SNAME
 0x0101

	)

121 
	#PPPOE_TAG_ACNAME
 0x0102

	)

122 
	#PPPOE_TAG_HUNIQUE
 0x0103

	)

123 
	#PPPOE_TAG_ACCOOKIE
 0x0104

	)

124 
	#PPPOE_TAG_VENDOR
 0x0105

	)

125 
	#PPPOE_TAG_RELAYSID
 0x0110

	)

126 
	#PPPOE_TAG_SNAME_ERR
 0x0201

	)

127 
	#PPPOE_TAG_ACSYS_ERR
 0x0202

	)

128 
	#PPPOE_TAG_GENERIC_ERR
 0x0203

	)

130 
	#PPPOE_CODE_PADI
 0x09

	)

131 
	#PPPOE_CODE_PADO
 0x07

	)

132 
	#PPPOE_CODE_PADR
 0x19

	)

133 
	#PPPOE_CODE_PADS
 0x65

	)

134 
	#PPPOE_CODE_PADT
 0xA7

	)

136 #i‚de‡
ETHERMTU


137 
	#ETHERMTU
 1500

	)

141 
	#PPPOE_MAXMTU
 (
ETHERMTU
-
PPPOE_HEADERLEN
-2)

	)

143 #i‚de‡
PPPOE_MAX_AC_COOKIE_LEN


144 
	#PPPOE_MAX_AC_COOKIE_LEN
 64

	)

147 
	sµp€_so·c
 {

148 
µp€_so·c
 *
	m√xt
;

149 
√tif
 *
	msc_ëhif
;

150 
	msc_pd
;

151 (*
	msc_lökSètusCB
)(
	mpd
, 
	mup
);

153 
	msc_°©e
;

154 
ëh_addr
 
	msc_de°
;

155 
u16_t
 
	msc_£ssi⁄
;

157 #ifde‡
PPPOE_TODO


158 *
	msc_£rvi˚_«me
;

159 *
	msc_c⁄˚¡øt‹_«me
;

161 
u8_t
 
	msc_ac_cookõ
[
PPPOE_MAX_AC_COOKIE_LEN
];

162 
size_t
 
	msc_ac_cookõ_Àn
;

163 #ifde‡
PPPOE_SERVER


164 
u8_t
 *
	msc_hunique
;

165 
size_t
 
	msc_hunique_Àn
;

167 
	msc_∑di_ªåõd
;

168 
	msc_∑dr_ªåõd
;

172 
	#µp€_öô
(Ë

	)

174 
îr_t
 
µp€_¸óã
(
√tif
 *
ëhif
, 
pd
, (*
lökSètusCB
)(pd, 
up
), 
µp€_so·c
 **
s˝å
);

175 
îr_t
 
	`µp€_de°roy
(
√tif
 *
iÂ
);

177 
	`µp€_c⁄√˘
(
µp€_so·c
 *
sc
);

178 
	`µp€_disc⁄√˘
(
µp€_so·c
 *
sc
);

180 
	`µp€_disc_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

181 
	`µp€_d©a_öput
(
√tif
 *√tif, 
pbuf
 *
p
);

183 
îr_t
 
	`µp€_xmô
(
µp€_so·c
 *
sc
, 
pbuf
 *
pb
);

186 
	#PPPOE_HDRLEN
 ((
ëh_hdr
Ë+ 
PPPOE_HEADERLEN
)

	)

	@src/extern/lwip/lwip/src/include/netif/slipif.h

34 #i‚de‡
__NETIF_SLIPIF_H__


35 
	#__NETIF_SLIPIF_H__


	)

37 
	~"lwù/›t.h
"

38 
	~"lwù/√tif.h
"

43 #i‚de‡
SLIP_USE_RX_THREAD


44 
	#SLIP_USE_RX_THREAD
 !
NO_SYS


	)

52 #i‚de‡
SLIP_RX_FROM_ISR


53 
	#SLIP_RX_FROM_ISR
 0

	)

60 #i‚de‡
SLIP_RX_QUEUE


61 
	#SLIP_RX_QUEUE
 
SLIP_RX_FROM_ISR


	)

64 #ifde‡
__˝lu•lus


68 
îr_t
 
¶ùif_öô
(
√tif
 *Çetif);

69 
¶ùif_pﬁl
(
√tif
 *netif);

70 #i‡
SLIP_RX_FROM_ISR


71 
¶ùif_¥o˚ss_rxqueue
(
√tif
 *netif);

72 
¶ùif_ª˚ived_byã
(
√tif
 *√tif, 
u8_t
 
d©a
);

73 
¶ùif_ª˚ived_byãs
(
√tif
 *√tif, 
u8_t
 *
d©a
, u8_à
Àn
);

76 #ifde‡
__˝lu•lus


	@src/extern/lwip/lwip/src/include/posix/netdb.h

33 
	~"lwù/√tdb.h
"

	@src/extern/lwip/lwip/src/include/posix/sys/socket.h

33 
	~"lwù/sockës.h
"

	@src/extern/lwip/lwip/src/netif/ppp/auth.h

53 #i‚de‡
AUTH_H


54 
	#AUTH_H


	)

61 
lök_ªquúed
 ();

64 
lök_ãrmö©ed
 ();

67 
lök_down
 ();

70 
lök_e°ablished
 ();

73 
≈_up
 (, 
u16_t
);

76 
≈_down
 (, 
u16_t
);

79 
≈_föished
 (, 
u16_t
);

82 
auth_≥î_Áû
 (, 
u16_t
);

85 
auth_≥î_suc˚ss
 (, 
u16_t
, *, );

88 
auth_wôh≥î_Áû
 (, 
u16_t
);

91 
auth_wôh≥î_suc˚ss
 (, 
u16_t
);

94 
auth_check_›ti⁄s
 ();

97 
auth_ª£t
 ();

100 
u_ch¨
 
check_∑sswd
 (, *, , *, , **, *);

103 
gë_£¸ë
 (, *, *, *, *, );

106 
auth_ù_addr
 (, 
u32_t
);

109 
bad_ù_adrs
 (
u32_t
);

	@src/extern/lwip/lwip/src/netif/ppp/chap.h

68 #i‚de‡
CHAP_H


69 
	#CHAP_H


	)

72 
	#CHAP_HEADERLEN
 4

	)

78 
	#CHAP_DIGEST_MD5
 5

	)

79 
	#MD5_SIGNATURE_SIZE
 16

	)

80 
	#CHAP_MICROSOFT
 0x80

	)

81 
	#MS_CHAP_RESPONSE_LEN
 49

	)

83 
	#CHAP_CHALLENGE
 1

	)

84 
	#CHAP_RESPONSE
 2

	)

85 
	#CHAP_SUCCESS
 3

	)

86 
	#CHAP_FAILURE
 4

	)

91 
	#MIN_CHALLENGE_LENGTH
 32

	)

92 
	#MAX_CHALLENGE_LENGTH
 64

	)

93 
	#MAX_RESPONSE_LENGTH
 64

	)

99 
	sch≠_°©e
 {

100 
	munô
;

101 
	m˛õ¡°©e
;

102 
	m£rvî°©e
;

103 
u_ch¨
 
	mchÆÀnge
[
MAX_CHALLENGE_LENGTH
];

104 
u_ch¨
 
	mchÆ_Àn
;

105 
u_ch¨
 
	mchÆ_id
;

106 
u_ch¨
 
	mchÆ_ty≥
;

107 
u_ch¨
 
	mid
;

108 *
	mchÆ_«me
;

109 
	mchÆ_öãrvÆ
;

110 
	mtimeouâime
;

111 
	mmax_å™smôs
;

112 
	mchÆ_å™smôs
;

113 
	mª•_å™smôs
;

114 
u_ch¨
 
	mª•⁄£
[
MAX_RESPONSE_LENGTH
];

115 
u_ch¨
 
	mª•_Àngth
;

116 
u_ch¨
 
	mª•_id
;

117 
u_ch¨
 
	mª•_ty≥
;

118 *
	mª•_«me
;

119 } 
	tch≠_°©e
;

125 
	#CHAPCS_INITIAL
 0

	)

126 
	#CHAPCS_CLOSED
 1

	)

127 
	#CHAPCS_PENDING
 2

	)

128 
	#CHAPCS_LISTEN
 3

	)

129 
	#CHAPCS_RESPONSE
 4

	)

130 
	#CHAPCS_OPEN
 5

	)

135 
	#CHAPSS_INITIAL
 0

	)

136 
	#CHAPSS_CLOSED
 1

	)

137 
	#CHAPSS_PENDING
 2

	)

138 
	#CHAPSS_INITIAL_CHAL
 3

	)

139 
	#CHAPSS_OPEN
 4

	)

140 
	#CHAPSS_RECHALLENGE
 5

	)

141 
	#CHAPSS_BADAUTH
 6

	)

143 
ch≠_°©e
 
ch≠
[];

145 
Ch≠AuthWôhPìr
 (, *, 
u_ch¨
);

146 
Ch≠AuthPìr
 (, *, 
u_ch¨
);

148 
¥Ÿít
 
ch≠_¥Ÿít
;

	@src/extern/lwip/lwip/src/netif/ppp/chpms.h

57 #i‚de‡
CHPMS_H


58 
	#CHPMS_H


	)

60 
	#MAX_NT_PASSWORD
 256

	)

62 
Ch≠MS
 (
ch≠_°©e
 *, *, , *, );

	@src/extern/lwip/lwip/src/netif/ppp/fsm.h

54 #i‚de‡
FSM_H


55 
	#FSM_H


	)

60 
	#HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

66 
	#CONFREQ
 1

	)

67 
	#CONFACK
 2

	)

68 
	#CONFNAK
 3

	)

69 
	#CONFREJ
 4

	)

70 
	#TERMREQ
 5

	)

71 
	#TERMACK
 6

	)

72 
	#CODEREJ
 7

	)

78 
	sfsm
 {

79 
	munô
;

80 
u_sh‹t
 
	m¥Ÿocﬁ
;

81 
	m°©e
;

82 
	mÊags
;

83 
u_ch¨
 
	mid
;

84 
u_ch¨
 
	mªqid
;

85 
u_ch¨
 
	m£í_ack
;

86 
	mtimeouâime
;

87 
	mmaxc⁄‰eqå™smôs
;

88 
	mªå™smôs
;

89 
	mmaxãrmå™smôs
;

90 
	m«klo›s
;

91 
	mmax«klo›s
;

92 
fsm_ˇŒbacks
* 
	mˇŒbacks
;

93 * 
	mãrm_ªas⁄
;

94 
	mãrm_ªas⁄_Àn
;

95 } 
	tfsm
;

98 
	sfsm_ˇŒbacks
 {

99 (*
	mª£tci
)(
	mfsm
*);

100 (*
	mcûí
)(
	mfsm
*);

101 (*
	maddci
)(
	mfsm
*, 
	mu_ch¨
*, *);

102 (*
	mackci
)(
	mfsm
*, 
	mu_ch¨
*, );

103 (*
	m«kci
)(
	mfsm
*, 
	mu_ch¨
*, );

104 (*
	mªjci
)(
	mfsm
*, 
	mu_ch¨
*, );

105 (*
	mªqci
)(
	mfsm
*, 
	mu_ch¨
*, *, );

106 (*
	mup
)(
	mfsm
*);

107 (*
	mdown
)(
	mfsm
*);

108 (*
	m°¨tög
)(
	mfsm
*);

109 (*
	mföished
)(
	mfsm
*);

110 (*
	m¥Ÿªje˘
)();

111 (*
	mªå™smô
)(
	mfsm
*);

112 (*
	mextcode
)(
	mfsm
*, , 
	mu_ch¨
, u_char*, );

113 *
	m¥Ÿo_«me
;

114 } 
	tfsm_ˇŒbacks
;

120 
	#LS_INITIAL
 0

	)

121 
	#LS_STARTING
 1

	)

122 
	#LS_CLOSED
 2

	)

123 
	#LS_STOPPED
 3

	)

124 
	#LS_CLOSING
 4

	)

125 
	#LS_STOPPING
 5

	)

126 
	#LS_REQSENT
 6

	)

127 
	#LS_ACKRCVD
 7

	)

128 
	#LS_ACKSENT
 8

	)

129 
	#LS_OPENED
 9

	)

134 
	#OPT_PASSIVE
 1

	)

135 
	#OPT_RESTART
 2

	)

136 
	#OPT_SILENT
 4

	)

142 
fsm_öô
 (
fsm
*);

143 
fsm_lowîup
 (
fsm
*);

144 
fsm_lowîdown
 (
fsm
*);

145 
fsm_›í
 (
fsm
*);

146 
fsm_˛o£
 (
fsm
*, *);

147 
fsm_öput
 (
fsm
*, 
u_ch¨
*, );

148 
fsm_¥Ÿªje˘
 (
fsm
*);

149 
fsm_sd©a
 (
fsm
*, 
u_ch¨
, u_char, u_char*, );

155 
≥î_mru
[];

	@src/extern/lwip/lwip/src/netif/ppp/ipcp.h

54 #i‚de‡
IPCP_H


55 
	#IPCP_H


	)

60 
	#CI_ADDRS
 1

	)

61 
	#CI_COMPRESSTYPE
 2

	)

62 
	#CI_ADDR
 3

	)

64 
	#CI_MS_DNS1
 129

	)

65 
	#CI_MS_WINS1
 128

	)

66 
	#CI_MS_DNS2
 131

	)

67 
	#CI_MS_WINS2
 130

	)

69 
	#IPCP_VJMODE_OLD
 1

	)

70 
	#IPCP_VJMODE_RFC1172
 2

	)

71 
	#IPCP_VJMODE_RFC1332
 3

	)

74 
	#IPCP_VJ_COMP
 0x002d

	)

75 
	#IPCP_VJ_COMP_OLD
 0x0037

	)

78 
	sù˝_›ti⁄s
 {

79 
u_öt
 
	m√g_addr
 : 1;

80 
u_öt
 
	mﬁd_addrs
 : 1;

81 
u_öt
 
	mªq_addr
 : 1;

82 
u_öt
 
	mdeÁu…_rouã
 : 1;

83 
u_öt
 
	m¥oxy_¨p
 : 1;

84 
u_öt
 
	m√g_vj
 : 1;

85 
u_öt
 
	mﬁd_vj
 : 1;

86 
u_öt
 
	mac˚±_loˇl
 : 1;

87 
u_öt
 
	mac˚±_ªmŸe
 : 1;

88 
u_öt
 
	mªq_dns1
 : 1;

89 
u_öt
 
	mªq_dns2
 : 1;

90 
u_sh‹t
 
	mvj_¥Ÿocﬁ
;

91 
u_ch¨
 
	mmax¶Ÿödex
;

92 
u_ch¨
 
	mcÊag
;

93 
u32_t
 
	mouøddr
, 
	mhißddr
;

94 
u32_t
 
	mdnßddr
[2];

95 
u32_t
 
	mwößddr
[2];

96 } 
	tù˝_›ti⁄s
;

98 
fsm
 
ù˝_fsm
[];

99 
ù˝_›ti⁄s
 
ù˝_w™t›ti⁄s
[];

100 
ù˝_›ti⁄s
 
ù˝_gŸ›ti⁄s
[];

101 
ù˝_›ti⁄s
 
ù˝_Ælow›ti⁄s
[];

102 
ù˝_›ti⁄s
 
ù˝_his›ti⁄s
[];

104 
¥Ÿít
 
ù˝_¥Ÿít
;

	@src/extern/lwip/lwip/src/netif/ppp/lcp.h

54 #i‚de‡
LCP_H


55 
	#LCP_H


	)

59 
	#CI_MRU
 1

	)

60 
	#CI_ASYNCMAP
 2

	)

61 
	#CI_AUTHTYPE
 3

	)

62 
	#CI_QUALITY
 4

	)

63 
	#CI_MAGICNUMBER
 5

	)

64 
	#CI_PCOMPRESSION
 7

	)

65 
	#CI_ACCOMPRESSION
 8

	)

66 
	#CI_CALLBACK
 13

	)

67 
	#CI_MRRU
 17

	)

68 
	#CI_SSNHF
 18

	)

69 
	#CI_EPDISC
 19

	)

74 
	#PROTREJ
 8

	)

75 
	#ECHOREQ
 9

	)

76 
	#ECHOREP
 10

	)

77 
	#DISCREQ
 11

	)

78 
	#CBCP_OPT
 6

	)

83 
	sl˝_›ti⁄s
 {

84 
u_öt
 
	m∑ssive
 : 1;

85 
u_öt
 
	msûít
 : 1;

86 
u_öt
 
	mª°¨t
 : 1;

87 
u_öt
 
	m√g_mru
 : 1;

88 
u_öt
 
	m√g_asyncm≠
 : 1;

89 
u_öt
 
	m√g_u∑p
 : 1;

90 
u_öt
 
	m√g_ch≠
 : 1;

91 
u_öt
 
	m√g_magi˙umbî
 : 1;

92 
u_öt
 
	m√g_pcom¥essi⁄
 : 1;

93 
u_öt
 
	m√g_accom¥essi⁄
 : 1;

94 
u_öt
 
	m√g_lqr
 : 1;

95 
u_öt
 
	m√g_cb˝
 : 1;

96 #ifde‡
PPP_MULTILINK


97 
u_öt
 
	m√g_mºu
 : 1;

98 
u_öt
 
	m√g_s¢hf
 : 1;

99 
u_öt
 
	m√g_ídpoöt
 : 1;

101 
u_sh‹t
 
	mmru
;

102 #ifde‡
PPP_MULTILINK


103 
u_sh‹t
 
	mmºu
;

105 
u_ch¨
 
	mch≠_mdty≥
;

106 
u32_t
 
	masyncm≠
;

107 
u32_t
 
	mmagi˙umbî
;

108 
	mnumlo›s
;

109 
u32_t
 
	mlqr_≥riod
;

110 #ifde‡
PPP_MULTILINK


111 
ïdisc
 
	mídpoöt
;

113 } 
	tl˝_›ti⁄s
;

119 
	mPHASE_DEAD
 = 0,

120 
	mPHASE_INITIALIZE
,

121 
	mPHASE_ESTABLISH
,

122 
	mPHASE_AUTHENTICATE
,

123 
	mPHASE_CALLBACK
,

124 
	mPHASE_NETWORK
,

125 
	mPHASE_TERMINATE


126 } 
	tLökPha£
;

130 
LökPha£
 
l˝_pha£
[
NUM_PPP
];

131 
l˝_›ti⁄s
 
l˝_w™t›ti⁄s
[];

132 
l˝_›ti⁄s
 
l˝_gŸ›ti⁄s
[];

133 
l˝_›ti⁄s
 
l˝_Ælow›ti⁄s
[];

134 
l˝_›ti⁄s
 
l˝_his›ti⁄s
[];

135 
ext_accm
 
xmô_accm
[];

138 
l˝_öô
 ();

139 
l˝_›í
 ();

140 
l˝_˛o£
 (, *);

141 
l˝_lowîup
 ();

142 
l˝_lowîdown
();

143 
l˝_•rŸªj
 (, 
u_ch¨
 *, );

145 
¥Ÿít
 
l˝_¥Ÿít
;

149 
	#DEFLOOPBACKFAIL
 10

	)

	@src/extern/lwip/lwip/src/netif/ppp/magic.h

54 #i‚de‡
MAGIC_H


55 
	#MAGIC_H


	)

58 
magicInô
();

61 
u32_t
 
magic
();

	@src/extern/lwip/lwip/src/netif/ppp/md5.h

40 #i‚de‡
MD5_H


41 
	#MD5_H


	)

45 
u32_t
 
	mi
[2];

46 
u32_t
 
	mbuf
[4];

47 
	mö
[64];

48 
	mdige°
[16];

49 } 
	tMD5_CTX
;

51 
MD5Inô
 ( 
MD5_CTX
 *
mdC⁄ãxt
);

52 
MD5Upd©e
–
MD5_CTX
 *
mdC⁄ãxt
, *
öBuf
, 
öLí
);

53 
MD5FöÆ
 ( 
hash
[], 
MD5_CTX
 *
mdC⁄ãxt
);

	@src/extern/lwip/lwip/src/netif/ppp/pap.h

52 #i‚de‡
PAP_H


53 
	#PAP_H


	)

55 #i‡
PAP_SUPPORT


60 
	#UPAP_HEADERLEN
 ( (
u_ch¨
Ë+  (u_ch¨Ë+  (
u_sh‹t
))

	)

66 
	#UPAP_AUTHREQ
 1

	)

67 
	#UPAP_AUTHACK
 2

	)

68 
	#UPAP_AUTHNAK
 3

	)

73 
	su∑p_°©e
 {

74 
	mus_unô
;

75 c⁄° *
	mus_u£r
;

76 
	mus_u£æí
;

77 c⁄° *
	mus_∑sswd
;

78 
	mus_∑sswdÀn
;

79 
	mus_˛õ¡°©e
;

80 
	mus_£rvî°©e
;

81 
u_ch¨
 
	mus_id
;

82 
	mus_timeouâime
;

83 
	mus_å™smôs
;

84 
	mus_maxå™smôs
;

85 
	mus_ªqtimeout
;

86 } 
	tu∑p_°©e
;

91 
	#UPAPCS_INITIAL
 0

	)

92 
	#UPAPCS_CLOSED
 1

	)

93 
	#UPAPCS_PENDING
 2

	)

94 
	#UPAPCS_AUTHREQ
 3

	)

95 
	#UPAPCS_OPEN
 4

	)

96 
	#UPAPCS_BADAUTH
 5

	)

101 
	#UPAPSS_INITIAL
 0

	)

102 
	#UPAPSS_CLOSED
 1

	)

103 
	#UPAPSS_PENDING
 2

	)

104 
	#UPAPSS_LISTEN
 3

	)

105 
	#UPAPSS_OPEN
 4

	)

106 
	#UPAPSS_BADAUTH
 5

	)

109 
u∑p_°©e
 
u∑p
[];

111 
u∑p_authwôh≥î
 (, *, *);

112 
u∑p_auth≥î
 ();

114 
¥Ÿít
 
∑p_¥Ÿít
;

	@src/extern/lwip/lwip/src/netif/ppp/ppp.h

34 #i‚de‡
PPP_H


35 
	#PPP_H


	)

37 
	~"lwù/›t.h
"

39 #i‡
PPP_SUPPORT


41 
	~"lwù/def.h
"

42 
	~"lwù/sio.h
"

43 
	~"lwù/°©s.h
"

44 
	~"lwù/mem.h
"

45 
	~"lwù/√tif.h
"

46 
	~"lwù/sys.h
"

47 
	~"lwù/timîs.h
"

50 #i‚de‡
__u_ch¨_deföed


53 
	tu_l⁄g
;

54 
	tu_öt
;

55 
	tu_sh‹t
;

56 
	tu_ch¨
;

66 
	#PPPERR_NONE
 0

	)

67 
	#PPPERR_PARAM
 -1

	)

68 
	#PPPERR_OPEN
 -2

	)

69 
	#PPPERR_DEVICE
 -3

	)

70 
	#PPPERR_ALLOC
 -4

	)

71 
	#PPPERR_USER
 -5

	)

72 
	#PPPERR_CONNECT
 -6

	)

73 
	#PPPERR_AUTHFAIL
 -7

	)

74 
	#PPPERR_PROTOCOL
 -8

	)

83 
	#PPPCTLG_UPSTATUS
 100

	)

84 
	#PPPCTLS_ERRCODE
 101

	)

85 
	#PPPCTLG_ERRCODE
 102

	)

86 
	#PPPCTLG_FD
 103

	)

92 
	sµp_addrs
 {

93 
ù_addr_t
 
	mour_ùaddr
, 
	mhis_ùaddr
, 
	m√tmask
, 
	mdns1
, 
	mdns2
;

102 
µpInô
();

123 
	eµpAuthTy≥
 {

124 
	mPPPAUTHTYPE_NONE
,

125 
	mPPPAUTHTYPE_ANY
,

126 
	mPPPAUTHTYPE_PAP
,

127 
	mPPPAUTHTYPE_CHAP


130 
µpSëAuth
(
µpAuthTy≥
 
authTy≥
, c⁄° *
u£r
, c⁄° *
∑sswd
);

133 (*
	tµpLökSètusCB_‚
)(*
	t˘x
, 
	tîrCode
, *
	t¨g
);

135 #i‡
PPPOS_SUPPORT


143 
	`µpOvîSîülO≥n
(
sio_fd_t
 
fd
, 
µpLökSètusCB_‚
 
lökSètusCB
, *
lökSètusCtx
);

146 #i‡
PPPOE_SUPPORT


150 
	`µpOvîEthî√tO≥n
(
√tif
 *
ëhif
, c⁄° *
£rvi˚_«me
, c⁄° *
c⁄˚¡øt‹_«me
,

151 
µpLökSètusCB_‚
 
lökSètusCB
, *
lökSètusCtx
);

155 
	#µpO≥n
(
fd
,
cb
,
ls
Ë
	`µpOvîSîülO≥n
(fd,cb,ls)

	)

162 
	`µpClo£
(
pd
);

167 
	`µpSigHUP
(
pd
);

173 
	`µpIOCé
(
pd
, 
cmd
, *
¨g
);

178 
u_sh‹t
 
	`µpMTU
(
pd
);

180 #i‡
PPPOS_SUPPORT
 && !
PPP_INPROC_OWNTHREAD


186 
	`µpos_öput
(
pd
, 
u_ch¨
* 
d©a
, 
Àn
);

190 #i‡
LWIP_NETIF_STATUS_CALLBACK


192 
	`µp_£t_√tif_°©usˇŒback
(
pd
, 
√tif_°©us_ˇŒback_‚
 
°©us_ˇŒback
);

194 #i‡
LWIP_NETIF_LINK_CALLBACK


196 
	`µp_£t_√tif_lökˇŒback
(
pd
, 
√tif_°©us_ˇŒback_‚
 
lök_ˇŒback
);

	@src/extern/lwip/lwip/src/netif/ppp/ppp_impl.h

34 #i‚de‡
PPP_IMPL_H


35 
	#PPP_IMPL_H


	)

37 
	~"lwù/›t.h
"

39 #i‡
PPP_SUPPORT


41 
	~"µp.h
"

42 
	~"lwù/def.h
"

43 
	~"lwù/sio.h
"

44 
	~"lwù/°©s.h
"

45 
	~"lwù/mem.h
"

46 
	~"lwù/√tif.h
"

47 
	~"lwù/sys.h
"

48 
	~"lwù/timîs.h
"

52 
	#PPP_ADDITIONAL_CALLBACKS
 0

	)

55 #i‡
CBCP_SUPPORT


58 #i‡
CCP_SUPPORT


108 
	#TIMEOUT
(
f
, 
a
, 
t
Ëdÿ{ 
	`sys_u¡imeout
((f), (a)); 
	`sys_timeout
(—)*1000, (f), (a)); } 0)

	)

109 
	#UNTIMEOUT
(
f
, 
a
Ë
	`sys_u¡imeout
((f), (a))

	)

120 
	#PPP_HDRLEN
 4

	)

121 
	#PPP_FCSLEN
 2

	)

127 
	#PPP_ALLSTATIONS
 0xf‡

	)

128 
	#PPP_UI
 0x03

	)

129 
	#PPP_FLAG
 0x7ê

	)

130 
	#PPP_ESCAPE
 0x7d

	)

131 
	#PPP_TRANS
 0x20

	)

136 
	#PPP_IP
 0x21

	)

137 
	#PPP_AT
 0x29

	)

138 
	#PPP_VJC_COMP
 0x2d

	)

139 
	#PPP_VJC_UNCOMP
 0x2‡

	)

140 
	#PPP_COMP
 0xfd

	)

141 
	#PPP_IPCP
 0x8021

	)

142 
	#PPP_ATCP
 0x8029

	)

143 
	#PPP_CCP
 0x80fd

	)

144 
	#PPP_LCP
 0xc021

	)

145 
	#PPP_PAP
 0xc023

	)

146 
	#PPP_LQR
 0xc025

	)

147 
	#PPP_CHAP
 0xc223

	)

148 
	#PPP_CBCP
 0xc029

	)

153 
	#PPP_INITFCS
 0xfff‡

	)

154 
	#PPP_GOODFCS
 0xf0b8

	)

155 
	#PPP_FCS
(
fcs
, 
c
Ë(((fcsË>> 8Ë^ 
fc°ab
[((fcsË^ (c)Ë& 0xff])

	)

160 
u_ch¨
 
	text_accm
[32];

165 
	eNPmode
 {

166 
	mNPMODE_PASS
,

167 
	mNPMODE_DROP
,

168 
	mNPMODE_ERROR
,

169 
	mNPMODE_QUEUE


178 
	#GETCHAR
(
c
, 
˝
) { \

179 (
c
Ë*(
˝
)++; \

180 }

	)

181 
	#PUTCHAR
(
c
, 
˝
) { \

182 *(
˝
)++ = (
u_ch¨
Ë(
c
); \

183 }

	)

186 
	#GETSHORT
(
s
, 
˝
) { \

187 (
s
Ë*(
˝
); (cp)++; (s) <<= 8; \

188 (
s
Ë|*(
˝
); (cp)++; \

189 }

	)

190 
	#PUTSHORT
(
s
, 
˝
) { \

191 *(
˝
)++ = (
u_ch¨
Ë((
s
) >> 8); \

192 *(
˝
)++ = (
u_ch¨
Ë(
s
 & 0xff); \

193 }

	)

195 
	#GETLONG
(
l
, 
˝
) { \

196 (
l
Ë*(
˝
); (cp)++; (l) <<= 8; \

197 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

198 (
l
Ë|*(
˝
); (cp)++; (l) <<= 8; \

199 (
l
Ë|*(
˝
); (cp)++; \

200 }

	)

201 
	#PUTLONG
(
l
, 
˝
) { \

202 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 24); \

203 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 16); \

204 *(
˝
)++ = (
u_ch¨
Ë((
l
) >> 8); \

205 *(
˝
)++ = (
u_ch¨
Ë(
l
); \

206 }

	)

209 
	#INCPTR
(
n
, 
˝
Ë((˝Ë+“))

	)

210 
	#DECPTR
(
n
, 
˝
Ë((˝Ë-“))

	)

212 
	#BCMP
(
s0
, 
s1
, 
l
Ë
	`memcmp
((
u_ch¨
 *)(s0), (u_ch¨ *)(s1), (l))

	)

213 
	#BCOPY
(
s
, 
d
, 
l
Ë
	`MEMCPY
((d), (s), (l))

	)

214 
	#BZERO
(
s
, 
n
Ë
	`mem£t
(s, 0,Ç)

	)

216 #i‡
PPP_DEBUG


217 
	#PRINTMSG
(
m
, 
l
Ë{ m[l] = '\0'; 
	`LWIP_DEBUGF
(
LOG_INFO
, ("RemŸêmesßge: %s\n", m)); }

	)

219 
	#PRINTMSG
(
m
, 
l
)

	)

225 
	#MAKEHEADER
(
p
, 
t
) { \

226 
	`PUTCHAR
(
PPP_ALLSTATIONS
, 
p
); \

227 
	`PUTCHAR
(
PPP_UI
, 
p
); \

228 
	`PUTSHORT
(
t
, 
p
); }

	)

238 
	s¥Ÿít
 {

239 
u_sh‹t
 
	m¥Ÿocﬁ
;

241 (*
	möô
Ë(
	munô
);

243 (*
	möput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

245 (*
	m¥Ÿªj
Ë(
	munô
);

247 (*
	mlowîup
Ë(
	munô
);

249 (*
	mlowîdown
Ë(
	munô
);

251 (*
	m›í
Ë(
	munô
);

253 (*
	m˛o£
Ë(
	munô
, *
	mªas⁄
);

254 #i‡
PPP_ADDITIONAL_CALLBACKS


256 (*
	m¥öçkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
,

257 (*
	m¥öãr
) (*, *, ...),

258 *
	m¨g
);

260 (*
	md©aöput
Ë(
	munô
, 
u_ch¨
 *
	mpkt
, 
	mÀn
);

262 
	míabÀd_Êag
;

263 *
	m«me
;

264 #i‡
PPP_ADDITIONAL_CALLBACKS


266 (*
	mcheck_›ti⁄s
Ë(
	mu_l⁄g
);

268 (*
	mdem™d_c⁄f
Ë(
	munô
);

270 (*
	ma˘ive_pkt
Ë(
u_ch¨
 *
	mpkt
, 
	mÀn
);

278 
	sµp_idÀ
 {

279 
u_sh‹t
 
	mxmô_idÀ
;

280 
u_sh‹t
 
	mªcv_idÀ
;

283 
	sµp_£âögs
 {

285 
u_öt
 
	mdißbÀ_deÁu…ù
 : 1;

286 
u_öt
 
	mauth_ªquúed
 : 1;

287 
u_öt
 
	mex∂icô_ªmŸe
 : 1;

288 
u_öt
 
	mªfu£_∑p
 : 1;

289 
u_öt
 
	mªfu£_ch≠
 : 1;

290 
u_öt
 
	mu£ho°«me
 : 1;

291 
u_öt
 
	mu£≥îdns
 : 1;

293 
u_sh‹t
 
	midÀ_time_limô
;

294 
	mmaxc⁄√˘
;

296 
	mu£r
 [
MAXNAMELEN
 + 1];

297 
	m∑sswd
 [
MAXSECRETLEN
 + 1];

298 
	mour_«me
 [
MAXNAMELEN
 + 1];

299 
	mªmŸe_«me
[
MAXNAMELEN
 + 1];

307 
u_ch¨
 
ouçackë_buf
[
NUM_PPP
][
PPP_MRU
+
PPP_HDRLEN
];

309 
µp_£âögs
Öpp_settings;

311 
¥Ÿít
 *
µp_¥Ÿocﬁs
[];

322 
µpWrôe
(
pd
, c⁄° 
u_ch¨
 *
s
, 
n
);

324 
µpInProcOvîEthî√t
(
pd
, 
pbuf
 *
pb
);

326 
pbuf
 *
µpSögÀBuf
(pbu‡*
p
);

328 
µpLökTîmö©ed
(
pd
);

330 
µpLökDown
(
pd
);

333 
µp_£nd_c⁄fig
 (, 
u16_t
, 
u32_t
, , );

335 
µp_£t_xaccm
 (, 
ext_accm
 *);

337 
µp_ªcv_c⁄fig
 (, , 
u32_t
, , );

339 
gë_idÀ_time
 (, 
µp_idÀ
 *);

342 
sifvjcomp
 (, , 
u8_t
, u8_t);

344 
sifup
 ();

346 
si‚pmode
 (
u
, 
¥Ÿo
, 
NPmode
 
mode
);

348 
sifdown
 ();

350 
siÁddr
 (, 
u32_t
, u32_t, u32_t, u32_t, u32_t);

352 
ciÁddr
 (, 
u32_t
, u32_t);

354 
sifdeÁu…rouã
 (, 
u32_t
, u32_t);

356 
cifdeÁu…rouã
 (, 
u32_t
, u32_t);

359 
u32_t
 
GëMask
 (u32_t);

	@src/extern/lwip/lwip/src/netif/ppp/pppdebug.h

36 #i‚de‡
PPPDEBUG_H


37 
	#PPPDEBUG_H


	)

40 
	#LOG_CRITICAL
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
)

	)

41 
	#LOG_ERR
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_SEVERE
)

	)

42 
	#LOG_NOTICE
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
)

	)

43 
	#LOG_WARNING
 (
PPP_DEBUG
 | 
LWIP_DBG_LEVEL_WARNING
)

	)

44 
	#LOG_INFO
 (
PPP_DEBUG
)

	)

45 
	#LOG_DETAIL
 (
PPP_DEBUG
)

	)

46 
	#LOG_DEBUG
 (
PPP_DEBUG
)

	)

49 
	#TRACELCP
 
PPP_DEBUG


	)

51 #i‡
PPP_DEBUG


53 
	#AUTHDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

54 
	#IPCPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

55 
	#UPAPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

56 
	#LCPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

57 
	#FSMDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

58 
	#CHAPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

59 
	#PPPDEBUG
(
a
, 
b
Ë
	`LWIP_DEBUGF
◊, b)

	)

63 
	#AUTHDEBUG
(
a
, 
b
)

	)

64 
	#IPCPDEBUG
(
a
, 
b
)

	)

65 
	#UPAPDEBUG
(
a
, 
b
)

	)

66 
	#LCPDEBUG
(
a
, 
b
)

	)

67 
	#FSMDEBUG
(
a
, 
b
)

	)

68 
	#CHAPDEBUG
(
a
, 
b
)

	)

69 
	#PPPDEBUG
(
a
, 
b
)

	)

	@src/extern/lwip/lwip/src/netif/ppp/randm.h

34 #i‚de‡
RANDM_H


35 
	#RANDM_H


	)

43 
avR™domInô
();

53 
avChu∫R™d
(*
øndD©a
, 
u32_t
 
øndLí
);

59 #i‡
MD5_SUPPORT


60 
	#avR™domize
(Ë
	`avChu∫R™d
(
NULL
, 0)

	)

62 
avR™domize
();

73 
avGíR™d
(*
buf
, 
u32_t
 
bufLí
);

78 
u32_t
 
avR™dom
();

	@src/extern/lwip/lwip/src/netif/ppp/vj.h

25 #i‚de‡
VJ_H


26 
	#VJ_H


	)

28 
	~"lwù/ù.h
"

29 
	~"lwù/t˝_im∂.h
"

31 
	#MAX_SLOTS
 16

	)

32 
	#MAX_HDR
 128

	)

78 
	#TYPE_IP
 0x40

	)

79 
	#TYPE_UNCOMPRESSED_TCP
 0x70

	)

80 
	#TYPE_COMPRESSED_TCP
 0x80

	)

81 
	#TYPE_ERROR
 0x00

	)

84 
	#NEW_C
 0x40

	)

85 
	#NEW_I
 0x20

	)

86 
	#NEW_S
 0x08

	)

87 
	#NEW_A
 0x04

	)

88 
	#NEW_W
 0x02

	)

89 
	#NEW_U
 0x01

	)

92 
	#SPECIAL_I
 (
NEW_S
|
NEW_W
|
NEW_U
Ë

	)

93 
	#SPECIAL_D
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
Ë

	)

94 
	#SPECIALS_MASK
 (
NEW_S
|
NEW_A
|
NEW_W
|
NEW_U
)

	)

96 
	#TCP_PUSH_BIT
 0x10

	)

105 
	sc°©e
 {

106 
c°©e
 *
	mcs_√xt
;

107 
u_sh‹t
 
	mcs_hÀn
;

108 
u_ch¨
 
	mcs_id
;

109 
u_ch¨
 
	mcs_fûÀr
;

111 
	mcsu_hdr
[
MAX_HDR
];

112 
ù_hdr
 
	mcsu_ù
;

113 } 
	mvjcs_u
;

115 
	#cs_ù
 
vjcs_u
.
csu_ù


	)

116 
	#cs_hdr
 
vjcs_u
.
csu_hdr


	)

119 
	svj°©
 {

120 
	mvjs_∑ckës
;

121 
	mvjs_com¥es£d
;

122 
	mvjs_£¨ches
;

123 
	mvjs_mis£s
;

124 
	mvjs_uncom¥es£dö
;

125 
	mvjs_com¥es£dö
;

126 
	mvjs_îr‹ö
;

127 
	mvjs_tos£d
;

133 
	svjcom¥ess
 {

134 
c°©e
 *
	mœ°_cs
;

135 
u_ch¨
 
	mœ°_ªcv
;

136 
u_ch¨
 
	mœ°_xmô
;

137 
u_sh‹t
 
	mÊags
;

138 
u_ch¨
 
	mmaxSlŸIndex
;

139 
u_ch¨
 
	mcom¥essSlŸ
;

140 #i‡
LINK_STATS


141 
vj°©
 
	m°©s
;

143 
c°©e
 
	mt°©e
[
MAX_SLOTS
];

144 
c°©e
 
	mr°©e
[
MAX_SLOTS
];

148 
	#VJF_TOSS
 1U

	)

150 
vj_com¥ess_öô
 (
vjcom¥ess
 *
comp
);

151 
u_öt
 
vj_com¥ess_t˝
 (
vjcom¥ess
 *
comp
, 
pbuf
 *
pb
);

152 
vj_uncom¥ess_îr
 (
vjcom¥ess
 *
comp
);

153 
vj_uncom¥ess_uncomp
(
pbuf
 *
nb
, 
vjcom¥ess
 *
comp
);

154 
vj_uncom¥ess_t˝
 (
pbuf
 **
nb
, 
vjcom¥ess
 *
comp
);

	@src/extern/lwip/lwip/test/unit/core/test_mem.h

1 #i‚de‡
__TEST_MEM_H__


2 
	#__TEST_MEM_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
 *
mem_suôe
();

	@src/extern/lwip/lwip/test/unit/etharp/test_etharp.h

1 #i‚de‡
__TEST_ETHARP_H__


2 
	#__TEST_ETHARP_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
* 
ëh¨p_suôe
();

	@src/extern/lwip/lwip/test/unit/lwip_check.h

1 #i‚de‡
__LWIP_CHECK_H__


2 
	#__LWIP_CHECK_H__


	)

6 
	~<c⁄fig.h
>

7 
	~<check.h
>

8 
	~<°dlib.h
>

10 
	#FAIL_RET
(Ëdÿ{ 
	`Áû
(); ; } 0)

	)

11 
	#EXPECT
(
x
Ë
	`Áû_u∆ess
(x)

	)

12 
	#EXPECT_RET
(
x
Ëdÿ{ 
	`Áû_u∆ess
(x); if(!(x)Ë{ ; }} 0)

	)

13 
	#EXPECT_RETX
(
x
, 
y
Ëdÿ{ 
	`Áû_u∆ess
(x); if(!(x)Ë{  y; }} 0)

	)

14 
	#EXPECT_RETNULL
(
x
Ë
	`EXPECT_RETX
(x, 
NULL
)

	)

17 
	gSuôe
* (
	tsuôe_gëãr_‚
)();

20 
Suôe
* 
	$¸óã_suôe
(c⁄° * 
«me
, 
TFun
 *
ã°s
, 
size_t
 
num_ã°s
, 
SFun
 
£tup
, SFu¿
ã¨down
)

22 
size_t
 
i
;

23 
Suôe
 *
s
 = 
	`suôe_¸óã
(
«me
);

25 
i
 = 0; i < 
num_ã°s
; i++) {

27 
TCa£
 *
tc_c‹e
 = 
	`tˇ£_¸óã
("Core");

28 i‡((
£tup
 !
NULL
Ë|| (
ã¨down
 != NULL)) {

29 
	`tˇ£_add_checked_fixtuª
(
tc_c‹e
, 
£tup
, 
ã¨down
);

31 
	`tˇ£_add_ã°
(
tc_c‹e
, 
ã°s
[
i
]);

32 
	`suôe_add_tˇ£
(
s
, 
tc_c‹e
);

34  
s
;

35 
	}
}

	@src/extern/lwip/lwip/test/unit/lwipopts.h

32 #i‚de‡
__LWIPOPTS_H__


33 
	#__LWIPOPTS_H__


	)

36 
	#NO_SYS
 1

	)

37 
	#LWIP_NETCONN
 0

	)

38 
	#LWIP_SOCKET
 0

	)

41 
	#MEM_SIZE
 16000

	)

42 
	#TCP_SND_QUEUELEN
 40

	)

43 
	#MEMP_NUM_TCP_SEG
 
TCP_SND_QUEUELEN


	)

44 
	#TCP_SND_BUF
 (12 * 
TCP_MSS
)

	)

45 
	#TCP_WND
 (10 * 
TCP_MSS
)

	)

48 
	#ETHARP_SUPPORT_STATIC_ENTRIES
 1

	)

	@src/extern/lwip/lwip/test/unit/tcp/tcp_helper.h

1 #i‚de‡
__TCP_HELPER_H__


2 
	#__TCP_HELPER_H__


	)

4 
	~"../lwù_check.h
"

5 
	~"lwù/¨ch.h
"

6 
	~"lwù/t˝.h
"

7 
	~"lwù/√tif.h
"

10 
	sã°_t˝_cou¡îs
 {

11 
u32_t
 
	mªcv_ˇŒs
;

12 
u32_t
 
	mªcved_byãs
;

13 
u32_t
 
	mªcv_ˇŒs_a·î_˛o£
;

14 
u32_t
 
	mªcved_byãs_a·î_˛o£
;

15 
u32_t
 
	m˛o£_ˇŒs
;

16 
u32_t
 
	mîr_ˇŒs
;

17 
îr_t
 
	mœ°_îr
;

18 * 
	mex≥˘ed_d©a
;

19 
u32_t
 
	mex≥˘ed_d©a_Àn
;

22 
	sã°_t˝_txcou¡îs
 {

23 
u32_t
 
	mnum_tx_ˇŒs
;

24 
u32_t
 
	mnum_tx_byãs
;

25 
u8_t
 
	mc›y_tx_∑ckës
;

26 
pbuf
 *
	mtx_∑ckës
;

30 
t˝_ªmove_Æl
();

32 
pbuf
* 
t˝_¸óã_£gmít
(
ù_addr_t
* 
§c_ù
, ip_addr_t* 
d°_ù
,

33 
u16_t
 
§c_p‹t
, u16_à
d°_p‹t
, * 
d©a
, 
size_t
 
d©a_Àn
,

34 
u32_t
 
£qno
, u32_à
ackno
, 
u8_t
 
hódîÊags
);

35 
pbuf
* 
t˝_¸óã_rx_£gmít
(
t˝_pcb
* 
pcb
, * 
d©a
, 
size_t
 
d©a_Àn
,

36 
u32_t
 
£qno_off£t
, u32_à
ackno_off£t
, 
u8_t
 
hódîÊags
);

37 
pbuf
* 
t˝_¸óã_rx_£gmít_wnd
(
t˝_pcb
* 
pcb
, * 
d©a
, 
size_t
 
d©a_Àn
,

38 
u32_t
 
£qno_off£t
, u32_à
ackno_off£t
, 
u8_t
 
hódîÊags
, 
u16_t
 
wnd
);

39 
t˝_£t_°©e
(
t˝_pcb
* 
pcb
, 
t˝_°©e
 
°©e
, 
ù_addr_t
* 
loˇl_ù
,

40 
ù_addr_t
* 
ªmŸe_ù
, 
u16_t
 
loˇl_p‹t
, u16_à
ªmŸe_p‹t
);

41 
ã°_t˝_cou¡îs_îr
(* 
¨g
, 
îr_t
 
îr
);

42 
îr_t
 
ã°_t˝_cou¡îs_ªcv
(* 
¨g
, 
t˝_pcb
* 
pcb
, 
pbuf
* 
p
,Éº_à
îr
);

44 
t˝_pcb
* 
ã°_t˝_√w_cou¡îs_pcb
(
ã°_t˝_cou¡îs
* 
cou¡îs
);

46 
ã°_t˝_öput
(
pbuf
 *
p
, 
√tif
 *
öp
);

48 
ã°_t˝_öô_√tif
(
√tif
 *√tif, 
ã°_t˝_txcou¡îs
 *
txcou¡îs
,

49 
ù_addr_t
 *
ù_addr
, ip_addr_à*
√tmask
);

	@src/extern/lwip/lwip/test/unit/tcp/test_tcp.h

1 #i‚de‡
__TEST_TCP_H__


2 
	#__TEST_TCP_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
 *
t˝_suôe
();

	@src/extern/lwip/lwip/test/unit/tcp/test_tcp_oos.h

1 #i‚de‡
__TEST_TCP_OOS_H__


2 
	#__TEST_TCP_OOS_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
 *
t˝_oos_suôe
();

	@src/extern/lwip/lwip/test/unit/udp/test_udp.h

1 #i‚de‡
__TEST_UDP_H__


2 
	#__TEST_UDP_H__


	)

4 
	~"../lwù_check.h
"

6 
Suôe
* 
udp_suôe
();

	@src/extern/lwip/lwip_glue.cc

2 
	~"lwù/def.h
"

3 
	~"lwù/dh˝.h
"

4 
	~"lwù/ù_addr.h
"

5 
	~"lwù/mem.h
"

6 
	~"lwù/√tbuf.h
"

7 
	~"lwù/√tif.h
"

8 
	~"lwù/›t.h
"

9 
	~"lwù/pbuf.h
"

10 
	~"lwù/¢mp.h
"

11 
	~"lwù/°©s.h
"

12 
	~"lwù/sys.h
"

13 
	~"lwù/t˝ù.h
"

14 
	~"√tif/ëh¨p.h
"

15 
	~"√tif/µp_€.h
"

18 
	~"kî√l/Mem‹yM™agî.h
"

19 
	~"kî√l/Ouçut.h
"

21 
	~<c°dio
>

22 
	~<c°dlib
>

23 
	~<c°rög
>

25 
	#IFNAME0
 'e'

	)

26 
	#IFNAME1
 'n'

	)

30 
cdi_√t_devi˚
;

31 
cdi_√t_£nd
(
±r_t
 
buf„r
, 
size_t
 
size
);

33 
	sëhî√tif
 {

34 
ëh_addr
 *
	mëhaddr
;

35 
cdi_√t_devi˚
* 
	mdevi˚
;

38 
	$low_Àvñ_öô
(
√tif
 *netif) {

40 
√tif
->
hwaddr_Àn
 = 
ETHARP_HWADDR_LEN
;

43 
√tif
->
hwaddr
[0] = 0x52;

44 
√tif
->
hwaddr
[1] = 0x54;

45 
√tif
->
hwaddr
[2] = 0x00;

46 
√tif
->
hwaddr
[3] = 0x12;

47 
√tif
->
hwaddr
[4] = 0x34;

48 
√tif
->
hwaddr
[5] = 0x56;

51 
√tif
->
mtu
 = 1500;

55 
√tif
->
Êags
 = 
NETIF_FLAG_BROADCAST
 | 
NETIF_FLAG_ETHARP
 | 
NETIF_FLAG_LINK_UP
;

56 
	}
}

58 
îr_t
 
	$low_Àvñ_ouçut
(
√tif
 *√tif, 
pbuf
 *
p
) {

59 #i‡
ETH_PAD_SIZE


60 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

65 
pbuf
 *
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

66 
	`cdi_√t_£nd
(
q
->
∑ylﬂd
, q->
Àn
);

70 #i‡
ETH_PAD_SIZE


71 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

74 
	`LINK_STATS_INC
(
lök
.
xmô
);

76  
ERR_OK
;

77 
	}
}

79 
pbuf
* 
	$low_Àvñ_öput
(
√tif
 *√tif, 
buÂå_t
 
buf„r
, 
size_t
 
size
) {

80 
u16_t
 
Àn
 = 
size
;

82 #i‡
ETH_PAD_SIZE


83 
Àn
 +
ETH_PAD_SIZE
;

87 
pbuf
* 
p
 = 
	`pbuf_Æloc
(
PBUF_RAW
, 
Àn
, 
PBUF_POOL
);

89 i‡(
p
 !
NULL
) {

90 #i‡
ETH_PAD_SIZE


91 
	`pbuf_hódî
(
p
, -
ETH_PAD_SIZE
);

95 
cou¡î
 = 0;

96 
pbuf
* 
q
 = 
p
; q !
NULL
; q = q->
√xt
) {

104 
	`mem˝y
(
q
->
∑ylﬂd
, 
buf„r
 + 
cou¡î
, q->
Àn
);

105 
cou¡î
 +
q
->
Àn
;

108 
	`LINK_STATS_INC
(
lök
.
ªcv
);

110 #i‡
ETH_PAD_SIZE


111 
	`pbuf_hódî
(
p
, 
ETH_PAD_SIZE
);

115 
	`LINK_STATS_INC
(
lök
.
memîr
);

116 
	`LINK_STATS_INC
(
lök
.
dr›
);

118  
p
;

119 
	}
}

121 
	$ëhî√tif_öput
(
√tif
 *√tif, 
buÂå_t
 
buf„r
, 
size_t
 
size
) {

123 
pbuf
* 
p
 = 
	`low_Àvñ_öput
(
√tif
, 
buf„r
, 
size
);

125 i‡(
p
 =
NULL
) ;

127 
ëh_hdr
* 
ëhhdr
 = (ëh_hd∏*)
p
->
∑ylﬂd
;

129 
	`ht⁄s
(
ëhhdr
->
ty≥
)) {

131 
ETHTYPE_IP
:

132 
ETHTYPE_ARP
:

133 #i‡
PPPOE_SUPPORT


135 
ETHTYPE_PPPOEDISC
:

136 
ETHTYPE_PPPOE
:

139 i‡(
√tif
->
	`öput
(
p
,ÇëifË!
ERR_OK
) {

140 
DBG
::
	`oué
(DBG::
Lwù
, "LWIP: IP inputÉrror");

141 
	`pbuf_‰ì
(
p
);

145 
DBG
::
	`oué
(DBG::
Lwù
, "LWIP: unknown EthÅype");

146 
	`pbuf_‰ì
(
p
);

149 
	}
}

151 
îr_t
 
	$ëhî√tif_öô
(
√tif
 *netif) {

152 
	`KASSERT0
(
√tif
);

153 
ëhî√tif
*Éthî√ti‡
kmÆloc
<ethernetif>();

154 
	`KASSERT0
(
ëhî√tif
);

156 #i‡
LWIP_NETIF_HOSTNAME


158 
√tif
->
ho°«me
 = "lwip";

164 
	`NETIF_INIT_SNMP
(
√tif
, 
¢mp_ifTy≥_ëhî√t_csmacd
, 
LINK_SPEED_OF_YOUR_NETIF_IN_BPS
);

166 
√tif
->
°©e
 = 
ëhî√tif
;

167 
√tif
->
«me
[0] = 
IFNAME0
;

168 
√tif
->
«me
[1] = 
IFNAME1
;

172 
√tif
->
ouçut
 = 
ëh¨p_ouçut
;

173 
√tif
->
lökouçut
 = 
low_Àvñ_ouçut
;

175 
ëhî√tif
->
ëhaddr
 = (
ëh_addr
 *)&(
√tif
->
hwaddr
[0]);

178 
	`low_Àvñ_öô
(
√tif
);

180  
ERR_OK
;

181 
	}
}

182 
	$lwù_√t_ª˚ive
(
√tif
 *
nif
, 
buÂå_t
 
buf„r
, 
size_t
 
size
) {

183 
	`ëhî√tif_öput
(
nif
,
buf„r
,
size
);

184 
	}
}

186 c⁄° *
	$ù_to_°rög
(
uöt32_t
 
ù
) {

187 
buf
[32];

188 
	`•rötf
(&
buf
[0], "%u.%u.%u.%u", (
ù
 & 0xFF000000) >> 24,

189 (
ù
 & 0x00FF0000) >> 16, (ip & 0x0000FF00) >> 8, (ip & 0x000000FF));

190  &
buf
[0];

191 
	}
}

193 
	$t˝ù_öô_d⁄e
(*
¨g
) {

194 
	}
}

196 
	$lwù_öô_t˝ù
() {

197 
	`t˝ù_öô
(&
t˝ù_öô_d⁄e
, 
nuŒ±r
);

198 
	}
}

200 * 
	$lwù_add_√tif
(*
ëhif
) {

201 
√tif
 *
nif
 = 
kmÆloc
<netif>();

202 
ù_addr
 
ùaddr
, 
√tmask
, 
g©eway
;

205 
	`IP4_ADDR
(&
g©eway
, 192,168,57,1);

206 
	`IP4_ADDR
(&
ùaddr
, 192,168,57,200);

207 
	`IP4_ADDR
(&
√tmask
, 255,255,255,0);

210 i‡(!
	`√tif_add
(
nif
, &
ùaddr
, &
√tmask
, &
g©eway
, 
ëhif
, 
ëhî√tif_öô
, 
t˝ù_öput
)) {

211 
DBG
::
	`oué
(DBG::
Lwù
, "LWIP:Érror inÇetif_add");

212 
	`kdñëe
(
nif
);

213  
nuŒ±r
;

215 
	`√tif_£t_deÁu…
(
nif
);

216 
	`√tif_£t_up
(
nif
);

217 
	`dh˝_°¨t
(
nif
);

218  
nif
;

220 
	}
}

	@src/extern/lwip/lwipopts.h

1 #i‚de‡
_lwù›ts_h_


2 
	#_lwù›ts_h_


	)

4 
	#NO_SYS
 0

	)

5 
	#LWIP_COMPAT_MUTEX
 1

	)

6 
	#SYS_LIGHTWEIGHT_PROT
 1

	)

13 
	#MEM_SIZE
 16000

	)

14 
	#TCP_SND_QUEUELEN
 40

	)

15 
	#MEMP_NUM_TCP_SEG
 
TCP_SND_QUEUELEN


	)

16 
	#TCP_SND_BUF
 (12 * 
TCP_MSS
)

	)

17 
	#TCP_WND
 (10 * 
TCP_MSS
)

	)

19 
	#LWIP_HAVE_LOOPIF
 1

	)

20 
	#LWIP_DHCP
 1

	)

21 
	#LWIP_SOCKET
 1

	)

22 
	#LWIP_COMPAT_SOCKETS
 0

	)

23 
	#LWIP_POSIX_SOCKETS_IO_NAMES
 0

	)

25 
	#LWIP_ICMP
 1

	)

26 
	#ICMP_STATS
 1

	)

29 
	#DHCP_DEBUG
 
LWIP_DBG_OFF


	)

30 
	#ETHARP_DEBUG
 
LWIP_DBG_OFF


	)

31 
	#NETIF_DEBUG
 
LWIP_DBG_ON


	)

32 
	#PBUF_DEBUG
 
LWIP_DBG_OFF


	)

33 
	#API_LIB_DEBUG
 
LWIP_DBG_OFF


	)

34 
	#API_MSG_DEBUG
 
LWIP_DBG_OFF


	)

35 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

36 
	#ICMP_DEBUG
 
LWIP_DBG_OFF


	)

37 
	#IGMP_DEBUG
 
LWIP_DBG_OFF


	)

38 
	#INET_DEBUG
 
LWIP_DBG_OFF


	)

39 
	#IP_DEBUG
 
LWIP_DBG_OFF


	)

40 
	#IP_REASS_DEBUG
 
LWIP_DBG_ON


	)

41 
	#RAW_DEBUG
 
LWIP_DBG_OFF


	)

42 
	#MEM_DEBUG
 
LWIP_DBG_OFF


	)

43 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

44 
	#SYS_DEBUG
 
LWIP_DBG_OFF


	)

45 
	#TIMERS_DEBUG
 
LWIP_DBG_OFF


	)

46 
	#TCP_DEBUG
 
LWIP_DBG_ON


	)

47 
	#TCP_INPUT_DEBUG
 
LWIP_DBG_OFF


	)

48 
	#LWIP_DEBUG
 
LWIP_DBG_ON


	)

49 
	#MEMP_DEBUG
 
LWIP_DBG_OFF


	)

50 
	#SOCKETS_DEBUG
 
LWIP_DBG_OFF


	)

51 
	#DBG_TYPES_ON
 
LWIP_DBG_OFF


	)

	@src/extern/lwip/sys_arch.cc

2 
	~"lwù/sys.h
"

5 
	~"gíîic/Buf„rs.h
"

6 
	~"ru¡ime/SyncQueues.h
"

7 
	~"kî√l/Clock.h
"

8 
	~"kî√l/Mem‹yM™agî.h
"

9 
	~"kî√l/Ouçut.h
"

11 "C" 
îr_t
 
	$sys_£m_√w
(
sys_£m_t
 *
£m
, 
u8_t
 
cou¡
) {

12 *
£m
 = 
k√w
<
Sem≠h‹e
>(
cou¡
);

13  
ERR_OK
;

14 
	}
}

16 "C" 
	$sys_£m_sig«l
(
sys_£m_t
 *
£m
) {

17 
ªöãΩªt_ˇ°
<
Sem≠h‹e
*>(*
£m
)->
	`V
();

18 
	}
}

20 "C" 
u32_t
 
	$sys_¨ch_£m_waô
(
sys_£m_t
 *
£m
, 
u32_t
 
timeout
) {

21 
mw‹d
 
bef‹e
 = 
Clock
::
	`now
();

22 i‡(
timeout
 == 0) {

23 
ªöãΩªt_ˇ°
<
Sem≠h‹e
*>(*
£m
)->
	`P
();

24  
Clock
::
	`now
(Ë- 
bef‹e
;

25 } i‡(
ªöãΩªt_ˇ°
<
Sem≠h‹e
*>(*
£m
)->
	`åyP
(
timeout
)) {

26  
Clock
::
	`now
(Ë- 
bef‹e
;

28  
SYS_ARCH_TIMEOUT
;

30 
	}
}

32 "C" 
	$sys_£m_‰ì
(
sys_£m_t
 *
£m
) {

33 
	`kdñëe
((
Sem≠h‹e
*)*
£m
);

34 
	}
}

36 "C" 
	$sys_£m_vÆid
(
sys_£m_t
 *
£m
) {

37  *
£m
 !
nuŒ±r
;

38 
	}
}

40 "C" 
	$sys_£m_£t_övÆid
(
sys_£m_t
 *
£m
) {

41 *
£m
 = 
nuŒ±r
;

42 
	}
}

44 
MesßgeQueue
<
	tRu¡imeRögBuf„r
<*,
	tKî√lAŒoˇt‹
<*>>> 
	tMQ
;

46 "C" 
îr_t
 
	$sys_mbox_√w
(
sys_mbox_t
 *
mbox
, 
size
) {

47 *
mbox
 = 
k√w
<
MQ
>–
	`max
(
size
,128) );

48  
ERR_OK
;

49 
	}
}

51 "C" 
	$sys_mbox_po°
(
sys_mbox_t
 *
mbox
, *
msg
) {

52 
ªöãΩªt_ˇ°
<
MQ
*>(*
mbox
)->
	`£nd
(
msg
);

53 
	}
}

55 "C" 
îr_t
 
	$sys_mbox_åypo°
(
sys_mbox_t
 *
mbox
, *
msg
) {

56 i‡(
ªöãΩªt_ˇ°
<
MQ
*>(*
mbox
)->
	`åySíd
(
msg
)Ë 
ERR_OK
;

57  
ERR_MEM
;

58 
	}
}

60 "C" 
u32_t
 
	$sys_¨ch_mbox_„tch
(
sys_mbox_t
 *
mbox
, **
msg
, 
u32_t
 
timeout
) {

61 
mw‹d
 
bef‹e
 = 
Clock
::
	`now
();

62 i‡(
timeout
 == 0) {

63 
ªöãΩªt_ˇ°
<
MQ
*>(*
mbox
)->
	`ªcv
(*
msg
);

64  
Clock
::
	`now
(Ë- 
bef‹e
;

65 } i‡(
ªöãΩªt_ˇ°
<
MQ
*>(*
mbox
)->
	`åyRecv
(*
msg
, 
timeout
)) {

66  
Clock
::
	`now
(Ë- 
bef‹e
;

68  
SYS_ARCH_TIMEOUT
;

70 
	}
}

72 "C" 
u32_t
 
	$sys_¨ch_mbox_åy„tch
(
sys_mbox_t
 *
mbox
, **
msg
) {

73 
mw‹d
 
bef‹e
 = 
Clock
::
	`now
();

74 i‡(
ªöãΩªt_ˇ°
<
MQ
*>(*
mbox
)->
	`åyRecv
(*
msg
, 0)) {

75  
Clock
::
	`now
(Ë- 
bef‹e
;

77  
SYS_ARCH_TIMEOUT
;

79 
	}
}

81 "C" 
	$sys_mbox_‰ì
(
sys_mbox_t
 *
mbox
) {

82 
	`kdñëe
((
MQ
*)*
mbox
);

83 
	}
}

85 "C" 
	$sys_mbox_vÆid
(
sys_mbox_t
 *
mbox
) {

86  *
mbox
 !
nuŒ±r
;

87 
	}
}

89 "C" 
	$sys_mbox_£t_övÆid
(
sys_mbox_t
 *
mbox
) {

90 *
mbox
 = 
nuŒ±r
;

91 
	}
}

93 "C" 
sys_thªad_t
 
	$sys_thªad_√w
(c⁄° *
«me
, 
lwù_thªad_‚
 
thªad
, *
¨g
, 
°acksize
, 
¥io
) {

94 
Thªad
* 
t
 = Thªad::
	`¸óã
(
°acksize
 + 
deÁu…Sèck
);

96 
t
->
	`°¨t
((
±r_t
)
thªad
, 
¨g
);

97  
t
;

98 
	}
}

101 
Ow√rLock
* 
lwùLock
;

103 "C" 
	$sys_öô
() {

104 
lwùLock
 = 
k√w
<
Ow√rLock
>();

105 
	}
}

107 "C" 
u32_t
 
	$sys_jiffõs
(Ë{ 
	`KABORT0
();  0; 
	}
}

109 "C" 
u32_t
 
	$sys_now
() {

110  
Clock
::
	`now
();

111 
	}
}

113 "C" 
sys_¥Ÿ_t
 
	$sys_¨ch_¥Ÿe˘
() {

114  
lwùLock
->
	`acquúe
();

115 
	}
}

117 "C" 
	$sys_¨ch_u≈rŸe˘
(
sys_¥Ÿ_t
 
pvÆ
) {

118 
lwùLock
->
	`ªÀa£
();

119 
	}
}

121 "C" 
	$lwù_as£π
(c⁄° * c⁄° 
loc
, 
löe
, c⁄° * c⁄° 
func
, c⁄° * c⁄° 
msg
) {

122 
	`kas£π¥öts
(
loc
, 
löe
, 
func
);

123 
	`kas£π¥öã
(
msg
);

124 
	}
}

126 "C" 
	$lwù_¥ötf
(c⁄° * 
fmt
, ...) {

127 
va_li°
 
¨gs
;

128 
	`va_°¨t
(
¨gs
, 
fmt
);

129 
	`Exã∫DebugPrötf
(
DBG
::
Lwù
, 
fmt
, 
¨gs
);

130 
	`va_íd
(
¨gs
);

131 
	}
}

	@src/extern/multiboot/multiboot2.h

22 #i‚de‡
MULTIBOOT_HEADER


23 
	#MULTIBOOT_HEADER
 1

	)

26 
	#MULTIBOOT_SEARCH
 32768

	)

27 
	#MULTIBOOT_HEADER_ALIGN
 8

	)

30 
	#MULTIBOOT2_HEADER_MAGIC
 0xe85250d6

	)

33 
	#MULTIBOOT2_BOOTLOADER_MAGIC
 0x36d76289

	)

36 
	#MULTIBOOT_MOD_ALIGN
 0x00001000

	)

39 
	#MULTIBOOT_INFO_ALIGN
 0x00000008

	)

43 
	#MULTIBOOT_TAG_ALIGN
 8

	)

44 
	#MULTIBOOT_TAG_TYPE_END
 0

	)

45 
	#MULTIBOOT_TAG_TYPE_CMDLINE
 1

	)

46 
	#MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME
 2

	)

47 
	#MULTIBOOT_TAG_TYPE_MODULE
 3

	)

48 
	#MULTIBOOT_TAG_TYPE_BASIC_MEMINFO
 4

	)

49 
	#MULTIBOOT_TAG_TYPE_BOOTDEV
 5

	)

50 
	#MULTIBOOT_TAG_TYPE_MMAP
 6

	)

51 
	#MULTIBOOT_TAG_TYPE_VBE
 7

	)

52 
	#MULTIBOOT_TAG_TYPE_FRAMEBUFFER
 8

	)

53 
	#MULTIBOOT_TAG_TYPE_ELF_SECTIONS
 9

	)

54 
	#MULTIBOOT_TAG_TYPE_APM
 10

	)

55 
	#MULTIBOOT_TAG_TYPE_EFI32
 11

	)

56 
	#MULTIBOOT_TAG_TYPE_EFI64
 12

	)

57 
	#MULTIBOOT_TAG_TYPE_SMBIOS
 13

	)

58 
	#MULTIBOOT_TAG_TYPE_ACPI_OLD
 14

	)

59 
	#MULTIBOOT_TAG_TYPE_ACPI_NEW
 15

	)

60 
	#MULTIBOOT_TAG_TYPE_NETWORK
 16

	)

62 
	#MULTIBOOT_HEADER_TAG_END
 0

	)

63 
	#MULTIBOOT_HEADER_TAG_INFORMATION_REQUEST
 1

	)

64 
	#MULTIBOOT_HEADER_TAG_ADDRESS
 2

	)

65 
	#MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS
 3

	)

66 
	#MULTIBOOT_HEADER_TAG_CONSOLE_FLAGS
 4

	)

67 
	#MULTIBOOT_HEADER_TAG_FRAMEBUFFER
 5

	)

68 
	#MULTIBOOT_HEADER_TAG_MODULE_ALIGN
 6

	)

70 
	#MULTIBOOT_ARCHITECTURE_I386
 0

	)

71 
	#MULTIBOOT_ARCHITECTURE_MIPS32
 4

	)

72 
	#MULTIBOOT_HEADER_TAG_OPTIONAL
 1

	)

74 
	#MULTIBOOT_CONSOLE_FLAGS_CONSOLE_REQUIRED
 1

	)

75 
	#MULTIBOOT_CONSOLE_FLAGS_EGA_TEXT_SUPPORTED
 2

	)

77 #i‚de‡
ASM_FILE


79 
	tmu…iboŸ_uöt8_t
;

80 
	tmu…iboŸ_uöt16_t
;

81 
	tmu…iboŸ_uöt32_t
;

82 
	tmu…iboŸ_uöt64_t
;

84 
	smu…iboŸ_hódî


87 
mu…iboŸ_uöt32_t
 
	mmagic
;

90 
mu…iboŸ_uöt32_t
 
	m¨chôe˘uª
;

93 
mu…iboŸ_uöt32_t
 
	mhódî_Àngth
;

96 
mu…iboŸ_uöt32_t
 
	mchecksum
;

99 
	smu…iboŸ_hódî_èg


101 
mu…iboŸ_uöt16_t
 
	mty≥
;

102 
mu…iboŸ_uöt16_t
 
	mÊags
;

103 
mu…iboŸ_uöt32_t
 
	msize
;

106 
	smu…iboŸ_hódî_èg_öf‹m©i⁄_ªque°


108 
mu…iboŸ_uöt16_t
 
	mty≥
;

109 
mu…iboŸ_uöt16_t
 
	mÊags
;

110 
mu…iboŸ_uöt32_t
 
	msize
;

111 
mu…iboŸ_uöt32_t
 
	mªque°s
[0];

114 
	smu…iboŸ_hódî_èg_addªss


116 
mu…iboŸ_uöt16_t
 
	mty≥
;

117 
mu…iboŸ_uöt16_t
 
	mÊags
;

118 
mu…iboŸ_uöt32_t
 
	msize
;

119 
mu…iboŸ_uöt32_t
 
	mhódî_addr
;

120 
mu…iboŸ_uöt32_t
 
	mlﬂd_addr
;

121 
mu…iboŸ_uöt32_t
 
	mlﬂd_íd_addr
;

122 
mu…iboŸ_uöt32_t
 
	mbss_íd_addr
;

125 
	smu…iboŸ_hódî_èg_íåy_addªss


127 
mu…iboŸ_uöt16_t
 
	mty≥
;

128 
mu…iboŸ_uöt16_t
 
	mÊags
;

129 
mu…iboŸ_uöt32_t
 
	msize
;

130 
mu…iboŸ_uöt32_t
 
	míåy_addr
;

133 
	smu…iboŸ_hódî_èg_c⁄sﬁe_Êags


135 
mu…iboŸ_uöt16_t
 
	mty≥
;

136 
mu…iboŸ_uöt16_t
 
	mÊags
;

137 
mu…iboŸ_uöt32_t
 
	msize
;

138 
mu…iboŸ_uöt32_t
 
	mc⁄sﬁe_Êags
;

141 
	smu…iboŸ_hódî_èg_‰amebuf„r


143 
mu…iboŸ_uöt16_t
 
	mty≥
;

144 
mu…iboŸ_uöt16_t
 
	mÊags
;

145 
mu…iboŸ_uöt32_t
 
	msize
;

146 
mu…iboŸ_uöt32_t
 
	mwidth
;

147 
mu…iboŸ_uöt32_t
 
	mheight
;

148 
mu…iboŸ_uöt32_t
 
	mdïth
;

151 
	smu…iboŸ_hódî_èg_moduÀ_Æign


153 
mu…iboŸ_uöt16_t
 
	mty≥
;

154 
mu…iboŸ_uöt16_t
 
	mÊags
;

155 
mu…iboŸ_uöt32_t
 
	msize
;

156 
mu…iboŸ_uöt32_t
 
	mwidth
;

157 
mu…iboŸ_uöt32_t
 
	mheight
;

158 
mu…iboŸ_uöt32_t
 
	mdïth
;

161 
	smu…iboŸ_cﬁ‹


163 
mu…iboŸ_uöt8_t
 
	mªd
;

164 
mu…iboŸ_uöt8_t
 
	mgªí
;

165 
mu…iboŸ_uöt8_t
 
	mblue
;

168 
	smu…iboŸ_mm≠_íåy


170 
mu…iboŸ_uöt64_t
 
	maddr
;

171 
mu…iboŸ_uöt64_t
 
	mÀn
;

172 
	#MULTIBOOT_MEMORY_AVAILABLE
 1

	)

173 
	#MULTIBOOT_MEMORY_RESERVED
 2

	)

174 
	#MULTIBOOT_MEMORY_ACPI_RECLAIMABLE
 3

	)

175 
	#MULTIBOOT_MEMORY_NVS
 4

	)

176 
	#MULTIBOOT_MEMORY_BADRAM
 5

	)

177 
mu…iboŸ_uöt32_t
 
	mty≥
;

178 
mu…iboŸ_uöt32_t
 
	mzîo
;

179 } 
__©åibuã__
((
∑cked
));

180 
mu…iboŸ_mm≠_íåy
 
	tmu…iboŸ_mem‹y_m≠_t
;

182 
	smu…iboŸ_èg


184 
mu…iboŸ_uöt32_t
 
	mty≥
;

185 
mu…iboŸ_uöt32_t
 
	msize
;

188 
	smu…iboŸ_èg_°rög


190 
mu…iboŸ_uöt32_t
 
	mty≥
;

191 
mu…iboŸ_uöt32_t
 
	msize
;

192 
	m°rög
[0];

195 
	smu…iboŸ_èg_moduÀ


197 
mu…iboŸ_uöt32_t
 
	mty≥
;

198 
mu…iboŸ_uöt32_t
 
	msize
;

199 
mu…iboŸ_uöt32_t
 
	mmod_°¨t
;

200 
mu…iboŸ_uöt32_t
 
	mmod_íd
;

201 
	mcmdlöe
[0];

204 
	smu…iboŸ_èg_basic_memöfo


206 
mu…iboŸ_uöt32_t
 
	mty≥
;

207 
mu…iboŸ_uöt32_t
 
	msize
;

208 
mu…iboŸ_uöt32_t
 
	mmem_lowî
;

209 
mu…iboŸ_uöt32_t
 
	mmem_uµî
;

212 
	smu…iboŸ_èg_boŸdev


214 
mu…iboŸ_uöt32_t
 
	mty≥
;

215 
mu…iboŸ_uöt32_t
 
	msize
;

216 
mu…iboŸ_uöt32_t
 
	mbiosdev
;

217 
mu…iboŸ_uöt32_t
 
	m¶i˚
;

218 
mu…iboŸ_uöt32_t
 
	m∑π
;

221 
	smu…iboŸ_èg_mm≠


223 
mu…iboŸ_uöt32_t
 
	mty≥
;

224 
mu…iboŸ_uöt32_t
 
	msize
;

225 
mu…iboŸ_uöt32_t
 
	míåy_size
;

226 
mu…iboŸ_uöt32_t
 
	míåy_vîsi⁄
;

227 
mu…iboŸ_mm≠_íåy
 
	míåõs
[0];

230 
	smu…iboŸ_vbe_öfo_block


232 
mu…iboŸ_uöt8_t
 
	mexã∫Æ_•ecifiˇti⁄
[512];

235 
	smu…iboŸ_vbe_mode_öfo_block


237 
mu…iboŸ_uöt8_t
 
	mexã∫Æ_•ecifiˇti⁄
[256];

240 
	smu…iboŸ_èg_vbe


242 
mu…iboŸ_uöt32_t
 
	mty≥
;

243 
mu…iboŸ_uöt32_t
 
	msize
;

245 
mu…iboŸ_uöt16_t
 
	mvbe_mode
;

246 
mu…iboŸ_uöt16_t
 
	mvbe_öãrÁ˚_£g
;

247 
mu…iboŸ_uöt16_t
 
	mvbe_öãrÁ˚_off
;

248 
mu…iboŸ_uöt16_t
 
	mvbe_öãrÁ˚_Àn
;

250 
mu…iboŸ_vbe_öfo_block
 
	mvbe_c⁄åﬁ_öfo
;

251 
mu…iboŸ_vbe_mode_öfo_block
 
	mvbe_mode_öfo
;

254 
	smu…iboŸ_èg_‰amebuf„r_comm⁄


256 
mu…iboŸ_uöt32_t
 
	mty≥
;

257 
mu…iboŸ_uöt32_t
 
	msize
;

259 
mu…iboŸ_uöt64_t
 
	m‰amebuf„r_addr
;

260 
mu…iboŸ_uöt32_t
 
	m‰amebuf„r_pôch
;

261 
mu…iboŸ_uöt32_t
 
	m‰amebuf„r_width
;

262 
mu…iboŸ_uöt32_t
 
	m‰amebuf„r_height
;

263 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_bµ
;

264 
	#MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED
 0

	)

265 
	#MULTIBOOT_FRAMEBUFFER_TYPE_RGB
 1

	)

266 
	#MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT
 2

	)

267 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_ty≥
;

268 
mu…iboŸ_uöt16_t
 
	mª£rved
;

271 
	smu…iboŸ_èg_‰amebuf„r


273 
mu…iboŸ_èg_‰amebuf„r_comm⁄
 
	mcomm⁄
;

279 
mu…iboŸ_uöt16_t
 
	m‰amebuf„r_∑Àâe_num_cﬁ‹s
;

280 
mu…iboŸ_cﬁ‹
 
	m‰amebuf„r_∑Àâe
[0];

284 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_ªd_fõld_posôi⁄
;

285 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_ªd_mask_size
;

286 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_gªí_fõld_posôi⁄
;

287 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_gªí_mask_size
;

288 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_blue_fõld_posôi⁄
;

289 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_blue_mask_size
;

294 
	smu…iboŸ_èg_ñf_£˘i⁄s


296 
mu…iboŸ_uöt32_t
 
	mty≥
;

297 
mu…iboŸ_uöt32_t
 
	msize
;

298 
mu…iboŸ_uöt32_t
 
	mnum
;

299 
mu…iboŸ_uöt32_t
 
	mítsize
;

300 
mu…iboŸ_uöt32_t
 
	mshndx
;

301 
	m£˘i⁄s
[0];

304 
	smu…iboŸ_èg_≠m


306 
mu…iboŸ_uöt32_t
 
	mty≥
;

307 
mu…iboŸ_uöt32_t
 
	msize
;

308 
mu…iboŸ_uöt16_t
 
	mvîsi⁄
;

309 
mu…iboŸ_uöt16_t
 
	mc£g
;

310 
mu…iboŸ_uöt32_t
 
	moff£t
;

311 
mu…iboŸ_uöt16_t
 
	mc£g_16
;

312 
mu…iboŸ_uöt16_t
 
	md£g
;

313 
mu…iboŸ_uöt16_t
 
	mÊags
;

314 
mu…iboŸ_uöt16_t
 
	mc£g_Àn
;

315 
mu…iboŸ_uöt16_t
 
	mc£g_16_Àn
;

316 
mu…iboŸ_uöt16_t
 
	md£g_Àn
;

319 
	smu…iboŸ_èg_efi32


321 
mu…iboŸ_uöt32_t
 
	mty≥
;

322 
mu…iboŸ_uöt32_t
 
	msize
;

323 
mu…iboŸ_uöt32_t
 
	mpoöãr
;

326 
	smu…iboŸ_èg_efi64


328 
mu…iboŸ_uöt32_t
 
	mty≥
;

329 
mu…iboŸ_uöt32_t
 
	msize
;

330 
mu…iboŸ_uöt64_t
 
	mpoöãr
;

333 
	smu…iboŸ_èg_smbios


335 
mu…iboŸ_uöt32_t
 
	mty≥
;

336 
mu…iboŸ_uöt32_t
 
	msize
;

337 
mu…iboŸ_uöt8_t
 
	mmaj‹
;

338 
mu…iboŸ_uöt8_t
 
	mmö‹
;

339 
mu…iboŸ_uöt8_t
 
	mª£rved
[6];

340 
mu…iboŸ_uöt8_t
 
	mèbÀs
[0];

343 
	smu…iboŸ_èg_ﬁd_a˝i


345 
mu…iboŸ_uöt32_t
 
	mty≥
;

346 
mu…iboŸ_uöt32_t
 
	msize
;

347 
mu…iboŸ_uöt8_t
 
	mrsdp
[0];

350 
	smu…iboŸ_èg_√w_a˝i


352 
mu…iboŸ_uöt32_t
 
	mty≥
;

353 
mu…iboŸ_uöt32_t
 
	msize
;

354 
mu…iboŸ_uöt8_t
 
	mrsdp
[0];

357 
	smu…iboŸ_èg_√tw‹k


359 
mu…iboŸ_uöt32_t
 
	mty≥
;

360 
mu…iboŸ_uöt32_t
 
	msize
;

361 
mu…iboŸ_uöt8_t
 
	mdh˝ack
[0];

	@src/gdb/Gdb.cc

1 
	~"ru¡ime/ScheduÀr.h
"

2 
	~"ru¡ime/Thªad.h
"

3 
	~"kî√l/Mem‹yM™agî.h
"

4 
	~"kî√l/Ouçut.h
"

5 
	~"machöe/APIC.h
"

6 
	~"machöe/Machöe.h
"

7 
	~"machöe/Pro˚ss‹.h
"

8 
	~"devi˚s/Sîül.h
"

10 
	~<c°rög
>

11 
	~<m≠
>

13 #unde‡
__STRICT_ANSI__


14 
	~<c°dio
>

17 
	$cTID
(Ë{  
LoˇlPro˚ss‹
::
	`gëIndex
(Ë+ 1; 
	}
}

22 "C" 
	$ªsumeExecuti⁄
(*Ë
__n‹ëu∫
;

24 "C" 
	`gë_ch¨
(c⁄° * 
addr
);

25 "C" 
	`£t_ch¨
(* 
addr
, 
vÆ
);

27 "C" 
	`ˇtchEx˚±i⁄0x00
();

28 "C" 
	`ˇtchEx˚±i⁄0x01
();

29 "C" 
	`ˇtchEx˚±i⁄0x02
();

30 "C" 
	`ˇtchEx˚±i⁄0x03
();

31 "C" 
	`ˇtchEx˚±i⁄0x04
();

32 "C" 
	`ˇtchEx˚±i⁄0x05
();

33 "C" 
	`ˇtchEx˚±i⁄0x06
();

34 "C" 
	`ˇtchEx˚±i⁄0x07
();

35 "C" 
	`ˇtchEx˚±i⁄0x08
();

36 "C" 
	`ˇtchEx˚±i⁄0x09
();

37 "C" 
	`ˇtchEx˚±i⁄0x0a
();

38 "C" 
	`ˇtchEx˚±i⁄Fau…0x0b
();

39 "C" 
	`ˇtchEx˚±i⁄Fau…0x0c
();

40 "C" 
	`ˇtchEx˚±i⁄Fau…0x0d
();

41 "C" 
	`ˇtchEx˚±i⁄Fau…0x0e
();

42 "C" 
	`ˇtchEx˚±i⁄0x10
();

43 "C" 
	`ˇtchEx˚±i⁄0xef
();

46 vﬁ©ûê
gdbFau…H™dÀrE«bÀd
 = 0;

47 vﬁ©ûê
gdbFau…H™dÀrCÆÀd
 = 0;

52 c⁄° 
hexch¨s
[]="0123456789abcdef";

54 
	$ch¨2hex
(
ch
) {

55 i‡((
ch
 >= '0') && (ch <= '9'))  (ch - '0');

56 i‡((
ch
 >= 'a') && (ch <= 'f'))  (ch - 'a') + 10;

57 i‡((
ch
 >= 'A') && (ch <= 'F'))  (ch - 'A') + 10;

59 
	}
}

61 
	$putbyã
(
ch
) {

62 
SîülDevi˚
::
	`wrôe
(
ch
);

63 
	}
}

65 
	$gëbyã
() {

66  
SîülDevi˚
::
	`ªad
();

67 
	}
}

70 * 
	$gë∑ckë
(* 
buf„r
, 
buÊí
) {

71 
ch
;

72 
åue
) {

73 (
ch
 = 
	`gëbyã
()) != '$');

74 
ªåy
:

75 
checksum
 = 0;

76 
cou¡
 = 0;

77 ; 
cou¡
 < 
buÊí
 - 1; count += 1) {

78 
ch
 = 
	`gëbyã
();

79 i‡(
ch
 ='$'Ë
ªåy
;

80 i‡(
ch
 == '#') ;

81 
checksum
 +
ch
;

82 
buf„r
[
cou¡
] = 
ch
;

84 
buf„r
[
cou¡
] = 0;

85 i‡(
ch
 == '#') {

86 
ch
 = 
	`gëbyã
();

87 
xmôcsum
 = 
	`ch¨2hex
(
ch
) << 4;

88 
ch
 = 
	`gëbyã
();

89 
xmôcsum
 +
	`ch¨2hex
(
ch
);

90 i‡(
checksum
 !
xmôcsum
) {

91 
	`putbyã
('-');

93 
	`putbyã
('+');

94 i‡(
buf„r
[2] == ':') {

95 
	`putbyã
(
buf„r
[0]);

96 
	`putbyã
(
buf„r
[1]);

97  &
buf„r
[3];

99  &
buf„r
[0];

103 
	}
}

106 
	$puçackë
(*
buf„r
) {

107 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),"): sídög ", 
buf„r
);

109 
	`putbyã
('$');

110 
checksum
 = 0;

111  
cou¡
 = 0; 
buf„r
[count]; count += 1 ) {

112 
	`putbyã
(
buf„r
[
cou¡
]);

113 
checksum
 +
buf„r
[
cou¡
];

115 
	`putbyã
('#');

116 
	`putbyã
(
hexch¨s
[
checksum
 >> 4]);

117 
	`putbyã
(
hexch¨s
[
checksum
 % 16]);

118 } 
	`gëbyã
() != '+');

119 
	}
}

122 * 
	$mem2hex
(c⁄° *
mem
, *
buf
, 
cou¡
, 
may_Áu…
) {

123 
gdbFau…H™dÀrCÆÀd
 = 0;

124 
gdbFau…H™dÀrE«bÀd
 = 
may_Áu…
;

125 
i
 = 0; i < 
cou¡
; i++) {

126 
ch
 = 
	`gë_ch¨
(
mem
++);

127 i‡(
gdbFau…H™dÀrCÆÀd
Ë 
buf
;

128 *
buf
++ = 
hexch¨s
[
ch
 >> 4];

129 *
buf
++ = 
hexch¨s
[
ch
 % 16];

131 *
buf
 = 0;

132 
gdbFau…H™dÀrE«bÀd
 = 0;

133  
buf
;

134 
	}
}

137 * 
	$hex2mem
(*
buf
, *
mem
, 
cou¡
, 
may_Áu…
) {

138 
gdbFau…H™dÀrCÆÀd
 = 0;

139 
gdbFau…H™dÀrE«bÀd
 = 
may_Áu…
;

140 
i
 = 0; i < 
cou¡
; i++) {

141 
ch
 = 
	`ch¨2hex
(*
buf
++) << 4;

142 
ch
 = ch + 
	`ch¨2hex
(*
buf
++);

143 
	`£t_ch¨
(
mem
++, 
ch
);

144 i‡(
gdbFau…H™dÀrCÆÀd
Ë 
mem
;

146 
gdbFau…H™dÀrE«bÀd
 = 0;

147  
mem
;

148 
	}
}

151 
	$hexToI¡
(**
±r
, *
ötVÆue
) {

152 
numCh¨s
 = 0;

153 
hexVÆue
 = 0;

154 *
ötVÆue
 = 0;

155 **
±r
) {

156 
hexVÆue
 = 
	`ch¨2hex
(**
±r
);

157 i‡(
hexVÆue
 >= 0) {

158 *
ötVÆue
 = (*ötVÆuê<< 4Ë| 
hexVÆue
;

159 
numCh¨s
++;

161 ++(*
±r
);

163  
numCh¨s
;

164 
	}
}

169 
uöt64_t
 
	tªg64_t
;

170 
uöt32_t
 
	tªg32_t
;

172 
	eReg
 {

173 
	mRAX
, 
	mRBX
, 
	mRCX
, 
	mRDX
, 
	mRSI
, 
	mRDI
, 
	mRBP
, 
	mRSP
,

174 
	mR8
, 
	mR9
, 
	mR10
, 
	mR11
, 
	mR12
, 
	mR13
, 
	mR14
, 
	mR15
, 
	mRIP
,

175 
	mEFLAGS
 = 0, 
	mCS
, 
	mSS
, 
	mDS
, 
	mES
, 
	mFS
, 
	mGS


178 c⁄° 
size_t
 
	gªg64˙t
 = 17;

179 c⁄° 
size_t
 
	gªg32˙t
 = 7;

181 c⁄° 
	gTF
 = 0x100;

183 
	sGdbCpuBa£
 {

190 
ªg64_t
 
	mªg64buf
[
ªg64˙t
];

191 
ªg32_t
 
	mªg32buf
[
ªg32˙t
];

192 vﬁ©ûêíum { 
	mUnknown
, 
	mSt›≥d
, 
	mRu¬ög
 } 
	m°©e
;

193 
öt64_t
 
	mtickë
;

194 
GdbCpuBa£
(Ë: 
°©e
(
Unknown
), 
tickë
(0) {}

195 } 
	g__∑cked
;

197 
	gGdbCpu
 : 
public
 
GdbCpuBa£
 {

198 c⁄° 
size_t
 
°ackSize
 = (1<<16);

199 
	g°ack
[
°ackSize
-(
GdbCpuBa£
)];

200 } 
	g__∑cked
;

202 
GdbCpu
* 
	g˝us
 = 
nuŒ±r
;

204 
	$°¨tGdbCpu
(
mw‹d
 
idx
) {

205 i‡(!
DBG
::
	`ã°
(DBG::
GDBE«bÀ
)) ;

206 
˝us
[
idx
].
°©e
 = 
GdbCpu
::
Ru¬ög
;

207 
	}
}

209 
	$öôGdb
(
mw‹d
 
b•Idx
) {

210 i‡(!
DBG
::
	`ã°
(DBG::
GDBE«bÀ
)) ;

211 
˝us
 = 
k√wN
<
GdbCpu
>(
Machöe
::
	`gëPro˚ss‹Cou¡
());

212 
Machöe
::
	`£tupIDT
(0x00, (
vaddr
)
ˇtchEx˚±i⁄0x00
);

213 
Machöe
::
	`£tupIDT
(0x01, (
vaddr
)
ˇtchEx˚±i⁄0x01
);

214 
Machöe
::
	`£tupIDT
(0x02, (
vaddr
)
ˇtchEx˚±i⁄0x02
);

215 
Machöe
::
	`£tupIDT
(0x03, (
vaddr
)
ˇtchEx˚±i⁄0x03
);

216 
Machöe
::
	`£tupIDT
(0x04, (
vaddr
)
ˇtchEx˚±i⁄0x04
);

217 
Machöe
::
	`£tupIDT
(0x05, (
vaddr
)
ˇtchEx˚±i⁄0x05
);

218 
Machöe
::
	`£tupIDT
(0x06, (
vaddr
)
ˇtchEx˚±i⁄0x06
);

219 
Machöe
::
	`£tupIDT
(0x07, (
vaddr
)
ˇtchEx˚±i⁄0x07
);

220 
Machöe
::
	`£tupIDT
(0x08, (
vaddr
)
ˇtchEx˚±i⁄0x08
);

221 
Machöe
::
	`£tupIDT
(0x09, (
vaddr
)
ˇtchEx˚±i⁄0x09
);

222 
Machöe
::
	`£tupIDT
(0x0a, (
vaddr
)
ˇtchEx˚±i⁄0x0a
);

223 
Machöe
::
	`£tupIDT
(0x0b, (
vaddr
)
ˇtchEx˚±i⁄Fau…0x0b
);

224 
Machöe
::
	`£tupIDT
(0x0c, (
vaddr
)
ˇtchEx˚±i⁄Fau…0x0c
);

225 
Machöe
::
	`£tupIDT
(0x0d, (
vaddr
)
ˇtchEx˚±i⁄Fau…0x0d
);

226 
Machöe
::
	`£tupIDT
(0x0e, (
vaddr
)
ˇtchEx˚±i⁄Fau…0x0e
);

227 
Machöe
::
	`£tupIDT
(0x10, (
vaddr
)
ˇtchEx˚±i⁄0x10
);

228 
Machöe
::
	`£tupIDT
(0xef, (
vaddr
)
ˇtchEx˚±i⁄0xef
);

229 
	`°¨tGdbCpu
(
b•Idx
);

230 
StdOut
.
	`¥öé
("Waôög f‹ Gdb c⁄√˘i⁄", 
kídl
);

231 
CPU
::
	`f‹˚Tøp
();

232 
	}
}

234 
	gGdbCpu
& 
	$gëCPU
(Ë{  
˝us
[
LoˇlPro˚ss‹
::
	`gëIndex
()]; 
	}
}

237 
ªg64_t
* 
gëAŒRegi°îs
(
mw‹d
 
˝uIdx
 = 
cTID
()-1) {

238  
˝us
[
˝uIdx
].
ªg64buf
;

241 
ªg64_t
* 
gëReg±r64
(
size_t
 
ªgno
, 
mw‹d
 
˝uIdx
 = 
cTID
()-1) {

242  
˝us
[
˝uIdx
].
ªg64buf
 + 
ªgno
;

244 
ªg32_t
* 
gëReg±r32
(
size_t
 
ªgno
, 
mw‹d
 
˝uIdx
 = 
cTID
()-1) {

245  
˝us
[
˝uIdx
].
ªg32buf
 + 
ªgno
;

248 
ªg64_t
 
gëReg64
(
size_t
 
ªgno
, 
mw‹d
 
˝uIdx
 = 
cTID
()-1) {

249  
˝us
[
˝uIdx
].
ªg64buf
[
ªgno
];

251 
ªg32_t
 
gëReg32
(
size_t
 
ªgno
, 
mw‹d
 
˝uIdx
 = 
cTID
()-1) {

252  
˝us
[
˝uIdx
].
ªg32buf
[
ªgno
];

254 
£tReg64
(
size_t
 
ªgno
, 
ªg64_t
 
vÆ
, 
mw‹d
 
˝uIdx
 = 
cTID
()-1) {

255 
˝us
[
˝uIdx
].
ªg64buf
[
ªgno
] = 
vÆ
;

257 
£tReg32
(
size_t
 
ªgno
, 
ªg32_t
 
vÆ
, 
mw‹d
 
˝uIdx
 = 
cTID
()-1) {

258 
˝us
[
˝uIdx
].
ªg32buf
[
ªgno
] = 
vÆ
;

264 
	gm≠
<
	gmw‹d
,> 
	gbpM≠
;

265 
mw‹d
 
	g_Unwöd_DebugHook_addr
 = 0;

266 
boﬁ
 
	g_Unwöd_DebugHook_bªak
 = 
Ál£
;

269 
boﬁ
 
	$h™dÀ_qSuµ‹ãd
(* 
ö
, * 
out
) {

270 i‡(!
	`°∫cmp
(
ö
, "Supported", 9)) {

271 
	`°r˝y
(
out
, "PacketSize=1000");

272  
åue
;

274  
Ál£
;

275 
	}
}

278 
boﬁ
 
	$h™dÀ_qC
(* 
ö
, * 
out
) {

279 i‡(*
ö
 == 'C') {

280 
thªadId
 = 
	`cTID
();

281 
out
[0] = 'Q'; out[1] = 'C';

282 
out
[2] = 
hexch¨s
[
thªadId
 >> 4];

283 
out
[3] = 
hexch¨s
[
thªadId
 % 16];

284 
out
[4] = 0;

285  
åue
;

287  
Ál£
;

288 
	}
}

291 
boﬁ
 
	$h™dÀ_qAâached
(* 
ö
, * 
out
) {

292 i‡(!
	`°∫cmp
(
ö
, "Attached", 8)) {

293 
out
[0] = '0';

294 
out
[1] = 0;

295  
åue
;

297  
Ál£
;

298 
	}
}

301 
boﬁ
 
	$h™dÀ_qOff£ts
(* 
ö
, * 
out
) {

302 i‡(!
	`°∫cmp
(
ö
, "Offsets", 7)) {

303 
	`°r˝y
(
out
, "Text=0;Data=0;Bss=0");

304  
åue
;

306  
Ál£
;

307 
	}
}

310 
boﬁ
 
	$h™dÀ_qSymbﬁ
(* 
ö
, * 
out
) {

311 i‡(!
	`°∫cmp
(
ö
, "Symbol::", 8)) {

312 
	`°r˝y
(
out
, "qSymbol:"); out += 8;

313 c⁄° * 
symbﬁName
 = "_Unwind_DebugHook";

314 
	`mem2hex
(
symbﬁName
, 
out
, 
	`°æí
(symbolName), 0);

315  
åue
;

317  
Ál£
;

318 
	}
}

321 
boﬁ
 
	$h™dÀ_qSymbﬁRe•⁄£
(* 
ö
, * 
out
) {

322 i‡(!
	`°∫cmp
(
ö
, "Symbol:", 7)) {

323 
ö
 = in + 7;

324 
addr
;

325 i‡(
	`hexToI¡
(&
ö
, &
addr
)) {

326 
buf
[32];

327 * 
ídbuf
 = 
	`hex2mem
(++
ö
, 
buf
, 
	`°æí
("_Unwind_DebugHook"), 0);

328 
ídbuf
[0] = 0;

329 
	`KASSERT1
(!
	`°rcmp
(
buf
, "_Unwind_DebugHook"), buf);

330 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),"): _Unwöd_DebugHookáddªs†", 
	`FmtHex
(
addr
), '/', 
buf
);

331 
_Unwöd_DebugHook_addr
 = 
addr
;

332 
	`°r˝y
(
out
, "OK");

333  
åue
;

336  
Ál£
;

337 
	}
}

340 
boﬁ
 
	$h™dÀ_qTSètus
(* 
ö
, * 
out
) {

341 i‡(!
	`°∫cmp
(
ö
, "TStatus", 7)) {

342 
	`puçackë
(
out
);

343  
åue
;

345  
Ál£
;

346 
	}
}

349 
boﬁ
 
	$h™dÀ_qfThªadInfo
(* 
ö
, * 
out
) {

350 i‡(!
	`°∫cmp
(
ö
, "fThreadInfo", 11)) {

351 
out
[0] = 'm'; ++out;

352 
mw‹d
 
i
 = 0; i < 
Machöe
::
	`gëPro˚ss‹Cou¡
(); ++i) {

353 i‡(
i
 > 0) {

354 
out
[0] = ',';

355 
out
 += 1;

357 
out
[0] = 
hexch¨s
[(
i
+1) >> 4];

358 
out
[1] = 
hexch¨s
[(
i
+1) % 16];

359 
out
 += 2;

361 
out
[0] = 0;

362  
åue
;

364  
Ál£
;

365 
	}
}

368 
boﬁ
 
	$h™dÀ_qsThªadInfo
(* 
ö
, * 
out
) {

369 i‡(!
	`°∫cmp
(
ö
, "sThreadInfo", 11)) {

370 
out
[0] = 'l';

371 
out
[1] = 0;

372  
åue
;

374  
Ál£
;

375 
	}
}

378 
boﬁ
 
	$h™dÀ_qThªadExåaInfo
(* 
ö
, * 
out
) {

379 c⁄° * 
°©es
[] = { "Unknown", "Stopped", "Running" };

380 i‡(!
	`°∫cmp
(
ö
, "ThreadExtraInfo", 15)) {

381 
ö
 += 16;

382 
thªadId
;

383 i‡(
	`hexToI¡
(&
ö
, &
thªadId
)) {

384 
öfo
[40];

385 
	`¢¥ötf
(
öfo
, 40, "CPU %lu [%s]", 
thªadId
-1, 
°©es
[
˝us
[thªadId-1].
°©e
]);

386 
	`mem2hex
(
öfo
, 
out
, 
	`°æí
(info), 0);

387  
åue
;

390  
Ál£
;

391 
	}
}

396 
boﬁ
 
	$h™dÀThªadAlive
(* 
ö
, * 
out
) {

397 
thªadId
;

398 i‡(
	`hexToI¡
(&
ö
, &
thªadId
)) {

399 i‡(
	`mw‹d
(
thªadId
Ë>1 && mw‹d—hªadIdË<
Machöe
::
	`gëPro˚ss‹Cou¡
()) {

400 
	`°r˝y
(
out
, "OK");

401  
åue
;

404 
	`°r˝y
(
out
, "E01");

405  
Ál£
;

406 
	}
}

409 
	gHtid
 = -2;

412 
boﬁ
 
h™dÀRós⁄T¨gëHÆãd
(* 
ö
, * 
out
, 
sigvÆ
, 
idx
 = 
	$cTID
()) {

413 i‡(
Htid
 != -2) {

414 
idx
 = 
Htid
;

415 
Htid
 = -2;

417 
out
[0] = 'T';

418 
out
[1] = 
hexch¨s
[
sigvÆ
 >> 4];

419 
out
[2] = 
hexch¨s
[
sigvÆ
 % 16];

420 
out
 += 3;

421 
	`°∫˝y
(
out
, "thread:", 7);

422 
out
 += 7;

423 
out
[0] = 
hexch¨s
[
idx
 >> 4];

424 
out
[1] = 
hexch¨s
[
idx
 % 16];

425 
out
 += 2;

426 
out
[0] = ';';

427 
out
[1] = 
hexch¨s
[
Reg
::
RIP
 >> 4];

428 
out
[2] = 
hexch¨s
[
Reg
::
RIP
 % 16];

429 
out
[3] = ':';

430 
out
 += 4;

431 
ªg64_t
 
vÆ
 = 
	`gëReg64
(
Reg
::
RIP
, 
idx
 - 1);

432 
out
 = 
	`mem2hex
((*)&
vÆ
, out, (
ªg64_t
), 0);

433 
out
[0] = ';';

434 
out
[1] = 0;

435  
åue
;

436 
	}
}

439 
boﬁ
 
h™dÀRódRegi°îs
(* 
ö
, * 
out
, 
mw‹d
 
idx
 = 
	$cTID
()) {

440 i‡(
Htid
 != -2) {

441 
idx
 = 
Htid
 - 1;

442 
Htid
 = -2;

444 
idx
 -= 1;

446 
	`mem2hex
((*)
	`gëAŒRegi°îs
(
idx
), 
out
, 
ªg64˙t
 * (
ªg64_t
Ë+ 
ªg32˙t
 * (
ªg32_t
), 0);

447  
åue
;

448 
	}
}

451 
boﬁ
 
h™dÀWrôeRegi°îs
(* 
ö
, * 
out
, 
mw‹d
 
idx
 = 
	$cTID
()) {

452 i‡(
Htid
 != -2) {

453 
idx
 = 
Htid
 - 1;

454 
Htid
 = -2;

456 
idx
 -= 1;

458 
	`hex2mem
(
ö
, (*)
	`gëAŒRegi°îs
(
idx
), 
ªg64˙t
 * (
ªg64_t
Ë+ 
ªg32˙t
 * (
ªg32_t
), 0);

459 
	`°r˝y
(
out
, "OK");

460  
åue
;

461 
	}
}

464 
boﬁ
 
h™dÀRódRegi°î
(* 
ö
, * 
out
, 
mw‹d
 
idx
 = 
	$cTID
()) {

465 i‡(
Htid
 != -2) {

466 
idx
 = 
Htid
 - 1;

467 
Htid
 = -2;

469 
idx
 -= 1;

471 
ªgno
;

472 i‡(
	`hexToI¡
(&
ö
, &
ªgno
) && *in++ == '=') {

473 i‡(
ªgno
 >0 &&Ñegnÿ< ()
ªg64˙t
) {

474 
ªg64_t
 
vÆ
 = 
	`gëReg64
(
ªgno
, 
idx
);

475 
	`mem2hex
((*)&
vÆ
, 
out
, (
ªg64_t
), 0);

476  
åue
;

478 
ªgno
 -
ªg64˙t
;

479 i‡(
ªgno
 >0 &&Ñegnÿ< ()
ªg32˙t
) {

480 
ªg32_t
 
vÆ
 = 
	`gëReg32
(
ªgno
, 
idx
);

481 
	`mem2hex
((*)&
vÆ
, 
out
, (
ªg32_t
), 0);

482  
åue
;

485 
	`°r˝y
(
out
, "E01");

486  
Ál£
;

487 
	}
}

490 
boﬁ
 
h™dÀWrôeRegi°î
(* 
ö
, * 
out
, 
mw‹d
 
idx
 = 
	$cTID
()) {

491 i‡(
Htid
 != -2) {

492 
idx
 = 
Htid
 - 1;

493 
Htid
 = -2;

495 
idx
 -= 1;

497 
ªgno
;

498 i‡(
	`hexToI¡
(&
ö
, &
ªgno
) && *in++ == '=') {

499 i‡(
ªgno
 >0 &&Ñegnÿ< ()
ªg64˙t
) {

500 
	`hex2mem
(
ö
, (*)
	`gëReg±r64
(
ªgno
, 
idx
), (
ªg64_t
), 0);

501 
	`°r˝y
(
out
, "OK");

502  
åue
;

504 
ªgno
 -
ªg64˙t
;

505 i‡(
ªgno
 >0 &&Ñegnÿ< ()
ªg32˙t
) {

506 
	`hex2mem
(
ö
, (*)
	`gëReg±r32
(
ªgno
, 
idx
), (
ªg32_t
), 0);

507 
	`°r˝y
(
out
, "OK");

508  
åue
;

511 
	`°r˝y
(
out
, "E01");

512  
Ál£
;

513 
	}
}

516 
boﬁ
 
	$h™dÀH
(* 
ö
, * 
out
) {

517 
›
 = *
ö
;

518 i‡(
›
 == 'g') {

519 ++
ö
;

520 
thªadId
;

521 i‡(
	`hexToI¡
(&
ö
, &
thªadId
)) {

522 i‡(
thªadId
 > 0) {

523 
Htid
 = 
thªadId
;

524 
	`°r˝y
(
out
, "OK");

525  
åue
;

529 
	`°r˝y
(
out
, "E01");

530  
Ál£
;

531 
	}
}

534 
boﬁ
 
	$h™dÀRódMem‹y
(* 
ö
, * 
out
) {

535 
addr
, 
Àngth
;

536 i‡(
	`hexToI¡
(&
ö
, &
addr
Ë&& *ö++ =',' && hexToI¡(&ö, &
Àngth
)) {

537 
	`mem2hex
((*)
addr
, 
out
, 
Àngth
, 1);

538 i‡(
gdbFau…H™dÀrCÆÀd
Ë
	`°r˝y
(
out
, "E01");

539  !
gdbFau…H™dÀrCÆÀd
;

541 
	`°r˝y
(
out
, "E01");

542  
Ál£
;

543 
	}
}

546 
boﬁ
 
	$h™dÀWrôeMem‹y
(* 
ö
, * 
out
) {

547 
addr
, 
Àngth
;

548 i‡(
	`hexToI¡
(&
ö
, &
addr
Ë&& *ö++ =',' && hexToI¡(&ö, &
Àngth
) && *in++ == ':') {

549 
	`hex2mem
(
ö
, (*)
addr
, 
Àngth
, 1);

550 i‡(
gdbFau…H™dÀrCÆÀd
Ë
	`°r˝y
(
out
, "E01");

551 
	`°r˝y
(
out
, "OK");

552  !
gdbFau…H™dÀrCÆÀd
;

554 
	`°r˝y
(
out
, "E01");

555  
Ál£
;

556 
	}
}

559 
boﬁ
 
	$h™dÀSëSo·Bªak
(* 
ö
, * 
out
) {

560 
addr
, 
Àngth
;

561 
	`hexToI¡
(&
ö
, &
addr
Ë&& *ö++ =',' && hexToI¡(&ö, &
Àngth
)) {

562 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),"): së bªakpoöà© ", 
	`FmtHex
(
addr
));

563 
gdbFau…H™dÀrCÆÀd
 = 0;

564 
gdbFau…H™dÀrE«bÀd
 = 1;

565 
›Code
 = 
	`gë_ch¨
((*)
addr
);

566 i‡(
gdbFau…H™dÀrCÆÀd
) ;

567 
bpM≠
[(
mw‹d
)
addr
] = 
›Code
;

568 
	`KASSERT1
(
Àngth
 == 1,Üength);

569 
	`£t_ch¨
((*)
addr
, 0xcc);

570 i‡(
gdbFau…H™dÀrCÆÀd
) ;

571 i‡((
mw‹d
)
addr
 =
_Unwöd_DebugHook_addr
) {

572 
_Unwöd_DebugHook_bªak
 = 
åue
;

573 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),"): _Unwind_DebugHook breakpoint set");

575 
gdbFau…H™dÀrE«bÀd
 = 0;

576 
	`°r˝y
(
out
, "OK");

577  
åue
;

579 
	`°r˝y
(
out
, "E01");

580  
Ál£
;

581 
	}
}

584 
boﬁ
 
	$h™dÀRemoveSo·Bªak
(* 
ö
, * 
out
) {

585 
addr
, 
Àngth
;

586 
	`hexToI¡
(&
ö
, &
addr
Ë&& *ö++ =',' && hexToI¡(&ö, &
Àngth
)) {

587 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),"):Ñemovêbªakpoöà© ", 
	`FmtHex
(
addr
));

588 i‡(
bpM≠
.
	`cou¡
((
mw‹d
)
addr
) == 0) ;

589 
gdbFau…H™dÀrCÆÀd
 = 0;

590 
gdbFau…H™dÀrE«bÀd
 = 1;

591 
	`£t_ch¨
((*)
addr
, 
bpM≠
[(
mw‹d
)addr]);

592 i‡(
gdbFau…H™dÀrCÆÀd
) ;

593 i‡((
mw‹d
)
addr
 =
_Unwöd_DebugHook_addr
) {

594 
_Unwöd_DebugHook_bªak
 = 
Ál£
;

595 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),"): _Unwind_DebugHook breakpointÑemoved");

597 
gdbFau…H™dÀrE«bÀd
 = 0;

598 
	`°r˝y
(
out
, "OK");

599  
åue
;

601 
	`°r˝y
(
out
, "E01");

602  
Ál£
;

603 
	}
}

608 
	sVC⁄t
 {

609 
	ma˘i⁄
;

610 
	msig«l
;

611 
	mtid
;

612 
VC⁄t
(Ë: 
a˘i⁄
(0) {}

613 
boﬁ
 
≥ndög
(Ë{  
a˘i⁄
 !0 && (
tid
 <0 ||Åid =
cTID
()); }

614 
∑r£
(* 
ö
, * 
out
) {

615 i‡(
°∫cmp
(
ö
, "C⁄t", 
°æí
("Cont"))) ;

616 
	mö
 += 4;

617 i‡(*
	mö
 == '?') {

618 
°r˝y
(
out
, "vCont;c;C;s;S");

621 
KASSERT0
(
a˘i⁄
 == 0);

622 i‡(*
	mö
 != ';') ;

623 ++
	mö
;

624 
	ma
 = *
ö
;

625 ++
	mö
;

626 i‡(
	ma
 ='C' || 
a
 == 'S') {

627 
a
 = 
tﬁowî
(a);

628 *
	mö
 =' 'Ë++
ö
;

629 i‡(!
hexToI¡
(&
ö
, &
sig«l
)) ;

631 
	msig«l
 = 0;

633 i‡(*
	mö
 == ':') {

634 ++
ö
;

635 i‡(!
hexToI¡
(&
ö
, &
tid
)) ;

637 
	mtid
 = -1;

640 
	mDBG
::
oué
(
DBG
::
GDBDebug
, "GDB(", 
cTID
(),"): T=", 
tid
, "á˘i⁄: ", 
a
, " sig«l: ", 
sig«l
);

641 i‡(
	ma
 !'c' && 
a
 != 's') ;

642 
	ma˘i⁄
 = 
a
;

644 
dëach
() {

645 
	ma˘i⁄
 ='c';

646 
	msig«l
 = 0;

647 
	mtid
 = -1;

649 } 
	gvC⁄t
;

651 
	gö
[4096];

652 
	gout
[4096];

654 
	$h™dÀPackë
(
sigvÆ
) {

655 
out
[0] = 0;

656 *
±r
 = 
	`gë∑ckë
(
ö
, 4096);

657 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),"):Ñecv ", 
±r
);

658 *
±r
++) {

660 i‡(
	`h™dÀ_qSuµ‹ãd
(
±r
, 
out
)) ;

661 i‡(
	`h™dÀ_qC
(
±r
, 
out
)) ;

662 i‡(
	`h™dÀ_qAâached
(
±r
, 
out
)) ;

663 i‡(
	`h™dÀ_qOff£ts
(
±r
, 
out
)) ;

664 i‡(
	`h™dÀ_qSymbﬁ
(
±r
, 
out
)) ;

665 i‡(
	`h™dÀ_qSymbﬁRe•⁄£
(
±r
, 
out
)) ;

666 i‡(
	`h™dÀ_qTSètus
(
±r
, 
out
)) ;

667 i‡(
	`h™dÀ_qfThªadInfo
(
±r
, 
out
)) ;

668 i‡(
	`h™dÀ_qsThªadInfo
(
±r
, 
out
)) ;

669 i‡(
	`h™dÀ_qThªadExåaInfo
(
±r
, 
out
)) ;

671 
	`°r˝y
(
out
, "qUnimplemented");

673 'v': 
vC⁄t
.
	`∑r£
(
±r
, 
out
); ;

674 'T': 
	`h™dÀThªadAlive
(
±r
, 
out
); ;

675 '?': 
	`h™dÀRós⁄T¨gëHÆãd
(
±r
, 
out
, 
sigvÆ
); ;

676 'g': 
	`h™dÀRódRegi°îs
(
±r
, 
out
); ;

677 'G': 
	`h™dÀWrôeRegi°îs
(
±r
, 
out
); ;

678 'p': 
	`h™dÀRódRegi°î
(
±r
, 
out
); ;

679 'P': 
	`h™dÀWrôeRegi°î
(
±r
, 
out
); ;

680 'H': 
	`h™dÀH
(
±r
, 
out
); 
Htid£t
;

681 'm': 
	`h™dÀRódMem‹y
(
±r
, 
out
); ;

682 'M': 
	`h™dÀWrôeMem‹y
(
±r
, 
out
); ;

683 'k': 
vC⁄t
.
	`dëach
(); ;

685 
ty≥
;

686 i‡(
	`hexToI¡
(&
±r
, &
ty≥
)) {

687 
±r
++;

688 
ty≥
) {

689 0: 
	`h™dÀSëSo·Bªak
(
±r
, 
out
); ;

690 : 
	`°r˝y
(
out
, "E01");

695 
ty≥
;

696 i‡(
	`hexToI¡
(&
±r
, &
ty≥
)) {

697 
±r
++;

698 
ty≥
) {

699 0: 
	`h™dÀRemoveSo·Bªak
(
±r
, 
out
); ;

700 : 
	`°r˝y
(
out
, "E01");

704 : 
	`°r˝y
(
out
, "E01");

706 
Htid
 = -2;

707 
Htid£t
:

709 i‡(
out
[0] !0Ë
	`puçackë
(out);

710 
	}
}

713 
SpöLock
 
	glock
;

714 
öt64_t
 
	gtcou¡î
 = 1;

715 vﬁ©ûê
öt64_t
 
	g£rvög
 = 1;

716 vﬁ©ûê
boﬁ
 
	gÆl°›
 = 
Ál£
;

719 
Thªad
* 
	gßvedThªad
 = 
nuŒ±r
;

720 
ScheduÀr
* 
	gßvedAfföôy
 = 
nuŒ±r
;

722 
	$£tGdbAfföôy
() {

723 i‡(!
ßvedThªad
) {

724 
ßvedThªad
 = 
LoˇlPro˚ss‹
::
	`gëCuºThªad
();

725 
ßvedAfföôy
 = 
ßvedThªad
->
	`gëAfföôy
();

726 
ßvedThªad
->
	`£tAfföôy
(
LoˇlPro˚ss‹
::
	`gëScheduÀr
());

727 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),") set GDBáffinity");

729 
	}
}

731 
	$ª£tGdbAfföôy
() {

732 i‡(
ßvedThªad
) {

733 
ßvedThªad
->
	`£tAfföôy
(
ßvedAfföôy
);

734 
ßvedThªad
 = 
nuŒ±r
;

735 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),")Ñeset GDBáffinity");

737 
	}
}

740 "C" 
	$h™dÀ_ex˚±i⁄
 (
öt64_t
 
vec
Ë
__n‹ëu∫
;

741 "C" 
	$h™dÀ_ex˚±i⁄
 (
öt64_t
 
vec
) {

742 
sigvÆ
;

743 
vec
) {

744 0: 
sigvÆ
 = 8; ;

745 1: 
sigvÆ
 = 5; ;

746 2: 
sigvÆ
 = 0; ;

747 3: 
sigvÆ
 = 5; ;

748 4: 
sigvÆ
 = 16; ;

749 5: 
sigvÆ
 = 16; ;

750 6: 
sigvÆ
 = 4; ;

751 7: 
sigvÆ
 = 8; ;

752 8: 
sigvÆ
 = 7; ;

753 9: 
sigvÆ
 = 11; ;

754 10: 
sigvÆ
 = 11; ;

755 11: 
sigvÆ
 = 11; ;

756 12: 
sigvÆ
 = 11; ;

757 13: 
sigvÆ
 = 11; ;

758 14: 
sigvÆ
 = 11; ;

759 16: 
sigvÆ
 = 7; ;

760 : 
sigvÆ
 = 7;

763 
LoˇlPro˚ss‹
::
	`lock
();

764 
	`gëCPU
().
°©e
 = 
GdbCpu
::
St›≥d
;

766 i‡(
vec
 == 3) {

767 
	`gëCPU
().
ªg64buf
[
Reg
::
RIP
] -= 1;

768 
	`KASSERT0
(*(*)
	`gëReg64
(
Reg
::
RIP
) == 0xCC);

771 
DBG
::
	`oué
(DBG::
GDBDebug
, "GDB(", 
	`cTID
(),"): vec=", 
vec
,

772 "ÉÊags=", 
	`FmtHex
(
	`gëReg32
(
Reg
::
EFLAGS
)),

773 "Ñù=", 
	`FmtHex
(
	`gëReg64
(
Reg
::
RIP
)));

775 i‡(
vec
 =
APIC
::
St›IPI
) {

776 
	`M≠≥dAPIC
()->
	`£ndEOI
();

780 
lock
.
	`acquúe
();

781 i‡(
£rvög
 - 
	`gëCPU
().
tickë
 > 0) {

782 
	`gëCPU
().
tickë
 = 
tcou¡î
;

783 ++
tcou¡î
;

785 
lock
.
	`ªÀa£
();

788 
	`gëCPU
().
tickë
 !
£rvög
Ë
CPU
::
	`Pau£
();

791 
Æl°›
 = 
åue
;

792 
mw‹d
 
i
 = 0; i < 
Machöe
::
	`gëPro˚ss‹Cou¡
(); i++) {

793 i‡(
˝us
[
i
].
°©e
 =
GdbCpu
::
Ru¬ög
) {

794 
Machöe
::
	`£ndIPI
(
i
, 
APIC
::
St›IPI
);

795 
˝us
[
i
].
°©e
 !
GdbCpu
::
St›≥d
Ë
CPU
::
	`Pau£
();

800 i‡(
vC⁄t
.
a˘i⁄
 != 0) {

801 
buf
[128];

802 i‡(
	`h™dÀRós⁄T¨gëHÆãd
(
nuŒ±r
, 
buf
, 
sigvÆ
)) {

803 
	`puçackë
(
buf
);

805 
vC⁄t
.
a˘i⁄
 = 0;

809 dÿ
	`h™dÀPackë
(
sigvÆ
); 
vC⁄t
.
a˘i⁄
 == 0);

812 
Æl°›
) {

815 
lock
.
	`acquúe
();

816 i‡(
£rvög
 - 
	`gëCPU
().
tickë
 > 0) {

817 
	`gëCPU
().
tickë
 = 
tcou¡î
;

818 ++
tcou¡î
;

820 
lock
.
	`ªÀa£
();

823 
	`gëCPU
().
tickë
 !
£rvög
Ë
CPU
::
	`Pau£
();

825 i‡(
vC⁄t
.
	`≥ndög
()) {

828 
ªg32_t
 
eÊags
 = 
	`gëReg32
(
Reg
::
EFLAGS
Ë& ~
TF
;

830 i‡(
vC⁄t
.
a˘i⁄
 == 's') {

831 
	`KASSERT1
(
vC⁄t
.
tid
 =
	`cTID
(), vCont.tid);

832 
eÊags
 =ÉÊag†| 
TF
;

833 
	`£tGdbAfföôy
();

834 } i‡(
vC⁄t
.
a˘i⁄
 == 'c') {

835 i‡(
_Unwöd_DebugHook_bªak
) {

836 
	`KASSERT1
(
vC⁄t
.
tid
 == -1, vCont.tid);

837 
Æl°›
 = 
Ál£
;

838 
	`£tGdbAfföôy
();

840 
	`KASSERT1
(
vC⁄t
.
tid
 == -1, vCont.tid);

841 
Æl°›
 = 
Ál£
;

842 
	`ª£tGdbAfföôy
();

846 
	`£tReg32
(
Reg
::
EFLAGS
, 
eÊags
);

847 ++
£rvög
;

851 ++
£rvög
;

854 
	`gëCPU
().
°©e
 = 
GdbCpu
::
Ru¬ög
;

855 
LoˇlPro˚ss‹
::
	`u∆ock
();

856 
	`ªsumeExecuti⁄
(&
	`gëCPU
());

857 
	}
}

860 "C" 
GdbCpu
* 
	$gëGdbCpu
() {

861  &
	`gëCPU
();

862 
	}
}

864 "C" 
mw‹d
 
	$gëGdbSèck
(
GdbCpu
* 
˝u
) {

865  
	`mw‹d
(
˝u
Ë+ 
GdbCpu
::
°ackSize
;

866 
	}
}

	@src/gdb/Gdb.h

1 #i‚de‡
_Gdb_h_


2 
	#_Gdb_h_


	)

4 
öôGdb
(
mw‹d
 
b•Idx
);

5 
°¨tGdbCpu
(
mw‹d
 
idx
);

	@src/generic/Bitmap.h

17 #i‚de‡
_Bôm≠_h_


18 
	#_Bôm≠_h_
 1

	)

20 
	~"gíîic/bôm™ù.h
"

22 
	gãm∂©e
<
size_t
 
	gX
> 
c⁄°ex¥
 
mw‹d
 
	$Bôm≠Em±yHñ≥r
(c⁄° 
mw‹d
* 
bôs
) {

23  
bôs
[
X
] | 
Bôm≠Em±yHñ≥r
<X-1>(bits);

24 
	}
}

26 
	gãm∂©e
<> 
c⁄°ex¥
 
mw‹d
 
	gBôm≠Em±yHñ≥r
<0>(c⁄° mw‹d* 
	gbôs
) {

27  
	gbôs
[0];

30 
	gãm∂©e
<
size_t
 
	gX
> 
c⁄°ex¥
 
mw‹d
 
	$Bôm≠FuŒHñ≥r
(c⁄° 
mw‹d
* 
bôs
) {

31  
bôs
[
X
] & 
Bôm≠FuŒHñ≥r
<X-1>(bits);

32 
	}
}

34 
	gãm∂©e
<> 
c⁄°ex¥
 
mw‹d
 
	gBôm≠FuŒHñ≥r
<0>(c⁄° mw‹d* 
	gbôs
) {

35  
	gbôs
[0];

38 
	gãm∂©e
<
size_t
 
	gX
> 
c⁄°ex¥
 
mw‹d
 
	$Bôm≠Cou¡Hñ≥r
(c⁄° 
mw‹d
* 
bôs
) {

39  
	`p›cou¡
(
bôs
[
X
]Ë+ 
Bôm≠Cou¡Hñ≥r
<X-1>(bits);

40 
	}
}

42 
	gãm∂©e
<> 
c⁄°ex¥
 
mw‹d
 
	gBôm≠Cou¡Hñ≥r
<0>(c⁄° mw‹d* 
	gbôs
) {

43  
p›cou¡
(
bôs
[0]);

46 
	gãm∂©e
<
size_t
 
	gB
 = 
bôsize
<
mw‹d
>()>

47 ˛as†
	cBôm≠
 {

48 c⁄° 
N
 = 
divup
(
B
,
bôsize
<
mw‹d
>());

49 
mw‹d
 
	mbôs
[
N
];

50 
	mpublic
:

51 
ex∂icô
 
	$Bôm≠
–
mw‹d
 
b
 = 0 ) { 
size_t
 
i
 = 0; i < 
N
; i +1Ë
bôs
[i] = b; }

52 
c⁄°ex¥
 
boﬁ
 
	$vÆid
–
mw‹d
 
idx
 ) {  idx < 
N
 * 
bôsize
<mw‹d>(); 
	}
}

53 
Bôm≠
 
	$fûÀd
(Ë{  
	`Bôm≠
(~
	`mw‹d
(0)); 
	}
}

54 
	gãm∂©e
<
boﬁ
 
	g©omic
=
Ál£
> 
	$£t
 ( 
mw‹d
 
idx
 ) {

55 
bô_£t
<
©omic
>(
bôs
[
idx
 / 
bôsize
<
mw‹d
>()], idx % bitsize<mword>());

56 
	}
}

57 
	gãm∂©e
<
boﬁ
 
	g©omic
=
Ál£
> 
	$˛ór
–
mw‹d
 
idx
 ) {

58 
bô_˛r
<
©omic
>(
bôs
[
idx
 / 
bôsize
<
mw‹d
>()], idx % bitsize<mword>());

59 
	}
}

60 
	gãm∂©e
<
boﬁ
 
	g©omic
=
Ál£
> 
	$Êù
 ( 
mw‹d
 
idx
 ) {

61 
bô_Êp
<
©omic
>(
bôs
[
idx
 / 
bôsize
<
mw‹d
>()], idx % bitsize<mword>());

62 
	}
}

63 
c⁄°ex¥
 
boﬁ
 
	$ã°
–
mw‹d
 
idx
 ) const {

64  
bôs
[
idx
 / 
bôsize
<
mw‹d
>()] & (
	`mw‹d
(1) << (idx % bitsize<mword>()));

65 
	}
}

66 
c⁄°ex¥
 
boﬁ
 
	$em±y
(Ëc⁄° {  
Bôm≠Em±yHñ≥r
<
N
-1>(
bôs
Ë=
	`mw‹d
(0); 
	}
}

67 
c⁄°ex¥
 
boﬁ
 
	$fuŒ
(Ëc⁄° {  
Bôm≠FuŒHñ≥r
<
N
-1>(
bôs
Ë=~
	`mw‹d
(0); 
	}
}

68 
c⁄°ex¥
 
mw‹d
 
	$cou¡
(Ëc⁄° {  
Bôm≠Cou¡Hñ≥r
<
N
-1>(
bôs
); 
	}
}

69 
c⁄°ex¥
 
mw‹d
 
	$föd£t
(Ëc⁄° {  
mu…isˇn
<
N
,
åue
>(
bôs
); 
	}
}

70 
c⁄°ex¥
 
mw‹d
 
	$föd£t_ªv
(Ëc⁄° {  
mu…isˇn_r
<
N
,
åue
>(
bôs
); 
	}
}

71 
c⁄°ex¥
 
mw‹d
 
	$föd˛ór
(Ëc⁄° {  
mu…isˇn
<
N
,
Ál£
>(
bôs
); 
	}
}

74 
	gãm∂©e
<>

75 
˛ass
 
	gBôm≠
<
	gbôsize
<
	gmw‹d
>()> {

76 
mw‹d
 
	gbôs
;

77 
	gpublic
:

78 
c⁄°ex¥
 
boﬁ
 
vÆid
(
mw‹d
 
idx
Ë{  idx < 
bôsize
<mword>(); }

79 
c⁄°ex¥
 
ex∂icô
 
Bôm≠
–
mw‹d
 
b
 = 0 ) : 
bôs
(b) {}

80 
ãm∂©e
<
boﬁ
 
©omic
=
Ál£
> 
£t
 ( 
mw‹d
 
idx
 ) {

81 
bô_£t
<
©omic
>(
bôs
, 
idx
);

83 
	gãm∂©e
<
boﬁ
 
	g©omic
=
Ál£
> 
˛ór
–
mw‹d
 
idx
 ) {

84 
bô_˛r
<
©omic
>(
bôs
, 
idx
);

86 
	gãm∂©e
<
boﬁ
 
	g©omic
=
Ál£
> 
Êù
 ( 
mw‹d
 
idx
 ) {

87 
bô_Êp
<
©omic
>(
bôs
, 
idx
);

89 
c⁄°ex¥
 
boﬁ
 
ã°
–
mw‹d
 
idx
 ) const {

90  
	gbôs
 & (
mw‹d
(1Ë<< 
	gidx
);

92 
c⁄°ex¥
 
boﬁ
 
em±y
(Ëc⁄° {  
	gbôs
 =
mw‹d
(0); }

93 
c⁄°ex¥
 
boﬁ
 
fuŒ
(Ëc⁄° {  
	gbôs
 =~
mw‹d
(0); }

94 
c⁄°ex¥
 
mw‹d
 
cou¡
(Ëc⁄° {  
p›cou¡
(
bôs
); }

95 
mw‹d
 
föd£t
(Ëc⁄° {  
lsbc⁄d
(
bôs
); }

96 
mw‹d
 
föd£t_ªv
(Ëc⁄° {  
msbc⁄d
(
bôs
); }

97 
mw‹d
 
föd˛ór
(Ëc⁄° {  
lsbc⁄d
(~
bôs
); }

98 
mw‹d
 
föd√xt£t
–mw‹d 
idx
 = 0 ) c⁄° {  
lsbc⁄d
–
bôs
 & ~
bômask
<mword>(idx) ); }

103 
	gãm∂©e
<
size_t
 
	gB
, size_à
	gW
>

104 ˛as†
	cHõørchiˇlBôm≠
 {

105 
°©ic_as£π
–
B
 >
bôsize
<
mw‹d
>(), "templateÖarameter BÜessÅhan word size");

106 c⁄° 
size_t
 
	mN
 = 
divup
(
B
, 
bôsize
<
mw‹d
>());

107 c⁄° 
size_t
 
	mlogB
 = 
Êo‹log2
(
B
);

108 
°©ic_as£π
–
B
 =
pow2
<
size_t
>(
logB
), "templateÖarameter BÇotáÖower of 2" );

109 
°©ic_as£π
–
W
 >
logB
, "templateÖarameter W smallerÅhanÜog B" );

110 
	mBôm≠
<
	mB
>* 
	mbôm≠s
[
divup
(
W
,
logB
)];

111 
size_t
 
	mt›Àvñ
;

112 
c⁄°ex¥
 
size_t
 
	$size
–
size_t
 
bôcou¡
 ) {

113  
bôcou¡
 < 
B
 ? B : 
	`divup
(bôcou¡,BË+ 
	`size
(divup(bitcount,B));

115 
public
:

116 
	$HõørchiˇlBôm≠
(Ë: 
	$t›Àvñ
(0) {

117 
size_t
 
i
 = 0; i < 
	`divup
(
W
,
logB
); i +1Ë
bôm≠s
[i] = 
nuŒ±r
;

118 
	}
}

119 
c⁄°ex¥
 
size_t
 
	$Ælocsize
–
size_t
 
bôcou¡
 ) {

120  (
Bôm≠
<
B
>Ë* 
	`size
(
bôcou¡
);

121 
	}
}

122 
	$öô
–
size_t
 
bôcou¡
, 
buÂå_t
 
p
 ) {

123 
bôm≠s
[0] = 
	`√w
 (
p
Ë
Bôm≠
<
B
>[
	`size
(
bôcou¡
)];

125 
t›Àvñ
 += 1;

126 
bôcou¡
 = 
	`divup
(bôcou¡,
B
);

127 
bôm≠s
[
t›Àvñ
] = bôm≠s[t›Àvñ-1] + 
bôcou¡
;

128 } 
bôcou¡
 > 1);

129 
	}
}

130 
	$˛⁄e
–
size_t
 
bôcou¡
, 
buÂå_t
 
p
 ) {

131 
bôm≠s
[0] = (
Bôm≠
<
B
>*)
p
;

133 
t›Àvñ
 += 1;

134 
bôcou¡
 = 
	`divup
(bôcou¡,
B
);

135 
bôm≠s
[
t›Àvñ
] = bôm≠s[t›Àvñ-1] + 
bôcou¡
;

136 } 
bôcou¡
 > 1);

137 
	}
}

138 
	$£t
–
size_t
 
idx
 ) {

139 
size_t
 
i
 = 0; i <
t›Àvñ
; i += 1) {

140 
boﬁ
 
d⁄e
 = !
bôm≠s
[
i
][
idx
 / 
B
].
	`em±y
();

141 
bôm≠s
[
i
][
idx
 / 
B
].
	`£t
(idx % B);

142 
	`¶ow∑th
(
d⁄e
) ;

143 
idx
 = idx / 
B
;

145 
	}
}

146 
	$˛ór
–
size_t
 
idx
 ) {

147 
size_t
 
i
 = 0; i <
t›Àvñ
; i += 1) {

148 
bôm≠s
[
i
][
idx
 / 
B
].
	`˛ór
(idx % B);

149 
	`¶ow∑th
(!
bôm≠s
[
i
][
idx
 / 
B
].
	`em±y
()) ;

150 
idx
 = idx / 
B
;

152 
	}
}

153 
c⁄°ex¥
 
boﬁ
 
	$ã°
–
size_t
 
idx
 ) const {

154  
bôm≠s
[0][
idx
 / 
B
].
	`ã°
(idx % B);

155 
	}
}

156 
c⁄°ex¥
 
boﬁ
 
	$em±y
() const {

157  
bôm≠s
[
t›Àvñ
][0].
	`em±y
();

158 
	}
}

159 
size_t
 
	$föd£t
() const {

160 
size_t
 
idx
 = 0;

161 
size_t
 
i
 = 
t›Àvñ
;; i -= 1) {

162 
size_t
 
ldx
 = 
bôm≠s
[
i
][
idx
].
	`föd£t
();

163 
	`¶ow∑th
(
ldx
 =
B
Ë 
limô
<
mw‹d
>();

164 
idx
 = idx * 
B
 + 
ldx
;

165 
	`¶ow∑th
(
i
 =0Ë 
idx
;

167 
	}
}

168 
size_t
 
	$föd£t_ªv
() const {

169 
size_t
 
idx
 = 0;

170 
size_t
 
i
 = 
t›Àvñ
;; i -= 1) {

171 
size_t
 
ldx
 = 
bôm≠s
[
i
][
idx
].
	`föd£t_ªv
();

172 
	`¶ow∑th
(
ldx
 =
B
Ë 
limô
<
mw‹d
>();

173 
idx
 = idx * 
B
 + 
ldx
;

174 
	`¶ow∑th
(
i
 =0Ë 
idx
;

176 
	}
}

177 
size_t
 
	$gëønge
–
size_t
 
idx
, size_à
bôcou¡
 ) const {

178 
boﬁ
 
is£t
 = 
	`ã°
(
idx
);

180 
idx
 += 1;

181 } 
idx
 < 
bôcou¡
 && 
	`ã°
(idxË=
is£t
);

182  
idx
;

183 
	}
}

	@src/generic/Buffers.h

17 #i‚de‡
_Buf„rs_h_


18 
	#_Buf„rs_h_
 1

	)

20 
	~"gíîic/basics.h
"

22 
	~<¨øy
>

23 
	~<queue
>

25 
	gãm∂©e
<
ty≥«me
 
	gEÀmít
, 
size_t
 
	gN
>

26 
˛ass
 
	gFixedAºay
 : 
public
 
¨øy
<
EÀmít
,
	gN
> {

27 
	gpublic
:

28 
EÀmít
 
	tEÀmítTy≥
;

29 
ex∂icô
 
FixedAºay
–
size_t
 ) {}

32 
	gãm∂©e
<
ty≥«me
 
	gEÀmít
,Åy≥«mê
	gAŒoˇt‹
>

33 ˛as†
	cRu¡imeAºay
 {

34 
AŒoˇt‹
 
	mÆloc
;

35 
EÀmít
* 
	mbuf„r
;

36 
size_t
 
	mmax
;

37 
	mpublic
:

38 
EÀmít
 
	tEÀmítTy≥
;

39 
ex∂icô
 
	$Ru¡imeAºay
–
size_t
 
N
, 
EÀmít
* 
±r
 = 
nuŒ±r
 )

40 : 
	`Æloc
(), 
	`buf„r
(
Æloc
.
	`Æloˇã
(
N
)), 
	$max
(
N
Ë{ 
	`GENASSERT0
(N); }

41 ~
	$Ru¡imeAºay
(Ë{ 
Æloc
.
	`dóŒoˇã
(
buf„r
, 
max
); 
	}
}

42 
size_t
 
	$max_size
(Ëc⁄° {  
max
; 
	}
}

43 
	gEÀmít
& 
	g›î©‹
[] (
size_t
 
	gi
Ë{  
	gbuf„r
[
i
]; }

44 c⁄° 
	gEÀmít
& 
	g›î©‹
[] (
size_t
 
	gi
Ëc⁄° {  
	gbuf„r
[
i
]; }

47 
	gãm∂©e
<
ty≥«me
 
	gAºay
>

48 ˛as†
	cRögBuf„r
 {

49 
size_t
 
	m√xt
;

50 
size_t
 
	mcou¡
;

51 
Aºay
 
	m¨øy
;

52 
	mpublic
:

53 
ty≥«me
 
	tAºay
::
	tEÀmítTy≥
 
	tEÀmít
;

54 
ex∂icô
 
	$RögBuf„r
–
size_t
 
N
 = 0 )

55 : 
	`√xt
(0), 
	`cou¡
(0), 
	$¨øy
(
N
) {}

56 
size_t
 
	$size
(Ëc⁄° {  
cou¡
; 
	}
}

57 
size_t
 
	$max_size
(Ëc⁄° {  
¨øy
.
	`max_size
(); 
	}
}

58 
boﬁ
 
	$em±y
(Ëc⁄° {  
	`size
(Ë=0; 
	}
}

59 
boﬁ
 
	$fuŒ
(Ëc⁄° {  
	`size
(Ë=
	`max_size
(); 
	}
}

60 
	gEÀmít
& 
	$‰⁄t
() {

61 
	`GENASSERT0
(!
	`em±y
());

62  
¨øy
[
√xt
];

63 
	}
}

64 c⁄° 
	gEÀmít
& 
	$‰⁄t
() const {

65 
	`GENASSERT0
(!
	`em±y
());

66  
¨øy
[
√xt
];

67 
	}
}

68 
	gEÀmít
& 
	$back
() {

69 
	`GENASSERT0
(!
	`em±y
());

70  
¨øy
[(
√xt
 + 
cou¡
 - 1Ë% 
	`max_size
()];

71 
	}
}

72 c⁄° 
	gEÀmít
& 
	$back
() const {

73 
	`GENASSERT0
(!
	`em±y
());

74  
¨øy
[(
√xt
 + 
cou¡
 - 1Ë% 
	`max_size
()];

75 
	}
}

76 
	$push
–c⁄° 
EÀmít
& 
x
 ) {

77 
	`GENASSERT0
(!
	`fuŒ
());

78 
¨øy
[(
√xt
 + 
cou¡
Ë% 
	`max_size
()] = 
x
;

79 
cou¡
 += 1;

80 
	}
}

81 
	$p›
() {

82 
	`GENASSERT0
(!
	`em±y
());

83 
√xt
 = (√xà+ 1Ë% 
	`max_size
();

84 
cou¡
 -= 1;

85 
	}
}

88 
	gãm∂©e
<
ty≥«me
 
	gEÀmít
, 
size_t
 
	gN
>

89 
˛ass
 
	gFixedRögBuf„r
 : 
public
 
RögBuf„r
<
FixedAºay
<
EÀmít
,
	gN
>> {

90 
	gpublic
:

91 
ex∂icô
 
FixedRögBuf„r
(
size_t
) {}

94 
	gãm∂©e
<
ty≥«me
 
	gEÀmít
,Åy≥«mê
	gAŒoˇt‹
>

95 
˛ass
 
	gRu¡imeRögBuf„r
 : 
public
 
RögBuf„r
<
Ru¡imeAºay
<
EÀmít
,
	gAŒoˇt‹
>> {

96 
	gpublic
:

97 
ex∂icô
 
Ru¡imeRögBuf„r
(
size_t
 
N
Ë: 
RögBuf„r
<
Ru¡imeAºay
<
EÀmít
,
	gAŒoˇt‹
>>(
	gN
) {}

100 
	gãm∂©e
<
ty≥«me
 
	gEÀmít
,Åy≥«mê
	gAŒoˇt‹
>

101 
˛ass
 
	gQueueBuf„r
 : 
public
 
queue
<
EÀmít
,
	gdeque
<
	gEÀmít
,
	gAŒoˇt‹
>> {

102 
usög
 
	gba£˛ass
 = 
queue
<
EÀmít
,
	gdeque
<
	gEÀmít
,
	gAŒoˇt‹
>>;

103 
size_t
 
	gmax
;

104 
	gpublic
:

105 
QueueBuf„r
–
size_t
 
N
 ) : 
max
(NË{ 
GENASSERT0
(N); }

106 
boﬁ
 
fuŒ
(Ëc⁄° {  
	gba£˛ass
::
size
(Ë=
max
; }

107 
size_t
 
max_size
(Ëc⁄° {  
	gmax
; }

	@src/generic/EmbeddedContainers.h

17 #i‚de‡
_EmbeddedC⁄èöî_h_


18 
	#_EmbeddedC⁄èöî_h_
 1

	)

20 
	~"gíîic/basics.h
"

22 
	gãm∂©e
<
ty≥«me
 
	gT
,
	gID
=0> cœs†
	cEmbeddedSèck
 {

23 
public
:

24 ˛as†
	cLök
 {

25 
‰õnd
 
˛ass
 
EmbeddedSèck
<
T
,
ID
>;

26 
T
* 
	m√xt
;

27 
	mpublic
:

28 
c⁄°ex¥
 
Lök
(Ë: 
√xt
(
nuŒ±r
) {}

29 
boﬁ
 
⁄Sèck
(Ë{  
√xt
 !
nuŒ±r
; }

30 } 
	g__∑cked
;

32 
	g¥iv©e
:

33 
T
* 
hód
;

35 
	gpublic
:

36 
	$EmbeddedSèck
(Ë: 
	$hód
(
nuŒ±r
Ë{
	}
}

37 
boﬁ
 
	$em±y
(Ëc⁄° {  
hód
 =
nuŒ±r
; 
	}
}

39 
T
* 
	$≥ek
(Ë{  
hód
; 
	}
}

40 c⁄° 
T
* 
	$≥ek
(Ëc⁄° {  
hód
; 
	}
}

42 
T
* 
	$√xt
–
T
& 
ñem
Ë{ ÉÀm.
Lök
::
√xt
; 
	}
}

43 c⁄° 
T
* 
	$√xt
(c⁄° 
T
& 
ñem
Ë{ ÉÀm.
Lök
::
√xt
; 
	}
}

45 
	$push
(
T
& 
ñem
) {

46 
	`GENASSERT1
(!
ñem
.
	`⁄Sèck
(), &elem);

47 
ñem
.
Lök
::
√xt
 = 
hód
;

48 
hód
 = 
ñem
;

49 
	}
}

50 
	$push
(
T
& 
fú°
, T& 
œ°
) {

51 
	`GENASSERT1
(!
œ°
.
	`⁄Sèck
(), &
fú°
);

52 
œ°
.
Lök
::
√xt
 = 
hód
;

53 
hód
 = 
fú°
;

54 
	}
}

55 
T
* 
	$p›
(
size_t
 
cou¡
 = 1) {

56 
	`GENASSERT1
(!
	`em±y
(), 
this
);

57 
T
* 
œ°
 = 
hód
;

58 
size_t
 
i
 = 0; i < 
cou¡
; i += 1) {

59 i‡(
	`√xt
(*
œ°
Ë=
nuŒ±r
) ;

60 
œ°
 = 
	`√xt
(*last);

62 
hód
 = 
	`√xt
(*
œ°
);

63 
œ°
->
Lök
::
√xt
 = 
nuŒ±r
;

64  
œ°
;

65 
	}
}

66 } 
	g__∑cked
;

69 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gID
=0> cœs†
	cEmbeddedQueue
 {

70 
public
:

71 ˛as†
	cLök
 {

72 
‰õnd
 
˛ass
 
EmbeddedQueue
<
T
,
ID
>;

73 
T
* 
	m√xt
;

74 } 
	g__∑cked
;

76 
	g¥iv©e
:

77 
T
* 
hód
;

78 
T
* 
	gèû
;

80 
	gpublic
:

81 
	$EmbeddedQueue
(Ë: 
	`hód
(
nuŒ±r
), 
	$èû
(
nuŒ±r
Ë{
	}
}

82 
boﬁ
 
	$em±y
() const {

83 
	`GENASSERT1
((
hód
 =
nuŒ±r
Ë=(
èû
 =nuŒ±r), 
this
);

84  
hód
 =
nuŒ±r
;

85 
	}
}

87 
T
* 
	$≥ek_‰⁄t
(Ë{  
hód
; 
	}
}

88 c⁄° 
T
* 
	$≥ek_‰⁄t
(Ëc⁄° {  
hód
; 
	}
}

89 
T
* 
	$≥ek_back
(Ë{  
èû
; 
	}
}

90 c⁄° 
T
* 
	$≥ek_back
(Ëc⁄° {  
èû
; 
	}
}

92 
T
* 
	$√xt
–
T
& 
ñem
Ë{ ÉÀm.
Lök
::
√xt
; 
	}
}

93 c⁄° 
T
* 
	$√xt
(c⁄° 
T
& 
ñem
Ë{ ÉÀm.
Lök
::
√xt
; 
	}
}

95 
	$push
(
T
& 
ñem
) {

96 i‡(!
hód
Ëhód = &
ñem
;

98 
	`GENASSERT1
(
èû
 !
nuŒ±r
, 
this
);

99 
èû
->
Lök
::
√xt
 = &
ñem
;

101 
èû
 = &
ñem
;

102 
	}
}

103 
	$push
(
T
& 
fú°
, T& 
œ°
) {

104 i‡(!
hód
Ëhód = &
fú°
;

106 
	`GENASSERT1
(
èû
 !
nuŒ±r
, 
this
);

107 
èû
->
Lök
::
√xt
 = &
fú°
;

109 
èû
 = &
œ°
;

110 
	}
}

111 
T
* 
	$p›
(
size_t
 
cou¡
 = 1) {

112 
	`GENASSERT1
(!
	`em±y
(), 
this
);

113 
T
* 
œ°
 = 
hód
;

114 
size_t
 
i
 = 0; i < 
cou¡
; i += 1) {

115 i‡(
	`√xt
(*
œ°
Ë=
nuŒ±r
) ;

116 
œ°
 = 
	`√xt
(*last);

118 
hód
 = 
	`√xt
(*
œ°
);

119 i‡(
èû
 =
œ°
Ëèû = 
nuŒ±r
;

120  
œ°
;

121 
	}
}

122 
	$å™s„r
(
EmbeddedQueue
& 
eq
, 
size_t
 
cou¡
) {

123 
T
* 
fú°
 = 
eq
.
	`≥ek_‰⁄t
();

124 
T
* 
œ°
 = 
eq
.
	`p›
(
cou¡
);

125 
	`push
(*
fú°
, *
œ°
);

126 
	}
}

127 } 
	g__∑cked
;

130 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gID
=0> cœs†
	cEmbeddedLi°
 {

131 
public
:

132 ˛as†
	cLök
 {

133 
‰õnd
 
˛ass
 
EmbeddedLi°
<
T
,
ID
>;

134 
Lök
* 
	m¥ev
;

135 
Lök
* 
	m√xt
;

136 
	mpublic
:

137 
c⁄°ex¥
 
Lök
(Ë: 
¥ev
(
nuŒ±r
), 
√xt
(nullptr) {}

138 
boﬁ
 
⁄Li°
() {

139 
GENASSERT1
((
¥ev
 =
nuŒ±r
Ë=(
√xt
 =nuŒ±r), 
this
);

140  
	m√xt
 !
nuŒ±r
;

142 } 
	g__∑cked
;

144 
	g¥iv©e
:

145 
Lök
 
™ch‹
;

147 
	gpublic
:

148 
	$EmbeddedLi°
(Ë{ 
™ch‹
.
√xt
 =ánch‹.
¥ev
 = &™ch‹; 
	}
}

150 
boﬁ
 
	$em±y
(Ëc⁄° {  &
™ch‹
 =™ch‹.
√xt
; 
	}
}

151 
Lök
* 
	$„n˚
(Ë{  &
™ch‹
; 
	}
}

152 c⁄° 
Lök
* 
	$„n˚
(Ëc⁄° {  &
™ch‹
; 
	}
}

154 
T
* 
	$‰⁄t
(Ë{  (
T
*)
™ch‹
.
√xt
; 
	}
}

155 c⁄° 
T
* 
	$‰⁄t
(Ëc⁄° {  (c⁄° 
T
*)
™ch‹
.
√xt
; 
	}
}

156 
T
* 
	$back
(Ë{  (
T
*)
™ch‹
.
¥ev
; 
	}
}

157 c⁄° 
T
* 
	$back
(Ëc⁄° {  (c⁄° 
T
*)
™ch‹
.
¥ev
; 
	}
}

159 
T
* 
	$√xt
–
T
& 
ñem
Ë{  (T*ÎÀm.
Lök
::
√xt
; 
	}
}

160 c⁄° 
T
* 
	$√xt
(c⁄° 
T
& 
ñem
Ë{  (c⁄° T*ÎÀm.
Lök
::
√xt
; 
	}
}

161 
T
* 
	$¥ev
–
T
& 
ñem
Ë{  (T*ÎÀm.
Lök
::
¥ev
; 
	}
}

162 c⁄° 
T
* 
	$¥ev
(c⁄° 
T
& 
ñem
Ë{  (c⁄° T*ÎÀm.
Lök
::
¥ev
; 
	}
}

164 
	$ö£π_bef‹e
(
T
& 
√xt
, T& 
ñem
) {

165 
	`GENASSERT1
(!
ñem
.
	`⁄Li°
(), &elem);

166 
	`GENASSERT1
(
√xt
.
	`⁄Li°
(), &
¥ev
);

167 
√xt
.
Lök
::
¥ev
->Lök::√xà&
ñem
;

168 
ñem
.
Lök
::
¥ev
 = 
√xt
.Link::prev;

169 
√xt
.
Lök
::
¥ev
 = &
ñem
;

170 
ñem
.
Lök
::
√xt
 = &next;

171 
	}
}

173 
	$ö£π_a·î
(
T
& 
¥ev
, T& 
ñem
) {

174 
	`GENASSERT1
(!
ñem
.
	`⁄Li°
(), &elem);

175 
	`GENASSERT1
(
¥ev
.
	`⁄Li°
(), &prev);

176 
¥ev
.
Lök
::
√xt
->Lök::¥ev = &
ñem
;

177 
ñem
.
Lök
::
√xt
 = 
¥ev
.Link::next;

178 
¥ev
.
Lök
::
√xt
 = &
ñem
;

179 
ñem
.
Lök
::
¥ev
 = &prev;

180 
	}
}

182 
	$ö£π_a·î
(
T
& 
¥ev
, T& 
fú°
, T&
œ°
) {

183 
	`GENASSERT1
(
fú°
.
Lök
::
¥ev
 =
nuŒ±r
, &first);

184 
	`GENASSERT1
(
œ°
.
Lök
::
√xt
 =
nuŒ±r
, &last);

185 
	`GENASSERT1
(
¥ev
.
	`⁄Li°
(), &prev);

186 
¥ev
.
Lök
::
√xt
->Lök::¥ev = &
œ°
;

187 
œ°
.
Lök
::
√xt
 = 
¥ev
.Link::next;

188 
¥ev
.
Lök
::
√xt
 = &
fú°
;

189 
fú°
.
Lök
::
¥ev
 = &prev;

190 
	}
}

192 
T
* 
	$ªmove
(
T
& 
ñem
) {

193 
	`GENASSERT1
(
ñem
.
	`⁄Li°
(), &elem);

194 
ñem
.
Lök
::
¥ev
->Lök::
√xt
 =Élem.Link::next;

195 
ñem
.
Lök
::
√xt
->Lök::
¥ev
 =Élem.Link::prev;

196 
ñem
.
Lök
::
¥ev
 = 
nuŒ±r
;

197 
ñem
.
Lök
::
√xt
 = 
nuŒ±r
;

198  &
ñem
;

199 
	}
}

201 
T
* 
	$ªmove
(
T
& 
fú°
, 
size_t
& 
cou¡
) {

202 
	`GENASSERT1
(
fú°
.
	`⁄Li°
(), &first);

203 
T
* 
œ°
 = &
fú°
;

204 
size_t
 
i
 = 0; i < 
cou¡
; i += 1) {

205 i‡(
	`√xt
(*
œ°
Ë=
	`„n˚
()Ë
cou¡
 = 
i
;

206 
œ°
 = 
	`√xt
(*last);

208 
fú°
.
Lök
::
¥ev
->Lök::
√xt
 = 
œ°
->Link::next;

209 
œ°
->
Lök
::
√xt
->Lök::
¥ev
 = 
fú°
.Link::prev;

210 
fú°
.
Lök
::
¥ev
 = 
nuŒ±r
;

211 
œ°
->
Lök
::
√xt
 = 
nuŒ±r
;

212  
œ°
;

213 
	}
}

215 
	$push_‰⁄t
(
T
& 
ñem
Ë{ 
	`ö£π_bef‹e
(*
	`‰⁄t
(),ÉÀm); 
	}
}

216 
	$push_back
(
T
& 
ñem
Ë{ 
	`ö£π_a·î
 (*
	`back
(),ÉÀm); 
	}
}

217 
	$•li˚_back
(
T
& 
fú°
, T&
œ°
Ë{ 
	`ö£π_a·î
(*
	`back
(), fú°,Üa°); 
	}
}

219 
T
* 
	$p›_‰⁄t
(Ë{ 
	`GENASSERT1
(!
	`em±y
(), 
this
);  
	`ªmove
(*
	`‰⁄t
()); 
	}
}

220 
T
* 
	$p›_back
(Ë{ 
	`GENASSERT1
(!
	`em±y
(), 
this
);  
	`ªmove
(*
	`back
()); 
	}
}

222 
T
* 
	$•lô_‰⁄t
(
size_t
& 
cou¡
) {

223 
	`GENASSERT1
(!
	`em±y
(), 
this
);

224  
	`ªmove
(*
	`‰⁄t
(), 
cou¡
);

225 
	}
}

227 
	$å™s„r
(
EmbeddedLi°
& 
ñ
, 
size_t
& 
cou¡
) {

228 
T
* 
fú°
 = 
ñ
.
	`‰⁄t
();

229 
T
* 
œ°
 = 
ñ
.
	`•lô_‰⁄t
(
cou¡
);

230 
	`•li˚_back
(*
fú°
, *
œ°
);

231 
	}
}

232 } 
	g__∑cked
;

	@src/generic/ManagedArray.h

17 #i‚de‡
_M™agedAºay_h_


18 
	#_M™agedAºay_h_
 1

	)

20 
	~"gíîic/basics.h
"

22 
	~<ve˘‹
>

27 
	gãm∂©e
<
ty≥«me
 
	gT
,Åem∂©e<
	gty≥«me
> 
˛ass
 
	gAŒoc
>

28 ˛as†
	cM™agedAºay
 {

29 
	sFªe
 {

30 
Fªe
* 
	m√xt
;

32 
°©ic_as£π
((
T
Ë>(
Fªe
), "free stack condition");

33 
	gAŒoc
<
	gT
> 
	gÆloˇt‹
;

34 
T
* 
	gd©a
;

35 
Fªe
* 
	g‰ì°ack
;

36 
size_t
 
	gödex
;

37 
size_t
 
	gˇ∑côy
;

38 
size_t
 
	g‰ìcou¡
;

39 
	gve˘‹
<
	gboﬁ
,
	gAŒoc
<boﬁ>> 
	gcheckbôs
;

41 
	g¥Ÿe˘ed
:

42 
	$öã∫ÆSë
(
size_t
 
idx
, c⁄° 
T
& 
ñem
) {

43 
checkbôs
[
idx
] = 
åue
;

44 
d©a
[
idx
] = 
ñem
;

45 
	}
}

47 
	$öã∫ÆRemove
(
size_t
 
idx
) {

48 
Fªe
* 
tmp
 = (Fªe*)&
d©a
[
idx
];

49 
tmp
->
√xt
 = 
‰ì°ack
;

50 
‰ì°ack
 = 
tmp
;

51 
‰ìcou¡
 += 1;

52 
	}
}

54 
	gpublic
:

55 
	$M™agedAºay
(Ë: 
	`d©a
(
nuŒ±r
), 
	`‰ì°ack
(nullptr),

56 
	`ödex
(0), 
	`ˇ∑côy
(0), 
	`‰ìcou¡
(0), 
	$checkbôs
(0,
Ál£
Ë{
	}
}

57 
	$M™agedAºay
(
size_t
 
n
Ë: 
	`d©a
(
Æloˇt‹
.
	`Æloˇã
“)), 
	`‰ì°ack
(
nuŒ±r
),

58 
	`ödex
(0), 
	`ˇ∑côy
(
n
), 
	`‰ìcou¡
(0), 
	$checkbôs
(
n
,
Ál£
Ë{
	}
}

59 ~
	$M™agedAºay
(Ë{ 
Æloˇt‹
.
	`dóŒoˇã
(
d©a
, 
ˇ∑côy
); 
	}
}

61 
boﬁ
 
	$vÆid
(
size_t
 
idx
Ëc⁄° {  idx < 
ödex
 && 
checkbôs
[idx]; 
	}
}

62 
boﬁ
 
	$˛ór
(
size_t
 
idx
Ëc⁄° {  idx < 
ödex
 && !
checkbôs
[idx]; 
	}
}

63 
size_t
 
	$size
(Ëc⁄° {  
ödex
 - 
‰ìcou¡
; 
	}
}

64 
size_t
 
	$cuºítIndex
(Ëc⁄° {  
ödex
; 
	}
}

65 
size_t
 
	$cuºítC≠acôy
(Ëc⁄° {  
ˇ∑côy
; 
	}
}

66 
boﬁ
 
	$em±y
(Ëc⁄° {  
	`size
(Ë=0; 
	}
}

68 
size_t
 
	$ª£rveIndex
() {

69 i‡(
‰ì°ack
) {

70 
size_t
 
idx
 = (
T
*)
‰ì°ack
 - 
d©a
;

71 
‰ì°ack
 = fªe°ack->
√xt
;

72 
‰ìcou¡
 -= 1;

73 
	`GENASSERT1
(!
checkbôs
[
idx
], idx);

74  
idx
;

75 } i‡(
ˇ∑côy
 > 
ödex
) {

76 
size_t
 
idx
 = 
ödex
;

77 
ödex
 += 1;

78 
	`GENASSERT1
(!
checkbôs
[
idx
], idx);

79  
idx
;

81 
size_t
 
√wC≠acôy
 = 
ˇ∑côy
 ? capacity * 2 : 1;

82 
checkbôs
.
	`ªsize
(
√wC≠acôy
, 
Ál£
);

83 
T
* 
√wD©a
 = 
Æloˇt‹
.
	`Æloˇã
(
√wC≠acôy
);

84 i‡(!
√wD©a
Ë 
limô
<
size_t
>();

85 
size_t
 
i
 = 0; i < 
ˇ∑côy
; i +1Ë
√wD©a
[i] = 
d©a
[i];

86 
Æloˇt‹
.
	`dóŒoˇã
(
d©a
, 
ˇ∑côy
);

87 
d©a
 = 
√wD©a
;

88 
ˇ∑côy
 = 
√wC≠acôy
;

89  
	`ª£rveIndex
();

91 
	}
}

93 
	$£t
(
size_t
 
idx
, c⁄° 
T
& 
ñem
) {

94 
	`GENASSERT1
(
	`˛ór
(
idx
), idx);

95 
	`öã∫ÆSë
(
idx
, 
ñem
);

96 
	}
}

98 
size_t
 
	$put
(c⁄° 
T
& 
ñem
) {

99 
size_t
 
idx
 = 
	`ª£rveIndex
();

100 
	`öã∫ÆSë
(
idx
, 
ñem
);

101  
idx
;

102 
	}
}

104 
	gT
& 
	$gë
(
size_t
 
idx
) const {

105 
	`GENASSERT1
(
	`vÆid
(
idx
), idx);

106  
d©a
[
idx
];

107 
	}
}

109 
	$övÆid©e
(
size_t
 
idx
) {

110 
	`GENASSERT1
(
	`vÆid
(
idx
), idx);

111 
checkbôs
[
idx
] = 
Ál£
;

112 
	}
}

114 
	$ªÀa£
(
size_t
 
idx
) {

115 
	`GENASSERT1
(
	`˛ór
(
idx
), idx);

116 
	`öã∫ÆRemove
(
idx
);

117 
	}
}

119 
	$ªmove
(
size_t
 
idx
) {

120 
	`övÆid©e
(
idx
);

121 
	`öã∫ÆRemove
(
idx
);

122 
	}
}

124 
boﬁ
 
	$gë
(
size_t
 
idx
, 
T
& 
ñem
) {

125 i‡(!
	`vÆid
(
idx
)Ë 
Ál£
;

126 
ñem
 = 
d©a
[
idx
];

127 
	`öã∫ÆRemove
(
idx
);

128  
åue
;

129 
	}
}

	@src/generic/RegionSet.h

17 #i‚de‡
_Regi⁄Së_h_


18 
	#_Regi⁄Së_h_
 1

	)

20 
	~"gíîic/basics.h
"

22 
	~<£t
>

24 
	gãm∂©e
<
ty≥«me
 
	gT
>

25 
	sRegi⁄
 {

26 
T
 
	m°¨t
;

27 
T
 
	míd
;

28 
Regi⁄
(
T
 
s
, T 
e
Ë: 
°¨t
(s), 
íd
(e) {}

29 
boﬁ
 
	m›î©‹
<(c⁄° 
	mRegi⁄
& 
	mr1
Ëc⁄° {  
	míd
 <Ñ1.
	m°¨t
; }

30 
boﬁ
 
vÆid
(Ë{  
	m°¨t
 < 
	míd
; }

31 
boﬁ
 
covîs
(c⁄° 
Regi⁄
& 
r
Ëc⁄° {  
	m°¨t
 <r.
°¨t
 && 
íd
 >=Ñ.end; }

32 
T
 
övÆid
(Ë{  
	mlimô
<
	mT
>(); }

39 
	gãm∂©e
<
ty≥«me
 
	gR
,Åy≥«mê
	gA
 = 
Æloˇt‹
<
R
>>

40 
˛ass
 
Regi⁄Së
 : 
public
 
£t
<
R
,
	gÀss
<
	gR
>,
	gA
> {

41 
usög
 
	gba£˛ass
 = 
£t
<
R
,
	gÀss
<
	gR
>,
	gA
>;

43 
	gpublic
:

44 
ty≥«me
 
	tba£˛ass
::
	tôî©‹
 iterator;

46 
R
 
ö£π
–R 
r
 ) {

48 
ôî©‹
 
	gô
 = 
ba£˛ass
::
lowî_bound
(
r
);

49 
¶ow∑th
(
ô
 =
ba£˛ass
::
íd
()Ë
ö£π_now
;

52 
¶ow∑th
(
ô
->
°¨t
 < 
r
.°¨tË
	gr
.
	g°¨t
 = it->start;

55 
	gô
->
	gíd
 <
r
.
íd
) {

56 
ô
 = 
ba£˛ass
::
îa£
(it);

57 
¶ow∑th
(
ô
 =
ba£˛ass
::
íd
()Ë
ö£π_now
;

61 
¶ow∑th
(
ô
->
°¨t
 <
r
.
íd
) {

62 
r
.
íd
 = 
ô
->end;

63 
	gô
 = 
ba£˛ass
::
îa£
(
ô
);

66 
	gö£π_now
:

67 
ba£˛ass
::
ö£π
(
ô
, 
r
);

68  
	gr
;

71 
boﬁ
 
ªmove
–c⁄° 
R
& 
r
 ) {

72 
ôî©‹
 
	gô
 = 
ba£˛ass
::
lowî_bound
(
r
);

73 
¶ow∑th
–
ô
 =
ba£˛ass
::
íd
()

74 || 
ô
->
°¨t
 > 
r
.start

75 || (
ô
->
íd
Ë< 
r
.íd )  
Ál£
;

76 
R
 
	gt
 = *
ô
;

77 
	gô
 = 
ba£˛ass
::
îa£
(
ô
);

78 
¶ow∑th
(
t
.
íd
 > 
r
.ídË
	gô
 = 
ba£˛ass
::
em∂a˚_höt
(
ô
,Ñ.end,Å.end);

79 
¶ow∑th
(
t
.
°¨t
 < 
r
.°¨tË
	gba£˛ass
::
em∂a˚_höt
(
ô
,Å.start,Ñ.start);

80  
	gåue
;

83 
mw‹d
 
ªåõve
(
size_t
 
s
) {

84 
ôî©‹
 
	gô
 = 
ba£˛ass
::
begö
(); ià!ba£˛ass::
íd
(); ++it) {

85 
mw‹d
 
	ga°¨t
 = 
Æign_up
(
ô
->
°¨t
, 
s
);

86 
Á°∑th
(
ô
->
íd
 >
a°¨t
 + 
s
) {

87 
ªmove
–
R
(
a°¨t
,á°¨à+ 
s
) );

88  
	ga°¨t
;

91  
	gR
::
övÆid
();

94 
boﬁ
 
ö
–c⁄° 
R
& 
r
 ) {

95 
ôî©‹
 
	gô
 = 
ba£˛ass
::
lowî_bound
(
r
);

96  
	gô
 !
ba£˛ass
::
íd
(Ë&& 
ô
->
°¨t
 <
r
.start && it->end >=Ñ.end;

99 
boﬁ
 
out
–c⁄° 
R
& 
r
 ) {

100 
ôî©‹
 
	gô
 = --
ba£˛ass
::
uµî_bound
(
r
);

101  
	gba£˛ass
::
em±y
(Ë|| 
ô
->
°¨t
 >
r
.
íd
 || it->end <=Ñ.start;

104 
	gãm∂©e
<
boﬁ
 
	gdec
=
Ál£
>

105 
¥öt
(
o°ªam
& 
os
) const {

106  c⁄° 
R
& 
r
 : *
this
 ) {

107 i‡(
dec
Ë
os
 << ' ' << 
r
.
°¨t
 << '-' <<Ñ.
íd
;

108 
	gos
 << ' ' << 
FmtHex
(
r
.
°¨t
Ë<< '-' << FmtHex‘.
íd
);

	@src/generic/basics.h

17 #i‚de‡
_basics_h_


18 
	#_basics_h_
 1

	)

20 
	#Á°∑th
(
x
Ë(
	`__buûtö_ex≥˘
((
	`boﬁ
(x)),
åue
))

	)

21 
	#¶ow∑th
(
x
Ë(
	`__buûtö_ex≥˘
((
	`boﬁ
(x)),
Ál£
))

	)

23 
	#__£˘i⁄
(
x
Ë
	`__©åibuã__
((
	`__£˘i⁄__
(x)))

	)

24 
	#__Æig√d
(
x
Ë
	`__©åibuã__
((
	`__Æig√d__
(x)))

	)

25 
	#__∑cked
 
	`__©åibuã__
((
__∑cked__
))

	)

27 
	#__fölöe
 
	`__©åibuã__
((
__Æways_ölöe__
))

	)

28 
	#__nölöe
 
	`__©åibuã__
((
__noölöe__
))

	)

29 
	#__n‹ëu∫
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

30 
	#__u£ªsu…
 
	`__©åibuã__
((
__w¨n_unu£d_ªsu…__
))

	)

32 * 
	t±r_t
;

33 c⁄° * 
	t˝å_t
;

35 #i‡
deföed
(
__KOS__
)

36 
	~"ko°y≥s.h
"

38 #îr‹ 
undeföed
 
∂©f‹m
: 
⁄ly
 
__KOS__
 
suµ‹ãd
 
©
 
this
 
time


41 
	~<io°ªam
>

42 
	~<iom™ù
>

44 
usög
 
«me•a˚
 
	g°d
;

46 
	sFmtHex
 {

47 
mw‹d
 
	mvÆ
;

48 
	mdigôs
;

49 
FmtHex
(
mw‹d
 
p
, 
d
 = 0Ë: 
vÆ
(mw‹d’)), 
digôs
(d) {}

50 
FmtHex
(
±r_t
 
p
, 
d
 = 0Ë: 
vÆ
(
mw‹d
’)), 
digôs
(d) {}

51 
FmtHex
(c⁄° * 
p
, 
d
 = 0Ë: 
vÆ
(
mw‹d
’)), 
digôs
(d) {}

54 
ölöe
 
	go°ªam
& 
	g›î©‹
<<(o°ªam &
	gos
, c⁄° 
	gFmtHex
& 
	gh
) {

55 
	gos
 << "0x" << 
	ghex
 << 
	guµîˇ£
 << 
£tw
(
h
.
digôs
Ë<< 
£tfûl
('0'Ë<< 
	gh
.
	gvÆ
 << 
	gdec
;

56  
	gos
;

59 #i‡
deföed
(
__KOS__
)

60 
	~"kî√l/OuçutBasic.h
"

61 
	#GENASSERT0
 
KASSERT0


	)

62 
	#GENASSERT1
 
KASSERT1


	)

63 
	#GENASSERTN
 
KASSERTN


	)

64 
	#GENABORT0
 
KABORT0


	)

65 
	#GENABORT1
 
KABORT1


	)

67 #îr‹ 
undeföed
 
∂©f‹m
: 
⁄ly
 
__KOS__
 
suµ‹ãd
 
©
 
this
 
time


70 
ölöe
 
	$uƒóchabÀ
(Ë
__n‹ëu∫
;

71 
ölöe
 
	$uƒóchabÀ
() {

72 
	`__buûtö_uƒóchabÀ
();

73 
	`__buûtö_å≠
();

74 
	}
}

76 ˛as†
	cNoObje˘
 {

77 
NoObje˘
(Ë
dñëe
;

78 
NoObje˘
(c⁄° NoObje˘&Ë
dñëe
;

79 c⁄° 
	mNoObje˘
& 
	m›î©‹
=(c⁄° 
NoObje˘
&Ë
dñëe
;

82 (*
	gfuncvoid0_t
)();

83 (*
	tfuncvoid1_t
)(
	t±r_t
);

84 (*
	tfuncvoid2_t
)(
	t±r_t
,Ötr_t);

85 (*
	tfuncvoid3_t
)(
	t±r_t
,Ötr_t,Ötr_t);

87 
ãm∂©e
 <
ty≥«me
 
T
>

88 
ölöe
 
c⁄°ex¥
 
T
 
	$pow2
–
x
 ) {

89  
	`T
(1Ë<< 
x
;

90 
	}
}

92 
	gãm∂©e
 <
ty≥«me
 
	gT
>

93 
ölöe
 
c⁄°ex¥
 
boﬁ
 
	$i•ow2
–
T
 
x
 ) {

94  (
x
 & (x - 1)) == 0;

95 
	}
}

97 
	gãm∂©e
 <
ty≥«me
 
	gT
>

98 
ölöe
 
c⁄°ex¥
 
T
 
	$Æign_up
–
T
 
x
, T 
a
 ) {

99  (
x
 + 
a
 - 1) & (~(a - 1));

100 
	}
}

102 
	gãm∂©e
 <
ty≥«me
 
	gT
>

103 
ölöe
 
c⁄°ex¥
 
T
 
	$Æign_down
–
T
 
x
, T 
a
 ) {

104  
x
 & (~(
a
 - 1));

105 
	}
}

107 
	gãm∂©e
 <
ty≥«me
 
	gT
>

108 
ölöe
 
c⁄°ex¥
 
boﬁ
 
	$Æig√d
–
T
 
x
, T 
a
 ) {

109  (
x
 & (
a
 - 1)) == 0;

110 
	}
}

112 
	gãm∂©e
 <
ty≥«me
 
	gT
>

113 
ölöe
 
c⁄°ex¥
 
T
 
	$divup
–
T
 
n
, T 
d
 ) {

114  ((
n
 - 1Ë/ 
d
) + 1;

115 
	}
}

117 
	gãm∂©e
 <
ty≥«me
 
	gT
>

118 
ölöe
 
c⁄°ex¥
 
T
 
	$limô
() {

119  ~
	`T
(0);

120 
	}
}

	@src/generic/bitmanip.h

17 #i‚de‡
_bim™ù_h_


18 
	#_bim™ù_h_
 1

	)

20 
	~"gíîic/basics.h
"

22 
	gãm∂©e
 <
ty≥«me
 
	gT
>

23 
ölöe
 
c⁄°ex¥
 
size_t
 
	$bôsize
() {

24  (
T
Ë* 
ch¨bôs
;

25 
	}
}

27 
	gãm∂©e
 <
ty≥«me
 
	gT
>

28 
ölöe
 
c⁄°ex¥
 
T
 
	$bômask
(
Width
) {

29  
Width
 =
bôsize
<
T
>(Ë? 
limô
<T>(Ë: 
pow2
<T>(Width) - 1;

30 
	}
}

32 
	gãm∂©e
 <
ty≥«me
 
	gT
>

33 
ölöe
 
c⁄°ex¥
 
T
 
	$bômask
(
Pos
, 
Width
) {

34  
bômask
<
T
>(
Width
Ë<< 
Pos
;

35 
	}
}

37 
	#__kos_buûtö
(
x
, 
func
) \

38 –(
x
Ë<(Ë? 
__buûtö_
 ## 
	`func
(x) : \

39 (
x
Ë<(Ë? 
__buûtö_
 ## 
func
 ## 
	`l
(x) : \

40 (
x
Ë<(Ë? 
__buûtö_
 ## 
func
 ## 
	`Œ
(x) : \

41 (
x
Ë* 
ch¨bôs
 )

	)

43 
	gãm∂©e
 <
ty≥«me
 
	gT
>

44 
ölöe
 
c⁄°ex¥
 
lsbc⁄d
(
T
 
x
, T 
Æt
 = 
bôsize
<T>()) {

45  
x
 =0 ? 
Æt
 : 
__kos_buûtö
(x, 
˘z
);

48 
	gãm∂©e
 <
ty≥«me
 
	gT
>

49 
ölöe
 
c⁄°ex¥
 
msbc⁄d
(
T
 
x
, T 
Æt
 = 
bôsize
<T>()) {

50  
x
 =0 ? 
Æt
 : (
bôsize
<
T
>(Ë- 1Ë- 
__kos_buûtö
(x, 
˛z
);

53 
	gãm∂©e
 <
ty≥«me
 
	gT
>

54 
ölöe
 
c⁄°ex¥
 
	$lsb
(
T
 
x
) {

55  
	`__kos_buûtö
(
x
, 
˘z
);

56 
	}
}

58 
	gãm∂©e
 <
ty≥«me
 
	gT
>

59 
ölöe
 
c⁄°ex¥
 
	$msb
(
T
 
x
) {

60  (
bôsize
<
T
>(Ë- 1Ë- 
	`__kos_buûtö
(
x
, 
˛z
);

61 
	}
}

63 
	gãm∂©e
 <
ty≥«me
 
	gT
>

64 
ölöe
 
c⁄°ex¥
 
	$p›cou¡
(
T
 
x
) {

65  
	`__kos_buûtö
(
x
, 
p›cou¡
);

66 
	}
}

68 
	gãm∂©e
 <
ty≥«me
 
	gT
>

69 
ölöe
 
c⁄°ex¥
 
	$Êo‹log2
–
T
 
x
 ) {

70  
	`msbc⁄d
(
x
, 
bôsize
<
T
>());

71 
	}
}

73 
	gãm∂©e
 <
ty≥«me
 
	gT
>

74 
ölöe
 
c⁄°ex¥
 
	$˚ûöglog2
–
T
 
x
 ) {

75  
	`msbc⁄d
(
x
 - 1, 
limô
<
T
>()) + 1;

76 
	}
}

78 
	gãm∂©e
 <
ty≥«me
 
	gT
>

79 
ölöe
 
c⁄°ex¥
 
	$Æignmít
–
T
 
x
 ) {

80  
	`lsbc⁄d
(
x
, 
bôsize
<
T
>());

81 
	}
}

83 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gPos
, 
	gWidth
>

84 ˛as†
	cBôSåög
 {

85 
°©ic_as£π
–
Pos
 + 
Width
 <8*(
T
), "illegalÖarameters" );

86 
	mpublic
:

87 
c⁄°ex¥
 
T
 
	$›î©‹
()(Ëc⁄° {  
bômask
<
T
>(
Pos
,
Width
); }

88 
c⁄°ex¥
 
T
 
	$put
(
T
 
f
Ëc⁄° {  (‡& 
bômask
<T>(
Width
)Ë<< 
Pos
; 
	}
}

89 
c⁄°ex¥
 
T
 
	$gë
(
T
 
f
Ëc⁄° {  (‡>> 
Pos
Ë& 
bômask
<T>(
Width
); 
	}
}

90 #i‡
	$deföed
(
__˛™g__
)

91 
	$BôSåög
(Ë{
	}
}

95 
	gãm∂©e
<
boﬁ
 
	g©omic
=
Ál£
>

96 
ölöe
 
	$bô_£t
(
mw‹d
& 
a
, mw‹d 
idx
) {

97 
mw‹d
 
b
 = 
	`mw‹d
(1Ë<< 
idx
;

98 i‡(
©omic
Ë
	`__©omic_‹_„tch
(&
a
, 
b
, 
__ATOMIC_RELAXED
);

99 
a
 |
b
;

100 
	}
}

102 
	gãm∂©e
<
boﬁ
 
	g©omic
=
Ál£
>

103 
ölöe
 
	$bô_˛r
(
mw‹d
& 
a
, mw‹d 
idx
) {

104 
mw‹d
 
b
 = ~(
	`mw‹d
(1Ë<< 
idx
);

105 i‡(
©omic
Ë
	`__©omic_™d_„tch
(&
a
, 
b
, 
__ATOMIC_RELAXED
);

106 
a
 &
b
;

107 
	}
}

109 
	gãm∂©e
<
boﬁ
 
	g©omic
=
Ál£
>

110 
ölöe
 
	$bô_Êp
(
mw‹d
& 
a
, mw‹d 
idx
) {

111 
mw‹d
 
b
 = 
	`mw‹d
(1Ë<< 
idx
;

112 i‡(
©omic
Ë
	`__©omic_x‹_„tch
(&
a
, 
b
, 
__ATOMIC_RELAXED
);

113 
a
 ^
b
;

114 
	}
}

116 #i‡
deföed
(
__x86_64__
)

121 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gföd£t
 = 
åue
>

122 
ölöe
 
mw‹d
 
	$mu…isˇn
(c⁄° 
mw‹d
* 
d©a
) {

123 
mw‹d
 
ªsu…
 = 0;

124 
mw‹d
 
mask
 = ~
	`mw‹d
(0);

125 
mw‹d
 
√wmask
 = 
mask
;

126 
size_t
 
i
 = 0; i < 
N
; i++) {

127 
mw‹d
 
sˇn
;

128 
asm
 volatile("\
 %2, %0\n\t\
 %3, %0\n\t\
 %4, %1"

132 : "=&r"(
sˇn
), "+r"(
√wmask
)

133 : "rm"(
föd£t
 ? 
d©a
[
i
] : ~d©a[i]), "r"(
bôsize
<
mw‹d
>()), "r"(
	`mw‹d
(0))

135 
ªsu…
 +
sˇn
 & 
mask
;

136 
mask
 = 
√wmask
;

138  
ªsu…
;

139 
	}
}

144 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gföd£t
 = 
åue
>

145 
ölöe
 
mw‹d
 
	$mu…isˇn_r
(c⁄° 
mw‹d
* 
d©a
) {

146 
mw‹d
 
ªsu…
 = 0;

147 
mw‹d
 
mask
 = ~
	`mw‹d
(0);

148 
mw‹d
 
√wmask
 = 
mask
;

149 
size_t
 
i
 = 
N
;

151 
i
 -= 1;

152 
mw‹d
 
sˇn
;

153 
asm
 volatile("\
 %2, %0\n\t\
 %3, %0\n\t\
 %4, %1"

157 : "=&r"(
sˇn
), "+r"(
√wmask
)

158 : "rm"(
föd£t
 ? 
d©a
[
i
] : ~d©a[i]), "r"(
	`mw‹d
(0)), "r"(mword(0))

160 
ªsu…
 +(
sˇn
 & 
mask
Ë+ (
bôsize
<
mw‹d
>() & ~mask);

161 
mask
 = 
√wmask
;

162 } 
i
 != 0);

163  
ªsu…
;

164 
	}
}

167 #îr‹ 
unsuµ‹ãd
 
¨chôe˘uª
: 
⁄ly
 
__x86_64__
 
suµ‹ãd
 
©
 
this
 
time


	@src/generic/regsave.h

17 #i‚de‡
_ªgßve_h_


18 
	#_ªgßve_h_
 1

	)

20 #i‡
deföed
(
__x86_64__
)

22 #GCC: 
¨gumíts
 
ö
 %
rdi
, %
rsi
, %
rdx
, %
rcx
 , %
r8
, %
r9


23 #£ê
hâp
:

25 #ˇŒî- 
vs
. 
ˇŒì
-
ow√d
 
ªgi°îs


26 #£ê
hâp
:

28 #ßvê
ˇŒì
-
ow√d
 
ªgi°îs
 
durög
 
asynchr⁄ous
 
öãºu±


29 #ˇŒî-
ow√d
 
ªgs
 
autom©iˇŒy
 
ßved
 
by
 
compûî
 
code
 
up⁄
 
routöe
 
ˇŒs


31 .
£t
 
	gISRFRAME
, 72

33 .
ma¸o
 
ISR_PUSH


34 
	gpushq
 %
øx


35 
	gpushq
 %
rcx


36 
	gpushq
 %
rdx


37 
	gpushq
 %
rdi


38 
	gpushq
 %
rsi


39 
	gpushq
 %
r8


40 
	gpushq
 %
r9


41 
	gpushq
 %
r10


42 
	gpushq
 %
	gr11


43 .
	gídm


45 .
ma¸o
 
ISR_POP


46 
	gp›q
 %
r11


47 
	gp›q
 %
r10


48 
	gp›q
 %
r9


49 
	gp›q
 %
r8


50 
	gp›q
 %
rsi


51 
	gp›q
 %
rdi


52 
	gp›q
 %
rdx


53 
	gp›q
 %
rcx


54 
	gp›q
 %
	gøx


55 .
	gídm


57 #ßvê
ˇŒî
-
ow√d
 
ªgi°îs
 
durög
 
synchr⁄ous
 
°ack
 

58 #ˇŒì-
ow√d
 
ªgs
 
autom©iˇŒy
 
ßvedby
 
compûî
 
code
 
bef‹e
 
routöe
 
ˇŒs


60 .
ma¸o
 
STACK_PUSH


61 
	gpushq
 %
r15


62 
	gpushq
 %
r14


63 
	gpushq
 %
r13


64 
	gpushq
 %
r12


65 
	gpushq
 %
rbx


66 
	gpushq
 %
	grbp


67 .
	gídm


69 .
ma¸o
 
STACK_POP


70 
	gp›q
 %
rbp


71 
	gp›q
 %
rbx


72 
	gp›q
 %
r12


73 
	gp›q
 %
r13


74 
	gp›q
 %
r14


75 
	gp›q
 %
	gr15


76 .
	gídm


79 #îr‹ 
unsuµ‹ãd
 
¨chôe˘uª
: 
⁄ly
 
__x86_64__
 
suµ‹ãd
 
©
 
this
 
time


	@src/include/kostypes.h

17 #i‚de‡
_ko°y≥s_h_


18 
	#_ko°y≥s_h_
 1

	)

20 
	~<c°ddef
>

21 
	~<c°döt
>

22 #i‡
deföed
(
__x86_64__
)

23 
uöt64_t
 
	tmw‹d
;

24 
öt64_t
 
	tsw‹d
;

26 
mw‹d
 
	tvaddr
;

27 
mw‹d
 
	t∑ddr
;

29 
mw‹d
 
	t˝u_£t_t
;

31 c⁄° 
mw‹d
 
	gch¨bôs
 = 8;

32 c⁄° 
mw‹d
 
	gbyãbôs
 = 8;

34 
	tbuf_t
;

35 * 
	tbuÂå_t
;

36 c⁄° * 
	tcbuÂå_t
;

39 #îr‹ 
unsuµ‹ãd
 
¨chôe˘uª
: 
⁄ly
 
__x86_64__
 
suµ‹ãd
 
©
 
this
 
time


	@src/include/linuxtypes.h

17 #i‚de‡
_löuxty≥s_h_


18 
	#_löuxty≥s_h_
 1

	)

20 
	~<c°ddef
>

21 
	~<c°döt
>

22 #i‡
deföed
(
__x86_64__
)

23 
uöt64_t
 
	tmw‹d
;

24 
öt64_t
 
	tsw‹d
;

26 
mw‹d
 
	tvaddr
;

27 
mw‹d
 
	t∑ddr
;

29 c⁄° 
mw‹d
 
	gch¨bôs
 = 8;

30 c⁄° 
mw‹d
 
	gbyãbôs
 = 8;

32 
	tbuf_t
;

33 * 
	tbuÂå_t
;

34 c⁄° * 
	tcbuÂå_t
;

36 #îr‹ 
unsuµ‹ãd
 
¨chôe˘uª
: 
⁄ly
 
__x86_64__
 
suµ‹ãd
 
©
 
this
 
time


	@src/include/pthread.h

1 #i‚de‡
_±hªad_h_


2 
	#_±hªad_h_
 1

	)

4 
	~"sysˇŒs.h
"

5 
	~<©omic
>

7 "C" 
£mCª©e
(
mw‹d
* 
rsid
, mw‹d 
öô
);

8 "C" 
£mDe°roy
(
mw‹d
 
sid
);

9 "C" 
£mP
(
mw‹d
 
sid
);

10 "C" 
£mV
(
mw‹d
 
sid
);

12 ˛as†
	cBí≠h‹e
 {

13 
	m°d
::
©omic
<
sw‹d
> 
cou¡î
;

14 
mw‹d
 
	mkSem
;

15 
	mpublic
:

16 
	$öô
(
mw‹d
 
c
) {

17 
cou¡î
 = 
c
;

18 
	`£mCª©e
(&
kSem
, 0);

20 
	$de°roy
() {

21 
	`£mDe°roy
(
kSem
);

22 
	}
}

23 
boﬁ
 
	$em±y
() {

24  
cou¡î
 >= 0;

25 
	}
}

26 
boﬁ
 
	$åyP
() {

27 i‡(--
cou¡î
 >0Ë 
åue
;

28 ++
cou¡î
;

29  
Ál£
;

30 
	}
}

31 
boﬁ
 
	$P
() {

32 i‡(--
cou¡î
 >0Ë 
Ál£
;

33 
	`£mP
(
kSem
);

34  
åue
;

35 
	}
}

36 
boﬁ
 
	$V
() {

37 i‡(++
cou¡î
 >1Ë 
Ál£
;

38 
	`£mV
(
kSem
);

39  
åue
;

40 
	}
}

43 #ifde‡
__˝lu•lus


44 
	#ª°ri˘
 
__ª°ri˘__


	)

48 c⁄° 
mw‹d
 
PTHREAD_CANCEL_ASYNCHRONOUS
 = 0;

49 c⁄° 
mw‹d
 
PTHREAD_CANCEL_ENABLE
 = 0;

50 c⁄° 
mw‹d
 
PTHREAD_CANCEL_DEFERRED
 = 0;

51 c⁄° 
mw‹d
 
PTHREAD_CANCEL_DISABLE
 = 0;

52 c⁄° 
mw‹d
 
PTHREAD_CANCELED
 = 0;

53 c⁄° 
mw‹d
 
PTHREAD_CREATE_DETACHED
 = 0;

54 c⁄° 
mw‹d
 
PTHREAD_CREATE_JOINABLE
 = 0;

57 c⁄° 
mw‹d
 
PTHREAD_MUTEX_DEFAULT
 = 0;

58 c⁄° 
mw‹d
 
PTHREAD_MUTEX_ERRORCHECK
 = 0;

59 c⁄° 
mw‹d
 
PTHREAD_MUTEX_NORMAL
 = 0;

60 c⁄° 
mw‹d
 
PTHREAD_MUTEX_RECURSIVE
 = 0;

61 c⁄° 
mw‹d
 
PTHREAD_MUTEX_ROBUST
 = 0;

62 c⁄° 
mw‹d
 
PTHREAD_MUTEX_STALLED
 = 0;

63 c⁄° 
mw‹d
 
PTHREAD_ONCE_INIT
 = 0;

67 c⁄° 
mw‹d
 
PTHREAD_PROCESS_SHARED
 = 0;

68 c⁄° 
mw‹d
 
PTHREAD_PROCESS_PRIVATE
 = 0;

72 
mw‹d
 
	t±hªad_©å_t
;

73 
mw‹d
 
	t±hªad_b¨rõr_t
;

74 
mw‹d
 
	t±hªad_b¨rõøâr_t
;

75 
	sPthªadC⁄d
 {

76 
Bí≠h‹e
 
bí
;

77 
PthªadC⁄d
() {}

78 } 
	t±hªad_c⁄d_t
;

79 
mw‹d
 
	t±hªad_c⁄d©å_t
;

80 
mw‹d
 
	t±hªad_key_t
;

81 
	sPthªadMuãx
 {

82 
Bí≠h‹e
 
bí
;

83 
PthªadMuãx
() {}

84 } 
	t±hªad_muãx_t
;

85 
mw‹d
 
	t±hªad_muãx©å_t
;

86 
mw‹d
 
	t±hªad_⁄˚_t
;

87 
mw‹d
 
	t±hªad_rwlock_t
;

88 
mw‹d
 
	t±hªad_rwlock©å_t
;

89 
mw‹d
 
	t±hªad_•ölock_t
;

90 
mw‹d
 
	t±hªad_t
;

92 c⁄° 
±hªad_c⁄d_t
 
PTHREAD_COND_INITIALIZER
;

93 c⁄° 
±hªad_muãx_t
 
PTHREAD_MUTEX_INITIALIZER
;

94 c⁄° 
±hªad_rwlock_t
 
PTHREAD_RWLOCK_INITIALIZER
 = ~
mw‹d
(0);

96 
±hªad_©f‹k
((*)(), (*)(), (*)());

97 
±hªad_©å_de°roy
(
±hªad_©å_t
 *);

98 
±hªad_©å_gëdëach°©e
(c⁄° 
±hªad_©å_t
 *, *);

99 
±hªad_©å_gëgu¨dsize
(c⁄° 
±hªad_©å_t
 *
ª°ri˘
, 
size_t
 *restrict);

101 
±hªad_©å_gësched∑øm
(c⁄° 
±hªad_©å_t
 *
ª°ri˘
, 
sched_∑øm
 *restrict);

106 
±hªad_©å_öô
(
±hªad_©å_t
 *);

107 
±hªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

108 
±hªad_©å_£tgu¨dsize
(
±hªad_©å_t
 *, 
size_t
);

110 
±hªad_©å_£tsched∑øm
(
±hªad_©å_t
 *
ª°ri˘
, c⁄° 
sched_∑øm
 *restrict);

115 
±hªad_b¨rõr_de°roy
(
±hªad_b¨rõr_t
 *);

116 
±hªad_b¨rõr_öô
(
±hªad_b¨rõr_t
 *
ª°ri˘
, c⁄° 
±hªad_b¨rõøâr_t
 *restrict, );

117 
±hªad_b¨rõr_waô
(
±hªad_b¨rõr_t
 *);

118 
±hªad_b¨rõøâr_de°roy
(
±hªad_b¨rõøâr_t
 *);

120 
±hªad_b¨rõøâr_öô
(
±hªad_b¨rõøâr_t
 *);

122 
±hªad_ˇn˚l
(
±hªad_t
);

123 
±hªad_˛ónup_p›
();

124 
±hªad_˛ónup_push
((*)(*), *);

125 
±hªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *);

126 
±hªad_c⁄d_de°roy
(
±hªad_c⁄d_t
 *);

127 
±hªad_c⁄d_öô
(
±hªad_c⁄d_t
 *
ª°ri˘
, c⁄° 
±hªad_c⁄d©å_t
 *restrict);

128 
±hªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *);

129 
±hªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *
ª°ri˘
, 
±hªad_muãx_t
 *ª°ri˘, c⁄° 
time•ec
 *restrict);

130 
±hªad_c⁄d_waô
(
±hªad_c⁄d_t
 *
ª°ri˘
, 
±hªad_muãx_t
 *restrict);

131 
±hªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

132 
±hªad_c⁄d©å_gë˛ock
(c⁄° 
±hªad_c⁄d©å_t
 *
ª°ri˘
, 
˛ockid_t
 *restrict);

134 
±hªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

135 
±hªad_c⁄d©å_£t˛ock
(
±hªad_c⁄d©å_t
 *, 
˛ockid_t
);

137 
±hªad_¸óã
(
±hªad_t
 *
ª°ri˘
, c⁄° 
±hªad_©å_t
 *restrict, *(*)(*), *restrict);

138 
±hªad_dëach
(
±hªad_t
);

139 
±hªad_equÆ
(
±hªad_t
,Öthread_t);

140 
±hªad_exô
(*);

144 *
±hªad_gë•ecific
(
±hªad_key_t
);

145 
±hªad_joö
(
±hªad_t
, **);

146 
±hªad_key_¸óã
(
±hªad_key_t
 *, (*)(*));

147 
±hªad_key_dñëe
(
±hªad_key_t
);

148 
±hªad_muãx_c⁄si°ít
(
±hªad_muãx_t
 *);

149 
±hªad_muãx_de°roy
(
±hªad_muãx_t
 *);

151 
±hªad_muãx_öô
(
±hªad_muãx_t
 *
ª°ri˘
, c⁄° 
±hªad_muãx©å_t
 *restrict);

152 
±hªad_muãx_lock
(
±hªad_muãx_t
 *);

154 
±hªad_muãx_timedlock
(
±hªad_muãx_t
 *
ª°ri˘
, c⁄° 
time•ec
 *restrict);

155 
±hªad_muãx_åylock
(
±hªad_muãx_t
 *);

156 
±hªad_muãx_u∆ock
(
±hªad_muãx_t
 *);

157 
±hªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

161 
±hªad_muãx©å_gërobu°
(c⁄° 
±hªad_muãx©å_t
 *
ª°ri˘
, *restrict);

162 
±hªad_muãx©å_gëty≥
(c⁄° 
±hªad_muãx©å_t
 *
ª°ri˘
, *restrict);

163 
±hªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

167 
±hªad_muãx©å_£åobu°
(
±hªad_muãx©å_t
 *, );

168 
±hªad_muãx©å_£ây≥
(
±hªad_muãx©å_t
 *, );

169 
±hªad_⁄˚
(
±hªad_⁄˚_t
 *, (*)());

170 
±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *);

171 
±hªad_rwlock_öô
(
±hªad_rwlock_t
 *
ª°ri˘
, c⁄° 
±hªad_rwlock©å_t
 *restrict);

172 
±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *);

173 
±hªad_rwlock_timedrdlock
(
±hªad_rwlock_t
 *
ª°ri˘
, c⁄° 
time•ec
 *restrict);

174 
±hªad_rwlock_timedwæock
(
±hªad_rwlock_t
 *
ª°ri˘
, c⁄° 
time•ec
 *restrict);

175 
±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *);

176 
±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *);

177 
±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *);

178 
±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *);

179 
±hªad_rwlock©å_de°roy
(
±hªad_rwlock©å_t
 *);

181 
±hªad_rwlock©å_öô
(
±hªad_rwlock©å_t
 *);

183 
±hªad_t
 
±hªad_£lf
();

184 
±hªad_£tˇn˚l°©e
(, *);

185 
±hªad_£tˇn˚…y≥
(, *);

189 
±hªad_£t•ecific
(
±hªad_key_t
, const *);

190 
±hªad_•ö_de°roy
(
±hªad_•ölock_t
 *);

191 
±hªad_•ö_öô
(
±hªad_•ölock_t
 *, );

192 
±hªad_•ö_lock
(
±hªad_•ölock_t
 *);

193 
±hªad_•ö_åylock
(
±hªad_•ölock_t
 *);

194 
±hªad_•ö_u∆ock
(
±hªad_•ölock_t
 *);

195 
±hªad_ã°ˇn˚l
();

197 
±hªad_kûl
(
±hªad_t
, );

199 #ifde‡
__˝lu•lus


	@src/include/syscalls.h

1 #i‚de‡
_sysˇŒs_h_


2 
	#_sysˇŒs_h_
 1

	)

4 
	~"ko°y≥s.h
"

6 
	~<˚ºno
>

7 
	~<c°dlib
>

8 
	~<f˙é.h
>

9 
	~<uni°d.h
>

10 
	~<sys/°©.h
>

12 
	#STDDBG_FILENO
 3

	)

14 
	#MAP_FAILED
 ((*Ë-1)

	)

15 "C" * 
mm≠
(* 
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fûedes
, 
off_t
 
off
);

16 "C" 
munm≠
(* 
addr
, 
size_t
 
Àn
);

18 "C" 
pid_t
 
gëcid
();

20 "C" 
gë_c‹e_cou¡
();

22 "C" 
¥ivûege
(*, 
mw‹d
, mword, mword, mword);

24 
«me•a˚
 
	gSysˇŒNum
 {

26 : 
mw‹d
 {

27 
_exô
 = 0,

28 
	g›í
,

29 
	g˛o£
,

30 
	gªad
,

31 
	gwrôe
,

32 
	gl£ek
,

33 
	ggë_c‹e_cou¡
,

34 
	ggëpid
,

35 
	ggëcid
,

36 
	gu¶ìp
,

37 
	g_mm≠
,

38 
	g_munm≠
,

39 
	g_±hªad_¸óã
,

40 
	g±hªad_exô
,

41 
	g±hªad_joö
,

42 
	g±hªad_kûl
,

43 
	g±hªad_£lf
,

44 
	g£mCª©e
,

45 
	g£mDe°roy
,

46 
	g£mP
,

47 
	g£mV
,

48 
	g¥ivûege
,

49 
	g_öô_sig_h™dÀr
,

50 
	gmax


55 "C" 
ssize_t
 
sysˇŒStub
(
mw‹d
 
x
, mw‹d 
a1
 = 0, mw‹d 
a2
 = 0, mw‹d 
a3
 = 0, mw‹d 
a4
 = 0, mw‹d 
a5
 = 0);

	@src/kernel/AddressSpace.cc

17 
	~"kî√l/AddªssS∑˚.h
"

19 
	gAddªssS∑˚
::
	$¥öt
(
o°ªam
& 
os
) const {

20 
os
 << "AS(" << 
	`FmtHex
(
∑gëabÀ
) << "):";

21 
vaddr
 
°¨t
 = 
kî√l
 ? 
kî√lbŸ
 : 0;

22 
size_t
 
size
 = 0;

23 (
size
 = 
Pagög
::
	`ã°‰ì
(
°¨t
))) start += size;

25 
vaddr
 
íd
 = 
°¨t
;

26 (
size
 = 
Pagög
::
	`ã°u£d
(
íd
)))Énd += size;

27 
os
 << ' ' << 
	`FmtHex
((
°¨t
 & 
ˇn⁄Te°
Ë? (°¨à| 
ˇn⁄Pªfix
) : start)

28 << "-" << 
	`FmtHex
((
íd
 & 
ˇn⁄Te°
Ë? (íd | 
ˇn⁄Pªfix
) :Énd);

29 
°¨t
 = 
íd
;

30 (
size
 = 
Pagög
::
	`ã°‰ì
(
°¨t
))) start += size;

31 i‡(
°¨t
 >(
kî√l
 ? 
pow2
<
size_t
>(
∑gebôs
Ë: 
u£π›
)) ;

33 
	}
}

	@src/kernel/AddressSpace.h

17 #i‚de‡
_AddªssS∑˚_h_


18 
	#_AddªssS∑˚_h_
 1

	)

20 
	~"gíîic/EmbeddedC⁄èöîs.h
"

21 
	~"kî√l/FømeM™agî.h
"

22 
	~"kî√l/Ouçut.h
"

23 
	~"machöe/Pagög.h
"

25 
	gPageInvÆid©i⁄
 : 
public
 
EmbeddedLi°
<
PageInvÆid©i⁄
>::
Lök
 {

26 
Pagög
::
PageE¡ry
* 
≥¡ry
;

27 
vaddr
 
	gvma
;

28 
size_t
 
	gsize
;

29 
mw‹d
 
	gcou¡
;

30 
boﬁ
 
	gÆloc
;

35 ˛as†
	cAddªssS∑˚
 : 
public
 
Pagög
 {

36 
SpöLock
 
ulock
;

37 
mw‹d
 
	ma˘iveC‹es
;

38 
	mEmbeddedLi°
<
	mPageInvÆid©i⁄
> 
	mövLi°
;

40 
SpöLock
 
	m∂ock
;

41 
∑ddr
 
	m∑gëabÀ
;

43 
SpöLock
 
	mvlock
;

44 
vaddr
 
	mm≠BŸtom
, 
	mm≠Sèπ
, 
	mm≠T›
;

46 c⁄° 
boﬁ
 
	mkî√l
;

48 
AddªssS∑˚
(c⁄° AddªssS∑˚&Ë
dñëe
;

49 c⁄° 
	mAddªssS∑˚
& 
	m›î©‹
=(c⁄° 
AddªssS∑˚
&Ë
dñëe
;

51 
	eM≠Code
 { 
	mNoAŒoc
, 
	mAŒoc
, 
	mGu¨d
, 
	mLazy
 };

53 
	gãm∂©e
<
	gN
, 
boﬁ
 
	g¥e£¡
>

54 
boﬁ
 
	$m≠Page
(
vaddr
 
vma
, 
∑ddr
 
pma
, 
uöt64_t
 
ty≥
) {

55 
Sc›edLock
<> 
	`¶
(
∂ock
);

56  
Pagög
::
m≠
<
N
,
¥e£¡
>(
vma
, 
pma
, 
ty≥
, *
LoˇlPro˚ss‹
::
	`gëFømeM™agî
());

57 
	}
}

59 
	gãm∂©e
<
size_t
 
	gN
, 
M≠Code
 
	gmc
>

60 
	$m≠PageRegi⁄
–
∑ddr
 
pma
, 
vaddr
 
vma
, 
size_t
 
size
, 
uöt64_t
 
ty≥
 ) {

61 
	`°©ic_as£π
–
N
 > 0 && N < 
∑gñevñs
, "pageÜevelÅemplate violation" );

62 
	`°©ic_as£π
–
mc
 >
NoAŒoc
 && m¯<
Lazy
, "invalid MapCode" );

63 
	`KASSERT1
–
	`Æig√d
(
vma
, 
∑gesize
<
N
>()), vma );

64 
	`KASSERT1
–
	`Æig√d
(
size
, 
∑gesize
<
N
>()), size );

65 
vaddr
 
íd
 = 
vma
 + 
size
; vm®<Énd; vm®+
∑gesize
<
N
>()) {

66 
mc
) {

67 
NoAŒoc
: ;

68 
AŒoc
: 
pma
 = 
LoˇlPro˚ss‹
::
	`gëFømeM™agî
()->
ÆlocFøme
<
N
>(); ;

69 
Gu¨d
: 
pma
 = 
gu¨dPage
; ;

70 
Lazy
: 
pma
 = 
œzyPage
; ;

72 
	`KASSERT0
(
pma
 !
t›addr
);

73 i‡(!
kî√l
Ë
ty≥
 |
U£r
;

74 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/m≠<", 
N
, ">: ", FmtHex(
vma
), " -> ", FmtHex(
pma
), " fœgs:", 
Pagög
::
	`FmtPE
(
ty≥
));

75 
boﬁ
 
check
;

76 
mc
) {

77 
NoAŒoc
:

78 
AŒoc
: 
check
 = 
m≠Page
<
N
,
åue
>(
vma
, 
pma
, 
ty≥
); ;

79 
Gu¨d
: 
check
 = 
m≠Page
<
N
,
Ál£
>(
vma
, 
pma
, 
ty≥
); ;

80 
Lazy
: 
check
 = 
m≠Page
<
N
,
Ál£
>(
vma
, 
pma
, 
ty≥
); ;

82 
	`KASSERT1
(
check
, 
vma
);

83 i‡(
mc
 =
NoAŒoc
Ë
pma
 +
∑gesize
<
N
>();

85 
	}
}

87 
	gãm∂©e
<
	gN
, 
boﬁ
 
	gasync
=
Ál£
>

88 
PageE¡ry
* 
	$unm≠Page1
(
vaddr
 
vma
) {

89 
Sc›edLock
<> 
	`¶
(
∂ock
);

90  
Pagög
::
unm≠1
<
N
,
async
>(
vma
);

91 
	}
}

93 
∑ddr
 
	$unm≠Page2
(
PageE¡ry
* 
≥
) {

94 
Sc›edLock
<> 
	`¶
(
∂ock
);

95  
Pagög
::
	`unm≠2
(
≥
);

96 
	}
}

98 
	gãm∂©e
<
	gN
>

99 
∑ddr
 
	$unm≠Page
(
vaddr
 
vma
) {

100 
Sc›edLock
<> 
	`¶
(
∂ock
);

101  
Pagög
::
unm≠
<
N
>(
vma
);

102 
	}
}

104 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gÆloc
, boﬁ 
	gdúe˘
>

105 
	$unm≠PageRegi⁄
–
vaddr
 
vma
, 
size_t
 
size
 ) {

106 
	`°©ic_as£π
–
N
 > 0 && N < 
∑gñevñs
, "pageÜevelÅemplate violation" );

107 
	`KASSERT1
–
	`Æig√d
(
vma
, 
∑gesize
<
N
>()), vma );

108 
	`KASSERT1
–
	`Æig√d
(
size
, 
∑gesize
<
N
>()), size );

109 
vaddr
 
íd
 = 
vma
 + 
size
; vm®<Énd; vm®+
∑gesize
<
N
>()) {

110 i‡(
dúe˘
) {

111 
∑ddr
 
pma
 = 
unm≠Page
<
N
>(
vma
);

112 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/unm≠: ", FmtHex(
vma
), '/', FmtHex(
∑gesize
<
N
>()), " -> ", FmtHex(
pma
));

113 
CPU
::
	`InvTLB
(
vma
);

114 i‡(
Æloc
 && 
pma
 !
œzyPage
 &&Öm®!
gu¨dPage
Ë
LoˇlPro˚ss‹
::
	`gëFømeM™agî
()->
ªÀa£Føme
<
N
>(pma);

116 
PageE¡ry
* 
≥
 = 
unm≠Page1
<
N
,
åue
>(
vma
);

117 i‡(!
≥
) ;

118 
ulock
.
	`acquúe
();

119 i‡(
a˘iveC‹es
 > 1) {

120 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/po°: ", FmtHex(
vma
), '/', FmtHex(
∑gesize
<
N
>()), ":", 
a˘iveC‹es
, " PE:", FmtHex(
≥
));

121 
PageInvÆid©i⁄
* 
pi
 = 
övLi°
.
	`back
();

122 
pi
->
≥¡ry
 = 
≥
;

123 
pi
->
vma
 = vma;

124 
pi
->
size
 = 
∑gesize
<
N
>();

125 
pi
->
cou¡
 = 
a˘iveC‹es
;

126 
pi
->
Æloc
 =álloc;

127 
övLi°
.
	`push_back
(*
k√w2
<
PageInvÆid©i⁄
>());

128 
ulock
.
	`ªÀa£
();

130 
ulock
.
	`ªÀa£
();

131 
∑ddr
 
pma
 = 
	`unm≠Page2
(
≥
);

132 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/unm≠2: ", FmtHex(
vma
), '/', FmtHex(
∑gesize
<
N
>()), " -> ", FmtHex(
pma
), " PE:", FmtHex(
≥
));

133 
CPU
::
	`InvTLB
(
vma
);

137 
	}
}

139 
	gãm∂©e
<
size_t
 
	gN
>

140 
vaddr
 
	$gëVmR™ge
(
vaddr
 
addr
, 
size_t
& 
size
) {

141 
	`KASSERT1
(
m≠BŸtom
 < 
m≠T›
, "no AS memory break set yet");

142 
Sc›edLock
<> 
	`¶
(
vlock
);

143 
vaddr
 
íd
 = 
addr
 ? 
	`Æign_up
◊dd∏+ 
size
, 
∑gesize
<
N
>()Ë: 
	`Æign_down
(
m≠Sèπ
,Öagesize<N>());

144 
vaddr
 
°¨t
 = 
	`Æign_down
(
íd
 - 
size
, 
∑gesize
<
N
>());

145 i‡(
°¨t
 < 
m≠BŸtom
Ë 
t›addr
;

146 i‡(
°¨t
 < 
m≠Sèπ
) mapStart = start;

147 
size
 = 
íd
 - 
°¨t
;

148 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/gë: ", FmtHex(
°¨t
), '-', FmtHex(
íd
));

149  
°¨t
;

150 
	}
}

152 
	$putVmR™ge
(
vaddr
 
addr
, 
size_t
 
size
) {

153 
vaddr
 
íd
 = 
addr
 + 
size
;

154 
Sc›edLock
<> 
	`¶
(
vlock
);

155 i‡(
addr
 <
m≠Sèπ
 && 
íd
 >= mapStart) {

156 (
size
 = 
Pagög
::
	`ã°
(
íd
, 
AvaûabÀ
)Ë&&Énd + sizê<
m≠T›
)Énd += size;

157 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/put: ", FmtHex(
m≠Sèπ
), '-', FmtHex(
íd
));

158 
m≠Sèπ
 = 
íd
;

160 
	}
}

162 
	gãm∂©e
 <
boﬁ
 
	gövÆid©e
>

163 
	$runInvÆid©i⁄
(
PageInvÆid©i⁄
* 
pi
) {

164 
	`KASSERT0
(
this
);

165 
pi
 !
övLi°
.
	`back
()) {

166 i‡(
övÆid©e
Ë
CPU
::
	`InvTLB
(
pi
->
vma
);

167 
	`KASSERT0
(
pi
->
cou¡
 > 0);

168 
pi
->
cou¡
 -= 1;

169 
PageInvÆid©i⁄
* 
≈i
 = 
övLi°
.
	`√xt
(*
pi
);

170 i‡(
pi
->
cou¡
 == 0) {

171 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/öv: ", FmtHex(
pi
->
vma
), '/', FmtHex’i->
size
), ":",Öi->
cou¡
, " PE:", FmtHex’i->
≥¡ry
));

172 
∑ddr
 
pma
 = 
	`unm≠Page2
(
pi
->
≥¡ry
);

173 i‡(
pi
->
Æloc
 && 
pma
 !
œzyPage
 &&Öm®!
gu¨dPage
Ë
LoˇlPro˚ss‹
::
	`gëFømeM™agî
()->
	`ªÀa£Fømes
’ma,Öi->
size
);

174 
	`putVmR™ge
(
pi
->
vma
,Öi->
size
);

175 
övLi°
.
	`ªmove
(*
pi
);

176 
	`kdñëe2
(
pi
);

178 
pi
 = 
≈i
;

180 
	}
}

182 
	gpublic
:

183 
ölöe
 
AddªssS∑˚
(c⁄° 
boﬁ
 
k
 = 
Ál£
);

185 ~
	$AddªssS∑˚
() {

186 
	`KASSERT0
(!
kî√l
);

187 
	`KASSERT0
(
∑gëabÀ
 !
t›addr
);

188 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/destruct:", FmtHex(pagetable));

189 
	`KASSERT1
(
∑gëabÀ
 !
CPU
::
	`ªadCR3
(), 
	`FmtHex
(CPU::readCR3()));

190 
	`KASSERT0
(
övLi°
.
	`‰⁄t
(Ë=övLi°.
	`back
());

191 
	`kdñëe2
(
övLi°
.
	`back
());

192 
LoˇlPro˚ss‹
::
	`gëFømeM™agî
()->
ªÀa£Føme
<
∑gëabÀ∂
>(
∑gëabÀ
);

193 
	}
}

195 
boﬁ
 
	$u£r
(Ëc⁄° {  !
kî√l
; 
	}
}

197 
	$˛órU£rPagög
() {

198 
	`KASSERT0
(!
kî√l
);

199 
	`KASSERT0
(
∑gëabÀ
 !
t›addr
);

200 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
∑gëabÀ
), ")/de°roy:", *
this
);

201 
runInvÆid©i⁄
<
Ál£
>(
LoˇlPro˚ss‹
::
	`gëU£rPI
());

202 
LoˇlPro˚ss‹
::
	`£tU£rPI
(
övLi°
.
	`back
());

203 
	`˛órAŒ
(
	`Æign_down
(
u£rbŸ
, 
∑gesize
<
∑gñevñs
>()), 
	`Æign_up
(
u£π›
,Öagesize<∑gñevñs>()), *
LoˇlPro˚ss‹
::
	`gëFømeM™agî
());

204 
	}
}

206 
	$öôKî√l
(
vaddr
 
bŸ
, vadd∏
t›
, 
∑ddr
 
±
) {

207 
	`KASSERT0
(
kî√l
);

208 
∑gëabÀ
 = 
±
;

209 
m≠BŸtom
 = 
bŸ
;

210 
m≠Sèπ
 = 
m≠T›
 = 
t›
;

211 
övLi°
.
	`push_back
(*
k√w2
<
PageInvÆid©i⁄
>());

212 
	}
}

214 
	$öôU£r
(
vaddr
 
bssEnd
) {

215 
	`KASSERT0
(!
kî√l
);

216 
m≠BŸtom
 = 
bssEnd
;

217 
m≠Sèπ
 = 
m≠T›
 = 
u£π›
;

218 
	}
}

220 
PageInvÆid©i⁄
* 
	$öôPro˚ss‹
() {

221 
	`KASSERT0
(
kî√l
);

222 
Sc›edLock
<> 
	`¶k
(
ulock
);

223 
a˘iveC‹es
 += 1;

224  
övLi°
.
	`back
();

225 
	}
}

227 
	$runKî√lInvÆid©i⁄
() {

228 
	`KASSERT0
(
kî√l
);

229 
Sc›edLock
<> 
	`¶
(
ulock
);

230 
runInvÆid©i⁄
<
åue
>(
LoˇlPro˚ss‹
::
	`gëKînPI
());

231 
LoˇlPro˚ss‹
::
	`£tKînPI
(
övLi°
.
	`back
());

232 
	}
}

234 
	gãm∂©e
<
boﬁ
 
	glock
=
Ál£
>

235 
AddªssS∑˚
& 
	$íãr
() {

236 
AddªssS∑˚
* 
¥evAS
 = 
LoˇlPro˚ss‹
::
	`gëCuºAS
();

237 
	`KASSERT0
(
¥evAS
);

238 
	`KASSERTN
(
¥evAS
->
∑gëabÀ
 =
CPU
::
	`ªadCR3
(), 
	`FmtHex
(prevAS->pagetable), ' ', FmtHex(CPU::readCR3()));

239 
	`KASSERT0
(
∑gëabÀ
 !
t›addr
);

240 i‡(
¥evAS
 !
this
) {

241 
DBG
::
	`oué
(DBG::
ScheduÀr
, "AS swôch: ", 
	`FmtHex
(
¥evAS
->
∑gëabÀ
), " -> ", FmtHex(pagetable));

242 i‡(!
¥evAS
->
kî√l
) {

243 
Sc›edLock
<> 
	`¶
(
¥evAS
->
ulock
);

244 
¥evAS
->
runInvÆid©i⁄
<
Ál£
>(
LoˇlPro˚ss‹
::
	`gëU£rPI
());

245 
¥evAS
->
a˘iveC‹es
 -= 1;

247 i‡(
lock
Ë
LoˇlPro˚ss‹
::
	`lock
(
åue
);

248 
	`ö°ÆlPagëabÀ
(
∑gëabÀ
);

249 
LoˇlPro˚ss‹
::
	`£tCuºAS
(
this
);

250 i‡(
lock
Ë
LoˇlPro˚ss‹
::
	`u∆ock
(
åue
);

251 i‡(!
kî√l
) {

252 
Sc›edLock
<> 
	`¶
(
ulock
);

253 
LoˇlPro˚ss‹
::
	`£tU£rPI
(
övLi°
.
	`back
());

254 
a˘iveC‹es
 += 1;

257  *
¥evAS
;

258 
	}
}

260 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gÆloc
=
åue
>

261 
vaddr
 
	$m≠
(
vaddr
 
addr
, 
size_t
 
size
, 
mw‹d
 
¥Ÿ
, mw‹d 
Êags
, mw‹d 
fûedes
, mw‹d 
off
, 
∑ddr
 
pma
 = 0) {

262 
	`KASSERT1
(
¥Ÿ
 == 0,Örot);

263 
	`KASSERT1
(
Êags
 == 0, flags);

264 
	`KASSERT1
(
fûedes
 =
	`mw‹d
(-1), filedes);

265 
	`KASSERT1
(
off
 == 0, off);

266 
vaddr
 
°¨t
 = 
gëVmR™ge
<
N
>(
addr
, 
size
);

267 i‡(
kî√l
Ë
m≠PageRegi⁄
<
N
,
Æloc
 ? 
AŒoc
 : 
NoAŒoc
>(
pma
, 
°¨t
, 
size
, 
D©a
);

268 #i‡
TESTING_NEVER_ALLOC_LAZY


269 
m≠PageRegi⁄
<
N
,
Æloc
 ? 
AŒoc
 : 
NoAŒoc
>(
pma
, 
°¨t
, 
size
, 
D©a
);

271 
m≠PageRegi⁄
<
N
,
Æloc
 ? 
Lazy
 : 
NoAŒoc
>(
pma
, 
°¨t
, 
size
, 
D©a
);

273  
°¨t
;

274 
	}
}

276 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gÆloc
=
åue
>

277 
	$unm≠
(
vaddr
 
addr
, 
size_t
 
size
) {

278 
	`KASSERT1
(
	`Æig√d
(
addr
, 
∑gesize
<
N
>()),áddr);

279 
size
 = 
	`Æign_up
(size, 
∑gesize
<
N
>());

280 
unm≠PageRegi⁄
<
N
,
Æloc
,
Ál£
>(
addr
, 
size
);

281 
	}
}

283 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gÆloc
=
åue
>

284 
vaddr
 
	$km≠
(
vaddr
 
addr
, 
size_t
 
size
, 
∑ddr
 
pma
 = 0) {

285 
vaddr
 
°¨t
 = 
gëVmR™ge
<
N
>(
addr
, 
size
);

286 
m≠PageRegi⁄
<
N
,
Æloc
 ? 
AŒoc
 : 
NoAŒoc
>(
pma
, 
°¨t
, 
size
, 
Kî√lD©a
);

287  
°¨t
;

288 
	}
}

290 
vaddr
 
	$ÆlocSèck
(
size_t
 
ss
) {

291 
	`KASSERT1
(
ss
 >
möimumSèck
, ss);

292 
size_t
 
size
 = 
ss
 + 
°ackGu¨dPage
;

293 
vaddr
 
vma
 = 
gëVmR™ge
<
°ack∂
>(0, 
size
);

294 
	`KASSERT0
(
vma
 !
t›addr
);

295 
	`KASSERTN
(
size
 =
ss
 + 
°ackGu¨dPage
, ss, ' ', size);

296 
m≠PageRegi⁄
<
°ack∂
,
Gu¨d
>(0, 
vma
, 
°ackGu¨dPage
, 
D©a
);

297 
vma
 +
°ackGu¨dPage
;

298 i‡(
kî√l
Ë
m≠PageRegi⁄
<
°ack∂
,
AŒoc
>(0, 
vma
, 
ss
, 
D©a
);

299 #i‡
TESTING_NEVER_ALLOC_LAZY


300 
m≠PageRegi⁄
<
°ack∂
,
AŒoc
>(0, 
vma
, 
ss
, 
D©a
);

302 
m≠PageRegi⁄
<
°ack∂
,
Lazy
>(0, 
vma
, 
ss
, 
D©a
);

304  
vma
;

305 
	}
}

307 
	$ªÀa£Sèck
(
vaddr
 
vma
, 
size_t
 
ss
) {

308 
unm≠PageRegi⁄
<
°ack∂
,
åue
,
Ál£
>(
vma
 - 
°ackGu¨dPage
, 
ss
 + stackGuardPage);

309 
	}
}

311 
	gãm∂©e
<
size_t
 
	gN
,
boﬁ
 
	gcheck
=
åue
>

312 
	$ÆlocDúe˘
–
vaddr
 
vma
, 
size_t
 
size
, 
PageTy≥
 
t
 ) {

313 
	`KASSERT1
(!
check
 || 
vma
 < 
m≠BŸtom
 || vm®> 
m≠T›
, vma);

314 
m≠PageRegi⁄
<
N
,
AŒoc
>(0, 
vma
, 
size
, 
t
);

315 
	}
}

317 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gcheck
=
åue
>

318 
	$ªÀa£Dúe˘
–
vaddr
 
vma
, 
size_t
 
size
 ) {

319 
	`KASSERT1
(!
check
 || 
vma
 < 
m≠BŸtom
 || vm®> 
m≠T›
, vma);

320 
unm≠PageRegi⁄
<
N
,
åue
,åue>(
vma
, 
size
);

321 
	}
}

323 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gcheck
=
åue
>

324 
	$m≠Dúe˘
–
∑ddr
 
pma
, 
vaddr
 
vma
, 
size_t
 
size
, 
PageTy≥
 
t
 ) {

325 
	`KASSERT1
(!
check
 || 
vma
 < 
m≠BŸtom
 || vm®> 
m≠T›
, vma);

326 
m≠PageRegi⁄
<
N
,
NoAŒoc
>(
pma
, 
vma
, 
size
, 
t
);

327 
	}
}

329 
	gãm∂©e
<
size_t
 
	gN
, 
boﬁ
 
	gcheck
=
åue
>

330 
	$unm≠Dúe˘
–
vaddr
 
vma
, 
size_t
 
size
 ) {

331 
	`KASSERT1
(!
check
 || 
vma
 < 
m≠BŸtom
 || vm®> 
m≠T›
, vma);

332 
unm≠PageRegi⁄
<
N
,
Ál£
,
åue
>(
vma
, 
size
);

333 
	}
}

335 
	$¥öt
(
o°ªam
& 
os
) const;

336 
	}
};

338 
ölöe
 
	go°ªam
& 
	g›î©‹
<<(o°ªam& 
	gos
, c⁄° 
	gAddªssS∑˚
& 
	gas
) {

339 
	gas
.
¥öt
(
os
);

340  
	gos
;

343 
AddªssS∑˚
 
kî√lS∑˚
;

345 
ölöe
 
	gAddªssS∑˚
::
	$AddªssS∑˚
(c⁄° 
boﬁ
 
k
Ë: 
	`a˘iveC‹es
(0),

346 
	`∑gëabÀ
(
t›addr
), 
	`m≠BŸtom
(0), 
	`m≠Sèπ
(0), 
	`m≠T›
(0), 
	$kî√l
(
k
) {

347 i‡(!
kî√l
) {

348 
kî√lS∑˚
.
∂ock
.
	`acquúe
();

349 
∑gëabÀ
 = 
Pagög
::
	`˛⁄eKî√lPT
(*
LoˇlPro˚ss‹
::
	`gëFømeM™agî
());

350 
kî√lS∑˚
.
∂ock
.
	`ªÀa£
();

351 
DBG
::
	`oué
(DBG::
VM
, "AS(", 
	`FmtHex
(
kî√lS∑˚
.
∑gëabÀ
), ")/cloned: ", FmtHex(pagetable));

352 
övLi°
.
	`push_back
(*
k√w2
<
PageInvÆid©i⁄
>());

354 
	}
}

356 
ölöe
 
	gAddªssS∑˚
& 
	$CuºAS
() {

357 
AddªssS∑˚
* 
as
 = 
LoˇlPro˚ss‹
::
	`gëCuºAS
();

358 
	`KASSERT0
(
as
);

359  *
as
;

360 
	}
}

	@src/kernel/Clock.h

17 #i‚de‡
_Clock_h_


18 
	#_Clock_h_
 1

	)

20 
	~"machöe/CPU.h
"

22 ˛as†
	cClock
 : 
public
 
NoObje˘
 {

23 vﬁ©ûê
mw‹d
 
tick
;

24 
	mpublic
:

25 
	$tickî
(Ë{ 
tick
 += 1; }

26 
mw‹d
 
	$now
(Ë{  
tick
; 
	}
}

27 
	$waô
(
mw‹d
 
ticks
) {

28 
mw‹d
 
°¨t
 = 
tick
;

29 
tick
 < 
°¨t
 + 
ticks
Ë
CPU
::
	`Pau£
();

30 
	}
}

	@src/kernel/FrameManager.cc

17 
	~"kî√l/FømeM™agî.h
"

19 
∑ddr
 
	gFømeM™agî
::
	$ÆlocC⁄tig
(
size_t
& 
size
, 
∑ddr
 
Æign
,Öadd∏
limô
) {

20 
size
 = 
	`Æign_up
(size, 
•s
);

21 i‡(
size
 < 
dps
) {

22 
Sc›edLock
<> 
	`¶1
(
•lock
);

23 autÿ
ô
 = 
smÆlFømes
.
	`begö
(); ià!smÆlFømes.
	`íd
(); ++it) {

24 
size_t
 
idx
 = 
ô
->
£c⁄d
.
	`föd£t
();

25 
mw‹d
 
found
 = 0;

26 
size_t
 
ba£idx
;

27 
∑ddr
 
ba£addr
;

29 i‡(
found
) {

30 
found
 +
•s
;

32 
ba£idx
 = 
idx
;

33 
ba£addr
 = 
ô
->
fú°
 * 
dps
 + 
ba£idx
 * 
•s
;

34 i‡(
ba£addr
 + 
size
 > 
limô
Ë
u£_œrge_‰ame
;

35 i‡(
	`Æig√d
(
ba£addr
, 
Æign
)Ë
found
 = 
•s
;

37 i‡(
found
 >
size
) {

38 
size_t
 
i
 = 
ba£idx
; i <
idx
; i +1Ë
ô
->
£c⁄d
.
	`˛ór
(i);

39 i‡(
ô
->
£c⁄d
.
	`em±y
()Ë
smÆlFømes
.
	`îa£
(it);

40  
ba£addr
;

43 
idx
 += 1;

44 i‡(
idx
 >
∑gëabÀíåõs
Ë
√xt_smÆl_£t
;

45 i‡(
ô
->
£c⁄d
.
	`ã°
(
idx
)) ;

46 
found
 = 0;

49 
√xt_smÆl_£t
:;

51 
u£_œrge_‰ame
:

52 
Sc›edLock
<> 
	`¶2
(
Õlock
);

53 
size_t
 
idx
 = 
œrgeFømes
.
	`föd£t
();

54 i‡(
idx
 * 
dps
 + 
size
 > 
limô
Ë 
t›addr
;

55 
œrgeFømes
.
	`˛ór
(
idx
);

56 autÿ
ô
 = 
smÆlFømes
.
	`em∂a˚
(
idx
, 
Bôm≠
<
∑gëabÀíåõs
>::
	`fûÀd
()).
fú°
;

57 
size_t
 
i
 = 0; i < 
size
/
•s
; i +1Ë
ô
->
£c⁄d
.
	`˛ór
(i);

58 
	`KASSERT0
(!
ô
->
£c⁄d
.
	`em±y
());

59  
idx
 * 
dps
;

61 
Sc›edLock
<> 
	`¶
(
Õlock
);

62 
size
 = 
	`Æign_up
(size, 
dps
);

63 
size_t
 
idx
 = 
œrgeFømes
.
	`föd£t
();

64 
mw‹d
 
found
 = 0;

65 
size_t
 
ba£idx
;

66 
∑ddr
 
ba£addr
;

68 i‡(
found
) {

69 
found
 +
dps
;

71 
ba£idx
 = 
idx
;

72 
ba£addr
 = 
idx
 * 
dps
;

73 i‡(
ba£addr
 + 
size
 > 
limô
Ë 
t›addr
;

74 i‡(
	`Æig√d
(
ba£addr
, 
Æign
)Ë
found
 = 
dps
;

76 i‡(
found
 >
size
) {

77 
size_t
 
i
 = 
ba£idx
; i <
idx
; i +1Ë
œrgeFømes
.
	`˛ór
(i);

78  
ba£addr
;

81 
idx
 += 1;

82 i‡(
idx
 >
bôcou¡
Ë 
t›addr
;

83 i‡(
œrgeFømes
.
	`ã°
(
idx
)) ;

84 
found
 = 0;

88 
	`KABORT0
();

89 
	`uƒóchabÀ
();

90 
	}
}

92 
	go°ªam
& 
	g›î©‹
<<(o°ªam& 
	gos
, c⁄° 
	gFømeM™agî
& 
	gfm
) {

93 
size_t
 
	gbc
 = 
fm
.
bôcou¡
;

94 
size_t
 
	g°¨t
 = 
fm
.
œrgeFømes
.
föd£t
();

95 
size_t
 
	gíd
 = 
°¨t
;

96 
	gc⁄°_ˇ°
<
	gFømeM™agî
&>(
	gfm
).
	gÕlock
.
acquúe
();

98 i‡(
	g°¨t
 >
bc
) ;

99 
	gíd
 = 
fm
.
œrgeFømes
.
gëønge
(
°¨t
, 
bc
);

100 
	gos
 << ' ' << 
FmtHex
(
°¨t
*
fm
.
dps
Ë<< '-' << FmtHex(
íd
*fm.dps);

101 i‡(
	gíd
 >
bc
) ;

102 
	g°¨t
 = 
fm
.
œrgeFømes
.
gëønge
(
íd
, 
bc
);

104 
	gc⁄°_ˇ°
<
	gFømeM™agî
&>(
	gfm
).
	gÕlock
.
ªÀa£
();

105 
	g°¨t
 = 
t›addr
;

106 
	gSc›edLock
<> 
¶
(
c⁄°_ˇ°
<
FømeM™agî
&>(
fm
).
•lock
);

107 áutÿ
	gô
 = 
fm
.
smÆlFømes
.
begö
(); ià!fm.smÆlFømes.
íd
(); ++it ) {

108 i‡(
	g°¨t
 !
t›addr
 && 
ô
->
fú°
 * 
fm
.
dps
 !
íd
) {

109 
os
 << ' ' << 
FmtHex
(
°¨t
Ë<< '-' << FmtHex(
íd
);

110 
	g°¨t
 = 
t›addr
;

112 
size_t
 
	gidx
 = 0; idx < 
	g∑gëabÀíåõs
; idx += 1) {

113 i‡(
ô
->
£c⁄d
.
ã°
(
idx
)) {

114 i‡(
°¨t
 =
t›addr
Ë
íd
 = sèπ = 
ô
->
fú°
 * 
fm
.
dps
 + 
idx
 * 
∑gesize
<1>();

115 
	gíd
 +
∑gesize
<1>();

116 } i‡(
	g°¨t
 !
t›addr
) {

117 
os
 << ',' << 
FmtHex
(
°¨t
Ë<< '-' << FmtHex(
íd
);

118 
	g°¨t
 = 
t›addr
;

122  
	gos
;

	@src/kernel/FrameManager.h

17 #i‚de‡
_FømeM™agî_h_


18 
	#_FømeM™agî_h_
 1

	)

20 
	~"gíîic/Bôm≠.h
"

21 
	~"kî√l/Mem‹yM™agî.h
"

22 
	~"kî√l/Ouçut.h
"

24 
	~<m≠
>

27 ˛as†
	cFømeM™agî
 {

28 
‰õnd
 
	mo°ªam
& 
	m›î©‹
<<(o°ªam&, c⁄° 
	mFømeM™agî
&);

30 
	mãm∂©e
<
ty≥«me
 
	mT
> 
˛ass
 
	mM≠AŒoˇt‹
 : 
public
 
Æloˇt‹
<
T
> {

31 
public
:

32 
ãm∂©e
<
ty≥«me
 
U
> 
	sªböd
 { 
M≠AŒoˇt‹
<
	tU
> 
	tŸhî
; };

33 
M≠AŒoˇt‹
() = ;

34 
M≠AŒoˇt‹
(c⁄° M≠AŒoˇt‹& 
x
) = ;

35 
	mãm∂©e
<
ty≥«me
 
	mU
> 
M≠AŒoˇt‹
 (c⁄° M≠AŒoˇt‹<
U
>& 
x
Ë: 
Æloˇt‹
<
T
>(x) {}

36 ~
M≠AŒoˇt‹
() = ;

37 
T
* 
Æloˇã
(
size_t
 
n
, c⁄° * = 0Ë{  
kmÆloc
<T>(n); }

38 
dóŒoˇã
(
T
* 
p
, 
size_t
 
s
Ë{ 
	mk‰ì
<
	mT
>(
	mp
, 
	ms
); }

41 c⁄° 
size_t
 
	gd∂
 = 
kî√Õl
;

42 c⁄° 
size_t
 
	g•l
 = 
kî√Õl
 - 1;

43 c⁄° 
size_t
 
	gdps
 = 
∑gesize
<
d∂
>();

44 c⁄° 
size_t
 
	g•s
 = 
∑gesize
<
•l
>();

46 
	gHõørchiˇlBôm≠
<
	t∑gëabÀíåõs
,
	t‰amebôs
-
	t∑gesizebôs
<
	td∂
>()> 
	tLFBôm≠
;

47 
	gm≠
<
	t∑ddr
,
	tBôm≠
<
	t∑gëabÀíåõs
>,
	tÀss
<∑ddr>,
	tM≠AŒoˇt‹
<∑ddr>> 
	tSFBôm≠
;

48 
SpöLock
 
	gÕlock
;

49 
LFBôm≠
 
	gœrgeFømes
;

50 
SpöLock
 
	g•lock
;

51 
SFBôm≠
 
	gsmÆlFømes
;

53 
size_t
 
	gbôcou¡
;

55 
size_t
 
	$ªÀa£SmÆl
(
∑ddr
 
addr
, 
size_t
 
size
 = 
•s
) {

57 
size_t
 
idx
 = 
addr
 / 
dps
;

58 autÿ
ô
 = 
smÆlFømes
.
	`lowî_bound
(
idx
);

59 i‡(
ô
 =
smÆlFømes
.
	`íd
(Ë|| it->
fú°
 !
idx
Ëô = smÆlFømes.
	`em∂a˚_höt
(ô, idx, 
Bôm≠
<
∑gëabÀíåõs
>());

62 
size_t
 
°¨t
 = (
addr
 % 
dps
Ë/ 
•s
;

63 
size_t
 
íd
 = 
	`mö
(
∑gëabÀíåõs
, 
°¨t
 + 
size
 / 
•s
);

64 
size_t
 
i
 = 
°¨t
; i < 
íd
; i +1Ë
ô
->
£c⁄d
.
	`£t
(i);

67 i‡(
ô
->
£c⁄d
.
	`fuŒ
()) {

68 
smÆlFømes
.
	`îa£
(
ô
);

69 
Sc›edLock
<> 
	`¶
(
Õlock
);

70 
œrgeFømes
.
	`£t
(
ô
->
fú°
);

73  (
íd
 - 
°¨t
Ë* 
•s
;

74 
	}
}

76 
	gpublic
:

77 
c⁄°ex¥
 
size_t
 
	$gëSize
–
∑ddr
 
t›
 ) {

78  
LFBôm≠
::
	`Ælocsize
(
	`divup
(
t›
, 
dps
));

79 
	}
}

81 
	$öô
–
buÂå_t
 
p
, 
∑ddr
 
t›
 ) {

82 
bôcou¡
 = 
	`divup
(
t›
, 
dps
);

83 
œrgeFømes
.
	`öô
(
bôcou¡
, 
p
);

84 
	}
}

86 
	gãm∂©e
<
size_t
 
	gN
>

87 
∑ddr
 
	$ÆlocFøme
() {

88 
∑ddr
 
addr
;

89 
N
) {

90 
•l
: {

91 
Sc›edLock
<> 
	`¶
(
•lock
);

92 i‡(
smÆlFømes
.
	`em±y
()) {

93 
Õlock
.
	`acquúe
();

94 
size_t
 
idx
 = 
œrgeFømes
.
	`föd£t
();

95 
	`¶ow∑th
(
idx
 =
limô
<
mw‹d
>()Ë 
t›addr
;

96 
œrgeFømes
.
	`˛ór
(
idx
);

97 
Õlock
.
	`ªÀa£
();

98 
smÆlFømes
.
	`em∂a˚
(
idx
, 
Bôm≠
<
∑gëabÀíåõs
>::
	`fûÀd
());

100 autÿ
ô
 = 
smÆlFømes
.
	`begö
();

101 
size_t
 
idx2
 = 
ô
->
£c⁄d
.
	`föd£t
();

102 
ô
->
£c⁄d
.
	`˛ór
(
idx2
);

103 i‡(
ô
->
£c⁄d
.
	`em±y
()Ë
smÆlFømes
.
	`îa£
(it);

104 
addr
 = 
ô
->
fú°
 * 
dps
 + 
idx2
 * 
•s
;

106 
d∂
: {

107 
Sc›edLock
<> 
	`¶
(
Õlock
);

108 
size_t
 
idx
 = 
œrgeFømes
.
	`föd£t
();

109 
	`¶ow∑th
(
idx
 =
limô
<
mw‹d
>()Ë 
t›addr
;

110 
œrgeFømes
.
	`˛ór
(
idx
);

111 
addr
 = 
idx
 * 
dps
;

113 : 
	`KABORT1
(
N
);

115 
DBG
::
	`oué
(DBG::
Føme
, "FM/Æloc<", 
N
, ">: ", 
	`FmtHex
(
addr
));

116  
addr
;

117 
	}
}

119 
	gãm∂©e
<
size_t
 
	gN
>

120 
	$ªÀa£Føme
–
∑ddr
 
addr
 ) {

121 
	`KASSERT1
–
	`Æig√d
(
addr
, 
∑gesize
<
N
>()),áddr );

122 
N
) {

123 
•l
: {

124 
Sc›edLock
<> 
	`¶
(
•lock
);

125 
	`ªÀa£SmÆl
(
addr
);

127 
d∂
: {

128 
Sc›edLock
<> 
	`¶
(
Õlock
);

129 
œrgeFømes
.
	`£t
(
addr
 / 
dps
);

131 : 
	`KABORT1
(
N
);

133 
DBG
::
	`oué
(DBG::
Føme
, "FM/ªÀa£<", 
N
, ">: ", 
	`FmtHex
(
addr
));

134 
	}
}

136 
	$ªÀa£Fømes
–
∑ddr
 
addr
, 
size_t
 
size
 ) {

137 i‡(
size
 < 
dps
Ë
ªÀa£Føme
<
•l
>(
addr
);

138 
ªÀa£Føme
<
d∂
>(
addr
);

139 
	}
}

141 
	$ªÀa£Regi⁄
–
∑ddr
 
addr
, 
size_t
 
size
 ) {

142 
	`KASSERT1
–
	`Æig√d
(
addr
, 
•s
),áddr );

143 
	`KASSERT1
–
	`Æig√d
(
size
, 
•s
), size );

144 
DBG
::
	`oué
(DBG::
Føme
, "FM/ªÀa£Regi⁄: ", 
	`FmtHex
(
addr
), '/', FmtHex(
size
));

145 
size
 > 0) {

146 
size_t
 
Àvñ_addr
 = 1 + (
	`Æignmít
(
addr
Ë- 
∑geoff£tbôs
Ë/ 
∑gëabÀbôs
;

147 
size_t
 
Àvñ_size
 = 1 + (
	`Êo‹log2
(
size
Ë- 
∑geoff£tbôs
Ë/ 
∑gëabÀbôs
;

148 
size_t
 
Àvñ
 = 
	`mö
(
Àvñ_addr
, 
Àvñ_size
);

149 
size_t
 
Àn
;

150 i‡(
Àvñ
 < 
d∂
) {

151 
Sc›edLock
<> 
	`¶
(
•lock
);

152 
Àn
 = 
	`ªÀa£SmÆl
(
addr
, 
size
);

154 
Sc›edLock
<> 
	`¶
(
Õlock
);

155 
œrgeFømes
.
	`£t
(
addr
 / 
dps
);

156 
Àn
 = 
dps
;

158 
addr
 +
Àn
;

159 
size
 -
Àn
;

161 
	}
}

163 
∑ddr
 
ÆlocC⁄tig
–
size_t
& 
size
,Öadd∏
Æign
,Öadd∏
limô
 );

	@src/kernel/Kernel.cc

17 
	~"ru¡ime/Thªad.h
"

18 
	~"kî√l/AddªssS∑˚.h
"

19 
	~"kî√l/Clock.h
"

20 
	~"kî√l/Ouçut.h
"

21 
	~"w‹ld/Ac˚ss.h
"

22 
	~"machöe/Machöe.h
"

23 
	~"devi˚s/Keybﬂrd.h
"

25 
	~"maö/U£rMaö.h
"

27 
AddªssS∑˚
 
kî√lS∑˚
(
åue
);

28 vﬁ©ûê
mw‹d
 
	gClock
::
tick
;

30 
Keybﬂrd
 
keybﬂrd
;

32 #i‡
TESTING_KEYCODE_LOOP


33 
	$keybLo›
() {

35 
Keybﬂrd
::
KeyCode
 
c
 = 
keybﬂrd
.
	`ªad
();

36 
StdEº
.
	`¥öt
(' ', 
	`FmtHex
(
c
));

38 
	}
}

41 
	$kosMaö
() {

42 
KOUT
::
	`oué
("WñcomêtÿKOS!", 
kídl
);

43 autÿ
ôî
 = 
kî√lFS
.
	`föd
("motb");

44 i‡(
ôî
 =
kî√lFS
.
	`íd
()) {

45 
KOUT
::
	`oué
("motb informationÇot found");

47 
FûeAc˚ss
 
	`f
(
ôî
->
£c⁄d
);

49 
c
;

50 i‡(
f
.
	`ªad
(&
c
, 1) == 0) ;

51 
KOUT
::
	`out1
(
c
);

53 
KOUT
::
	`oué
();

55 #i‡
TESTING_TIMER_TEST


56 
StdEº
.
	`¥öt
("ÅimerÅest, 3 secs...");

57 
i
 = 0; i < 3; i++) {

58 
Timeout
::
	`¶ìp
(
Clock
::
	`now
() + 1000);

59 
StdEº
.
	`¥öt
(' ', 
i
+1);

61 
StdEº
.
	`¥öt
(" d⁄e.", 
kídl
);

63 #i‡
TESTING_KEYCODE_LOOP


64 
Thªad
* 
t
 = Thªad::
	`¸óã
()->
	`£tPri‹ôy
(
t›Pri‹ôy
);

65 
Machöe
::
	`£tAfföôy
(*
t
, 0);

66 
t
->
	`°¨t
((
±r_t
)
keybLo›
);

68 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
U£rMaö
);

69 #i‡
TESTING_PING_LOOP


71 
Timeout
::
	`¶ìp
(
Clock
::
	`now
() + 1000);

72 
KOUT
::
	`oué
("...ping...");

75 
	}
}

77 "C" 
	$kmaö
(
mw‹d
 
magic
, mw‹d 
addr
, mw‹d 
idx
Ë
	`__£˘i⁄
(".boot.text");

78 "C" 
	$kmaö
(
mw‹d
 
magic
, mw‹d 
addr
, mw‹d 
idx
) {

79 i‡(
magic
 =0 && 
addr
 == 0xE85250D6) {

81 
Machöe
::
	`öôAP
(
idx
);

84 
Machöe
::
	`öôBSP
(
magic
, 
addr
, 
idx
);

86 
	}
}

	@src/kernel/MemoryManager.cc

17 
	~"kî√l/AddªssS∑˚.h
"

18 
	~"kî√l/Mem‹yM™agî.h
"

19 
	~"kî√l/Ouçut.h
"

21 
	~"exã∫/dlmÆloc/mÆloc_glue.h
"

22 
	~"exã∫/dlmÆloc/mÆloc.h
"

24 
SpöLock
 
	gMem‹yM™agî
::
mÆlocLock
;

25 * 
	gMem‹yM™agî
::
mÆlocS∑˚
;

27 
BlockSt‹e
 
	gMem‹yM™agî
::
blockSt‹e
[1 + 
Mem‹yM™agî
::
t›idx
 - Mem‹yM™agî::
bŸidx
];

28 
PageSt‹e
 
	gMem‹yM™agî
::
∑geSt‹e
;

30 
°©ic_as£π
(
DEFAULT_GRANULARITY
 =
kî√Õs
, "dlmalloc DEFAULT_GRANULARITY != kernelps");

32 * 
	$dl_mm≠
(* 
addr
, 
size_t
 
Àn
, , , , 
_off64_t
) {

33 
	`KASSERT1
–
	`Æig√d
(
Àn
, 
	`size_t
(
DEFAULT_GRANULARITY
)),Üen);

34 
vaddr
 
va
 = 
kî√lS∑˚
.
km≠
<
kî√Õl
>(
	`vaddr
(
addr
), 
Àn
);

35 
	`KASSERT0
(
va
 !
t›addr
);

36  (*)
va
;

37 
	}
}

39 
	$dl_munm≠
(* 
addr
, 
size_t
 
Àn
) {

40 
	`KASSERT1
–
	`Æig√d
(
Àn
, 
	`size_t
(
DEFAULT_GRANULARITY
)),Üen);

41 
kî√lS∑˚
.
unm≠
<
kî√Õl
>(
	`vaddr
(
addr
), 
Àn
);

43 
	}
}

45 
	gMem‹yM™agî
::
	$öô0
–
vaddr
 
p
, 
size_t
 
s
 ) {

46 
mÆlocS∑˚
 = 
	`¸óã_m•a˚_wôh_ba£
((
±r_t
)
p
, 
s
, 0);

47 
	}
}

49 
	gMem‹yM™agî
::
	$ªöô
–
vaddr
 
p
, 
size_t
 
s
 ) {

50 
	`de°roy_m•a˚
(
mÆlocS∑˚
);

51 
mÆlocS∑˚
 = 
	`¸óã_m•a˚_wôh_ba£
((
±r_t
)
p
, 
s
, 0);

52 
	}
}

54 
±r_t
 
	gMem‹yM™agî
::
	$Àgacy_mÆloc
(
size_t
 
s
) {

55 
Sc›edLock
<> 
	`¶
(
mÆlocLock
);

56  
	`m•a˚_mÆloc
(
mÆlocS∑˚
, 
s
);

57 
	}
}

59 
	gMem‹yM™agî
::
	$Àgacy_‰ì
(
±r_t
 
p
) {

60 
Sc›edLock
<> 
	`¶
(
mÆlocLock
);

61 
	`m•a˚_‰ì
(
mÆlocS∑˚
, 
p
);

62 
	}
}

64 
vaddr
 
	gMem‹yM™agî
::
	$m≠
(
size_t
 
s
, 
∑ddr
 
pma
) {

65 i‡(
s
 < 
kî√Õs
) {

66 i‡(!
pma
Ë 
kî√lS∑˚
.
km≠
<1,
åue
>(0, 
s
);

67  
kî√lS∑˚
.
km≠
<1,
Ál£
>(0, 
s
, 
pma
);

69 i‡(!
pma
Ë 
kî√lS∑˚
.
km≠
<
kî√Õl
,
åue
>(0, 
s
);

70  
kî√lS∑˚
.
km≠
<
kî√Õl
,
Ál£
>(0, 
s
, 
pma
);

72 
	}
}

74 
	gMem‹yM™agî
::
	$unm≠
(
vaddr
 
v
, 
size_t
 
s
, 
boﬁ
 
Æloc
) {

75 i‡(
s
 < 
kî√Õs
) {

76 i‡(
Æloc
Ë
kî√lS∑˚
.
unm≠
<1>(
v
, 
s
);

77 
kî√lS∑˚
.
unm≠
<1,
Ál£
>(
v
, 
s
);

79 i‡(
Æloc
Ë
kî√lS∑˚
.
unm≠
<
kî√Õl
>(
v
, 
s
);

80 
kî√lS∑˚
.
unm≠
<
kî√Õl
,
Ál£
>(
v
 ,
s
);

82 
	}
}

84 
vaddr
 
	gMem‹yM™agî
::
	$ÆlocC⁄tig
(
size_t
& 
size
, 
∑ddr
 
Æign
,Öadd∏
limô
) {

85 
∑ddr
 
pma
 = 
LoˇlPro˚ss‹
::
	`gëFømeM™agî
()->
	`ÆlocC⁄tig
(
size
, 
Æign
, 
limô
);

86 
	`KASSERT0
(
pma
 !
t›addr
);

87  
	`m≠
(
size
, 
pma
);

88 
	}
}

	@src/kernel/MemoryManager.h

17 #i‚de‡
_Mem‹yM™agî_h_


18 
	#_Mem‹yM™agî_h_
 1

	)

20 
	~"machöe/Mem‹y.h
"

21 
	~"machöe/SpöLock.h
"

23 "C" 
‰ì
(* 
p
);

24 "C" * 
mÆloc
(
size_t
);

26 
	sBlockSt‹e
 {

27 
	sFªe
 { 
Fªe
* 
	m√xt
; };

28 
SpöLock
 
	mlock
;

29 
Fªe
* 
	m‰ì°ack
;

30 
	mpublic
:

31 
BlockSt‹e
(Ë: 
‰ì°ack
(
nuŒ±r
) {}

32 
boﬁ
 
em±y
(Ë{  
‰ì°ack
 =
nuŒ±r
; }

33 
	mãm∂©e
<
size_t
 
	mS
> 
fûl
(
vaddr
 
p
, size_à
s
) {

34 
°©ic_as£π
(
S
 >(
Fªe
), "SÅo small");

35 
	ms
 >
S
) {

36 ((
Fªe
*)
p
)->
√xt
 = 
‰ì°ack
;

37 
	m‰ì°ack
 = (
Fªe
*)
p
;

38 
	mp
 +
S
;

39 
	ms
 -
S
;

42 
vaddr
 
Æloc
() {

43 
KASSERT0
(
‰ì°ack
);

44 
vaddr
 
	mªt
 = (vaddr)
‰ì°ack
;

45 
	m‰ì°ack
 = 
‰ì°ack
->
√xt
;

46  
	mªt
;

48 
ªÀa£
(
vaddr
 
p
) {

49 ((
	mFªe
*)
	mp
)->
	m√xt
 = 
‰ì°ack
;

50 
	m‰ì°ack
 = (
Fªe
*)
p
;

54 ˛as†
	cPageSt‹e
 : 
public
 
BlockSt‹e
 {

55 
public
:

56 c⁄° 
size_t
 
psize
 = 
∑gesize
<1>();

57 
ölöe
 
check
();

61 ˛as†
	cMem‹yM™agî
 : 
public
 
NoObje˘
 {

62 
‰õnd
 
‰ì
(*);

63 
‰õnd
 * 
mÆloc
(
size_t
);

64 
SpöLock
 
	mmÆlocLock
;

65 * 
	mmÆlocS∑˚
;

66 
±r_t
 
Àgacy_mÆloc
(
size_t
 
s
);

67 
Àgacy_‰ì
(
±r_t
 
p
);

69 c⁄° 
size_t
 
	mbŸidx
 = 6;

70 c⁄° 
size_t
 
	mt›idx
 = 7;

71 
BlockSt‹e
 
	mblockSt‹e
[1 + 
t›idx
 - 
bŸidx
];

72 
PageSt‹e
 
	m∑geSt‹e
;

74 
	mpublic
:

75 
öô0
–
vaddr
 
p
, 
size_t
 
s
 );

76 
ªöô
–
vaddr
 
p
, 
size_t
 
s
 );

78 
vaddr
 
	$Æloc
–
size_t
 
s
 ) {  (
vaddr
)
	`Àgacy_mÆloc
(s); }

79 
	$ªÀa£
–
vaddr
 
p
, 
size_t
 
s
 ) { 
	`Àgacy_‰ì
((
±r_t
Ì); 
	}
}

80 
vaddr
 
m≠
(
size_t
 
s
, 
∑ddr
 
pma
 = 0);

81 
unm≠
(
vaddr
 
v
, 
size_t
 
s
, 
boﬁ
 
Æloc
 = 
åue
);

82 
vaddr
 
ÆlocC⁄tig
(
size_t
& 
size
, 
∑ddr
 
Æign
,Öadd∏
limô
);

84 
	gãm∂©e
<
ty≥«me
 
	gT
> 
T
* 
	$Æloc2
() {

85 c⁄° 
size_t
 
tidx
 = 
	`˚ûöglog2
((
T
));

86 
	`°©ic_as£π
(
tidx
 >
bŸidx
 &&Åidx <
t›idx
, "alloc2:Åype size outsideÑange");

87 c⁄° 
size_t
 
idx
 = 
tidx
 - 
bŸidx
;

88 
Sc›edLock
<> 
	`¶1
(
blockSt‹e
[
idx
].
lock
);

89 i‡(
blockSt‹e
[
idx
].
	`em±y
()) {

90 
Sc›edLock
<> 
	`¶2
(
∑geSt‹e
.
lock
);

91 
∑geSt‹e
.
	`check
();

92 
blockSt‹e
[
idx
].
fûl
<
pow2
<
size_t
>(
tidx
)>(
∑geSt‹e
.
	`Æloc
(), 
PageSt‹e
::
psize
);

94  (
T
*)
blockSt‹e
[
idx
].
	`Æloc
();

95 
	}
}

97 
	gãm∂©e
<
ty≥«me
 
	gT
> 
	$ªÀa£2
(
T
* 
p
) {

98 c⁄° 
size_t
 
tidx
 = 
	`˚ûöglog2
((
T
));

99 
	`°©ic_as£π
(
tidx
 >
bŸidx
 &&Åidx <
t›idx
, "release2:Åype size outsideÑange");

100 c⁄° 
size_t
 
idx
 = 
tidx
 - 
bŸidx
;

101 
Sc›edLock
<> 
	`¶1
(
blockSt‹e
[
idx
].
lock
);

102 
blockSt‹e
[
idx
].
	`ªÀa£
(
	`vaddr
(
p
));

103 
	}
}

106 
ölöe
 
	gPageSt‹e
::
	$check
() {

107 i‡(
	`em±y
()) {

108 
vaddr
 
mem
 = 
Mem‹yM™agî
::
	`m≠
(
psize
);

109 
‰ì°ack
 = (
Fªe
*)
mem
;

110 
‰ì°ack
->
√xt
 = 
nuŒ±r
;

112 
	}
}

114 
	gãm∂©e
<
ty≥«me
 
	gT
>

115 
T
* 
	$kmÆloc
(
size_t
 
n
 = 1) {

116  (
T
*)
Mem‹yM™agî
::
	`Æloc
(
n
 * (T));

117 
	}
}

119 
	gãm∂©e
<
ty≥«me
 
	gT
>

120 
	$k‰ì
(
T
* 
p
, 
size_t
 
n
 = 1) {

121 
Mem‹yM™agî
::
	`ªÀa£
((
vaddr
)
p
, 
n
 * (
T
));

122 
	}
}

124 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gArgs
>

125 
T
* 
	$k√w
(
Args
&&... 
a
) {

126  
	`√w
 (
kmÆloc
<
T
>()Ë
	`T
(
°d
::
f‹w¨d
<
Args
>(
a
)...);

127 
	}
}

129 
	gãm∂©e
<
ty≥«me
 
	gT
>

130 
T
* 
	$k√wN
(
size_t
 
n
) {

131  
	`√w
 (
kmÆloc
<
T
>(
n
)) T[n];

132 
	}
}

134 
	gãm∂©e
<
ty≥«me
 
	gT
>

135 
	$kdñëe
(
T
* 
p
, 
size_t
 
n
 = 1) {

136 
size_t
 
i
 = 0; i < 
n
; i +1Ë
p
[i].~
	`T
();

137 
k‰ì
<
T
>(
p
, 
n
);

138 
	}
}

140 
	gãm∂©e
<
ty≥«me
 
	gT
>

141 
T
* 
	$kmÆloc2
() {

142  (
T
*)
Mem‹yM™agî
::
Æloc2
<T>();

143 
	}
}

145 
	gãm∂©e
<
ty≥«me
 
	gT
>

146 
	$k‰ì2
(
T
* 
p
) {

147 
Mem‹yM™agî
::
ªÀa£2
<
T
>(
p
);

148 
	}
}

150 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gArgs
>

151 
T
* 
	$k√w2
(
Args
&&... 
a
) {

152  
	`√w
 (
Mem‹yM™agî
::
Æloc2
<
T
>()Ë
	`T
(
°d
::
f‹w¨d
<
Args
>(
a
)...);

153 
	}
}

155 
	gãm∂©e
<
ty≥«me
 
	gT
>

156 
	$kdñëe2
(
T
* 
p
) {

157 
p
->~
	`T
();

158 
Mem‹yM™agî
::
ªÀa£2
<
T
>(
p
);

159 
	}
}

161 
	gãm∂©e
<
ty≥«me
 
	gT
> 
˛ass
 
	gKî√lAŒoˇt‹
 : 
public
 
Æloˇt‹
<
T
> {

162 
public
:

163 
ãm∂©e
<
ty≥«me
 
U
> 
	sªböd
 { 
Kî√lAŒoˇt‹
<
	tU
> 
	tŸhî
; };

164 
Kî√lAŒoˇt‹
() = ;

165 
Kî√lAŒoˇt‹
(c⁄° Kî√lAŒoˇt‹& 
x
) = ;

166 
	gãm∂©e
<
ty≥«me
 
	gU
> 
Kî√lAŒoˇt‹
 (c⁄° Kî√lAŒoˇt‹<
U
>& 
x
Ë: 
Æloˇt‹
<
T
>(x) {}

167 ~
Kî√lAŒoˇt‹
() = ;

168 
T
* 
Æloˇã
(
size_t
 
n
, c⁄° * = 0Ë{  
kmÆloc
<T>(n); }

169 
dóŒoˇã
(
T
* 
p
, 
size_t
 
s
Ë{ 
	gk‰ì
<
	gT
>(
	gp
, 
	gs
); }

	@src/kernel/Multiboot.cc

17 
	~"kî√l/Mem‹yM™agî.h
"

18 
	~"kî√l/Mu…iboŸ.h
"

19 
	~"kî√l/Ouçut.h
"

20 
	~"w‹ld/Ac˚ss.h
"

22 
	~"exã∫/mu…iboŸ/mu…iboŸ2.h
"

25 c⁄° * 
	gmemty≥
[] 
__£˘i⁄
(".boot.data") = {

29 
	#FORALLTAGS
(
èg
,
°¨t
,
íd
) \

30 
mu…iboŸ_èg
* 
èg
 = (mu…iboŸ_èg*)(
°¨t
); \

31 
	`vaddr
(
èg
Ë< (
íd
Ë&&Åag->
ty≥
 !
MULTIBOOT_TAG_TYPE_END
; \

32 
èg
 = (
mu…iboŸ_èg
*)(
	`vaddr
—agË+ (—ag->
size
 + 7Ë& ~7)))

	)

34 
vaddr
 
	gMu…iboŸ
::
mbiSèπ
 = 0;

35 
vaddr
 
	gMu…iboŸ
::
mbiEnd
 = 0;

37 
	gMu…iboŸ
::
	$öôDebug
–
boﬁ
 
msg
 ) {

38 
	`FORALLTAGS
(
èg
,
mbiSèπ
,
mbiEnd
) {

39 i‡(
èg
->
ty≥
 =
MULTIBOOT_TAG_TYPE_CMDLINE
) {

40 
DBG
::
	`öô
–((
mu…iboŸ_èg_°rög
*)
èg
)->
°rög
, 
msg
 );

43 
	}
}

45 
vaddr
 
	gMu…iboŸ
::
	$öô
–
mw‹d
 
magic
, 
vaddr
 
mbi
 ) {

46 
	`KASSERT1
(
magic
 =
MULTIBOOT2_BOOTLOADER_MAGIC
, magic);

47 
	`KASSERT1
–!(
mbi
 & 7), 
	`FmtHex
(mbi) );

49 
mbiSèπ
 = 
mbi
 + (
mu…iboŸ_hódî_èg
);

50 
mbiEnd
 = 
mbi
 + *(
uöt32_t
*)mbi;

51 
	`öôDebug
(
Ál£
);

52 
vaddr
 
modEnd
 = 0;

53 
	`FORALLTAGS
(
èg
,
mbiSèπ
,
mbiEnd
) {

54 i‡(
èg
->
ty≥
 =
MULTIBOOT_TAG_TYPE_MODULE
) {

55 
mu…iboŸ_èg_moduÀ
* 
tm
 = (mu…iboŸ_èg_moduÀ*)
èg
;

56 i‡(
tm
->
mod_íd
 > 
modEnd
) modEnd =Åm->mod_end;

59  
	`max
(
mbiEnd
, 
modEnd
);

60 
	}
}

62 
	gMu…iboŸ
::
	$öô2
() {

63 
DBG
::
	`oué
(DBG::
Basic
, "************ DEBUG *************");

64 
	`öôDebug
(
åue
);

65 
DBG
::
	`oué
(DBG::
Basic
, "************* MBI **************");

66 
	`FORALLTAGS
(
èg
,
mbiSèπ
,
mbiEnd
) {

67 
èg
->
ty≥
) {

68 
MULTIBOOT_TAG_TYPE_CMDLINE
:

69 
DBG
::
	`oué
(DBG::
BoŸ
, "comm™dÜöe: ", ((
mu…iboŸ_èg_°rög
*)
èg
)->
°rög
);

71 
MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME
:

72 
DBG
::
	`oué
(DBG::
BoŸ
, "boŸÜﬂdî: ", ((
mu…iboŸ_èg_°rög
*)
èg
)->
°rög
);

74 
MULTIBOOT_TAG_TYPE_MODULE
: {

75 
mu…iboŸ_èg_moduÀ
* 
tm
 = (mu…iboŸ_èg_moduÀ*)
èg
;

76 
DBG
::
	`oué
(DBG::
BoŸ
, "moduÀáà", 
	`FmtHex
(
tm
->
mod_°¨t
), '-', FmtHex—m->
mod_íd
), ": ",Åm->
cmdlöe
);

78 
MULTIBOOT_TAG_TYPE_BASIC_MEMINFO
: {

79 
mu…iboŸ_èg_basic_memöfo
* 
tm
 = (mu…iboŸ_èg_basic_memöfo*)
èg
;

80 
DBG
::
	`oué
(DBG::
BoŸ
, "mem‹yÜow: ", 
tm
->
mem_lowî
, " / high: ",Åm->
mem_uµî
);

82 
MULTIBOOT_TAG_TYPE_BOOTDEV
: {

83 
mu…iboŸ_èg_boŸdev
* 
tb
 = (mu…iboŸ_èg_boŸdev*)
èg
;

84 
DBG
::
	`oué
(DBG::
BoŸ
, "boŸ devi˚: ", 
	`FmtHex
(
tb
->
biosdev
), ',',Åb->
¶i˚
, ',',Åb->
∑π
);

86 
MULTIBOOT_TAG_TYPE_MMAP
: {

87 
mu…iboŸ_èg_mm≠
* 
tmm
 = (mu…iboŸ_èg_mm≠*)
èg
;

88 
vaddr
 
íd
 = 
	`vaddr
(
tmm
Ë+Åmm->
size
;

89 
DBG
::
	`out1
(DBG::
BoŸ
, "mmap:");

90 
mw‹d
 
mm
 = (mw‹d)
tmm
->
íåõs
; mm < 
íd
; mm +tmm->
íåy_size
 ) {

91 
mu…iboŸ_mem‹y_m≠_t
* 
mm≠
 = (mu…iboŸ_mem‹y_m≠_t*)
mm
;

92 
	`KASSERT1
(
mm≠
->
ty≥
 <
MULTIBOOT_MEMORY_BADRAM
, mmap->type);

93 
DBG
::
	`out1
(DBG::
BoŸ
, ' ', 
	`FmtHex
(
mm≠
->
addr
), '/', FmtHex(mm≠->
Àn
), '/', 
memty≥
[mm≠->
ty≥
]);

95 
DBG
::
	`oué
(DBG::
BoŸ
);

97 
MULTIBOOT_TAG_TYPE_FRAMEBUFFER
:

98 
DBG
::
	`oué
(DBG::
BoŸ
, "framebuffer infoÖresent");

100 
MULTIBOOT_TAG_TYPE_VBE
:

101 
DBG
::
	`oué
(DBG::
BoŸ
, "vbe infoÖresent");

103 
MULTIBOOT_TAG_TYPE_ELF_SECTIONS
:

104 
DBG
::
	`oué
(DBG::
BoŸ
, "elf section infoÖresent");

106 
MULTIBOOT_TAG_TYPE_APM
:

107 
DBG
::
	`oué
(DBG::
BoŸ
, "APM infoÖresent");

109 
MULTIBOOT_TAG_TYPE_EFI32
:

110 
DBG
::
	`oué
(DBG::
BoŸ
, "efi32 infoÖresent");

112 
MULTIBOOT_TAG_TYPE_EFI64
:

113 
DBG
::
	`oué
(DBG::
BoŸ
, "efi64 infoÖresent");

115 
MULTIBOOT_TAG_TYPE_SMBIOS
:

116 
DBG
::
	`oué
(DBG::
BoŸ
, "smbios infoÖresent");

118 
MULTIBOOT_TAG_TYPE_ACPI_OLD
: {

119 
mu…iboŸ_èg_ﬁd_a˝i
* 
è
 = (mu…iboŸ_èg_ﬁd_a˝i*)
èg
;

120 
DBG
::
	`oué
(DBG::
BoŸ
, "a˝i/ﬁd: ", 
	`FmtHex
(
è
->
rsdp
), '/', FmtHex—a->
size
));

122 
MULTIBOOT_TAG_TYPE_ACPI_NEW
: {

123 
mu…iboŸ_èg_√w_a˝i
* 
è
 = (mu…iboŸ_èg_√w_a˝i*)
èg
;

124 
DBG
::
	`oué
(DBG::
BoŸ
, "a˝i/√w: ", 
	`FmtHex
(
è
->
rsdp
), '/', FmtHex—a->
size
));

126 
MULTIBOOT_TAG_TYPE_NETWORK
:

127 
DBG
::
	`oué
(DBG::
BoŸ
, "network infoÖresent");

130 
DBG
::
	`oué
(DBG::
BoŸ
, "unknow¿èg: ", 
èg
->
ty≥
);

133 
	}
}

135 
	gMu…iboŸ
::
	$ªm≠
(
vaddr
 
di•
) {

136 
mbiSèπ
 +
di•
;

137 
mbiEnd
 +
di•
;

138 
	}
}

140 
vaddr
 
	gMu…iboŸ
::
	$gëRSDP
() {

141 
	`FORALLTAGS
(
èg
,
mbiSèπ
,
mbiEnd
) {

142 
èg
->
ty≥
) {

143 
MULTIBOOT_TAG_TYPE_ACPI_OLD
:

144  
	`vaddr
(((
mu…iboŸ_èg_ﬁd_a˝i
*)
èg
)->
rsdp
);

145 
MULTIBOOT_TAG_TYPE_ACPI_NEW
:

146  
	`vaddr
(((
mu…iboŸ_èg_√w_a˝i
*)
èg
)->
rsdp
);

149 
	`KABORT1
("RSDPÇot found");

151 
	}
}

153 
	gMu…iboŸ
::
gëMem‹y
(
Regi⁄Së
<
Regi⁄
<
∑ddr
>>& 
rs
) {

154 
FORALLTAGS
(
èg
,
mbiSèπ
,
mbiEnd
) {

155 i‡(
	gèg
->
	gty≥
 =
MULTIBOOT_TAG_TYPE_MMAP
) {

156 
mu…iboŸ_èg_mm≠
* 
tm
 = (mu…iboŸ_èg_mm≠*)
èg
;

157 
vaddr
 
	gíd
 = vaddr(
tm
Ë+Åm->
size
;

158 
vaddr
 
	gmm
 = (
∑ddr
)
tm
->
íåõs
; mm < 
	gíd
; mm +tm->
íåy_size
 ) {

159 
mu…iboŸ_mem‹y_m≠_t
* 
mm≠
 = (mu…iboŸ_mem‹y_m≠_t*)
mm
;

160 i‡(
	gmm≠
->
	gty≥
 =
MULTIBOOT_MEMORY_AVAILABLE
 && 
mm≠
->
Àn
 > 0) {

161 
rs
.
ö£π
–
Regi⁄
<
∑ddr
>(
mm≠
->
addr
, mm≠->add∏+ mm≠->
Àn
) );

168 
	gMu…iboŸ
::
	$ªadModuÀs
(
vaddr
 
di•
) {

169 
	`FORALLTAGS
(
èg
,
mbiSèπ
,
mbiEnd
) {

170 i‡(
èg
->
ty≥
 =
MULTIBOOT_TAG_TYPE_MODULE
) {

171 
mu…iboŸ_èg_moduÀ
* 
tm
 = (mu…iboŸ_èg_moduÀ*)
èg
;

172 
°rög
 
cmd
 = 
tm
->
cmdlöe
;

173 
°rög
 
«me
 = 
cmd
.
	`sub°r
(0, cmd.
	`föd_fú°_of
(' '));

174 
kî√lFS
.
	`ö£π
–{
«me
, {
tm
->
mod_°¨t
 + 
di•
,Åm->mod_°¨t,Åm->
mod_íd
 -Åm->mod_start}} );

177 
	}
}

	@src/kernel/Multiboot.h

17 #i‚de‡
_Mu…iboŸ_h_


18 
	#_Mu…iboŸ_h_
 1

	)

20 
	~"gíîic/basics.h
"

21 
	~"gíîic/Regi⁄Së.h
"

23 ˛as†
	cMu…iboŸ
 {

24 
vaddr
 
mbiSèπ
 
__£˘i⁄
(".boot.data");

25 
vaddr
 
mbiEnd
 
__£˘i⁄
(".boot.data");

26 
	$öôDebug
(
boﬁ
 
msg
Ë
	`__£˘i⁄
(".boot.text");

27 
public
:

28 
vaddr
 
	$öô
(
mw‹d
 
magic
, 
vaddr
 
mbi
Ë
	`__£˘i⁄
(".boot.text");

29 
	$öô2
(Ë
	`__£˘i⁄
(".boot.text");

30 
	$ªm≠
(
vaddr
 
di•
Ë
	`__£˘i⁄
(".boot.text");

31 
vaddr
 
	$gëRSDP
(Ë
	`__£˘i⁄
(".boot.text");

32 
	`gëMem‹y
(
Regi⁄Së
<
Regi⁄
<
∑ddr
>>& 
rs
Ë
	`__£˘i⁄
(".boot.text");

33 
	$ªadModuÀs
(
vaddr
 
di•
Ë
	`__£˘i⁄
(".boot.text");

	@src/kernel/Output.cc

17 
	~"kî√l/Mem‹yM™agî.h
"

18 
	~"kî√l/Ouçut.h
"

19 
	~"devi˚s/S¸ìn.h
"

20 
	~"devi˚s/Sîül.h
"

22 
	~<c°rög
>

23 #unde‡
__STRICT_ANSI__


24 
	~<c°dio
>

26 
˛ass
 
	gS¸ìnBuf„r
 : 
public
 
OuçutBuf„r
<> {

27 
S¸ìnSegmít
 
£gmít
;

28 
	g¥Ÿe˘ed
:

29 
vútuÆ
 
°ªamsize
 
x•uä
(c⁄° * 
s
, såómsizê
n
) {

30 
°ªamsize
 
	gi
 = 0; i < 
	gn
; i +1Ë
£gmít
.
wrôe
(
s
[
i
]);

31  
	gn
;

33 
	gpublic
:

34 
S¸ìnBuf„r
(
fú°löe
, 
œ°löe
, 
°¨éöe
 = 0)

35 : 
£gmít
(
fú°löe
, 
œ°löe
, 
°¨éöe
) {}

38 
S¸ìnBuf„r
 
t›_s¸ìn
( 1, 20, 2 );

39 
S¸ìnBuf„r
 
bŸ_s¸ìn
( 21, 25 );

41 
˛ass
 
	gDebugBuf„r
 : 
public
 
OuçutBuf„r
<> {

42 
¥Ÿe˘ed
:

43 
vútuÆ
 
°ªamsize
 
x•uä
(c⁄° * 
s
, såómsizê
n
) {

44 
°ªamsize
 
	gi
 = 0; i < 
	gn
; i +1Ë
DebugDevi˚
::
wrôe
(
s
[
i
]);

45  
	gn
;

49 
DebugBuf„r
 
	gdbg_buf„r
;

51 
Kî√lOuçut
 
StdOut
(
t›_s¸ìn
);

52 
Kî√lOuçut
 
StdEº
(
bŸ_s¸ìn
);

53 
Kî√lOuçut
 
StdDbg
(
dbg_buf„r
);

55 c⁄° * 
	g›ti⁄s
[] = {

81 
	gBôm≠
<> 
	gDBG
::
Àvñs
;

83 
°©ic_as£π
–(
›ti⁄s
)/(*Ë=
DBG
::
MaxLevñ
, "debug options mismatch" );

85 
	gDBG
::
	$öô
–* 
d°rög
, 
boﬁ
 
msg
 ) {

86 
Àvñs
.
	`£t
(
Basic
);

87 * 
w‹d°¨t
 = 
d°rög
;

88 * 
íd
 = 
w‹d°¨t
 + 
	`°æí
–
d°rög
 );

90 * 
w‹díd
 = 
	`°rchr
–
w‹d°¨t
, ',' );

91 i‡–
w‹díd
 =
nuŒ±r
 ) w‹díd = 
íd
;

92 *
w‹díd
 = 0;

93 
size_t
 
Àvñ
 = -1;

94  
size_t
 
i
 = 0; i < 
MaxLevñ
; ++i ) {

95 i‡–!
	`°∫cmp
(
w‹d°¨t
,
›ti⁄s
[
i
],
w‹díd
 - wordstart) ) {

96 i‡–
Àvñ
 =
	`size_t
(-1ËËÀvñ = 
i
;

98 i‡(
msg
) {

99 
KERR
::
	`oué
("mu…ùÀ m©che†f‹ debug o±i⁄: ", 
w‹d°¨t
);

101 
√xt›ti⁄
;

105 i‡–
Àvñ
 !
	`size_t
(-1) ) {

106 
Àvñs
.
	`£t
(
Àvñ
);

107 i‡(
msg
) {

108 
StdDbg
.
	`¥öé
("m©ched debug o±i⁄: ", 
w‹d°¨t
, '=', 
›ti⁄s
[
Àvñ
], 
kídl
);

110 } i‡(
msg
) {

111 
KERR
::
	`oué
("unm©ched debug o±i⁄: ", 
w‹d°¨t
);

113 
√xt›ti⁄
:

114 i‡–
w‹díd
 =
íd
 ) ;

115 *
w‹díd
 = ',';

116 
w‹d°¨t
 = 
w‹díd
 + 1;

118 
	}
}

120 
	$kas£π¥öts
(c⁄° * c⁄° 
loc
, 
löe
, c⁄° * c⁄° 
func
) {

121 
	`kas£π¥öt1
(
loc
, 
löe
, " i¿", 
func
);

122 
	}
}

124 
	$kas£π¥öã
(c⁄° * c⁄° 
msg
) {

125 
	`kas£π¥öt2
(" - ", 
msg
);

126 
	}
}

128 
	$kas£π¥öã
(c⁄° 
num
) {

129 
	`kas£π¥öt2
(" - ", 
num
);

130 
	}
}

132 
	$kas£π¥öã
(c⁄° 
FmtHex
& 
±r
) {

133 
	`kas£π¥öt2
(" - ", 
±r
);

134 
	}
}

136 
	$kas£π¥öã
() {

137 
	`kas£π¥öt2
();

138 
	}
}

140 
	$Exã∫DebugPrötf
(
DBG
::
Levñ
 
c
, c⁄° * 
fmt
, 
va_li°
 
¨gs
) {

141 
va_li°
 
tm∑rgs
;

142 
	`va_c›y
(
tm∑rgs
, 
¨gs
);

143 
size
 = 
	`v¢¥ötf
(
nuŒ±r
, 0, 
fmt
, 
tm∑rgs
);

144 
	`va_íd
(
tm∑rgs
);

145 i‡(
size
 < 0) ;

146 
size
 += 1;

147 * 
buf„r
 = 
k√wN
<>(
size
);

148 
	`v¢¥ötf
(
buf„r
, 
size
, 
fmt
, 
¨gs
);

149 
DBG
::
	`out1
(
c
, 
buf„r
);

150 
	`kdñëe
(
buf„r
, 
size
);

151 
	}
}

	@src/kernel/Output.h

17 #i‚de‡
_Ouçut_h_


18 
	#_Ouçut_h_
 1

	)

20 
	~"gíîic/Bôm≠.h
"

21 
	~"machöe/SpöLock.h
"

23 
	~<c°d¨g
>

25 c⁄° 
	gkídl
 = '\n';

27 
	gãm∂©e
<
ty≥«me
 
	g_Ch¨T
,Åy≥«mê
	g_Tøôs
 = 
ch¨_åaôs
<
_Ch¨T
>>

28 
˛ass
 
OuçutBuf„r
 : 
public
 
basic_°ªambuf
<
_Ch¨T
, 
	g_Tøôs
> {

29 
	gpublic
:

30 
_Ch¨T
 
	tch¨_ty≥
;

31 
_Tøôs
 
	tåaôs_ty≥
;

32 
ty≥«me
 
	tåaôs_ty≥
::
	töt_ty≥
 int_type;

33 
ty≥«me
 
	tåaôs_ty≥
::
	tpos_ty≥
Öos_type;

34 
ty≥«me
 
	tåaôs_ty≥
::
	toff_ty≥
 off_type;

36 
	gbasic_°ªambuf
<
	t_Ch¨T
, 
	t_Tøôs
> 
	tBa£Cœss
;

38 
	g¥Ÿe˘ed
:

39 
vútuÆ
 
°ªamsize
 
x•uä
(c⁄° 
ch¨_ty≥
* 
s
, såómsizê
n
) = 0;

40 
vútuÆ
 
sync
(Ë{  
	gBa£Cœss
::sync(); }

43 ˛as†
	cKî√lOuçut
 {

44 
SpöLock
 
	mﬁock
;

45 
o°ªam
 
	mos
;

47 
	mpublic
:

48 
Kî√lOuçut
–
OuçutBuf„r
<>& 
ob
 ) : 
	$os
(&
ob
) {}

50 
	$lock
(Ë{ 
ﬁock
.
	`acquúe
(); 
	}
}

51 
	$u∆ock
(Ë{ 
ﬁock
.
	`ªÀa£
(); 
	}
}

53 
	$¥öt
(Ë{
	}
}

55 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gArgs
>

56 
	$¥öt
–c⁄° 
T
& 
msg
, c⁄° 
Args
&... 
a
 ) {

57 
os
 << 
msg
;

58 
	`¥öt
(
a
...);

59 
	}
}

61 
	gãm∂©e
<
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gArgs
>

62 
	$¥öé
–c⁄° 
T
& 
msg
, c⁄° 
Args
&... 
a
 ) {

63 
Sc›edLock
<> 
	`¶
(
ﬁock
);

64 
os
 << 
msg
;

65 
	`¥öt
(
a
...);

66 
	}
}

68 
ssize_t
 
	$wrôe
(c⁄° *
buf
, 
size_t
 
Àn
) {

69 
Sc›edLock
<> 
	`¶
(
ﬁock
);

70 
os
.
	`wrôe
((
cbuÂå_t
)
buf
, 
Àn
);

71  
Àn
;

72 
	}
}

75 
Kî√lOuçut
 
StdOut
;

76 
Kî√lOuçut
 
StdEº
;

77 
Kî√lOuçut
 
StdDbg
;

79 ˛as†
	cDBG
 {

80 
	mpublic
:

81 
Levñ
 : 
size_t
 {

82 
A˝i
 = 0,

83 
	mBoŸ
,

84 
	mBasic
,

85 
	mCDI
,

86 
	mDevi˚s
,

87 
	mEº‹
,

88 
	mFøme
,

89 
	mFûe
,

90 
	mGDBDebug
,

91 
	mGDBE«bÀ
,

92 
	mKînMem
,

93 
	mLibc
,

94 
	mLwù
,

95 
	mMemA˝i
,

96 
	mPagög
,

97 
	mPCI
,

98 
	mPîf
,

99 
	mPro˚ss
,

100 
	mScheduÀr
,

101 
	mTe°s
,

102 
	mThªads
,

103 
	mVM
,

104 
	mW¨nög
,

105 
	mMaxLevñ


108 
	g¥iv©e
:

109 
Bôm≠
<> 
Àvñs
;

110 
°©ic_as£π
(
MaxLevñ
 <(
Àvñs
) * 8, "too many debugÜevels");

112 
	gpublic
:

113 
öô
–* 
d°rög
, 
boﬁ
 
msg
 );

114 
boﬁ
 
	$ã°
–
Levñ
 
c
 ) {  
Àvñs
.
	`ã°
(c); 
	}
}

116 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
> 
	$out1
–
Levñ
 
c
, c⁄° 
Args
&... 
a
 ) {

117 i‡(
c
 && !
	`ã°
(c)) ;

118 
StdDbg
.
	`¥öé
(
a
...);

119 #i‡
TESTING_DEBUG_STDOUT


120 i‡(
c
Ë
StdOut
.
	`¥öé
(
a
...);

122 
	}
}

123 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
> 
	$oué
–
Levñ
 
c
, c⁄° 
Args
&... 
a
 ) {

124 i‡(
c
 && !
	`ã°
(c)) ;

125 
StdDbg
.
	`¥öé
('C', 
LoˇlPro˚ss‹
::
	`gëIndex
(), '/', 
	`FmtHex
(
CPU
::
	`ªadCR3
()), ": ", 
a
..., 
kídl
);

126 #i‡
TESTING_DEBUG_STDOUT


127 i‡(
c
Ë
StdOut
.
	`¥öé
('C', 
LoˇlPro˚ss‹
::
	`gëIndex
(), '/', 
	`FmtHex
(
CPU
::
	`ªadCR3
()), ": ", 
a
..., 
kídl
);

129 
	}
}

130 
	$oué
–
Levñ
 
c
 ) {

131 i‡(
c
 && !
	`ã°
(c)) ;

132 
StdDbg
.
	`¥öé
(
kídl
);

133 #i‡
TESTING_DEBUG_STDOUT


134 i‡(
c
Ë
StdOut
.
	`¥öé
(
kídl
);

136 
	}
}

139 ˛as†
	cKOUT
 {

140 
	mpublic
:

141 
ãm∂©e
<
ty≥«me
... 
Args
> 
	$out1
–c⁄° 
Args
&... 
a
 ) {

142 
StdOut
.
	`¥öé
(
a
...);

143 #i‡
TESTING_STDOUT_DEBUG


144 
StdDbg
.
	`¥öé
(
a
...);

147 
ãm∂©e
<
ty≥«me
... 
Args
> 
	$oué
–c⁄° 
Args
&... 
a
 ) {

148 
StdOut
.
	`¥öé
(
a
..., 
kídl
);

149 #i‡
TESTING_STDOUT_DEBUG


150 
StdDbg
.
	`¥öé
(
a
..., 
kídl
);

152 
	}
}

155 ˛as†
	cKERR
 {

156 
	mpublic
:

157 
ãm∂©e
<
ty≥«me
... 
Args
> 
	$out1
–c⁄° 
Args
&... 
a
 ) {

158 
StdEº
.
	`¥öé
(
a
...);

159 #i‡
TESTING_STDOUT_DEBUG


160 
StdDbg
.
	`¥öé
(
a
...);

163 
ãm∂©e
<
ty≥«me
... 
Args
> 
	$oué
–c⁄° 
Args
&... 
a
 ) {

164 
StdEº
.
	`¥öé
(
a
..., 
kídl
);

165 #i‡
TESTING_STDOUT_DEBUG


166 
StdDbg
.
	`¥öé
(
a
..., 
kídl
);

168 
	}
}

171 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

172 
ölöe
 
	$kas£π¥öt1
(c⁄° 
Args
&... 
a
) {

173 
StdDbg
.
	`lock
();

174 
StdDbg
.
	`¥öt
(
a
...);

175 
StdEº
.
	`lock
();

176 
StdEº
.
	`¥öt
(
a
...);

177 
	}
}

179 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

180 
ölöe
 
	$kas£π¥öt2
(c⁄° 
Args
&... 
a
) {

181 
StdDbg
.
	`¥öt
(
a
..., 
kídl
);

182 
StdDbg
.
	`u∆ock
();

183 
StdEº
.
	`¥öt
(
a
..., 
kídl
);

184 
StdEº
.
	`u∆ock
();

185 
	}
}

187 
	#KASSERTN
(
ex¥
,
¨gs
...Ë{ 
	`¶ow∑th
(!”x¥)Ë{ 
	`kas£π¥öts
–"KASSERT: " #ex¥ " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öt2
◊rgs); 
	`ReboŸ
(); } }

	)

188 
	#KCHECKN
(
ex¥
,
¨gs
...Ë{ 
	`¶ow∑th
(!”x¥)Ë{ 
	`kas£π¥öts
–"KCHECK: " #ex¥ " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öt2
◊rgs); } }

	)

190 
Exã∫DebugPrötf
(
DBG
::
Levñ
 
c
, c⁄° * 
fmt
, 
va_li°
 
¨gs
);

	@src/kernel/OutputBasic.h

17 #i‚de‡
_OuçutBasic_h_


18 
	#_OuçutBasic_h_
 1

	)

21 
	$ReboŸ
(
vaddr
 = 0Ë
__n‹ëu∫
;

24 
	`kas£π¥öts
(c⁄° * c⁄° 
loc
, 
löe
, c⁄° * c⁄° 
func
);

25 
	`kas£π¥öã
(c⁄° * c⁄° 
msg
);

26 
	`kas£π¥öã
(c⁄° 
num
);

27 
	`kas£π¥öã
(c⁄° 
FmtHex
& 
±r
);

28 
	`kas£π¥öã
();

30 
	#KABORT0
(Ë{ { 
	`kas£π¥öts
–"KABORT: " " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öã
(); 
	`ReboŸ
(); } 
	}

	)
}

31 
	#KABORT1
(
msg
Ë{ { 
	`kas£π¥öts
–"KABORT: " " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öã
(msg); 
	`ReboŸ
(); } }

	)

32 
	#KASSERT0
(
ex¥
Ë{ 
	`¶ow∑th
(!”x¥)Ë{ 
	`kas£π¥öts
–"KASSERT: " #ex¥ " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öã
(); 
	`ReboŸ
(); } }

	)

33 
	#KASSERT1
(
ex¥
,
msg
Ë{ 
	`¶ow∑th
(!”x¥)Ë{ 
	`kas£π¥öts
–"KASSERT: " #ex¥ " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öã
(msg); 
	`ReboŸ
(); } }

	)

34 
	#KCHECK0
(
ex¥
Ë{ 
	`¶ow∑th
(!”x¥)Ë{ 
	`kas£π¥öts
–"KCHECK: " #ex¥ " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öã
(); } }

	)

35 
	#KCHECK1
(
ex¥
,
msg
Ë{ 
	`¶ow∑th
(!”x¥)Ë{ 
	`kas£π¥öts
–"KCHECK: " #ex¥ " i¿" 
__FILE__
 ":", 
__LINE__
, 
__func__
); 
	`kas£π¥öã
(msg); } }

	)

	@src/kernel/Process.cc

17 
	~"ru¡ime/ScheduÀr.h
"

18 
	~"ru¡ime/Thªad.h
"

19 
	~"kî√l/Pro˚ss.h
"

20 
	~"exã∫/ñfio/ñfio.hµ
"

22 
	gPro˚ss
::
	$övokeU£r
(
funcvoid2_t
 
func
, 
±r_t
 
¨g1
,Öå_à
¨g2
) {

23 
U£rThªad
* 
ut
 = 
ªöãΩªt_ˇ°
<U£rThªad*>(
LoˇlPro˚ss‹
::
	`gëCuºThªad
());

24 
	`KASSERT0
(
ut
);

25 
ut
->
°ackSize
 = 
deÁu…U£rSèck
;

26 
ut
->
°ackAddr
 = 
	`CuºAS
().
	`ÆlocSèck
(ut->
°ackSize
);

27 
DBG
::
	`oué
(DBG::
Thªads
, "UThªad sèπ: ", 
	`FmtHex
(
ut
), '/', FmtHex((
±r_t
)
func
));

28 
	`°¨tU£rCode
(
¨g1
, 
¨g2
, 
	`vaddr
(
ut
), 
func
, ut->
°ackAddr
 + ut->
°ackSize
);

29 
	`uƒóchabÀ
();

30 
	}
}

32 
	gPro˚ss
::~
	$Pro˚ss
() {

33 
DBG
::
	`oué
(DBG::
Thªads
, "Pro˚s†dñëe: ", 
	`FmtHex
(
this
));

34 
size_t
 
i
 = 0; i < 
ioH™dÀs
.
	`cuºítIndex
(); i += 1) {

35 
Ac˚ss
* 
a
 = 
ioH™dÀs
.
	`ac˚ss
(
i
);

36 i‡(
a
Ë
	`kdñëe
(a);

38 
size_t
 
i
 = 0; i < 
£mSt‹e
.
	`cuºítIndex
(); i += 1) {

39 i‡(
£mSt‹e
.
	`vÆid
(
i
)Ë
	`kdñëe
(£mSt‹e.
	`gë
(i));

41 
	}
}

43 
	gPro˚ss
::
	$exec
(c⁄° 
°rög
& 
fûeName
) {

44 
	`KASSERT0
(
thªadSt‹e
.
	`em±y
());

45 
AddªssS∑˚
& 
as
 = 
this
->
íãr
<
åue
>();

46 autÿ
ôî
 = 
kî√lFS
.
	`föd
(
fûeName
);

47 
	`KASSERT1
(
ôî
 !
kî√lFS
.
	`íd
(), 
fûeName
.
	`c_°r
())

48 
RamFûe
& 
rf
 = 
ôî
->
£c⁄d
;

49 
ELFIO
::
ñfio
 
ñfRódî
;

50 
boﬁ
 
check
 = 
ñfRódî
.
	`lﬂd
(
fûeName
.
	`c_°r
());

51 
	`KASSERT0
(
check
);

52 
	`KASSERT1
(
ñfRódî
.
	`gë_˛ass
(Ë=
ELFCLASS64
,ÉlfReader.get_class());

54 
vaddr
 
cuºBªak
 = 0;

55 
i
 = 0; i < 
ñfRódî
.
£gmíts
.
	`size
(); ++i) {

56 c⁄° 
ELFIO
::
£gmít
* 
p£g
 = 
ñfRódî
.
£gmíts
[
i
];

57 i‡(
p£g
->
	`gë_ty≥
(Ë!
PT_LOAD
) ;

59 
	`KASSERTN
(
p£g
->
	`gë_fûe_off£t
(Ë+Ö£g->
	`gë_fûe_size
(Ë<
rf
.
size
, 
	`FmtHex
(pseg->get_file_offset()), ' ', FmtHex(pseg->get_file_size()), ' ', FmtHex(rf.size));

60 
	`KASSERTN
(
p£g
->
	`gë_mem‹y_size
(Ë>p£g->
	`gë_fûe_size
(), 
	`FmtHex
(pseg->get_file_size()), ' ', FmtHex(pseg->get_memory_size()));

61 
∑ddr
 
pma
 = 
rf
.pm®+ 
p£g
->
	`gë_fûe_off£t
();

62 
∑ddr
 
≠ma
 = 
	`Æign_down
(
pma
, 
∑gesize
<1>());

63 
vaddr
 
vma
 = 
p£g
->
	`gë_vútuÆ_addªss
();

64 
vaddr
 
avma
 = 
	`Æign_down
(
vma
, 
∑gesize
<1>());

65 
	`KASSERTN
(
vma
 - 
avma
 =
pma
 - 
≠ma
, 
	`FmtHex
(vma), ' ', FmtHex(pma));

66 
vaddr
 
„nd
 = 
vma
 + 
p£g
->
	`gë_fûe_size
();

67 
vaddr
 
a„nd
 = 
	`Æign_up
(
„nd
, 
∑gesize
<1>());

68 
vaddr
 
míd
 = 
vma
 + 
p£g
->
	`gë_mem‹y_size
();

69 
vaddr
 
amíd
 = 
	`Æign_up
(
míd
, 
∑gesize
<1>());

73 
PageTy≥
 
∑geTy≥
 = (
p£g
->
	`gë_Êags
(Ë& 
PF_W
Ë? 
D©a
 :

74 (
p£g
->
	`gë_Êags
(Ë& 
PF_X
Ë? 
Code
 : 
RoD©a
;

76 
DBG
::
	`oué
(DBG::
Pro˚ss
,

77 
∑geTy≥
 =
D©a
 ? "d©a" :ÖageTy≥ =
Code
 ? "code" : "ro",

78 " segmít: ", 
	`FmtHex
(
vma
), '-', FmtHex(
„nd
));

79 
m≠Dúe˘
<1>(
≠ma
, 
avma
, 
a„nd
 -ávma, 
∑geTy≥
);

81 i‡(
míd
 > 
„nd
) {

82 
DBG
::
	`oué
(DBG::
Pro˚ss
, "bss: ", 
	`FmtHex
(
„nd
), '-', FmtHex(
míd
));

83 i‡(
amíd
 > 
a„nd
Ë
ÆlocDúe˘
<1>◊„nd,ámíd -á„nd, 
D©a
);

84 
	`mem£t
((*)
„nd
, 0, 
míd
 - fend);

86 i‡(
míd
 > 
cuºBªak
) currBreak = mend;

89 
	`öôU£r
(
cuºBªak
);

90 
±r_t
 
íåy
 = (±r_t)
ñfRódî
.
	`gë_íåy
();

91 
DBG
::
	`oué
(DBG::
Pro˚ss
, "íåy: ", 
	`FmtHex
(
íåy
));

92 
	`¸óãThªad
((
funcvoid2_t
)
íåy
, (
funcvoid1_t
)
nuŒ±r
,Çullptr);

93 
as
.
íãr
<
åue
>();

94 
	}
}

97 
	gPro˚ss
::
	$exô
() {

98 
U£rThªad
* 
ut
 = 
ªöãΩªt_ˇ°
<U£rThªad*>(
LoˇlPro˚ss‹
::
	`gëCuºThªad
());

99 
	`KASSERT0
(
ut
);

100 
DBG
::
	`oué
(DBG::
Thªads
, "Pro˚s†exô: ", 
	`FmtHex
(
ut
));

101 
thªadLock
.
	`acquúe
();

102 
mw‹d
 
i
 = 0; i < 
thªadSt‹e
.
	`cuºítIndex
(); i += 1) {

103 
	`Á°∑th
(
thªadSt‹e
.
	`vÆid
(
i
Ë&&ÅhªadSt‹e.
	`gë
(iË!
ut
) {

104 
thªadSt‹e
.
	`gë
(
i
)->
	`ˇn˚l
();

107 
thªadLock
.
	`ªÀa£
();

108 
LoˇlPro˚ss‹
::
	`gëScheduÀr
()->
	`ãrmö©e
();

109 
	}
}

111 
mw‹d
 
	gPro˚ss
::
	$¸óãThªad
(
funcvoid2_t
 
wøµî
, 
funcvoid1_t
 
func
, 
±r_t
 
d©a
) {

112 
U£rThªad
* 
ut
 = U£rThªad::
	`¸óã
();

113 
	`KASSERT0
(
ut
);

114 
thªadLock
.
	`acquúe
();

115 
ut
->
idx
 = 
thªadSt‹e
.
	`put
(ut);

116 
DBG
::
	`oué
(DBG::
Thªads
, "UThªad cª©e: ", 
	`FmtHex
(
ut
), '/', ut->
idx
);

117 
ut
->
	`°¨t
((
±r_t
)
övokeU£r
, (±r_t)
wøµî
, (±r_t)
func
, 
d©a
);

118 
thªadLock
.
	`ªÀa£
();

119  
ut
->
idx
;

120 
	}
}

122 
	gPro˚ss
::
	$exôThªad
(
±r_t
 
ªsu…
) {

123 
U£rThªad
* 
ut
 = 
ªöãΩªt_ˇ°
<U£rThªad*>(
LoˇlPro˚ss‹
::
	`gëCuºThªad
());

124 
	`KASSERT0
(
ut
);

125 
DBG
::
	`oué
(DBG::
Thªads
, "UThªadÉxô: ", 
	`FmtHex
(
ut
), '/', ut->
idx
);

126 
	`ªÀa£Sèck
(
ut
->
°ackAddr
, ut->
°ackSize
);

127 
thªadLock
.
	`acquúe
();

128 i‡(
thªadSt‹e
.
	`size
(Ë> 1Ë
ut
->
	`po°
(
ªsu…
, 
thªadLock
);

129 
thªadLock
.
	`ªÀa£
();

130 
LoˇlPro˚ss‹
::
	`gëScheduÀr
()->
	`ãrmö©e
();

131 
	}
}

133 
	gPro˚ss
::
	$joöThªad
(
mw‹d
 
idx
, 
±r_t
& 
ªsu…
) {

134 
DBG
::
	`oué
(DBG::
Thªads
, "UThªad joö: ", 
idx
);

135 
thªadLock
.
	`acquúe
();

136 i‡(!
thªadSt‹e
.
	`vÆid
(
idx
)) {

137 
thªadLock
.
	`ªÀa£
();

138  -
ESRCH
;

140 i‡(!
thªadSt‹e
.
	`gë
(
idx
)->
	`joö
(
ªsu…
, 
thªadLock
)) {

141 
thªadLock
.
	`ªÀa£
();

142  -
EINVAL
;

145 
	}
}

147 
boﬁ
 
	gPro˚ss
::
	$de°royThªad
(
Thªad
& 
t
) {

148 
U£rThªad
& 
ut
 = 
ªöãΩªt_ˇ°
<U£rThªad&>(
t
);

149 
Sc›edLock
<> 
	`¶
(
thªadLock
);

150 
thªadSt‹e
.
	`ªmove
(
ut
.
idx
);

151  
thªadSt‹e
.
	`em±y
();

152 
	}
}

	@src/kernel/Process.h

17 #i‚de‡
_Pro˚ss_h_


18 
	#_Pro˚ss_h_
 1

	)

20 
	~"ru¡ime/Synchr⁄izedAºay.h
"

21 
	~"ru¡ime/JoöabÀThªad.h
"

22 
	~"kî√l/AddªssS∑˚.h
"

23 
	~"kî√l/Mem‹yM™agî.h
"

24 
	~"w‹ld/Ac˚ss.h
"

26 ˛as†
	cPro˚ss
 : 
public
 
AddªssS∑˚
 {

28 
U£rThªad
 : 
public
 
JoöabÀThªad
 {

29 
mw‹d
 
idx
;

30 
vaddr
 
	m°ackAddr
;

31 
size_t
 
	m°ackSize
;

32 
U£rThªad
(
vaddr
 
ksb
, 
size_t
 
kss
Ë: 
JoöabÀThªad
(ksb, kss) {}

33 
ölöe
 
U£rThªad
* 
¸óã
(
size_t
 
kss
 = 
deÁu…Sèck
) {

34 
vaddr
 
mem
 = 
kî√lS∑˚
.
ÆlocSèck
(
kss
);

35 
vaddr
 
	mThis
 = 
mem
 + 
kss
 - (
U£rThªad
);

36 
	mDBG
::
oué
(
DBG
::
Thªads
, "U£rThªad cª©e: ", 
FmtHex
(
mem
), '/', FmtHex(
kss
), '/', FmtHex(
This
));

37  
√w
 (
±r_t
(
This
)Ë
U£rThªad
(
mem
, 
kss
);

41 
SpöLock
 
	gthªadLock
;

42 
	gM™agedAºay
<
	gU£rThªad
*,
	gKî√lAŒoˇt‹
> 
	gthªadSt‹e
;

44 
vaddr
 
	gsigH™dÀr
;

46 
	$övokeU£r
(
funcvoid2_t
 
func
, 
±r_t
 
¨g1
,Öå_à
¨g2
Ë
__n‹ëu∫
;

48 
public
:

49 
Synchr⁄izedAºay
<
Ac˚ss
*,
Kî√lAŒoˇt‹
> 
ioH™dÀs
;

50 
M™agedAºay
<
Sem≠h‹e
*,
Kî√lAŒoˇt‹
> 
£mSt‹e
;

51 
SpöLock
 
£mSt‹eLock
;

53 
	$Pro˚ss
(Ë: 
	`thªadSt‹e
(1), 
	`sigH™dÀr
(0), 
	$ioH™dÀs
(4) {

54 
ioH™dÀs
.
	`°‹e
(
k√w
<
I≈utAc˚ss
>());

55 
ioH™dÀs
.
	`°‹e
(
k√w
<
OuçutAc˚ss
>(
StdOut
));

56 
ioH™dÀs
.
	`°‹e
(
k√w
<
OuçutAc˚ss
>(
StdEº
));

57 
ioH™dÀs
.
	`°‹e
(
k√w
<
OuçutAc˚ss
>(
StdDbg
));

58 
	}
}

59 ~
Pro˚ss
();

61 
exec
(c⁄° 
°rög
& 
fûeName
);

62 
	$exô
(Ë
__n‹ëu∫
;

64 
	$£tSig«lH™dÀr
(
vaddr
 
sh
Ë{ 
sigH™dÀr
 = sh; 
	}
}

65 
vaddr
 
	$gëSig«lH™dÀr
(Ë{  
sigH™dÀr
; 
	}
}

67 
mw‹d
 
¸óãThªad
(
funcvoid2_t
 
wøµî
, 
funcvoid1_t
 
func
, 
±r_t
 
d©a
);

68 
	$exôThªad
(
±r_t
 
ªsu…
Ë
__n‹ëu∫
;

69 
	`joöThªad
(
mw‹d
 
idx
, 
±r_t
& 
ªsu…
);

70 
boﬁ
 
	`de°royThªad
(
Thªad
& 
t
);

72 
mw‹d
 
	$gëID
(Ë{  0; 
	}
}

73 
mw‹d
 
	$gëCuºítThªadID
() {

74  
ªöãΩªt_ˇ°
<
U£rThªad
*>(
LoˇlPro˚ss‹
::
	`gëCuºThªad
())->
idx
;

75 
	}
}

78 
ölöe
 
	gPro˚ss
& 
	$CuºPro˚ss
() {

79 
AddªssS∑˚
& 
as
 = 
	`CuºAS
();

80 
	`KASSERT0
(
as
.
	`u£r
());

81  
ªöãΩªt_ˇ°
<
Pro˚ss
&>(
as
);

82 
	}
}

	@src/kernel/Tree.h

23 #i‚de‡
_Tªe_h_


24 
	#_Tªe_h_
 1

	)

26 
	~"ru¡ime/Thªad.h
"

29 
	gãm∂©e
 <
˛ass
 
	gT
>

30 ˛as†
	cTªe


32 
	mpublic
:

33 
	snode


35 
T
 
ôem
; 
node
 *
	mp
, *
	ml
, *
	mr
;

36 
	msize
, 
	mheight
;

37 
node
(c⁄° 
T
 &
_ôem
,Çodê*
_p
 = 
NULL
Ë: 
ôem
(_ôem), 
p
(_p),

38 
l
(
NULL
), 
r
(NULL), 
size
(1), 
height
(0) { } };

39 
	$Tªe
(Ë: 
	$roŸ
(
NULL
Ë{ 
	}
}

40 
node
 *
roŸ
;

42 
boﬁ
 
	$em±y
() const {

43  
roŸ
==
NULL
;

44 
	}
}

46 
T
* 
	$ªadMöNode
() const {

47 
node
 *
cur
 = 
roŸ
;

48 
cur
->
l
){ cur=cur->l; }

49  &(
cur
->
ôem
);

50 
	}
}

52 
T
* 
	$p›MöNode
() {

53 
node
 *
cur
 = 
roŸ
;

54 
cur
->
l
){ cur=cur->l; }

55 
T
* 
ôem
 = &(
cur
->item);

56 
	`îa£
(
cur
);

57  
ôem
;

58 
	}
}

60 
node
* 
	$föd
(c⁄° 
T
 &
ôem
) const {

61 
node
 *
cur
 = 
roŸ
;

62 
cur
) {

63 i‡(
cur
->
ôem
 < iãmËcu∏cur->
r
;

64 i‡(
ôem
 < 
cur
->ôemËcu∏cur->
l
;

66  
cur
; 
	}
}

68 
	$ö£π
(c⁄° 
T
 &
ôem
) {

69 
node
 *
¥ev
 = 
NULL
, **
cur
 = &
roŸ
;

70 *
cur
) {

71 
¥ev
 = *
cur
;

72 i‡((*
cur
)->
ôem
 < iãmËcu∏&((*cur)->
r
);

73 
cur
 = &((*cur)->
l
);

75 
node
 *
n
 = 
√w
 
	`node
(
ôem
, 
¥ev
);

76 *
cur
 = 
n
, 
	`fix
(n);

78 
	}
}

80 
	$dñëeNode
(c⁄° 
T
 &
ôem
Ë{
	`îa£
(
	`föd
(ôem));
	}
}

81 
	$îa£
(
node
 *
n
) {

82 i‡(!
n
) ;

83 i‡(!
n
->
l
 &&Ç->
r
Ë
	`∑ª¡_Àg
“Ën->r,Ç->r->
p
 =Ç->p;

84 i‡(
n
->
l
 && !n->
r
Ë
	`∑ª¡_Àg
“Ën->l,Ç->l->
p
 =Ç->p;

85 i‡(
n
->
l
 &&Ç->
r
) {

86 
node
 *
s
 = 
	`suc˚ss‹
(
n
);

87 
	`îa£
(
s
);

88 
s
->
p
 = 
n
->p, s->
l
 =Ç->l, s->
r
 =Ç->r;

89 i‡(
n
->
l
Ën->l->
p
 = 
s
;

90 i‡(
n
->
r
Ën->r->
p
 = 
s
;

91 
	`∑ª¡_Àg
(
n
Ë
s
, 
	`fix
(s);

93 } 
	`∑ª¡_Àg
(
n
Ë
NULL
;

94 
	`fix
(
n
->
p
),Ç->∞n->
l
 =Ç->
r
 = 
NULL
;

95 
	}
}

97 
node
* 
	$suc˚ss‹
(
node
 *
n
) const {

98 i‡(!
n
Ë 
NULL
;

99 i‡(
n
->
r
Ë 
	`¡h
(0,Ç->r);

100 
node
 *
p
 = 
n
->p;

101 
p
 &&Ö->
r
 =
n
)Ç =Ö,Ö =Ö->p;

102  
p
;

103 
	}
}

105 
node
* 
	$¡h
(
n
, 
node
 *
cur
 = 
NULL
) const {

106 i‡(!
cur
Ëcu∏
roŸ
;

107 
cur
) {

108 i‡(
n
 < 
	`sz
(
cur
->
l
)) {

109 
cur
 = cur->
l
;

110 } i‡(
n
 > 
	`sz
(
cur
->
l
)) {

113 
n
 -
	`sz
(
cur
->
l
);

114 
cur
 = cur->
r
;

117 }  
cur
; 
	}
}

119 
	g¥iv©e
:

120 
ölöe
 
	$sz
(
node
 *
n
Ëc⁄° { Ç ?Ç->
size
 : 0; 
	}
}

121 
ölöe
 
	$height
(
node
 *
n
Ëc⁄° { Ç ?Ç->
height
 : -1; 
	}
}

122 
ölöe
 
boﬁ
 
	$À·_hóvy
(
node
 *
n
) const {

123  
n
 && 
	`height
“->
l
Ë> height“->
r
); 
	}
}

124 
ölöe
 
boﬁ
 
	$right_hóvy
(
node
 *
n
) const {

125  
n
 && 
	`height
“->
r
Ë> height“->
l
); 
	}
}

126 
ölöe
 
boﬁ
 
	$too_hóvy
(
node
 *
n
) const {

127 
hl
 = 
	`height
(
n
->
l
);

128 
hr
 = 
	`height
(
n
->
r
);

129 
m
 = 
hl
>
hr
 ? hl-hr : hr-hl;

130  
n
 && 
m
 > 1;

131 
	}
}

133 
	gnode
*& 
	$∑ª¡_Àg
(
node
 *
n
) {

134 i‡(!
n
->
p
Ë 
roŸ
;

135 i‡(
n
->
p
->
l
 ==Ç) Ç->p->l;

136 i‡(
n
->
p
->
r
 ==Ç) Ç->p->r;

137  
n
->
p
;

138 
	}
}

140 
	$augmít
(
node
 *
n
) {

141 i‡(!
n
) ;

144 
n
->
size
 = 1 + 
	`sz
“->
l
Ë+ sz“->
r
);

145 
hl
 = 
	`height
(
n
->
l
);

146 
hr
 = 
	`height
(
n
->
r
);

147 
m
 = 
hl
>
hr
 ? hl : hr;

148 
n
->
height
 = 1 + 
m
;

149 
	}
}

150 
	#rŸ©e
(
l
, 
r
) \

151 
node
 *
l
 = 
n
->l; \

152 
l
->
p
 = 
n
->p; \

153 
	`∑ª¡_Àg
(
n
Ë
l
; \

154 
n
->
l
 =Ü->
r
; \

155 i‡(
l
->
r
Ël->r->
p
 = 
n
; \

156 
l
->
r
 = 
n
,Ç->
p
 =Ü; \

157 
	`augmít
(
n
), 
	$augmít
(
l
)

	)

158 
	$À·_rŸ©e
(
node
 *
n
Ë{ 
	`rŸ©e
(
r
, 
l
); 
	}
}

159 
	$right_rŸ©e
(
node
 *
n
Ë{ 
	`rŸ©e
(
l
, 
r
); 
	}
}

160 
	$fix
(
node
 *
n
) {

161 
n
Ë{ 
	`augmít
(n);

162 i‡(
	`too_hóvy
(
n
)) {

163 i‡(
	`À·_hóvy
(
n
Ë&& 
	`right_hóvy
“->
l
)Ë
	`À·_rŸ©e
(n->l);

164 i‡(
	`right_hóvy
(
n
Ë&& 
	`À·_hóvy
“->
r
))

165 
	`right_rŸ©e
(
n
->
r
);

166 i‡(
	`À·_hóvy
(
n
)Ë
	`right_rŸ©e
(n);

167 
	`À·_rŸ©e
(
n
);

168 
n
 =Ç->
p
; }

169 
n
 =Ç->
p
; } 
	}
}

174 ˛as†
	cThªadNode


176 
‰õnd
 
˛ass
 
	mScheduÀr
;

177 
Thªad
 *
	mthªad
;

179 
	mpublic
:

180 
boﬁ
 
›î©‹
 < (
ThªadNode
 
Ÿhî
) const

182  
thªad
->
vRu¡ime
 < 
Ÿhî
.thread->vRuntime;

184 
boﬁ
 
	g›î©‹
 =(
ThªadNode
 
Ÿhî
) const

186  
thªad
->
vRu¡ime
 =
Ÿhî
.thread->vRuntime;

188 
boﬁ
 
	g›î©‹
 > (
ThªadNode
 
	gŸhî
) const

190  
	gthªad
->
	gvRu¡ime
 > 
	gŸhî
.thread->vRuntime;

194 
	$ThªadNode
(
Thªad
 *
t
)

196 
thªad
 = 
t
;

197 
	}
}

	@src/kernel/syscalls.cc

17 
	~"ru¡ime/ScheduÀr.h
"

18 
	~"ru¡ime/Thªad.h
"

19 
	~"kî√l/Clock.h
"

20 
	~"kî√l/Ouçut.h
"

21 
	~"kî√l/Pro˚ss.h
"

22 
	~"w‹ld/Ac˚ss.h
"

23 
	~"machöe/Pro˚ss‹.h
"

24 
	~"machöe/Machöe.h
"

27 
	~"sysˇŒs.h
"

28 
	~"±hªad.h
"

33 "C" 
	$__as£π_func
–c⁄° * c⁄° 
fûe
, 
size_t
 
löe
,

34 c⁄° * c⁄° 
func
, c⁄° * c⁄° 
ex¥
 ) {

35 
KERR
::
	`oué
("ASSERT: ", 
fûe
, ':', 
löe
, ' ', 
func
, ' ', 
ex¥
);

36 
	`ReboŸ
();

37 
	}
}

39 "C" 
	$ab‹t
() {

40 
	`KABORT0
();

41 
	`uƒóchabÀ
();

42 
	}
}

44 "C" 
	$‰ì
(* 
±r
Ë{ 
Mem‹yM™agî
::
	`Àgacy_‰ì
’å); 
	}
}

45 "C" 
	$_‰ì_r
(
_ªít
* 
r
, * 
±r
Ë{ 
	`‰ì
’å); 
	}
}

46 "C" * 
	$mÆloc
(
size_t
 
size
Ë{  
Mem‹yM™agî
::
	`Àgacy_mÆloc
(size); 
	}
}

47 "C" * 
	$_mÆloc_r
(
_ªít
* 
r
, 
size_t
 
size
Ë{  
	`mÆloc
(size); 
	}
}

49 "C" * 
	$ˇŒoc
(
size_t
 
nmemb
, size_à
size
) {

50 * 
±r
 = 
	`mÆloc
(
nmemb
 * 
size
);

51 
	`mem£t
(
±r
, 0, 
nmemb
 * 
size
);

52  
±r
;

53 
	}
}

55 "C" * 
	$_ˇŒoc_r
(
_ªít
* 
r
, 
size_t
 
nmemb
, size_à
size
) {

56  
	`ˇŒoc
(
nmemb
, 
size
);

57 
	}
}

59 "C" * 
	$ªÆloc
(* 
±r
, 
size_t
 
size
) {

60 
	`KABORT1
("realloc");

61  
nuŒ±r
;

62 
	}
}

64 "C" * 
	$_ªÆloc_r
(
_ªít
* 
r
, * 
±r
, 
size_t
 
size
) {

65  
	`ªÆloc
(
±r
, 
size
);

66 
	}
}

71 "C" 
	$_exô
() {

72 
	`CuºPro˚ss
().
	`exô
();

73 
	}
}

75 "C" 
	$›í
(c⁄° *
∑th
, 
oÊag
, ...) {

76 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

77 autÿ
ô
 = 
kî√lFS
.
	`föd
(
∑th
);

78 i‡(
ô
 =
kî√lFS
.
	`íd
()Ë -
ENOENT
;

79  
p
.
ioH™dÀs
.
	`°‹e
(
k√w
<
FûeAc˚ss
>(
ô
->
£c⁄d
));

80 
	}
}

82 "C" 
	$˛o£
(
fûdes
) {

83 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

84 
Ac˚ss
* 
ac˚ss
 = 
p
.
ioH™dÀs
.
	`ªmove
(
fûdes
);

85 i‡(!
ac˚ss
Ë -
EBADF
;

86 
dñëe
 
ac˚ss
;

87 
p
.
ioH™dÀs
.
	`ªÀa£
(
fûdes
);

89 
	}
}

91 "C" 
ssize_t
 
	$ªad
(
fûdes
, * 
buf
, 
size_t
 
nbyã
) {

93 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

94 
Ac˚ss
* 
ac˚ss
 = 
p
.
ioH™dÀs
.
	`ac˚ss
(
fûdes
);

95 i‡(!
ac˚ss
Ë -
EBADF
;

96 
ssize_t
 
ªt
 = 
ac˚ss
->
	`ªad
(
buf
, 
nbyã
);

97 
p
.
ioH™dÀs
.
	`d⁄e
(
fûdes
);

98  
ªt
;

99 
	}
}

101 "C" 
ssize_t
 
	$wrôe
(
fûdes
, c⁄° * 
buf
, 
size_t
 
nbyã
) {

103 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

104 
Ac˚ss
* 
ac˚ss
 = 
p
.
ioH™dÀs
.
	`ac˚ss
(
fûdes
);

105 i‡(!
ac˚ss
Ë -
EBADF
;

106 
ssize_t
 
ªt
 = 
ac˚ss
->
	`wrôe
(
buf
, 
nbyã
);

107 
p
.
ioH™dÀs
.
	`d⁄e
(
fûdes
);

108  
ªt
;

109 
	}
}

111 "C" 
off_t
 
	$l£ek
(
fûdes
, 
off_t
 
off£t
, 
whí˚
) {

112 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

113 
Ac˚ss
* 
ac˚ss
 = 
p
.
ioH™dÀs
.
	`ac˚ss
(
fûdes
);

114 i‡(!
ac˚ss
Ë -
EBADF
;

115 
ssize_t
 
ªt
 = 
ac˚ss
->
	`l£ek
(
off£t
, 
whí˚
);

116 
p
.
ioH™dÀs
.
	`d⁄e
(
fûdes
);

117  
ªt
;

118 
	}
}

121 "C" 
	$gë_c‹e_cou¡
(){

122  
Machöe
::
	`gëPro˚ss‹Cou¡
();

123 
	}
}

125 "C" 
pid_t
 
	$gëpid
() {

126  
	`CuºPro˚ss
().
	`gëID
();

127 
	}
}

129 "C" 
pid_t
 
	$gëcid
() {

130  
LoˇlPro˚ss‹
::
	`gëIndex
();

131 
	}
}

133 "C" 
	$u¶ìp
(
u£c⁄ds_t
 
u£cs
) {

134 
Timeout
::
	`¶ìp
(
Clock
::
	`now
(Ë+ 
u£cs
);

136 
	}
}

138 "C" 
	$_mm≠
(** 
addr
, 
size_t
 
Àn
, 
¥ŸÊags
, 
fûdes
, 
off_t
 
off
) {

140 
¥Ÿ
 = 
¥ŸÊags
 & 0xf;

141 
Êags
 = 
¥ŸÊags
 >> 4;

142 
vaddr
 
va
 = 
	`CuºPro˚ss
().
m≠
<1>(
	`vaddr
(*
addr
), 
Àn
, 
¥Ÿ
, 
Êags
, 
fûdes
, 
off
);

143 i‡(
va
 =
t›addr
Ë -
ENOMEM
;

144 *
addr
 = (*)
va
;

146 
	}
}

148 "C" 
	$_munm≠
(* 
addr
, 
size_t
 
Àn
) {

149 
	`CuºPro˚ss
().
unm≠
<1>(
	`vaddr
(
addr
), 
Àn
);

151 
	}
}

153 "C" 
±hªad_t
 
	$_±hªad_¸óã
(
funcvoid2_t
 
övoke
, 
funcvoid1_t
 
func
, * 
d©a
) {

154  
	`CuºPro˚ss
().
	`¸óãThªad
(
övoke
, 
func
, 
d©a
);

155 
	}
}

157 "C" 
	$±hªad_exô
(* 
ªsu…
) {

158 
	`CuºPro˚ss
().
	`exôThªad
(
ªsu…
);

159 
	}
}

161 "C" 
	$±hªad_joö
(
±hªad_t
 
tid
, ** 
ªsu…
) {

163  
	`CuºPro˚ss
().
	`joöThªad
(
tid
, *
ªsu…
);

164 
	}
}

166 "C" 
	$±hªad_kûl
(
±hªad_t
 
tid
, 
sig«l
) {

168 
	`KABORT1
("pthread_kill");

169 
	}
}

171 "C" 
±hªad_t
 
	$±hªad_£lf
() {

172  
Pro˚ss
::
	`gëCuºítThªadID
();

173 
	}
}

175 "C" 
	$£mCª©e
(
mw‹d
* 
rsid
, mw‹d 
öô
) {

177 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

178 
p
.
£mSt‹eLock
.
	`acquúe
();

179 
Sem≠h‹e
* 
s
 = 
k√w
<Sem≠h‹e>(
öô
);

180 *
rsid
 = 
p
.
£mSt‹e
.
	`put
(
s
);

181 
p
.
£mSt‹eLock
.
	`ªÀa£
();

183 
	}
}

185 "C" 
	$£mDe°roy
(
mw‹d
 
sid
) {

186 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

187 
p
.
£mSt‹eLock
.
	`acquúe
();

188 i‡(!
p
.
£mSt‹e
.
	`vÆid
(
sid
Ë|| !p.£mSt‹e.
	`gë
(sid)->
	`em±y
()Ë{Ö.
£mSt‹eLock
.
	`ªÀa£
();  -1; }

189 
	`kdñëe
(
p
.
£mSt‹e
.
	`gë
(
sid
));

190 
p
.
£mSt‹e
.
	`ªmove
(
sid
);

191 
p
.
£mSt‹eLock
.
	`ªÀa£
();

193 
	}
}

195 "C" 
	$£mP
(
mw‹d
 
sid
) {

196 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

197 
p
.
£mSt‹eLock
.
	`acquúe
();

198 i‡(!
p
.
£mSt‹e
.
	`vÆid
(
sid
)Ë{Ö.
£mSt‹eLock
.
	`ªÀa£
();  -1; }

199 
p
.
£mSt‹e
.
	`gë
(
sid
)->
	`P
(&p.
£mSt‹eLock
);

201 
	}
}

203 "C" 
	$£mV
(
mw‹d
 
sid
) {

204 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

205 
p
.
£mSt‹eLock
.
	`acquúe
();

206 i‡(!
p
.
£mSt‹e
.
	`vÆid
(
sid
)Ë{Ö.
£mSt‹eLock
.
	`ªÀa£
();  -1; }

207 
p
.
£mSt‹e
.
	`gë
(
sid
)->
	`V
(&p.
£mSt‹eLock
);

209 
	}
}

211 (*
	tfuncöt4_t
)(
	tmw‹d
, mword, mword, mword);

212 "C" 
	$¥ivûege
(
±r_t
 
func
, 
mw‹d
 
a1
, mw‹d 
a2
, mw‹d 
a3
, mw‹d 
a4
) {

213  ((
funcöt4_t
)
func
)(
a1
, 
a2
, 
a3
, 
a4
);

214 
	}
}

216 "C" 
	$_öô_sig_h™dÀr
(
vaddr
 
sigh™dÀr
) {

218 
	`CuºPro˚ss
().
	`£tSig«lH™dÀr
(
sigh™dÀr
);

219 
	}
}

223 "C" 
	$f°©
(
fûdes
, 
°©
 *
buf
) {

224 
	`KABORT1
("f°©");  -
ENOSYS
;

225 
	}
}

232 "C" 
	$ißây
(
fd
) {

233 
	`KABORT1
("ißây");  -
ENOSYS
;

234 
	}
}

244 * 
__dso_h™dÀ
 = 
nuŒ±r
;

246 
	$ssize_t
 (*
	tsysˇŒ_t
)(
	tmw‹d
 
	ta1
, mw‹d 
	ta2
, mw‹d 
	ta3
, mw‹d 
	ta4
, mw‹d 
	ta5
);

247 c⁄° 
sysˇŒ_t
 
sysˇŒs
[] = {

248 
	`sysˇŒ_t
(
_exô
),

249 
	`sysˇŒ_t
(
›í
),

250 
	`sysˇŒ_t
(
˛o£
),

251 
	`sysˇŒ_t
(
ªad
),

252 
	`sysˇŒ_t
(
wrôe
),

253 
	`sysˇŒ_t
(
l£ek
),

254 
	`sysˇŒ_t
(
gë_c‹e_cou¡
),

255 
	`sysˇŒ_t
(
gëpid
),

256 
	`sysˇŒ_t
(
gëcid
),

257 
	`sysˇŒ_t
(
u¶ìp
),

258 
	`sysˇŒ_t
(
_mm≠
),

259 
	`sysˇŒ_t
(
_munm≠
),

260 
	`sysˇŒ_t
(
_±hªad_¸óã
),

261 
	`sysˇŒ_t
(
±hªad_exô
),

262 
	`sysˇŒ_t
(
±hªad_joö
),

263 
	`sysˇŒ_t
(
±hªad_kûl
),

264 
	`sysˇŒ_t
(
±hªad_£lf
),

265 
	`sysˇŒ_t
(
£mCª©e
),

266 
	`sysˇŒ_t
(
£mDe°roy
),

267 
	`sysˇŒ_t
(
£mP
),

268 
	`sysˇŒ_t
(
£mV
),

269 
	`sysˇŒ_t
(
¥ivûege
),

270 
	`sysˇŒ_t
(
_öô_sig_h™dÀr
)

271 
	}
};

273 
°©ic_as£π
((
sysˇŒs
)/(
sysˇŒ_t
Ë=
SysˇŒNum
::
max
, "syscallÜistÉrror");

275 "C" 
ssize_t
 
	$sysˇŒ_h™dÀr
(
mw‹d
 
x
, mw‹d 
a1
, mw‹d 
a2
, mw‹d 
a3
, mw‹d 
a4
, mw‹d 
a5
) {

276 
ssize_t
 
ªtcode
 = -
ENOSYS
;

277 i‡(
x
 < 
SysˇŒNum
::
max
Ë
ªtcode
 = 
sysˇŒs
[x](
a1
, 
a2
, 
a3
, 
a4
, 
a5
);

278 
DBG
::
	`oué
(DBG::
Te°s
, "sysˇŒ: ", 
x
);

280  
ªtcode
;

281 
	}
}

	@src/machine/ACPI.h

18 
	~"exã∫/a˝iˇ/sour˚/ö˛ude/a˝i.h
"

20 
	~"ru¡ime/BlockögSync.h
"

22 
	~<£t
>

24 
°©ic_as£π
–
boﬁ
(
ACPI_INTERRUPT_HANDLED
Ë=
åue
, "ACPI_INTERRUPT_HANDLED" );

25 
°©ic_as£π
–
boﬁ
(
ACPI_INTERRUPT_NOT_HANDLED
Ë=
Ál£
, "ACPI_INTERRUPT_NOT_HANDLED" );

27 
vaddr
 
	grsdp
 = 0;

30 
	g£t
<
	gvaddr
> 
	gÆloˇti⁄s
;

31 
	g£t
<
	g∑ú
<
	gvaddr
,
	gsize_t
>> 
	gm≠pögs
;

33 
	#ACPICALL
(
func
) {\

34 
ACPI_STATUS
 
°©us
 = 
func
;\

35 
	`KASSERT1
(
°©us
 =
AE_OK
, status);\

36 }

	)

38 
∑ddr
 
öôACPI
(
vaddr
 
r
, 
m≠
<
uöt32_t
,uint32_t>&, map<uint32_t,paddr>&,

39 
m≠
<
uöt8_t
,
∑ú
<
uöt32_t
,
uöt16_t
>>&Ë
__£˘i⁄
(".boot.text");

40 
	$öôACPI2
(Ë
	`__£˘i⁄
(".boot.text");

41 
ACPI_DEVICE_INFO
* 
	$a˝iGëInfo
(
ACPI_HANDLE
Ë
	`__£˘i⁄
(".boot.text");

42 
ACPI_STATUS
 
	$wÆkH™dÀr
(
ACPI_HANDLE
, 
UINT32
, *, **Ë
	`__£˘i⁄
(".boot.text");

43 
ACPI_STATUS
 
	$öôH™dÀr
(
ACPI_HANDLE
, 
UINT32
Ë
	`__£˘i⁄
(".boot.text");

44 
ACPI_STATUS
 
	$pciRoŸBridge
(
ACPI_HANDLE
, 
UINT32
, *, **Ë
	`__£˘i⁄
(".boot.text");

45 
ACPI_STATUS
 
	$di•œyResour˚
(
ACPI_RESOURCE
*, *Ë
	`__£˘i⁄
(".boot.text");

46 
ACPI_STATUS
 
	$pciI¡îru±Lök
(
ACPI_HANDLE
, 
UINT32
, *, **Ë
	`__£˘i⁄
(".boot.text");

48 
∑ddr
 
	`öôACPI
(
vaddr
 
r
, 
m≠
<
uöt32_t
,uöt32_t>& 
≠icM≠
,

49 
m≠
<
uöt32_t
,
∑ddr
>& 
ioApicM≠
,

50 
m≠
<
uöt8_t
,
∑ú
<
uöt32_t
,
uöt16_t
>>& 
ioOvîrideM≠
 ) {

52 
rsdp
 = 
r
;

54 
	`ACPICALL
(
	`A˝iInôülizeTabÀs
(0, 0, 
åue
));

56 
a˝i_èbÀ_Ádt
* 
Ádt
;

57 
	`ACPICALL
(
	`A˝iGëTabÀ
((*)
ACPI_SIG_FADT
, 0, (
ACPI_TABLE_HEADER
**)&
Ádt
));

58 
DBG
::
	`out1
(DBG::
A˝i
, "FADT: ", 
Ádt
->
Hódî
.
Lígth
, '/', 
	`FmtHex
(Ádt->
BoŸFœgs
), '/', FmtHex(Ádt->
Fœgs
));

59 i‡(
Ádt
->
BoŸFœgs
 & 
ACPI_FADT_8042
Ë
DBG
::
	`out1
(DBG::
A˝i
, " - 8042");

61 
DBG
::
	`oué
(DBG::
A˝i
);

63 
a˝i_èbÀ_§©
* 
§©
;

64 i‡(
	`A˝iGëTabÀ
((*)
ACPI_SIG_SRAT
, 0, (
ACPI_TABLE_HEADER
**)&
§©
 ) =
AE_OK
) {

65 
DBG
::
	`oué
(DBG::
A˝i
, "SRAT: ", 
§©
->
Hódî
.
Lígth
);

68 
a˝i_èbÀ_¶ô
* 
¶ô
;

69 i‡(
	`A˝iGëTabÀ
((*)
ACPI_SIG_SLIT
, 0, (
ACPI_TABLE_HEADER
**)&
¶ô
 ) =
AE_OK
) {

70 
DBG
::
	`oué
(DBG::
A˝i
, "SLIT: ", 
¶ô
->
Hódî
.
Lígth
);

73 
a˝i_èbÀ_madt
* 
madt
;

74 
	`ACPICALL
(
	`A˝iGëTabÀ
((*)
ACPI_SIG_MADT
, 0, (
ACPI_TABLE_HEADER
**)&
madt
));

75 
mw‹d
 
madtLígth
 = 
madt
->
Hódî
.
Lígth
 - (
a˝i_èbÀ_madt
);

76 
∑ddr
 
≠icPhysAddr
 = 
madt
->
Addªss
;

77 
DBG
::
	`out1
(DBG::
A˝i
, "MADT: ", 
madtLígth
, '/', 
	`FmtHex
(
≠icPhysAddr
));

78 i‡(
madt
->
Fœgs
 & 
ACPI_MADT_PCAT_COMPAT
Ë
DBG
::
	`out1
(DBG::
A˝i
, " - 8259");

79 
DBG
::
	`oué
(DBG::
A˝i
);

80 
PIC
::
	`dißbÀ
();

82 
DBG
::
	`out1
(DBG::
A˝i
, "MADT:");

84 
a˝i_subèbÀ_hódî
* 
subèbÀ
 = (a˝i_subèbÀ_hódî*)(
madt
 + 1);

86 
madtLígth
 > 0) {

87 
	`KASSERTN
(
subèbÀ
->
Lígth
 <
madtLígth
, subtable->Length, '/', madtLength);

88 
subèbÀ
->
Ty≥
) {

89 
ACPI_MADT_TYPE_LOCAL_APIC
: {

90 
a˝i_madt_loˇl_≠ic
* 
œ
 = (a˝i_madt_loˇl_≠ic*)
subèbÀ
;

91 
DBG
::
	`out1
(DBG::
A˝i
, " CPU:", 
	`mw‹d
(
œ
->
Pro˚ss‹Id
), '/', mw‹d÷a->
Id
));

92 i‡(!(
œ
->
L≠icFœgs
 & 0x1)Ë
DBG
::
	`out1
(DBG::
A˝i
, 'X');

93 i‡(
œ
->
L≠icFœgs
 & 0x1Ë
≠icM≠
.
	`ö£π
–{œ->
Pro˚ss‹Id
,Üa->
Id
} );

95 
ACPI_MADT_TYPE_IO_APIC
: {

96 
a˝i_madt_io_≠ic
* 
io
 = (a˝i_madt_io_≠ic*)
subèbÀ
;

97 
DBG
::
	`out1
(DBG::
A˝i
, " IO_APIC:", 
io
->
GlobÆIrqBa£
, '@', 
	`FmtHex
(io->
Addªss
));

98 
ioApicM≠
.
	`ö£π
–{
io
->
GlobÆIrqBa£
, (
∑ddr
)io->
Addªss
} );

100 
ACPI_MADT_TYPE_INTERRUPT_OVERRIDE
: {

101 
a˝i_madt_öãºu±_ovîride
* 
io
 = (a˝i_madt_öãºu±_ovîride*)
subèbÀ
;

102 
DBG
::
	`out1
(DBG::
A˝i
, " INTERRUPT_OVERRIDE:", 
	`FmtHex
(
io
->
Sour˚Irq
), "->", FmtHex(io->
GlobÆIrq
), '/', FmtHex(io->
I¡iFœgs
));

103 
ioOvîrideM≠
.
	`ö£π
–{
io
->
Sour˚Irq
, {io->
GlobÆIrq
, io->
I¡iFœgs
}} );

105 
ACPI_MADT_TYPE_NMI_SOURCE
:

106 
DBG
::
	`out1
(DBG::
A˝i
, " NMI_SOURCE"); ;

107 
ACPI_MADT_TYPE_LOCAL_APIC_NMI
: {

108 
a˝i_madt_loˇl_≠ic_nmi
* 
 
 = (a˝i_madt_loˇl_≠ic_nmi*)
subèbÀ
;

109 
DBG
::
	`out1
(DBG::
A˝i
, " LOCAL_APIC_NMI:", (
 
->
Pro˚ss‹Id
), '/', ÷n->
I¡iFœgs
), '/', ÷n->
Löt
) );

111 
ACPI_MADT_TYPE_LOCAL_APIC_OVERRIDE
: {

112 
a˝i_madt_loˇl_≠ic_ovîride
* 
ao
 = (a˝i_madt_loˇl_≠ic_ovîride*)
subèbÀ
;

113 
DBG
::
	`out1
(DBG::
A˝i
, " LOCAL_APIC_OVERRIDE:", 
	`FmtHex
(
ao
->
Addªss
) );

114 
≠icPhysAddr
 = 
ao
->
Addªss
;

116 
ACPI_MADT_TYPE_IO_SAPIC
:

117 
DBG
::
	`out1
(DBG::
A˝i
, " IO_SAPIC"); ;

118 
ACPI_MADT_TYPE_LOCAL_SAPIC
:

119 
DBG
::
	`out1
(DBG::
A˝i
, " LOCAL_SAPIC"); ;

120 
ACPI_MADT_TYPE_INTERRUPT_SOURCE
:

121 
DBG
::
	`out1
(DBG::
A˝i
, " INTERRUPT_SOURCE"); ;

122 
ACPI_MADT_TYPE_LOCAL_X2APIC
:

123 
DBG
::
	`out1
(DBG::
A˝i
, " LOCAL_X2APIC"); ;

124 
ACPI_MADT_TYPE_LOCAL_X2APIC_NMI
:

125 
DBG
::
	`out1
(DBG::
A˝i
, " LOCAL_X2APIC_NMI"); ;

126 
ACPI_MADT_TYPE_GENERIC_INTERRUPT
:

127 
DBG
::
	`out1
(DBG::
A˝i
, " GENERIC_INTERRUPT"); ;

128 
ACPI_MADT_TYPE_GENERIC_DISTRIBUTOR
:

129 
DBG
::
	`out1
(DBG::
A˝i
, " GENERIC_DISTRIBUTOR"); ;

130 : 
	`KABORT1
("unknown ACPI MADT subtable");

132 
madtLígth
 -
subèbÀ
->
Lígth
;

133 
subèbÀ
 = (
a˝i_subèbÀ_hódî
*)(((*)subèbÀË+ subèbÀ->
Lígth
);

135 
DBG
::
	`oué
(DBG::
A˝i
);

136  
≠icPhysAddr
;

137 
	}
}

139 
ACPI_DEVICE_INFO
* 
	$a˝iGëInfo
(
ACPI_HANDLE
 
obje˘
) {

140 
ACPI_DEVICE_INFO
* 
öfo
;

141 
	`ACPICALL
(
	`A˝iGëObje˘Info
(
obje˘
, &
öfo
));

143 
buf„r
[256];

144 
ACPI_BUFFER
 
∑th
;

145 
∑th
.
Poöãr
 = 
buf„r
;

146 
∑th
.
Lígth
 = (
buf„r
);

147 
	`ACPICALL
(
	`A˝iGëName
(
obje˘
, 
ACPI_FULL_PATHNAME
, &
∑th
));

149 
	`A˝iOsPrötf
("%†HID: %s, ADR: %08X, Sètus: %08X\n", (*)
∑th
.
Poöãr
,

150 
öfo
->
H¨dw¨eId
.
Såög
, info->
Addªss
, info->
CuºítSètus
);

152  
öfo
;

153 
	}
}

155 
ACPI_STATUS
 
	$wÆkH™dÀr
(
ACPI_HANDLE
 
obje˘
, 
UINT32
 
Àvñ
, * 
˘x
, ** 
ªtvÆ
) {

156 
	`A˝iOsPrötf
("WALK ");

157 
ACPI_DEVICE_INFO
* 
öfo
 = 
	`a˝iGëInfo
(
obje˘
);

158 
	`A˝iOsFªe
(
öfo
);

159  
AE_OK
;

160 
	}
}

162 
ACPI_STATUS
 
	$öôH™dÀr
(
ACPI_HANDLE
 
obje˘
, 
UINT32
 
func
) {

163 
	`A˝iOsPrötf
("INIT ");

164 
ACPI_DEVICE_INFO
* 
öfo
 = 
	`a˝iGëInfo
(
obje˘
);

165 
	`A˝iOsFªe
(
öfo
);

166  
AE_OK
;

167 
	}
}

169 
ACPI_STATUS
 
	$pciRoŸBridge
(
ACPI_HANDLE
 
obje˘
, 
UINT32
 
Àvñ
, * 
˘x
, ** 
ªtvÆ
) {

170 
	`A˝iOsPrötf
("BRDG ");

171 
ACPI_DEVICE_INFO
* 
öfo
 = 
	`a˝iGëInfo
(
obje˘
);

172 
	`KASSERT1
(
öfo
->
Fœgs
 =
ACPI_PCI_ROOT_BRIDGE
, info->Flags);

173 
ACPI_BUFFER
 
buf„r
;

174 
buf„r
.
Lígth
 = 
ACPI_ALLOCATE_BUFFER
;

175 
buf„r
.
Poöãr
 = 
nuŒ±r
;

176 
ACPI_STATUS
 
°©us
 = 
	`A˝iGëIrqRoutögTabÀ
(
obje˘
, &
buf„r
);

177 i‡(
°©us
 =
AE_OK
) {

178 
ACPI_PCI_ROUTING_TABLE
* 
π
 = (ACPI_PCI_ROUTING_TABLE*)
buf„r
.
Poöãr
;

179 
π
->
Lígth
 != 0) {

180 
mw‹d
 
devnum
 = (
π
->
Addªss
 & 0xFFFF0000) >> 16;

181 
mw‹d
 
func
 = (
π
->
Addªss
 & 0x0000FFFF);

182 
	`KASSERT1
(
func
 =0xFFFF, 
	`FmtHex
(func));

183 
	`A˝iOsPrötf
("IRQ RT: Dev 0x%02X/%¯-> %s/%d\n", 
devnum
, 'A'+
π
->
Pö
,Ñt->
Sour˚
,Ñt->
Sour˚Index
);

184 
π
 = (
ACPI_PCI_ROUTING_TABLE
*)((*Ïà+Ñt->
Lígth
);

186 
	`A˝iOsFªe
(
buf„r
.
Poöãr
);

188 
	`A˝iOsPrötf
("nÿIRQÑoutög info: %d\n", 
°©us
);

190 
	`A˝iOsFªe
(
öfo
);

191  
AE_OK
;

192 
	}
}

194 
ACPI_STATUS
 
	$di•œyResour˚
(
ACPI_RESOURCE
* 
ªsour˚
, * 
˘x
) {

195 i‡(
ªsour˚
->
Ty≥
 =
ACPI_RESOURCE_TYPE_IRQ
) {

196 
ACPI_RESOURCE_IRQ
& 
r
 = 
ªsour˚
->
D©a
.
Irq
;

197 
	`A˝iOsPrötf
("Len 0x%X Trig 0x%X Pol 0x%X Shar 0x%X Wake 0x%X Cnt 0x%X",

198 
r
.
Des¸ùt‹Lígth
,Ñ.
Triggîög
,Ñ.
Pﬁ¨ôy
,Ñ.
Sh¨abÀ
,Ñ.
WakeC≠abÀ
,Ñ.
I¡îru±Cou¡
);

199 
	`A˝iOsPrötf
(" IRQs:");

200 
i
 = 0; i < 
r
.
I¡îru±Cou¡
; i++) {

201 
	`A˝iOsPrötf
(" 0x%02X", 
r
.
I¡îru±s
[
i
]);

203 
	`A˝iOsPrötf
("\n");

204 } i‡(
ªsour˚
->
Ty≥
 =
ACPI_RESOURCE_TYPE_EXTENDED_IRQ
) {

205 
ACPI_RESOURCE_EXTENDED_IRQ
& 
r
 = 
ªsour˚
->
D©a
.
ExãndedIrq
;

206 
	`A˝iOsPrötf
("P/C 0x%X Trig 0x%X Pol 0x%X Shar 0x%X Wake 0x%X Cnt 0x%X",

207 
r
.
Produ˚rC⁄sumî
,Ñ.
Triggîög
,Ñ.
Pﬁ¨ôy
,Ñ.
Sh¨abÀ
,Ñ.
WakeC≠abÀ
,Ñ.
I¡îru±Cou¡
);

208 i‡(
r
.
Resour˚Sour˚
.
SåögLígth
Ë
	`A˝iOsPrötf
(" Idx %d Sour˚ %s",Ñ.Resour˚Sour˚.
Index
,Ñ.Resour˚Sour˚.
SåögPå
);

209 
	`A˝iOsPrötf
(" IRQs:");

210 
i
 = 0; i < 
r
.
I¡îru±Cou¡
; i++) {

211 
	`A˝iOsPrötf
(" 0x%02X", 
r
.
I¡îru±s
[
i
]);

213 
	`A˝iOsPrötf
("\n");

215 
	`A˝iOsPrötf
("ACPI_RESOURCE_TYPE: %d\n", 
ªsour˚
->
Ty≥
);

217  
AE_OK
;

218 
	}
}

220 
ACPI_STATUS
 
	$pciI¡îru±Lök
(
ACPI_HANDLE
 
obje˘
, 
UINT32
 
Àvñ
, * 
˘x
, ** 
ªtvÆ
) {

221 
	`A˝iOsPrötf
("INTL ");

222 
ACPI_DEVICE_INFO
* 
öfo
 = 
	`a˝iGëInfo
(
obje˘
);

224 
	`ACPICALL
(
	`A˝iWÆkResour˚s
(
obje˘
, (*)"_CRS", 
di•œyResour˚
, 
NULL
));

226 
ACPI_BUFFER
 
buf„r
;

227 
buf„r
.
Lígth
 = 
ACPI_ALLOCATE_BUFFER
;

228 
buf„r
.
Poöãr
 = 
nuŒ±r
;

229 
	`ACPICALL
(
	`A˝iGëCuºítResour˚s
(
obje˘
, &
buf„r
));

230 
ACPI_RESOURCE
* 
ªsour˚
 = (ACPI_RESOURCE*)
buf„r
.
Poöãr
;

231 
ªsour˚
->
Ty≥
 !
ACPI_RESOURCE_TYPE_END_TAG
) {

232 
	`di•œyResour˚
(
ªsour˚
, 
˘x
);

233 
ªsour˚
 = (
ACPI_RESOURCE
*)((*Ïesour˚ +Ñesour˚->
Lígth
);

235 
	`A˝iOsFªe
(
buf„r
.
Poöãr
);

237 
	`A˝iOsFªe
(
öfo
);

238  
AE_OK
;

239 
	}
}

241 
	$öôACPI2
() {

242 
	`ACPICALL
(
	`A˝iInôülizeSubsy°em
());

244 
	`ACPICALL
(
	`A˝iLﬂdTabÀs
());

245 
	`ACPICALL
(
	`A˝iE«bÀSubsy°em
(
ACPI_FULL_INITIALIZATION
));

246 
	`ACPICALL
(
	`A˝iIn°ÆlInôüliz©i⁄H™dÀr
(
öôH™dÀr
, 0));

247 
	`ACPICALL
(
	`A˝iInôülizeObje˘s
(
ACPI_FULL_INITIALIZATION
));

250 
	`ACPICALL
(
	`A˝iGëDevi˚s
((*)"PNP0C0F", 
pciI¡îru±Lök
, 
NULL
, NULL));

251 
	`ACPICALL
(
	`A˝iGëDevi˚s
((*)"PNP0A03", 
pciRoŸBridge
, 
NULL
, NULL));

254 
	`ACPICALL
(
	`A˝iTîmö©e
());

257 
	`KASSERT0
(
Æloˇti⁄s
.
	`em±y
());

258 
	`KASSERT0
(
m≠pögs
.
	`em±y
());

259 
	}
}

261 
ACPI_STATUS
 
	$A˝iOsInôülize
(Ë{  
AE_OK
; 
	}
}

263 
ACPI_STATUS
 
	$A˝iOsTîmö©e
(Ë{  
AE_OK
; 
	}
}

265 
ACPI_PHYSICAL_ADDRESS
 
	$A˝iOsGëRoŸPoöãr
(Ë{  
rsdp
; 
	}
}

267 
ACPI_STATUS
 
	$A˝iOsPªdeföedOvîride
(c⁄° 
ACPI_PREDEFINED_NAMES
* 
InôVÆ
,

268 
ACPI_STRING
* 
NewVÆ
) {

269 *
NewVÆ
 = 
nuŒ±r
;

270  
AE_OK
;

271 
	}
}

273 
ACPI_STATUS
 
	$A˝iOsTabÀOvîride
(
ACPI_TABLE_HEADER
* 
Exi°ögTabÀ
,

274 
ACPI_TABLE_HEADER
** 
NewTabÀ
) {

275 *
NewTabÀ
 = 
nuŒ±r
;

276  
AE_OK
;

277 
	}
}

279 
ACPI_STATUS
 
	$A˝iOsPhysiˇlTabÀOvîride
(
ACPI_TABLE_HEADER
* 
Exi°ögTabÀ
,

280 
ACPI_PHYSICAL_ADDRESS
* 
NewAddªss
, 
UINT32
* 
NewTabÀLígth
) {

281 *
NewAddªss
 = 0;

282 *
NewTabÀLígth
 = 0;

283  
AE_OK
;

284 
	}
}

286 
ACPI_STATUS
 
	$A˝iOsCª©eLock
(
ACPI_SPINLOCK
* 
OutH™dÀ
) {

287 *
OutH™dÀ
 = 
k√w
<
SpöLock
>();

288  
AE_OK
;

289 
	}
}

291 
	$A˝iOsDñëeLock
(
ACPI_SPINLOCK
 
H™dÀ
) {

292 
	`kdñëe
(
ªöãΩªt_ˇ°
<
SpöLock
*>(
H™dÀ
));

293 
	}
}

295 
ACPI_CPU_FLAGS
 
	$A˝iOsAcquúeLock
(
ACPI_SPINLOCK
 
H™dÀ
) {

296 
ªöãΩªt_ˇ°
<
SpöLock
*>(
H™dÀ
)->
	`acquúe
();

298 
	}
}

300 
	$A˝iOsRñó£Lock
(
ACPI_SPINLOCK
 
H™dÀ
, 
ACPI_CPU_FLAGS
 
Fœgs
) {

301 
ªöãΩªt_ˇ°
<
SpöLock
*>(
H™dÀ
)->
	`ªÀa£
();

302 
	}
}

304 
ACPI_STATUS
 
	$A˝iOsCª©eSem≠h‹e
(
UINT32
 
MaxUnôs
, UINT32 
InôülUnôs
,

305 
ACPI_SEMAPHORE
* 
OutH™dÀ
) {

306 *
OutH™dÀ
 = 
k√w
<
Sem≠h‹e
>(
InôülUnôs
);

307  
AE_OK
;

308 
	}
}

310 
ACPI_STATUS
 
	$A˝iOsDñëeSem≠h‹e
(
ACPI_SEMAPHORE
 
H™dÀ
) {

311 
	`kdñëe
(
ªöãΩªt_ˇ°
<
Sem≠h‹e
*>(
H™dÀ
));

312  
AE_OK
;

313 
	}
}

315 
ACPI_STATUS
 
	$A˝iOsWaôSem≠h‹e
(
ACPI_SEMAPHORE
 
H™dÀ
, 
UINT32
 
Unôs
,

316 
UINT16
 
Timeout
) {

318 
	`KASSERT1
(
Timeout
 == 0xFFFF || Timeout == 0, Timeout);

319 
UINT32
 
x
 = 0; x < 
Unôs
; x +1Ë
ªöãΩªt_ˇ°
<
Sem≠h‹e
*>(
H™dÀ
)->
	`P
();

320  
AE_OK
;

321 
	}
}

323 
ACPI_STATUS
 
	$A˝iOsSig«lSem≠h‹e
(
ACPI_SEMAPHORE
 
H™dÀ
, 
UINT32
 
Unôs
) {

324 
UINT32
 
x
 = 0; x < 
Unôs
; x +1Ë
ªöãΩªt_ˇ°
<
Sem≠h‹e
*>(
H™dÀ
)->
	`V
();

325  
AE_OK
;

326 
	}
}

329 
ACPI_STATUS
 
	$A˝iOsCª©eMuãx
(
ACPI_MUTEX
* 
OutH™dÀ
) {

330 
	`KABORT1
(
Ál£
,"");

331  
AE_ERROR
;

332 
	}
}

334 
	$A˝iOsDñëeMuãx
(
ACPI_MUTEX
 
H™dÀ
Ë{ 
	`KABORT1
(
Ál£
,""); 
	}
}

336 
ACPI_STATUS
 
	$A˝iOsAcquúeMuãx
(
ACPI_MUTEX
 
H™dÀ
, 
UINT16
 
Timeout
) {

337 
	`KABORT1
(
Ál£
,"");

338  
AE_ERROR
;

339 
	}
}

341 
	$A˝iOsRñó£Muãx
(
ACPI_MUTEX
 
H™dÀ
Ë{ 
	`KABORT1
(
Ál£
,""); 
	}
}

344 * 
	$A˝iOsAŒoˇã
(
ACPI_SIZE
 
Size
) {

345 
DBG
::
	`oué
(DBG::
MemA˝i
, "a˝òÆloc: ", 
Size
);

346 * 
±r
 = 
	`mÆloc
(
Size
);

347 
	`mem£t
(
±r
, 0, 
Size
);

348 
Æloˇti⁄s
.
	`ö£π
–
	`vaddr
(
±r
) );

349  
±r
;

350 
	}
}

352 
	$A˝iOsFªe
(* 
Mem‹y
) {

353 
DBG
::
	`oué
(DBG::
MemA˝i
, "a˝ò‰ì: ", 
Mem‹y
);

354 
Æloˇti⁄s
.
	`îa£
–
	`vaddr
(
Mem‹y
) );

355 
	`‰ì
(
Mem‹y
);

356 
	}
}

358 * 
	$A˝iOsM≠Mem‹y
(
ACPI_PHYSICAL_ADDRESS
 
Whîe
, 
ACPI_SIZE
 
Lígth
) {

359 
DBG
::
	`oué
(DBG::
MemA˝i
, "a˝òm≠: ", 
	`FmtHex
(
Whîe
), '/', FmtHex(
Lígth
));

360 
∑ddr
 
pma
 = 
	`Æign_down
(
	`∑ddr
(
Whîe
), 
∑gesize
<1>());

361 
size_t
 
size
 = 
	`Æign_up
(
	`∑ddr
(
Whîe
Ë+ 
Lígth
, 
∑gesize
<1>()Ë- 
pma
;

362 
vaddr
 
vma
 = 
kî√lS∑˚
.
km≠
<1,
Ál£
>–0, 
size
, 
pma
 );

363 
m≠pögs
.
	`ö£π
–{ 
vma
,
size
} );

364  (*)(
vma
 + 
Whîe
 - 
pma
);

365 
	}
}

367 
	$A˝iOsUnm≠Mem‹y
(* 
LogiˇlAddªss
, 
ACPI_SIZE
 
Size
) {

368 
DBG
::
	`oué
(DBG::
MemA˝i
, "a˝òunm≠: ", 
	`FmtHex
(
LogiˇlAddªss
), '/', FmtHex(
Size
));

369 
vaddr
 
vma
 = 
	`Æign_down
(
	`vaddr
(
LogiˇlAddªss
), 
∑gesize
<1>());

370 
size_t
 
size
 = 
	`Æign_up
(
Size
 + 
	`vaddr
(
LogiˇlAddªss
Ë- 
vma
, 
∑gesize
<1>());

371 
kî√lS∑˚
.
unm≠
<1,
Ál£
>–
vma
, 
size
 );

372 
m≠pögs
.
	`îa£
–{
vma
, 
size
} );

373 
	}
}

375 
ACPI_STATUS
 
	$A˝iOsGëPhysiˇlAddªss
(* 
LogiˇlAddªss
,

376 
ACPI_PHYSICAL_ADDRESS
* 
PhysiˇlAddªss
) {

377 *
PhysiˇlAddªss
 = 
Pagög
::
	`vt›
(
	`vaddr
(
LogiˇlAddªss
));

378  
AE_OK
;

379 
	}
}

383 
ACPI_STATUS
 
	$A˝iOsCª©eCache
(* 
CacheName
, 
UINT16
 
Obje˘Size
,

384 
UINT16
 
MaxDïth
, 
ACPI_CACHE_T
** 
Rëu∫Cache
) {

385 *
Rëu∫Cache
 = (
ACPI_CACHE_T
*)(
uöçå_t
)
Obje˘Size
;

386  
AE_OK
;

387 
	}
}

389 
ACPI_STATUS
 
	$A˝iOsDñëeCache
(
ACPI_CACHE_T
* 
Cache
) {

390  
AE_OK
;

391 
	}
}

393 
ACPI_STATUS
 
	$A˝iOsPurgeCache
(
ACPI_CACHE_T
* 
Cache
) {

394  
AE_OK
;

395 
	}
}

397 * 
	$A˝iOsAcquúeObje˘
(
ACPI_CACHE_T
* 
Cache
) {

398 * 
addr
 = (*)
Mem‹yM™agî
::
	`Æloc
((
UINT16
)(
uöçå_t
)
Cache
);

399 
	`mem£t
((*)
addr
, 0, (
UINT16
)(
uöçå_t
)
Cache
);

400  (*)
addr
;

401 
	}
}

403 
ACPI_STATUS
 
	$A˝iOsRñó£Obje˘
(
ACPI_CACHE_T
* 
Cache
, * 
Obje˘
) {

404 
Mem‹yM™agî
::
	`ªÀa£
((
vaddr
)
Obje˘
, (
UINT16
)(
uöçå_t
)
Cache
);

405  
AE_OK
;

406 
	}
}

408 
ACPI_STATUS
 
	$A˝iOsIn°ÆlI¡îru±H™dÀr
(
UINT32
 
I¡îru±Numbî
,

409 
ACPI_OSD_HANDLER
 
Sîvi˚Routöe
, * 
C⁄ãxt
) {

411 
DBG
::
	`oué
(DBG::
A˝i
, "ACPI in°Æ»öå h™dÀr: ", 
I¡îru±Numbî
);

412 
Machöe
::
	`ªgi°îIrqAsync
(
I¡îru±Numbî
, (
funcvoid1_t
)
Sîvi˚Routöe
, 
C⁄ãxt
);

413  
AE_OK
;

414 
	}
}

416 
ACPI_STATUS
 
	$A˝iOsRemoveI¡îru±H™dÀr
(
UINT32
 
I¡îru±Numbî
,

417 
ACPI_OSD_HANDLER
 
Sîvi˚Routöe
) {

419 
DBG
::
	`oué
(DBG::
A˝i
, "ACPIÑemovêöå h™dÀr: ", 
I¡îru±Numbî
);

420 
Machöe
::
	`dîegi°îIrqAsync
(
I¡îru±Numbî
, (
funcvoid1_t
)
Sîvi˚Routöe
);

421  
AE_OK
;

422 
	}
}

424 
ACPI_THREAD_ID
 
	$A˝iOsGëThªadId
() {

425  (
ACPI_THREAD_ID
)
LoˇlPro˚ss‹
::
	`gëCuºThªad
();

426 
	}
}

428 
ACPI_STATUS
 
	$A˝iOsExecuã
(
ACPI_EXECUTE_TYPE
 
Ty≥
,

429 
ACPI_OSD_EXEC_CALLBACK
 
Fun˘i⁄
, * 
C⁄ãxt
) {

431 
	`KABORT0
();

432  
AE_ERROR
;

433 
	}
}

435 
	$A˝iOsWaôEvítsCom∂ëe
(* 
C⁄ãxt
Ë{ 
	`KABORT0
(); 
	}
}

437 
	$A˝iOsSÀï
(
UINT64
 
Mûli£c⁄ds
Ë{ 
Timeout
::
	`¶ìp
(Mûli£c⁄ds); 
	}
}

439 
	$A˝iOsSèŒ
(
UINT32
 
Mi¸o£c⁄ds
Ë{ 
Clock
::
	`waô
(Mi¸o£c⁄ds/1000); 
	}
}

441 
	$A˝iOsWaôEvítsCom∂ëe
(Ë{ 
	`KABORT0
(); 
	}
}

443 
ACPI_STATUS
 
	$A˝iOsRódP‹t
(
ACPI_IO_ADDRESS
 
Addªss
, 
UINT32
* 
VÆue
, UINT32 
Width
) {

444 
DBG
::
	`oué
(DBG::
A˝i
, "A˝iOsRódP‹t: ", 
	`FmtHex
(
Addªss
), '/', 
Width
);

445 
Width
) {

446 8: *
VÆue
 = 
CPU
::
	`ö8
 (
Addªss
); ;

447 16: *
VÆue
 = 
CPU
::
	`ö16
(
Addªss
); ;

448 32: *
VÆue
 = 
CPU
::
	`ö32
(
Addªss
); ;

449 :  
AE_ERROR
;

451  
AE_OK
;

452 
	}
}

454 
ACPI_STATUS
 
	$A˝iOsWrôeP‹t
(
ACPI_IO_ADDRESS
 
Addªss
, 
UINT32
 
VÆue
, UINT32 
Width
) {

455 
DBG
::
	`oué
(DBG::
A˝i
, "A˝iOsWrôeP‹t: ", 
	`FmtHex
(
Addªss
), '/', 
Width
, ':', FmtHex(
VÆue
));

456 
Width
) {

457 8: 
CPU
::
	`out8
 (
Addªss
,
VÆue
); ;

458 16: 
CPU
::
	`out16
(
Addªss
,
VÆue
); ;

459 32: 
CPU
::
	`out32
(
Addªss
,
VÆue
); ;

460 :  
AE_ERROR
;

462  
AE_OK
;

463 
	}
}

465 
ACPI_STATUS
 
	$A˝iOsRódMem‹y
(
ACPI_PHYSICAL_ADDRESS
 
Addªss
, 
UINT64
* 
VÆue
, 
UINT32
 
Width
) {

466 
	`KABORT0
();

467  
AE_ERROR
;

468 
	}
}

470 
ACPI_STATUS
 
	$A˝iOsWrôeMem‹y
(
ACPI_PHYSICAL_ADDRESS
 
Addªss
, 
UINT64
 
VÆue
, 
UINT32
 
Width
) {

471 
	`KABORT0
();

472  
AE_ERROR
;

473 
	}
}

475 
ACPI_STATUS
 
	$A˝iOsRódPciC⁄figuøti⁄
–
ACPI_PCI_ID
* 
PciId
, 
UINT32
 
Reg
, 
UINT64
* 
VÆue
, UINT32 
Width
) {

476 
Width
) {

477 8: *
VÆue
 = 
PCI
::
ªadC⁄fig
< 8>(
PciId
->
Bus
, PciId->
Devi˚
, PciId->
Fun˘i⁄
, 
Reg
); ;

478 16: *
VÆue
 = 
PCI
::
ªadC⁄fig
<16>(
PciId
->
Bus
, PciId->
Devi˚
, PciId->
Fun˘i⁄
, 
Reg
); ;

479 32: *
VÆue
 = 
PCI
::
ªadC⁄fig
<32>(
PciId
->
Bus
, PciId->
Devi˚
, PciId->
Fun˘i⁄
, 
Reg
); ;

480 : 
	`KABORT1
(
Width
);

482  
AE_OK
;

483 
	}
}

485 
ACPI_STATUS
 
	$A˝iOsWrôePciC⁄figuøti⁄
(
ACPI_PCI_ID
* 
PciId
, 
UINT32
 
Reg
, 
UINT64
 
VÆue
, UINT32 
Width
) {

486 
Width
) {

487 8: 
PCI
::
wrôeC⁄fig
< 8>(
PciId
->
Bus
, PciId->
Devi˚
, PciId->
Fun˘i⁄
, 
Reg
, 
VÆue
); ;

488 16: 
PCI
::
wrôeC⁄fig
<16>(
PciId
->
Bus
, PciId->
Devi˚
, PciId->
Fun˘i⁄
, 
Reg
, 
VÆue
); ;

489 32: 
PCI
::
wrôeC⁄fig
<32>(
PciId
->
Bus
, PciId->
Devi˚
, PciId->
Fun˘i⁄
, 
Reg
, 
VÆue
); ;

490 : 
	`KABORT1
(
Width
);

492  
AE_OK
;

493 
	}
}

495 
BOOLEAN
 
	$A˝iOsRódabÀ
(* 
Poöãr
, 
ACPI_SIZE
 
Lígth
) {

496 
	`KABORT0
();

497  
Ál£
;

498 
	}
}

500 
BOOLEAN
 
	$A˝iOsWrôabÀ
(* 
Poöãr
, 
ACPI_SIZE
 
Lígth
) {

501 
	`KABORT0
();

502  
Ál£
;

503 
	}
}

505 
UINT64
 
	$A˝iOsGëTimî
() {

506 
	`KABORT0
();

508 
	}
}

510 
ACPI_STATUS
 
	$A˝iOsSig«l
(
UINT32
 
Fun˘i⁄
, * 
Info
) {

511 
	`KABORT0
();

512  
AE_ERROR
;

513 
	}
}

515 
ACPI_INTERNAL_VAR_XFACE
 
	$A˝iOsPrötf
(c⁄° * 
F‹m©
, ...) {

516 
va_li°
 
¨gs
;

517 
	`va_°¨t
(
¨gs
, 
F‹m©
);

518 
	`A˝iOsV¥ötf
(
F‹m©
, 
¨gs
);

519 
	`va_íd
(
¨gs
);

520 
	}
}

522 
	$A˝iOsV¥ötf
(c⁄° * 
fmt
, 
va_li°
 
¨gs
) {

523 
	`Exã∫DebugPrötf
(
DBG
::
A˝i
, 
fmt
, 
¨gs
);

524 
	}
}

526 
	$A˝iOsRedúe˘Ouçut
(* 
De°ö©i⁄
Ë{ 
	`KABORT0
(); 
	}
}

528 
ACPI_STATUS
 
	$A˝iOsGëLöe
(* 
Buf„r
, 
UINT32
 
Buf„rLígth
, UINT32* 
ByãsRód
) {

529 
	`KABORT0
();

530  
AE_ERROR
;

531 
	}
}

533 * 
	$A˝iOsO≥nDúe˘‹y
(* 
P©h«me
, * 
WûdˇrdS≥c
, 
Reque°edFûeTy≥
) {

534 
	`KABORT0
();

535  
nuŒ±r
;

536 
	}
}

538 * 
	$A˝iOsGëNextFûíame
(* 
DúH™dÀ
) {

539 
	`KABORT0
();

540  
nuŒ±r
;

541 
	}
}

543 
	$A˝iOsClo£Dúe˘‹y
(* 
DúH™dÀ
Ë{ 
	`KABORT0
(); 
	}
}

	@src/machine/APIC.cc

17 
	~"machöe/APIC.h
"

18 
	~"machöe/CPU.h
"

20 
	gPIC
::
	$dißbÀ
() {

21 
CPU
::
	`out8
( 0x20, 0x11 );

22 
CPU
::
	`out8
( 0xa0, 0x11 );

24 
CPU
::
	`out8
( 0x21, 0x20 );

25 
CPU
::
	`out8
( 0xa1, 0x28 );

26 
CPU
::
	`out8
( 0x21, 0x04 );

27 
CPU
::
	`out8
( 0xa1, 0x02 );

28 
CPU
::
	`out8
( 0x21, 0x01 );

29 
CPU
::
	`out8
( 0xa1, 0x01 );

31 
CPU
::
	`out8
( 0x21, 0xff );

32 
CPU
::
	`out8
( 0xa1, 0xff );

33 
	}
}

35 
uöt8_t
 
	gIOAPIC
::
	$gëVîsi⁄
() {

36 
uöt8_t
 
ªsu…
 = 
Vîsi⁄
.
	`gë
(
	`ªad
(
IOAPICVER
));

37  
ªsu…
;

38 
	}
}

40 
uöt8_t
 
	gIOAPIC
::
	$gëRedúe˘s
() {

41 
uöt8_t
 
ªsu…
 = 
MaxRedúe˘i⁄E¡ry
.
	`gë
(
	`ªad
(
IOAPICVER
));

42  
ªsu…
;

43 
	}
}

45 
	gIOAPIC
::
	$maskIRQ
(
uöt8_t
 
úq
) {

46 
uöt64_t
 
vÆ
 = 
	`Mask
();

47 
	`wrôe
–
IOREDTBL
 + 
úq
 * 2, 
vÆ
 & 0xFFFFFFFF );

48 
	`wrôe
–
IOREDTBL
 + 
úq
 * 2 + 1, 
vÆ
 >> 32 );

49 
	}
}

51 
	gIOAPIC
::
	$m≠IRQ
(
uöt8_t
 
úq
, uöt8_à
öå
, 
boﬁ
 
low
, boﬁ 
Àvñ
) {

52 
uöt64_t
 
vÆ
 = 
Ve˘‹
.
	`put
(
öå
)

53 | 
DñivîyMode
.
	`put
(
APIC
::
Lowe°Pri‹ôy
)

54 | 
	`De°ö©i⁄Mode
()

55 | 
Pﬁ¨ôy
.
	`put
(
low
)

56 | 
TriggîModeLevñ
.
	`put
(
Àvñ
)

57 | 
De°ö©i⁄Së
.
	`put
(0x01);

58 
	`wrôe
–
IOREDTBL
 + 
úq
 * 2, 
vÆ
 & 0xFFFFFFFF );

59 
	`wrôe
–
IOREDTBL
 + 
úq
 * 2 + 1, 
vÆ
 >> 32 );

60 
	}
}

	@src/machine/APIC.h

17 #i‚de‡
_APIC_h_


18 
	#_APIC_h_
 1

	)

20 
	~"gíîic/basics.h
"

21 
	~"machöe/Mem‹y.h
"

23 
	sPIC
 {

24 
	eIRQs
 {

26 
	mPIT
 = 0,

27 
	mKeybﬂrd
 = 1,

28 
	mCasˇde
 = 2,

29 
	mSîül1
 = 3,

30 
	mSîül0
 = 4,

31 
	mP¨ÆÀl2
 = 5,

32 
	mFl›py
 = 6,

33 
	mP¨ÆÀl1
 = 7,

34 
	mRTC
 = 8,

35 
	mSCI
 = 9,

36 
	mMou£
 = 12,

37 
	mFPU
 = 13,

38 
	mATA1
 = 14,

39 
	mATA2
 = 15,

40 
	mMax
 = 16

42 
dißbÀ
();

47 ˛as†
	cAPIC
 : 
public
 
NoObje˘
 {

48 
‰õnd
 
˛ass
 
IOAPIC
;

50 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x000
;

51 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x010
;

52 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
ID
;

53 c⁄° 
BôSåög
<
uöt32_t
,24,8> 
APIC_ID
;

55 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Vîsi⁄
;

56 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x040
;

57 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x050
;

58 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x060
;

59 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x070
;

60 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TaskPri‹ôy
;

61 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Arbôøti⁄Pri‹ôy
;

62 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Pro˚ss‹Pri‹ôy
;

63 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
EOI
;

64 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
RemŸeRód
;

65 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
LogiˇlDe°
;

66 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
De°F‹m©
;

67 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
SpuriosI¡îru±Ve˘‹
;

68 c⁄° 
BôSåög
<
uöt32_t
, 0,8> 
SpuriousVe˘‹
;

69 c⁄° 
BôSåög
<
uöt32_t
, 8,1> 
So·w¨eE«bÀ
;

70 c⁄° 
BôSåög
<
uöt32_t
, 9,1> 
FocusProcCheck
;

71 c⁄° 
BôSåög
<
uöt32_t
,12,1> 
Brﬂdˇ°Suµ
;

73 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InSîvi˚0
;

74 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InSîvi˚1
;

75 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InSîvi˚2
;

76 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InSîvi˚3
;

77 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InSîvi˚4
;

78 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InSîvi˚5
;

79 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InSîvi˚6
;

80 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InSîvi˚7
;

81 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TriggîMode0
;

82 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TriggîMode1
;

83 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TriggîMode2
;

84 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TriggîMode3
;

85 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TriggîMode4
;

86 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TriggîMode5
;

87 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TriggîMode6
;

88 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
TriggîMode7
;

89 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
I¡îru±Reque°0
;

90 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
I¡îru±Reque°1
;

91 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
I¡îru±Reque°2
;

92 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
I¡îru±Reque°3
;

93 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
I¡îru±Reque°4
;

94 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
I¡îru±Reque°5
;

95 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
I¡îru±Reque°6
;

96 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
I¡îru±Reque°7
;

97 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Eº‹Sètus
;

98 c⁄° 
BôSåög
<
uöt32_t
, 0,1> 
SídChecksum
;

99 c⁄° 
BôSåög
<
uöt32_t
, 1,1> 
Re˚iveChecksum
;

100 c⁄° 
BôSåög
<
uöt32_t
, 2,1> 
SídAc˚±
;

101 c⁄° 
BôSåög
<
uöt32_t
, 3,1> 
Re˚iveAc˚±
;

102 c⁄° 
BôSåög
<
uöt32_t
, 4,1> 
Redúe˘abÀIPI
;

103 c⁄° 
BôSåög
<
uöt32_t
, 5,1> 
SídIŒegÆVe˘‹
;

104 c⁄° 
BôSåög
<
uöt32_t
, 6,1> 
Re˚iveIŒegÆVe˘‹
;

105 c⁄° 
BôSåög
<
uöt32_t
, 7,1> 
IŒegÆRegi°îAddªss
;

107 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x290
;

108 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x2a0
;

109 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x2b0
;

110 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x2c0
;

111 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x2d0
;

112 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x2e0
;

113 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
LVT_CMCI
;

114 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
ICR_LOW
;

115 c⁄° 
BôSåög
<
uöt32_t
, 0,8> 
Ve˘‹
;

116 c⁄° 
BôSåög
<
uöt32_t
, 8,3> 
DñivîyMode
;

117 c⁄° 
BôSåög
<
uöt32_t
,11,1> 
De°ö©i⁄Mode
;

118 c⁄° 
BôSåög
<
uöt32_t
,12,1> 
DñivîyPídög
;

119 c⁄° 
BôSåög
<
uöt32_t
,14,1> 
LevñUp
;

120 c⁄° 
BôSåög
<
uöt32_t
,15,1> 
TriggîModeLevñ
;

121 c⁄° 
BôSåög
<
uöt32_t
,18,2> 
De°ö©i⁄Sh‹th™d
;

123 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
ICR_HIGH
;

124 c⁄° 
BôSåög
<
uöt32_t
,24,8> 
De°Fõld
;

126 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
LVT_Timî
;

127 c⁄° 
BôSåög
<
uöt32_t
,16,1> 
MaskTimî
;

128 c⁄° 
BôSåög
<
uöt32_t
,17,2> 
TimîMode
;

130 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
LVT_ThîmÆSís‹
;

131 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
LVT_PMCs
;

132 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
LVT_LINT0
;

133 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
LVT_LINT1
;

134 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
LVT_Eº‹
;

135 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
InôülCou¡
;

136 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
CuºítCou¡
;

137 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x3a0
;

138 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x3b0
;

139 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x3c0
;

140 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x3d0
;

141 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
DivideC⁄figuøti⁄
;

142 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Re£rved0x3f0
;

144 
	eDñivîyModes
 {

145 
Fixed
 = 0b000,

146 
Lowe°Pri‹ôy
 = 0b001,

147 
SMI
 = 0b010,

148 
NMI
 = 0b100,

149 
Inô
 = 0b101,

150 
Sèπup
 = 0b110

153 
	eDe°ö©i⁄Sh‹th™ds
 {

154 
N⁄e
 = 0b00,

155 
Sñf
 = 0b01,

156 
AŒIn˛Sñf
 = 0b10,

157 
AŒEx˛Sñf
 = 0b11

158 
	}
};

160 
	eTimîModes
 {

161 
	gO√ShŸ
 = 0b00,

162 
	gPîiodic
 = 0b01,

163 
	gDódlöe
 = 0b10

166 
	$ùi
(
uöt32_t
 
high
, uöt32_à
low
, 
boﬁ
 
brﬂdˇ°
) {

167 i‡(
brﬂdˇ°
Ë
low
 |
De°ö©i⁄Sh‹th™d
.
	`put
(
AŒEx˛Sñf
);

168 
ICR_HIGH
 = 
high
;

169 
ICR_LOW
 = 
low
;

170 i‡(!
brﬂdˇ°
Ë
ICR_LOW
 & 
	`DñivîyPídög
());

171 
mw‹d
 
îr
 = 
Eº‹Sètus
;

172 
	`KASSERT1
(
îr
 =0, 
	`FmtHex
(err));

173 
	}
}

175 
	gpublic
:

176 
uöt8_t
 
	$gëID
() {

177  
APIC_ID
.
	`gë
(
ID
);

178 
	}
}

179 
	$£tTaskPri‹ôy
(
uöt32_t
 
p
) {

180 
TaskPri‹ôy
 = 
p
;

181 
	}
}

182 
	$£ndEOI
() {

183 
EOI
 = 0;

184 
	}
}

185 
	$íabÀ
() {

186 
SpuriosI¡îru±Ve˘‹
 |
	`So·w¨eE«bÀ
();

187 
	}
}

188 
	$íabÀ
(
uöt8_t
 
sv
) {

189 
SpuriosI¡îru±Ve˘‹
 |
	`So·w¨eE«bÀ
(Ë| 
SpuriousVe˘‹
.
	`put
(
sv
);

190 
	}
}

191 
	$dißbÀ
() {

192 
SpuriosI¡îru±Ve˘‹
 &~
	`So·w¨eE«bÀ
();

193 
	}
}

194 
	$£tLogiˇlDe°
(
uöt8_t
 
group
) {

195 
LogiˇlDe°
 = 
APIC_ID
.
	`put
(
group
);

196 
	}
}

197 
	$£tFœtMode
() {

198 
De°F‹m©
 = 0xFFFFFFFF;

199 
	}
}

200 
	$maskTimî
() {

201 
LVT_Timî
 |
	`MaskTimî
();

202 
	}
}

203 
	$£ndInôIPI
(
uöt8_t
 
de°
, 
boﬁ
 
brﬂdˇ°
 = 
Ál£
) {

204 
	`ùi
(
De°Fõld
.
	`put
(
de°
), 
DñivîyMode
.put(
Inô
), 
brﬂdˇ°
);

205 
	}
}

206 
	$£ndInôDós£πIPI
(
uöt8_t
 
de°
, 
boﬁ
 
brﬂdˇ°
 = 
Ál£
) {

207 
	`ùi
(
De°Fõld
.
	`put
(
de°
), 
DñivîyMode
.put(
Inô
Ë| 
	`TriggîModeLevñ
(), 
brﬂdˇ°
);

208 
	}
}

209 
	$£ndSèπupIPI
(
uöt8_t
 
de°
, uöt8_à
vec
, 
boﬁ
 
brﬂdˇ°
 = 
Ál£
) {

210 
	`ùi
(
De°Fõld
.
	`put
(
de°
), 
DñivîyMode
.put(
Sèπup
Ë| 
Ve˘‹
.put(
vec
), 
brﬂdˇ°
);

211 
	}
}

212 
	$£ndIPI
(
uöt8_t
 
de°
, uöt8_à
vec
, 
boﬁ
 
brﬂdˇ°
 = 
Ál£
) {

213 
	`ùi
(
De°Fõld
.
	`put
(
de°
), 
DñivîyMode
.put(
Fixed
Ë| 
Ve˘‹
.put(
vec
), 
brﬂdˇ°
);

214 
	}
}

215 c⁄° 
uöt8_t
 
	gWakeIPI
 = 0xe0;

216 c⁄° 
uöt8_t
 
	gPªem±IPI
 = 0xed;

217 c⁄° 
uöt8_t
 
	gTe°IPI
 = 0xee;

218 c⁄° 
uöt8_t
 
	gSt›IPI
 = 0xef;

219 } 
	g__∑cked
;

223 ˛as†
	cIOAPIC
 : 
public
 
NoObje˘
 {

224 
‰õnd
 
˛ass
 
Machöe
;

226 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Regi°îSñe˘
;

227 
	$__Æig√d
(0x10Ëvﬁ©ûê
uöt32_t
 
Wödow
;

229 
Regi°îs
 : 
uöt8_t
 {

230 
IOAPICID
 = 0x00,

231 
IOAPICVER
 = 0x01,

232 
IOAPICARB
 = 0x02,

233 
IOREDTBL
 = 0x10

236 
uöt32_t
 
	$ªad
–
uöt8_t
 
ªg
 ) {

237 
Regi°îSñe˘
 = 
ªg
;

238  
Wödow
;

239 
	}
}

240 
	$wrôe
–
uöt8_t
 
ªg
, 
uöt32_t
 
vÆ
 ) {

241 
Regi°îSñe˘
 = 
ªg
;

242 
Wödow
 = 
vÆ
;

243 
	}
}

245 c⁄° 
	gBôSåög
<
	guöt32_t
, 0, 8> 
	gVîsi⁄
;

246 c⁄° 
	gBôSåög
<
	guöt32_t
,16, 8> 
	gMaxRedúe˘i⁄E¡ry
;

247 c⁄° 
	gBôSåög
<
	guöt32_t
,24, 4> 
	gArbôøti⁄ID
;

248 c⁄° 
	gBôSåög
<
	guöt32_t
,24, 4> 
	gID
;

250 c⁄° 
	gBôSåög
<
	guöt64_t
, 0, 8> 
	gVe˘‹
;

251 c⁄° 
	gBôSåög
<
	guöt64_t
, 8, 3> 
	gDñivîyMode
;

252 c⁄° 
	gBôSåög
<
	guöt64_t
,11, 1> 
	gDe°ö©i⁄Mode
;

253 c⁄° 
	gBôSåög
<
	guöt64_t
,12, 1> 
	gDñivîyPídög
;

254 c⁄° 
	gBôSåög
<
	guöt64_t
,13, 1> 
	gPﬁ¨ôy
;

255 c⁄° 
	gBôSåög
<
	guöt64_t
,14, 1> 
	gRemŸeIRR
;

256 c⁄° 
	gBôSåög
<
	guöt64_t
,15, 1> 
	gTriggîModeLevñ
;

257 c⁄° 
	gBôSåög
<
	guöt64_t
,16, 1> 
	gMask
;

258 c⁄° 
	gBôSåög
<
	guöt64_t
,56, 4> 
	gDe°ö©i⁄ID
;

259 c⁄° 
	gBôSåög
<
	guöt64_t
,56, 8> 
	gDe°ö©i⁄Së
;

261 
uöt8_t
 
gëVîsi⁄
();

262 
uöt8_t
 
gëRedúe˘s
();

263 
maskIRQ
(
uöt8_t
 
úq
);

265 
m≠IRQ
(
uöt8_t
 
úq
, uöt8_à
öå
, 
boﬁ
 
low
 = 
Ál£
, boﬁ 
Àvñ
 = false);

266 } 
	g__∑cked
;

268 
APIC
* 
	$M≠≥dAPIC
(Ë{  (
APIC
*)
≠icAddr
; 
	}
}

269 
IOAPIC
* 
	$M≠≥dIOAPIC
(Ë{  (
IOAPIC
*)
ioApicAddr
; 
	}
}

	@src/machine/CPU.cc

17 
	~"machöe/CPU.h
"

19 
	gCPUID
::
	$gëCacheInfo
() {

23 
	}
}

	@src/machine/CPU.h

17 #i‚de‡
_CPU_h_


18 
	#_CPU_h_
 1

	)

20 
	~"gíîic/bôm™ù.h
"

22 
«me•a˚
 
	gMSR
 {

23 
	gRegi°î
 : 
uöt32_t
 {

24 
APIC_BASE
 = 0x0000001B,

26 
	gPMC0
 = 0x000000C1,

28 
	gSYSENTER_CS
 = 0x00000174,

29 
	gSYSENTER_ESP
 = 0x00000175,

30 
	gSYSENTER_EIP
 = 0x00000176,

32 
	gPERFEVTSEL0
 = 0x00000186,

34 
	gEFER
 = 0xC0000080,

36 
	gTSC_DEADLINE
 = 0x000006E0,

38 
	gSYSCALL_STAR
 = 0xC0000081,

39 
	gSYSCALL_LSTAR
 = 0xC0000082,

40 
	gSYSCALL_CSTAR
 = 0xC0000083,

41 
	gSYSCALL_SFMASK
 = 0xC0000084,

43 
	gFS_BASE
 = 0xC0000100,

44 
	gGS_BASE
 = 0xC0000101,

45 
	gKERNEL_GS_BASE
 = 0xC0000102

48 
ölöe
 
ªad
–
Regi°î
 
m§
, 
uöt32_t
& 
lo
, uöt32_t& 
hi
 ) {

49 
asm
 vﬁ©ûe("rdm§" : "˜"(
lo
), "=d"(
	ghi
Ë: "c"(
m§
));

51 
ölöe
 
uöt64_t
 
ªad
–
Regi°î
 
m§
 ) {

52 
uöt32_t
 
	glo
, 
	ghi
;

53 
ªad
(
m§
, 
lo
, 
hi
);

54  (
uöt64_t
(
hi
Ë<< 32Ë| 
	glo
;

57 
ölöe
 
ªadpmc
–
Regi°î
 
m§
, 
uöt32_t
& 
lo
, uöt32_t& 
hi
 ) {

58 
asm
 vﬁ©ûe("rdpmc" : "˜"(
lo
), "=d"(
	ghi
Ë: "c"(
m§
));

60 
ölöe
 
uöt64_t
 
ªadpmc
–
Regi°î
 
m§
 ) {

61 
uöt32_t
 
	glo
, 
	ghi
;

62 
ªadpmc
(
m§
, 
lo
, 
hi
);

63  (
uöt64_t
(
hi
Ë<< 32Ë| 
	glo
;

66 
ölöe
 
wrôe
–
Regi°î
 
m§
, 
uöt32_t
 
lo
, uöt32_à
hi
 ) {

67 
asm
 vﬁ©ûe("wrm§" :: "a"(
lo
), "d"(
	ghi
), "c"(
	gm§
));

69 
ölöe
 
wrôe
–
Regi°î
 
m§
, 
uöt64_t
 
vÆ
 ) {

70 
wrôe
(
m§
, 
vÆ
 & 0xFFFFFFFF, val >> 32);

73 
ölöe
 
boﬁ
 
isBSP
() {

74  
ªad
(
APIC_BASE
Ë& 
	gbômask
<
	gmw‹d
>(8,1);

76 
ölöe
 
íabÀAPIC
() {

77 
wrôe
(
APIC_BASE
, 
ªad
(APIC_BASEË| 
bômask
<
mw‹d
>(11,1));

79 
ölöe
 
íabÀNX
() {

80 
wrôe
(
EFER
, 
ªad
(EFERË| 
bômask
<
mw‹d
>(11,1));

82 
ölöe
 
íabÀSYSCALL
() {

83 
wrôe
(
EFER
, 
ªad
(EFERË| 
bômask
<
mw‹d
>(0,1));

86 
ölöe
 
°¨tPMC
(
uöt32_t
 
ödex
, 
uöt64_t
 
¨g
) {

87 
wrôe
–
Regi°î
(
PMC0
 + 
ödex
), 0 );

88 
wrôe
–
Regi°î
(
PERFEVTSEL0
 + 
ödex
), 
¨g
 );

90 
ölöe
 
uöt64_t
 
ªadPMC
(
uöt32_t
 
ödex
) {

91  
ªad
–
Regi°î
(
PMC0
 + 
ödex
) );

96 
«me•a˚
 
	gCPU
 {

97 
ölöe
 
out8
–
uöt16_t
 
p‹t
, 
uöt8_t
 
vÆ
 ) {

98 
asm
 vﬁ©ûe("outb %0, %1" :: "a"(
vÆ
), "Nd"(
	gp‹t
));

101 
ölöe
 
uöt8_t
 
ö8
–
uöt16_t
 
p‹t
 ) {

102 
uöt8_t
 
	gªt
;

103 
asm
 vﬁ©ûe("öb %1, %0" : "˜"(
ªt
Ë: "Nd"(
p‹t
));

104  
	gªt
;

107 
ölöe
 
out16
–
uöt16_t
 
p‹t
, uöt16_à
vÆ
 ) {

108 
asm
 vﬁ©ûe("outw %0, %1" :: "a"(
vÆ
), "Nd"(
	gp‹t
));

111 
ölöe
 
uöt16_t
 
ö16
–uöt16_à
p‹t
 ) {

112 
uöt16_t
 
	gªt
;

113 
asm
 vﬁ©ûe("öw %1, %0" : "˜"(
ªt
Ë: "Nd"(
p‹t
));

114  
	gªt
;

117 
ölöe
 
out32
–
uöt16_t
 
p‹t
, 
uöt32_t
 
vÆ
 ) {

118 
asm
 vﬁ©ûe("oué %0, %1" :: "a"(
vÆ
), "Nd"(
	gp‹t
));

121 
ölöe
 
uöt32_t
 
ö32
–
uöt16_t
 
p‹t
 ) {

122 
uöt32_t
 
	gªt
;

123 
asm
 vﬁ©ûe("ö»%1, %0" : "˜"(
ªt
Ë: "Nd"(
p‹t
));

124  
	gªt
;

127 
ölöe
 
Pau£
() {

128 
asm
 volatile("pause");

131 
ölöe
 
HÆt
() {

132 
asm
 volatile("hlt" ::: "memory");

135 
ölöe
 
Sw≠GS
() {

136 
asm
 volatile("swapgs");

139 
ölöe
 
InvTLB
(
mw‹d
 
vÆ
) {

143 
asm
 vﬁ©ûe("övÕg (%0)" :: "r"(
vÆ
) : "memory");

146 
ölöe
 
mw‹d
 
ªadTSC
() {

147 
mw‹d
 
	ga
,
	gd
; 
asm
 vﬁ©ûe("rdtsc" : "˜"(
a
), "=d"(d));  (d<<32)|a;

150 
ölöe
 
mw‹d
 
ªadCR0
() {

151 
mw‹d
 
	gvÆ
; 
asm
 vﬁ©ûe("mov %%¸0, %0" : "Ù"(
vÆ
) :: "cc");  val;

153 
ölöe
 
wrôeCR0
–
mw‹d
 
vÆ
 ) {

154 
asm
 vﬁ©ûe("mov %0, %%¸0" :: "r"(
vÆ
) : "memory", "cc");

156 c⁄° 
	gBôSåög
<
	gmw‹d
, 0,1> 
	gPE
;

157 c⁄° 
	gBôSåög
<
	gmw‹d
, 1,1> 
	gMP
;

158 c⁄° 
	gBôSåög
<
	gmw‹d
, 2,1> 
	gEM
;

159 c⁄° 
	gBôSåög
<
	gmw‹d
, 3,1> 
	gTS
;

160 c⁄° 
	gBôSåög
<
	gmw‹d
, 4,1> 
	gET
;

161 c⁄° 
	gBôSåög
<
	gmw‹d
, 5,1> 
	gNE
;

162 c⁄° 
	gBôSåög
<
	gmw‹d
,16,1> 
	gWP
;

163 c⁄° 
	gBôSåög
<
	gmw‹d
,18,1> 
	gAM
;

164 c⁄° 
	gBôSåög
<
	gmw‹d
,29,1> 
	gNW
;

165 c⁄° 
	gBôSåög
<
	gmw‹d
,30,1> 
	gCD
;

166 c⁄° 
	gBôSåög
<
	gmw‹d
,31,1> 
	gPG
;

168 
ölöe
 
mw‹d
 
ªadCR2
() {

169 
mw‹d
 
	gvÆ
; 
asm
 vﬁ©ûe("mov %%¸2, %0" : "Ù"(
vÆ
) :: "cc");  val;

172 
ölöe
 
mw‹d
 
ªadCR3
() {

173 
mw‹d
 
	gvÆ
; 
asm
 vﬁ©ûe("mov %%¸3, %0" : "Ù"(
vÆ
) :: "cc");  val;

175 
ölöe
 
wrôeCR3
–
mw‹d
 
vÆ
 ) {

176 
asm
 vﬁ©ûe("mov %0, %%¸3" :: "r"(
vÆ
) : "memory", "cc");

179 
ölöe
 
mw‹d
 
ªadCR4
() {

180 
mw‹d
 
	gvÆ
; 
asm
 vﬁ©ûe("mov %%¸4, %0" : "Ù"(
vÆ
) :: "cc");  val;

182 
ölöe
 
wrôeCR4
–
mw‹d
 
vÆ
 ) {

183 
asm
 vﬁ©ûe("mov %0, %%¸4" :: "r"(
vÆ
) : "memory", "cc");

185 c⁄° 
	gBôSåög
<
	gmw‹d
, 0,1> 
	gVME
;

186 c⁄° 
	gBôSåög
<
	gmw‹d
, 1,1> 
	gPVI
;

187 c⁄° 
	gBôSåög
<
	gmw‹d
, 2,1> 
	gTSD
;

188 c⁄° 
	gBôSåög
<
	gmw‹d
, 3,1> 
	gDE
;

189 c⁄° 
	gBôSåög
<
	gmw‹d
, 4,1> 
	gPSE
;

190 c⁄° 
	gBôSåög
<
	gmw‹d
, 5,1> 
	gPAE
;

191 c⁄° 
	gBôSåög
<
	gmw‹d
, 6,1> 
	gMCE
;

192 c⁄° 
	gBôSåög
<
	gmw‹d
, 7,1> 
	gPGE
;

193 c⁄° 
	gBôSåög
<
	gmw‹d
, 8,1> 
	gPCE
;

194 c⁄° 
	gBôSåög
<
	gmw‹d
, 9,1> 
	gOSFXSR
;

195 c⁄° 
	gBôSåög
<
	gmw‹d
,10,1> 
	gOSXMMEXCPT
;

196 c⁄° 
	gBôSåög
<
	gmw‹d
,13,1> 
	gVMXE
;

197 c⁄° 
	gBôSåög
<
	gmw‹d
,14,1> 
	gSMXE
;

198 c⁄° 
	gBôSåög
<
	gmw‹d
,16,1> 
	gFSGSBASE
;

199 c⁄° 
	gBôSåög
<
	gmw‹d
,17,1> 
	gPCIDE
;

200 c⁄° 
	gBôSåög
<
	gmw‹d
,18,1> 
	gOSXSAVE
;

201 c⁄° 
	gBôSåög
<
	gmw‹d
,20,1> 
	gSMEP
;

203 
ölöe
 
mw‹d
 
ªadCR8
() {

204 
mw‹d
 
	gvÆ
; 
asm
 vﬁ©ûe("mov %%¸8, %0" : "Ù"(
vÆ
) :: "cc");  val;

206 
ölöe
 
wrôeCR8
–
mw‹d
 
vÆ
 ) {

207 
asm
 vﬁ©ûe("mov %0, %%¸8" :: "r"(
vÆ
) : "cc");

209 c⁄° 
	gBôSåög
<
	gmw‹d
, 0,4> 
	gTPR
;

211 
__fölöe
 
ölöe
 
mw‹d
 
ªadRSP
() {

212 
mw‹d
 
	gvÆ
; 
asm
 vﬁ©ûe("mov %%r•, %0" : "Ù"(
vÆ
));  val;

214 
__fölöe
 
ölöe
 
mw‹d
 
ªadRBP
() {

215 
mw‹d
 
	gvÆ
; 
asm
 vﬁ©ûe("mov %%rbp, %0" : "Ù"(
vÆ
));  val;

218 
ölöe
 
mw‹d
 
ªadRFœgs
() {

219 
mw‹d
 
	gx
; 
asm
 vﬁ©ûe("pushfq\n\ç› %0" : "Ù"(
x
));  x;

221 
ölöe
 
wrôeRFœgs
–
mw‹d
 
x
 ) {

222 
asm
 vﬁ©ûe("push %0\n\ç›fq" :: "r"(
x
) : "cc");

224 
«me•a˚
 
	gRFœgs
 {

225 c⁄° 
	gBôSåög
<
	gmw‹d
, 0,1> 
	gCF
;

226 c⁄° 
	gBôSåög
<
	gmw‹d
, 2,1> 
	gPF
;

227 c⁄° 
	gBôSåög
<
	gmw‹d
, 4,1> 
	gAF
;

228 c⁄° 
	gBôSåög
<
	gmw‹d
, 6,1> 
	gZF
;

229 c⁄° 
	gBôSåög
<
	gmw‹d
, 7,1> 
	gSF
;

230 c⁄° 
	gBôSåög
<
	gmw‹d
, 8,1> 
	gTF
;

231 c⁄° 
	gBôSåög
<
	gmw‹d
, 9,1> 
	gIF
;

232 c⁄° 
	gBôSåög
<
	gmw‹d
,10,1> 
	gDF
;

233 c⁄° 
	gBôSåög
<
	gmw‹d
,11,1> 
	gOF
;

234 c⁄° 
	gBôSåög
<
	gmw‹d
,12,2> 
	gIOPL
;

235 c⁄° 
	gBôSåög
<
	gmw‹d
,14,1> 
	gNT
;

236 c⁄° 
	gBôSåög
<
	gmw‹d
,16,1> 
	gRF
;

237 c⁄° 
	gBôSåög
<
	gmw‹d
,17,1> 
	gVN
;

238 c⁄° 
	gBôSåög
<
	gmw‹d
,18,1> 
	gAC
;

239 c⁄° 
	gBôSåög
<
	gmw‹d
,19,1> 
	gVIF
;

240 c⁄° 
	gBôSåög
<
	gmw‹d
,20,1> 
	gVIP
;

241 c⁄° 
	gBôSåög
<
	gmw‹d
,21,1> 
	gID
;

244 
ölöe
 
boﬁ
 
CPUID
() {

245 
mw‹d
 
	grf
 = 
ªadRFœgs
();

246 
	grf
 ^
RFœgs
::
ID
();

247 
wrôeRFœgs
(
rf
);

248 
mw‹d
 
	grf2
 = 
ªadRFœgs
();

249  ((
	grf
 ^ 
	grf2
Ë& 
	gRFœgs
::
ID
()) == 0;

252 ˛as†
	cMachC⁄ãxt
 {

253 
mw‹d
 
	gfs
;

254 
mw‹d
 
	ggs
;

255 
	gpublic
:

256 
MachC⁄ãxt
(Ë: 
fs
(0), 
gs
(0) {}

257 
ßve
() {

258 
	gfs
 = 
MSR
::
ªad
(MSR::
FS_BASE
);

259 
	ggs
 = 
MSR
::
ªad
(MSR::
KERNEL_GS_BASE
);

261 
ª°‹e
() {

262 
	gMSR
::
wrôe
(
MSR
::
KERNEL_GS_BASE
, 
gs
);

263 
	gMSR
::
wrôe
(
MSR
::
FS_BASE
, 
fs
);

267 
ölöe
 
boﬁ
 
	$öãºu±sE«bÀd
(Ë{  
	`ªadRFœgs
(Ë& 
RFœgs
::
	`IF
(); 
	}
}

268 
ölöe
 
	$f‹˚Tøp
(Ë{ 
	`wrôeRFœgs
(
	`ªadRFœgs
(Ë| 
RFœgs
::
	`TF
()); 
	}
}

272 ˛as†
	cCPUID
 : 
public
 
NoObje˘
 {

273 
‰õnd
 
˛ass
 
Pro˚ss‹
;

275 
	sRëCode
 {

276 
uöt32_t
 
	ma
;

277 
uöt32_t
 
	mb
;

278 
uöt32_t
 
	mc
;

279 
uöt32_t
 
	md
;

282 
ölöe
 
RëCode
 
	$˝uid
(
uöt32_t
 
ü
) {

283 
RëCode
 
r
;

284 
asm
 vﬁ©ûe("˝uid" : "˜"(
r
.
a
),"=b"‘.
b
),"=c"‘.
c
),"=d"‘.
d
Ë: "a"(
ü
));

285  
r
;

286 
	}
}

287 
ölöe
 
RëCode
 
	$˝uid
(
uöt32_t
 
ü
, uöt32_à
ic
) {

288 
RëCode
 
r
;

289 
asm
 vﬁ©ûe("˝uid" : "˜"(
r
.
a
),"=b"‘.
b
),"=c"‘.
c
),"=d"‘.
d
Ë: "a"(
ü
),"c"(
ic
));

290  
r
;

291 
	}
}

293 
ölöe
 
uöt8_t
 
	$APICID
(Ë{  
	`˝uid
(0x00000001).
b
 & 
bômask
<
uöt32_t
>(24,8Ë>> 24; 
	}
}

294 
ölöe
 
boﬁ
 
	$MWAIT
(Ë{  
	`˝uid
(0x00000001).
c
 & 
bômask
<
uöt32_t
>–3,1); 
	}
}

295 
ölöe
 
boﬁ
 
	$X2APIC
(Ë{  
	`˝uid
(0x00000001).
c
 & 
bômask
<
uöt32_t
>(21,1); 
	}
}

296 
ölöe
 
boﬁ
 
	$POPCNT
(Ë{  
	`˝uid
(0x00000001).
c
 & 
bômask
<
uöt32_t
>(23,1); 
	}
}

297 
ölöe
 
boﬁ
 
	$TSCD
(Ë{  
	`˝uid
(0x00000001).
c
 & 
bômask
<
uöt32_t
>(24,1); 
	}
}

298 
ölöe
 
boﬁ
 
	$MSR
(Ë{  
	`˝uid
(0x00000001).
d
 & 
bômask
<
uöt32_t
>–5,1); 
	}
}

299 
ölöe
 
boﬁ
 
	$APIC
(Ë{  
	`˝uid
(0x00000001).
d
 & 
bômask
<
uöt32_t
>–9,1); 
	}
}

300 
ölöe
 
boﬁ
 
	$ARAT
(Ë{  
	`˝uid
(0x00000006).
a
 & 
bômask
<
uöt32_t
>–2,1); 
	}
}

301 
ölöe
 
boﬁ
 
	$FSGSBASE
(Ë{  
	`˝uid
(0x00000007).
b
 & 
bômask
<
uöt32_t
>–0,1); 
	}
}

302 
ölöe
 
boﬁ
 
	$NX
(Ë{  
	`˝uid
(0x80000001).
d
 & 
bômask
<
uöt32_t
>(20,1); 
	}
}

303 
ölöe
 
boﬁ
 
	$SYSCALL
(Ë{  
	`˝uid
(0x80000001).
d
 & 
bômask
<
uöt32_t
>(11,1); 
	}
}

304 
ölöe
 
boﬁ
 
	$Page1G
(Ë{  
	`˝uid
(0x80000001).
d
 & 
bômask
<
uöt32_t
>(26,1); 
	}
}

305 
	$gëCacheInfo
(Ë
	`__£˘i⁄
(".boot.text");

306 
	}
};

309 
	uPîfEvít
 {

310 
uöt64_t
 
	mc
;

312 
uöt64_t
 
	mEvítSñe˘
 : 8;

313 
uöt64_t
 
	mUnôMask
 : 8;

314 
uöt64_t
 
	mU£rMode
 : 1;

315 
uöt64_t
 
	mOSMode
 : 1;

316 
uöt64_t
 
	mEdgeDëe˘
 : 1;

317 
uöt64_t
 
	mPöC⁄åﬁ
 : 1;

318 
uöt64_t
 
	mApicI¡rE«bÀ
 : 1;

319 
uöt64_t
 
	mRe£rved0
 : 1;

320 
uöt64_t
 
	mE«bÀCou¡îs
 : 1;

321 
uöt64_t
 
	mInvîtCou¡îMask
 : 1;

322 
uöt64_t
 
	mCou¡îMask
 : 8;

323 
uöt64_t
 
	mRe£rved1
 : 32;

325 
PîfEvít
(
uöt64_t
 
es
, uöt64_à
um
Ë: 
EvítSñe˘
”s), 
UnôMask
(um) {}

326 } 
	g__∑cked
;

329 c⁄° 
PîfEvít
 
UnhÆãdC‹eCy˛es
(0x3C,0x00);

330 c⁄° 
PîfEvít
 
In°ru˘i⁄Rëúed
(0xC0,0x00);

331 c⁄° 
PîfEvít
 
UnhÆãdRe„ªn˚Cy˛es
(0x3C,0x01);

332 c⁄° 
PîfEvít
 
LLC_Re„ªn˚
(0x2E,0x4F);

333 c⁄° 
PîfEvít
 
LLC_Mis£s
(0x2E,0x41);

334 c⁄° 
PîfEvít
 
BønchIn°ru˘i⁄Rëúed
(0xC4,0x00);

335 c⁄° 
PîfEvít
 
BønchMissRëúed
(0xC5,0x00);

	@src/machine/Descriptors.h

17 #i‚de‡
_Des¸ùt‹s_h_


18 
	#_Des¸ùt‹s_h_
 1

	)

20 
	~"gíîic/basics.h
"

22 
	sSegmítSñe˘‹
 {

23 
uöt16_t
 
	mRPL
 : 2;

24 
uöt16_t
 
	mTI
 : 1;

25 
uöt16_t
 
	mödex
 : 13;

26 
›î©‹
 
uöt16_t
(Ëc⁄° {  *(
	muöt16_t
*)
	mthis
; }

27 } 
	g__∑cked
;

30 
	sSegmítDes¸ùt‹
 {

31 
uöt64_t
 
	mLimô00
 : 16;

32 
uöt64_t
 
	mBa£00
 : 16;

33 
uöt64_t
 
	mBa£16
 : 8;

34 
uöt64_t
 
	mA
 : 1;

35 
uöt64_t
 
	mRW
 : 1;

36 
uöt64_t
 
	mCE
 : 1;

37 
uöt64_t
 
	mC
 : 1;

38 
uöt64_t
 
	mS
 : 1;

39 
uöt64_t
 
	mDPL
 : 2;

40 
uöt64_t
 
	mP
 : 1;

41 
uöt64_t
 
	mLimô16
 : 4;

42 
uöt64_t
 
	mAVL
 : 1;

43 
uöt64_t
 
	mL
 : 1;

44 
uöt64_t
 
	mDB
 : 1;

45 
uöt64_t
 
	mG
 : 1;

46 
uöt64_t
 
	mBa£24
 : 8;

47 } 
	g__∑cked
;

50 
	sSy°emDes¸ùt‹
 {

51 
uöt64_t
 
	mLimô00
 : 16;

52 
uöt64_t
 
	mBa£00
 : 16;

53 
uöt64_t
 
	mBa£16
 : 8;

54 
uöt64_t
 
	mTy≥
 : 4;

55 
uöt64_t
 
	mZîo0
 : 1;

56 
uöt64_t
 
	mDPL
 : 2;

57 
uöt64_t
 
	mP
 : 1;

58 
uöt64_t
 
	mLimô16
 : 4;

59 
uöt64_t
 
	mAVL
 : 1;

60 
uöt64_t
 
	mRe£rved0
 : 2;

61 
uöt64_t
 
	mG
 : 1;

62 
uöt64_t
 
	mBa£24
 : 8;

63 
uöt64_t
 
	mBa£32
 : 32;

64 
uöt64_t
 
	mRe£rved3
 : 32;

65 } 
	g__∑cked
;

68 
	sI¡îru±Des¸ùt‹
 {

69 
uöt64_t
 
	mOff£t00
 :16;

70 
uöt64_t
 
	mSegmítSñe˘‹
:16;

71 
uöt64_t
 
	mIST
 : 3;

72 
uöt64_t
 
	mRe£rved1
 : 5;

73 
uöt64_t
 
	mTy≥
 : 4;

74 
uöt64_t
 
	mRe£rved2
 : 1;

75 
uöt64_t
 
	mDPL
 : 2;

76 
uöt64_t
 
	mP
 : 1;

77 
uöt64_t
 
	mOff£t16
 :16;

78 
uöt64_t
 
	mOff£t32
 :32;

79 
uöt64_t
 
	mRe£rved3
 :32;

80 } 
	g__∑cked
;

82 
	sTaskSèãSegmít
 {

83 
uöt32_t
 
	mRe£rved0
;

84 
uöt64_t
 
	mr•
[3];

85 
uöt64_t
 
	mRe£rved1
;

86 
uöt64_t
 
	mi°
[7];

87 
uöt64_t
 
	mRe£rved2
;

88 
uöt16_t
 
	mRe£rved3
;

89 
uöt16_t
 
	mioM≠Ba£
;

90 } 
	g__∑cked
;

92 
	sSñe˘‹Eº‹Fœgs
 {

93 
uöt64_t
 
	mÊags
;

94 c⁄° 
	mBôSåög
<
	muöt64_t
, 0, 1> 
	mEXT
;

95 c⁄° 
	mBôSåög
<
	muöt64_t
, 1, 1> 
	mIDT
;

96 c⁄° 
	mBôSåög
<
	muöt64_t
, 2, 1> 
	mTI
;

97 c⁄° 
	mBôSåög
<
	muöt64_t
, 3,13> 
	mIndex
;

98 
Sñe˘‹Eº‹Fœgs
–
uöt64_t
 
f
 ) : 
Êags
(f) {}

99 
›î©‹
 
uöt64_t
(Ë{  
Êags
; }

100 
›î©‹
 
±r_t
(Ë{ Öå_t(
Êags
); }

	@src/machine/Machine.cc

17 
	~"ru¡ime/ScheduÀr.h
"

18 
	~"ru¡ime/Thªad.h
"

19 
	~"kî√l/AddªssS∑˚.h
"

20 
	~"kî√l/Clock.h
"

21 
	~"kî√l/FømeM™agî.h
"

22 
	~"kî√l/Mem‹yM™agî.h
"

23 
	~"kî√l/Mu…iboŸ.h
"

24 
	~"kî√l/Pro˚ss.h
"

25 
	~"machöe/asmde˛.h
"

26 
	~"machöe/APIC.h
"

27 
	~"machöe/Machöe.h
"

28 
	~"machöe/Pro˚ss‹.h
"

29 
	~"machöe/Pagög.h
"

30 
	~"devi˚s/Keybﬂrd.h
"

31 
	~"devi˚s/PCI.h
"

32 
	~"devi˚s/PIT.h
"

33 
	~"devi˚s/RTC.h
"

34 
	~"devi˚s/S¸ìn.h
"

35 
	~"devi˚s/Sîül.h
"

36 
	~"gdb/Gdb.h
"

37 
	~"sysˇŒs.h
"

39 
	~"machöe/ACPI.h
"

41 
	~<li°
>

42 
	~<m≠
>

45 
öôCdiDrivîs
();

46 
boﬁ
 
födCdiDrivî
(c⁄° 
PCIDevi˚
&);

47 
lwù_öô_t˝ù
();

48 
kosMaö
();

51 
°©ic_as£π
((
uöt64_t
Ë=(
mw‹d
), "mword != uint64_t" );

52 
°©ic_as£π
((
size_t
Ë=(
mw‹d
), "mword != size_t");

53 
°©ic_as£π
((
±r_t
Ë=(
mw‹d
), "mword !=Ötr_t");

54 
°©ic_as£π
((
APIC
) == 0x400, "sizeof(APIC) != 0x400" );

55 
°©ic_as£π
((
APIC
Ë<
∑gesize
<1>(), "sizeof(APIC) <=Öagesize<1>()" );

56 
°©ic_as£π
((
I¡îru±Des¸ùt‹
Ë=2 * (
mw‹d
), "sizeof(InterruptDescriptor) != 2 * sizeof(mword)" );

57 
°©ic_as£π
((
SegmítDes¸ùt‹
Ë=(
mw‹d
), "sizeof(SegmentDescriptor) != sizeof(mword)" );

60 c⁄° 
boŸ16Begö
, 
boŸ16End
;

63 c⁄° 
__Kî√lBoŸ
, 
__Kî√lBoŸEnd
;

64 c⁄° 
__Kî√lCt‹s
, 
__Kî√lCt‹sEnd
;

65 c⁄° 
__Kî√lCode
, 
__Kî√lCodeEnd
;

66 c⁄° 
__Kî√lRO
, 
__Kî√lRO_End
;

67 c⁄° 
__Kî√lD©a
, 
__Kî√lD©aEnd
;

68 c⁄° 
__Kî√lBss
, 
__Kî√lBssEnd
;

69 c⁄° 
__Mu…iboŸHdr
;

72 
Pro˚ss‹
 
dummyProc
 
__£˘i⁄
(".boot.data");

73 
vaddr
 
kî√lEnd
 
__£˘i⁄
(".boot.data");

74 vﬁ©ûê
mw‹d
 
≠Index
 
__£˘i⁄
(".boot.data");

75 
∑ddr
 
pml4addr
 
__£˘i⁄
(".boot.data");

78 
FømeM™agî
 
	g‰ameM™agî
;

81 
Keybﬂrd
 
	gkeybﬂrd
;

82 
RTC
 
	gπc
;

83 
PIT
 
	gpô
;

85 
RTC
 
	gMachöe
::
	$gëRTC
()

87  
πc
;

88 
	}
}

91 c⁄° 
	gmaxIDT
 = 256;

92 
I¡îru±Des¸ùt‹
 
	gidt
[
maxIDT
] 
__Æig√d
(
∑gesize
<1>());

95 
mw‹d
 
	gMachöe
::
¥o˚ss‹Cou¡
 = 0;

96 
Pro˚ss‹
* 
	g¥o˚ss‹TabÀ
 = 
nuŒ±r
;

97 
ScheduÀr
* 
	gscheduÀrTabÀ
 = 
nuŒ±r
;

98 
mw‹d
 
	gb•Index
 = ~mword(0);

99 
mw‹d
 
	gb•ApicID
 = ~mword(0);

102 (*
tùiH™dÀr
)(Ë
nuŒ±r
;

103 vﬁ©ûê
boﬁ
 
tùiTe°
 
	`__£˘i⁄
(".boot.data");

104 
	$tùiRe˚ivî
(Ë
	`__£˘i⁄
(".boot.text");

105 
	$tùiRe˚ivî
() {

106 
KERR
::
	`out1
(" TIPI ");

107 
tùiTe°
 = 
åue
;

108 
	}
}

111 c⁄° 
	gMaxIrqCou¡
 = 192;

112 
	sIrqInfo
 {

113 
∑ddr
 
	mioApicAddr
;

114 
uöt8_t
 
	mioApicIrq
;

115 
uöt8_t
 
	mglobÆIrq
;

116 
uöt16_t
 
	movîrideFœgs
;

117 
	m∑ú
<
	tfuncvoid1_t
,
	t±r_t
> 
	tH™dÀr
;

118 
	mli°
<
	mH™dÀr
,
	mKî√lAŒoˇt‹
<H™dÀr>> 
	mh™dÀrs
;

119 } 
	gúqTabÀ
[
MaxIrqCou¡
];

120 
	gBôm≠
<
	gMaxIrqCou¡
> 
	gúqMask
;

121 
Sem≠h‹e
 
	gasyncIrqSem
;

124 
	gMachöe
::
	$öôAP
(
mw‹d
 
idx
) {

125 
	`KASSERT1
(
idx
 =
≠Index
, idx);

126 
¥o˚ss‹TabÀ
[
≠Index
].
	`öô
(
pml4addr
, 
idt
, (idt), 
öôAP2
);

127 
	}
}

130 
	gMachöe
::
	$öôAP2
() {

131 
	`°¨tGdbCpu
(
≠Index
);

132 
≠Index
 = 
b•Index
;

133 
DBG
::
	`oué
(DBG::
BoŸ
, "Enabling AP interrupts...");

134 
LoˇlPro˚ss‹
::
	`öôI¡îru±s
(
Ál£
);

135 
DBG
::
	`oué
(DBG::
BoŸ
, "Finishing AP bootÅhread...");

136 
LoˇlPro˚ss‹
::
	`gëScheduÀr
()->
	`ãrmö©e
();

137 
	}
}

140 
	gMachöe
::
	$öôBSP
(
mw‹d
 
magic
, 
vaddr
 
mbiAddr
, mw‹d 
idx
) {

143 
	`mem£t
((*)&
__Kî√lBss
, 0, &
__Kî√lBssEnd
 - &__KernelBss);

146 
buf_t
 
boŸHóp
[
boŸHópSize
] 
	`__£˘i⁄
(".boot.data");

149 
Mem‹yM™agî
::
	`öô0
–(
vaddr
)
boŸHóp
, (bootHeap) );

152 
dummyProc
.
	`ö°Æl
();

155 
vaddr
 
mbiEnd
 = 
Mu…iboŸ
::
	`öô
(
magic
, 
mbiAddr
);

157 
kî√lEnd
 = 
	`Æign_up
(
mbiEnd
, 
kî√Õs
Ë+ 
kî√lBa£
;

160 i‡(!
S¸ìn
::
	`öô
(
kî√lBa£
)Ë
	`ReboŸ
();

161 
DebugDevi˚
::
	`öô
();

162 
SîülDevi˚
::
	`öô
(
DBG
::
	`ã°
(DBG::
GDBE«bÀ
));

166  c⁄° * 
x
 = &
__Kî√lCt‹s
; x !&
__Kî√lCt‹sEnd
; x += (*)) {

167 
asm
 vﬁ©ûe–"ˇŒ *(%0)" : : "b"(
x
) : "memory", "cc", "rax", "rcx", "rdx", "rsi", "rdi", "r8", "r9", "r10", "r11" );

171 
	`£tupIDTabÀ
();

174 
dummyProc
.
	`check
(
åue
);

177 
Mu…iboŸ
::
	`öô2
();

180 
	`KASSERT1
(
idx
 == 0, idx);

183 
DBG
::
	`oué
(DBG::
BoŸ
, "*********** MEM INFO ***********");

184 
DBG
::
	`oué
(DBG::
BoŸ
, "BoŸ16: ", 
	`FmtHex
(&
boŸ16Begö
), " - ", FmtHex(&
boŸ16End
), " -> ", FmtHex(
BOOTAP16
));

185 
DBG
::
	`oué
(DBG::
BoŸ
, "PageTbls: ", 
	`FmtHex
(
Pagög
::
±¥efix
<1>()), " - ", FmtHex(Pagög::
	`±íd
()));

186 
DBG
::
	`oué
(DBG::
BoŸ
, "Kî√l: ", 
	`FmtHex
(
kî√lBa£
), " - ", FmtHex(
kî√lEnd
));

187 
DBG
::
	`oué
(DBG::
BoŸ
, "BoŸ Seg: ", 
	`FmtHex
(&
__Kî√lBoŸ
), " - ", FmtHex(&
__Kî√lBoŸEnd
));

188 
DBG
::
	`oué
(DBG::
BoŸ
, "CodêSeg: ", 
	`FmtHex
(&
__Kî√lCode
), " - ", FmtHex(&
__Kî√lCodeEnd
));

189 
DBG
::
	`oué
(DBG::
BoŸ
, "RO Seg: ", 
	`FmtHex
(&
__Kî√lRO
), " - ", FmtHex(&
__Kî√lRO_End
));

190 
DBG
::
	`oué
(DBG::
BoŸ
, "D©®Seg: ", 
	`FmtHex
(&
__Kî√lD©a
), " - ", FmtHex(&
__Kî√lD©aEnd
));

191 
DBG
::
	`oué
(DBG::
BoŸ
, "Bs†Seg: ", 
	`FmtHex
(&
__Kî√lBss
), " - ", FmtHex(&
__Kî√lBssEnd
));

192 
DBG
::
	`oué
(DBG::
BoŸ
, "MB/MBI: ", 
	`FmtHex
(&
__Mu…iboŸHdr
 + 
kî√lBa£
), " / ", FmtHex(
mbiAddr
 + kernelBase));

193 
DBG
::
	`oué
(DBG::
BoŸ
, "Vid/APIC: ", 
	`FmtHex
(
videoAddr
), " / ", FmtHex(
≠icAddr
));

195 
DBG
::
	`oué
(DBG::
BoŸ
, "*********** BOOTING ************");

198 
Regi⁄Së
<
Regi⁄
<
∑ddr
>> 
memtmp
, 
mem
;

199 
Mu…iboŸ
::
	`gëMem‹y
–
memtmp
 );

200 autÿ
ô
 = 
memtmp
.
	`begö
(); ià!memtmp.
	`íd
(); ) {

201 
mem
.
	`ö£π
–
Regi⁄
<
∑ddr
>(
	`Æign_up
(
ô
->
°¨t
, 
∑gesize
<1>()), 
	`Æign_down
(ô->
íd
,Öagesize<1>())) );

202 
ô
 = 
memtmp
.
	`îa£
(it);

204 
boﬁ
 
check
 = 
mem
.
	`ªmove
–
Regi⁄
<
∑ddr
>(
	`vaddr
(&
__Kî√lBoŸ
Ë- 
kî√lBa£
, 
kî√lEnd
 - kernelBase) );

205 
	`KASSERT0
(
check
);

206 
size_t
 
boŸ16Size
 = 
	`Æign_up
–
	`size_t
(&
boŸ16End
 - &
boŸ16Begö
), 
∑gesize
<1>());

207 
check
 = 
mem
.
	`ªmove
–
Regi⁄
<
∑ddr
>(
BOOTAP16
, BOOTAP16 + 
boŸ16Size
) );

208 
	`KASSERT0
(
check
);

209 
	`KASSERT0
(!
mem
.
	`em±y
());

212 
	`mem˝y
–
	`buÂå_t
(
BOOTAP16
), &
boŸ16Begö
, 
boŸ16Size
 );

215 
pml4addr
 = 
Pagög
::
	`boŸ°øp
(
kî√lEnd
);

216 
Mu…iboŸ
::
	`ªm≠
(
kî√lBa£
);

219 
∑ddr
 
ídphysmem
 = (--
mem
.
	`íd
())->
íd
;

220 
size_t
 
fmSèπ
 = 
kî√…›
 - 
FømeM™agî
::
	`gëSize
–
ídphysmem
 );

221 
vaddr
 
öôSèπ
 = 
kî√…›
;

222  
öôSèπ
 + 
boŸHópSize
 > 
fmSèπ
 ) {

223 
∑ddr
 
°¨t
 = 
mem
.
	`ªåõve
(
kî√Õs
);

224 
	`KASSERT0
(
°¨t
 !
t›addr
);

225 
öôSèπ
 -
kî√Õs
;

227 
boﬁ
 
check
 = 
Pagög
::
m≠
<
kî√Õl
,
åue
>(
öôSèπ
, 
°¨t
, Pagög::
Kî√lD©a
, 
‰ameM™agî
);

228 
	`KASSERT1
(
check
, 
öôSèπ
);

232 
Mem‹yM™agî
::
	`ªöô
(
öôSèπ
, 
fmSèπ
 - initStart);

236 
DBG
::
	`out1
(DBG::
BoŸ
, "constructors:");

237  c⁄° * 
x
 = &
__Kî√lCt‹s
; x !&
__Kî√lCt‹sEnd
; x += (*)) {

238 
DBG
::
	`out1
(DBG::
BoŸ
, ' ', 
	`FmtHex
(
x
));

239 
asm
 vﬁ©ûe–"ˇŒ *(%0)" : : "b"(
x
) : "memory", "cc", "rax", "rcx", "rdx", "rsi", "rdi", "r8", "r9", "r10", "r11" );

241 
DBG
::
	`oué
(DBG::
BoŸ
);

244 
‰ameM™agî
.
	`öô
–(
buÂå_t
)
fmSèπ
, 
ídphysmem
 );

245 áutÿ
ô
 = 
mem
.
	`begö
(); ià!mem.
	`íd
(); ++it ) {

246 
‰ameM™agî
.
	`ªÀa£Regi⁄
–
ô
->
°¨t
, it->
íd
 - it->start );

248 
DBG
::
	`oué
(DBG::
BoŸ
, "FM/öô: ", 
‰ameM™agî
);

251 
Pagög
::
	`boŸ°øp2
(
‰ameM™agî
);

252 
DBG
::
	`oué
(DBG::
BoŸ
, "Paging & FM initialized");

255 
dummyProc
.
‰ameM™agî
 = &frameManager;

258 
kî√lS∑˚
.
	`öôKî√l
(
kî√lbŸ
, 
öôSèπ
, 
pml4addr
);

259 
DBG
::
	`oué
(DBG::
BoŸ
, "AS/öô: ", 
kî√lS∑˚
);

262 
m≠
<
uöt32_t
,uöt32_t> 
≠icM≠
;

263 
m≠
<
uöt32_t
,
∑ddr
> 
ioApicM≠
;

264 
m≠
<
uöt8_t
,
∑ú
<
uöt32_t
,
uöt16_t
>> 
ioOvîrideM≠
;

265 
∑ddr
 
rsdp
 = 
Mu…iboŸ
::
	`gëRSDP
(Ë- 
kî√lBa£
;

266 
∑ddr
 
≠icPhysAddr
 = 
	`öôACPI
(
rsdp
, 
≠icM≠
, 
ioApicM≠
, 
ioOvîrideM≠
);

269 c⁄° 
∑ú
<
uöt32_t
,
∑ddr
>&
i›
 : 
ioApicM≠
) {

270 
kî√lS∑˚
.
m≠Dúe˘
<1>(
i›
.
£c⁄d
, 
ioApicAddr
, 
∑gesize
<1>(), 
Pagög
::
MM≠IO
);

271 
mw‹d
 
rdr
 = 
	`M≠≥dIOAPIC
()->
	`gëRedúe˘s
() + 1;

272 
mw‹d
 
x
 = 0; x < 
rdr
; x += 1 ) {

273 
	`M≠≥dIOAPIC
()->
	`maskIRQ
(
x
);

274 
mw‹d
 
úqnum
 = 
i›
.
fú°
 + 
x
;

275 
	`KASSERT1
(
úqnum
 < 
MaxIrqCou¡
, irqnum);

276 
úqTabÀ
[
úqnum
].
ioApicAddr
 = 
i›
.
£c⁄d
;

277 
úqTabÀ
[
úqnum
].
ioApicIrq
 = 
x
;

278 i‡(
ioOvîrideM≠
.
	`cou¡
(
úqnum
) > 0) {

279 
∑ú
<
uöt32_t
,
uöt16_t
>& 
ovîride
 = 
ioOvîrideM≠
.
	`©
(
úqnum
);

280 
úqTabÀ
[
úqnum
].
globÆIrq
 = 
ovîride
.
fú°
;

281 
úqTabÀ
[
úqnum
].
ovîrideFœgs
 = 
ovîride
.
£c⁄d
;

283 
úqTabÀ
[
úqnum
].
globÆIrq
 = irqnum;

286 
kî√lS∑˚
.
unm≠Dúe˘
<1>(
ioApicAddr
, 
∑gesize
<1>());

291 
	`KASSERT0
(
≠icM≠
.
	`size
());

292 
¥o˚ss‹Cou¡
 = 
≠icM≠
.
	`size
();

293 
¥o˚ss‹TabÀ
 = 
k√wN
<
Pro˚ss‹
>(
¥o˚ss‹Cou¡
);

294 
scheduÀrTabÀ
 = 
k√wN
<
ScheduÀr
>(
¥o˚ss‹Cou¡
);

295 
mw‹d
 
c‹eIdx
 = 0;

296 c⁄° 
∑ú
<
uöt32_t
,uöt32_t>& 
≠
 : 
≠icM≠
) {

297 
DBG
::
	`oué
–DBG::
ScheduÀr
, "ScheduÀ∏", 
c‹eIdx
, "áà", 
	`FmtHex
(
scheduÀrTabÀ
 + coreIdx));

298 
scheduÀrTabÀ
[
c‹eIdx
].
	`£tP¨äî
(scheduÀrTabÀ[(c‹eIdx + 1Ë% 
¥o˚ss‹Cou¡
]);

299 
¥o˚ss‹TabÀ
[
c‹eIdx
].
	`£tup
(
kî√lS∑˚
, kî√lS∑˚.
	`öôPro˚ss‹
(),

300 
scheduÀrTabÀ
[
c‹eIdx
], 
‰ameM™agî
, c‹eIdx, 
≠
.
£c⁄d
,áp.
fú°
);

301 
c‹eIdx
 += 1;

305 
kî√lS∑˚
.
m≠Dúe˘
<1>(
≠icPhysAddr
, 
≠icAddr
, 
∑gesize
<1>(), 
Pagög
::
MM≠IO
);

306 
b•ApicID
 = 
	`M≠≥dAPIC
()->
	`gëID
();

307 
mw‹d
 
i
 = 0; i < 
¥o˚ss‹Cou¡
; i += 1) {

308 i‡(
¥o˚ss‹TabÀ
[
i
].
≠icID
 =
b•ApicID
) {

309 
b•Index
 = 
i
;

313 
DBG
::
	`oué
(DBG::
BoŸ
, "CPUs: ", 
¥o˚ss‹Cou¡
, '/', 
b•Index
, '/', 
b•ApicID
);

314 
	`KASSERT0
(
b•Index
 !~
	`mw‹d
(0));

317 
¥o˚ss‹TabÀ
[
b•Index
].
	`öô
(
pml4addr
, 
idt
, (idt), 
boŸMaö
);

318 
	}
}

321 
	gMachöe
::
	$öôBSP2
() {

322 
DBG
::
	`oué
(DBG::
BoŸ
, "********** NEW STACK ***********");

323 
DBG
::
	`oué
(DBG::
BoŸ
, "BSP: ", 
LoˇlPro˚ss‹
::
	`gëIndex
(), '/', LoˇlPro˚ss‹::
	`gëSy°emID
(), '/', LoˇlPro˚ss‹::
	`gëApicID
());

326 
	`öôGdb
(
b•Index
);

328 
DBG
::
	`oué
(DBG::
BoŸ
, "Initializing basic devices...");

330 
πc
.
	`öô
();

332 
pô
.
	`öô
();

334 
keybﬂrd
.
	`öô
();

336 
DBG
::
	`oué
(DBG::
BoŸ
, "********** MULTI CORE **********");

339 
DBG
::
	`oué
(DBG::
BoŸ
, "Enabling BSP interrupts...");

340 
LoˇlPro˚ss‹
::
	`öôI¡îru±s
(
åue
);

343 
tùiTe°
 = 
Ál£
;

344 
tùiH™dÀr
 = 
tùiRe˚ivî
;

345 
	`£ndIPI
(
b•Index
, 
APIC
::
Te°IPI
);

346 !
tùiTe°
Ë
CPU
::
	`Pau£
();

350 
StdOut
.
	`¥öt
("AP inô (", 
	`FmtHex
(
BOOTAP16
 / 0x1000), "):");

351 
mw‹d
 
idx
 = 0; idx < 
¥o˚ss‹Cou¡
; idx += 1) {

352 i‡(
idx
 !
b•Index
) {

353 
≠Index
 = 
idx
;

355 
mw‹d
 
ai
 = 
¥o˚ss‹TabÀ
[
idx
].
≠icID
;

356 
StdOut
.
	`¥öt
(' ', 
ai
);

357 
	`M≠≥dAPIC
()->
	`£ndInôIPI
(
ai
);

358 
StdOut
.
	`¥öt
('I');

359 
Clock
::
	`waô
(100);

360 
	`M≠≥dAPIC
()->
	`£ndInôDós£πIPI
(
ai
);

361 
StdOut
.
	`¥öt
('D');

362 
Clock
::
	`waô
(100);

363 
i
 = 0; i < 10; i += 1) {

364 
	`M≠≥dAPIC
()->
	`£ndSèπupIPI
(
ai
, 
BOOTAP16
 / 0x1000);

365 
StdOut
.
	`¥öt
('S');

366 
j
 = 0; j < 1000; j += 1) {

367 
Clock
::
	`waô
(1);

368 i‡(
≠Index
 !
idx
Ë
≠D⁄e
;

372 
≠D⁄e
:

373 
StdOut
.
	`¥öt
('|', 
idx
);

376 
StdOut
.
	`¥öt
(
kídl
);

378 
DBG
::
	`oué
(DBG::
BoŸ
, "Building kernel filesystem...");

380 
Mu…iboŸ
::
	`ªadModuÀs
(
kî√lBa£
);

383 
	`öôACPI2
();

386 
	`öôCdiDrivîs
();

387 
DBG
::
	`oué
(DBG::
BoŸ
, "CDI drivers initialized.");

390 
li°
<
PCIDevi˚
> 
pciDevLi°
;

391 
PCI
::
	`ßnôyCheck
();

392 
PCI
::
	`checkAŒBu£s
(
pciDevLi°
);

395 
DBG
::
	`oué
(DBG::
BoŸ
, "StartingÇetwork subsystem...");

396 
	`lwù_öô_t˝ù
();

398 
DBG
::
	`oué
(DBG::
BoŸ
, "Starting CDI devices...");

400 c⁄° 
PCIDevi˚
& 
pd
 : 
pciDevLi°
Ë
	`födCdiDrivî
(pd);

402 autÿ
ôî
 = 
kî√lFS
.
	`föd
("schedparam");

403 i‡(
ôî
 =
kî√lFS
.
	`íd
()) {

404 
KOUT
::
	`oué
("schedparamÇot found");

406 
FûeAc˚ss
 
	`f
(
ôî
->
£c⁄d
);

407 
i
 = 0;

408 
j
 = 0;

409 
«me
[16];

410 
numbî
[8];

411 
	`mem£t
(
«me
, 0, (name));

412 
	`mem£t
(
numbî
, 0, (number));

414 
c
;

415 i‡(
f
.
	`ªad
(&
c
, 1) == 0) ;

416 i‡(
	`ißÕha
(
c
)) {

417 
«me
[
i
] = 
c
;

418 
i
++;

420 i‡(
	`isdigô
(
c
)) {

421 
numbî
[
j
] = 
c
;

422 
j
++;

424 i‡(
c
 == '\n') {

425 
i
 = 0;

426 
j
 = 0;

427 
vÆue
 = 
	`©oi
(
numbî
);

428 i‡(
	`°rcmp
(
«me
, "mingranularity") == 0) {

429 
ScheduÀr
::
möGønuœrôy
 = 
vÆue
;

430 
KOUT
::
	`oué
("mögønuœrôy: ", 
vÆue
);

432 i‡(
	`°rcmp
(
«me
, "epochlen") == 0) {

433 
ScheduÀr
::
deÁu…EpochLígth
 = 
vÆue
;

434 
ScheduÀr
::
ïochLígth
 = 
vÆue
;

435 
KOUT
::
	`oué
("ïochÀn: ", 
vÆue
);

437 
	`mem£t
(
«me
, 0, (name));

438 
	`mem£t
(
numbî
, 0, (number));

441 
KOUT
::
	`oué
();

445 
DBG
::
	`oué
(DBG::
BoŸ
, "Creating IRQÅhread...");

446 
Thªad
::
	`¸óã
()->
	`£tPri‹ôy
(
t›Pri‹ôy
)->
	`£tAfföôy
(
¥o˚ss‹TabÀ
[0].
scheduÀr
)->
	`°¨t
((
±r_t
)
asyncIrqLo›
);

447 
	}
}

449 
	gMachöe
::
	$boŸCÀ™up
() {

450 
DBG
::
	`oué
(DBG::
BoŸ
, "********* MEMORY CLEANUP *********");

453 
‰ameM™agî
.
	`ªÀa£Regi⁄
(
BOOTAP16
, 
∑gesize
<1>());

454 
DBG
::
	`oué
(DBG::
BoŸ
, "FM/‰ì16:", 
‰ameM™agî
);

458  
vaddr
 
x
 = 
kî√lBa£
 + 
	`vaddr
(&
__Mu…iboŸHdr
); x < 
kî√lEnd
; x +
kî√Õs
 ) {

459 
Pagög
::
unm≠
<
kî√Õl
>(
x
);

460 
‰ameM™agî
.
	`ªÀa£Regi⁄
(
x
 - 
kî√lBa£
, 
kî√Õs
 );

462 
DBG
::
	`oué
(DBG::
BoŸ
, "FM/mbi:", 
‰ameM™agî
);

466 
kî√lS∑˚
.
m≠Dúe˘
<1>(
Pagög
::
	`vt›
(
S¸ìn
::
	`gëAddªss
()), 
videoAddr
, 
∑gesize
<1>(), Pagög::
MM≠IO
);

467 
S¸ìn
::
	`£tAddªss
(
videoAddr
);

470 
Pagög
::
unm≠
<
kî√Õl
>(
kî√lBa£
);

471 
‰ameM™agî
.
	`ªÀa£Regi⁄
–
	`vaddr
(&
__Kî√lBoŸ
Ë- 
kî√lBa£
, kî√lBa£ + 
kî√Õs
 - vaddr(&__KernelBoot) );

472  
vaddr
 
x
 = 
kî√lBa£
 + 
kî√Õs
; x < 
	`vaddr
(&
__Kî√lCode
); x += kernelps / 2 ) {

473 
Pagög
::
unm≠
<
kî√Õl
>(
x
);

474 
‰ameM™agî
.
	`ªÀa£Regi⁄
(
x
 - 
kî√lBa£
, 
kî√Õs
);

478 
DBG
::
	`oué
(DBG::
BoŸ
, "FM/boŸ:", 
‰ameM™agî
);

479 
DBG
::
	`oué
(DBG::
BoŸ
, "AS/boŸ: ", 
kî√lS∑˚
);

480 
	}
}

482 
	gMachöe
::
	$boŸMaö
() {

483 
Machöe
::
	`öôBSP2
();

484 
Machöe
::
	`boŸCÀ™up
();

485 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
kosMaö
);

486 
LoˇlPro˚ss‹
::
	`gëScheduÀr
()->
	`ãrmö©e
();

487 
	}
}

489 
	gMachöe
::
	$£tAfföôy
(
Thªad
& 
t
, 
mw‹d
 
idx
) {

490 
	`KASSERT1
(
idx
 < 
¥o˚ss‹Cou¡
, idx);

491 
t
.
	`£tAfföôy
(
¥o˚ss‹TabÀ
[
idx
].
scheduÀr
);

492 
	}
}

494 
	gMachöe
::
	$£ndIPI
(
mw‹d
 
idx
, 
uöt8_t
 
vec
) {

495 
	`M≠≥dAPIC
()->
	`£ndIPI
(
¥o˚ss‹TabÀ
[
idx
].
≠icID
, 
vec
);

496 
	}
}

498 
	gMachöe
::
	$£ndWakeIPI
(
ScheduÀr
* 
scheduÀr
) {

499 
	`M≠≥dAPIC
()->
	`£ndIPI
(
¥o˚ss‹TabÀ
[
scheduÀr
 - 
scheduÀrTabÀ
].
≠icID
, 
APIC
::
WakeIPI
);

500 
	}
}

502 
	gMachöe
::
	$ºPªem±IPI
(
mw‹d
 
tick
) {

503 
	`£ndIPI
(
¥o˚ss‹TabÀ
[
tick
 % 
¥o˚ss‹Cou¡
].
≠icID
, 
APIC
::
Pªem±IPI
);

504 
	}
}

508 
	gMachöe
::
	$asyncIrqLo›
() {

510 
asyncIrqSem
.
	`P
();

512 
mw‹d
 
idx
 = 
úqMask
.
	`föd£t
();

513 
	`¶ow∑th
(
idx
 >
MaxIrqCou¡
) ;

514 #i‡
TESTING_REPORT_INTERRUPTS


515 
StdEº
.
	`out1
(" AH:", 
	`FmtHex
(
idx
));

517 
úqMask
.
˛ór
<
åue
>(
idx
);

518 
IrqInfo
::
H™dÀr
 
f
 : 
úqTabÀ
[
idx
].
h™dÀrs
Ëf.
	`fú°
(f.
£c⁄d
);

521 
	}
};

523 
	gMachöe
::
	$m≠Irq
(
mw‹d
 
úq
, mw‹d 
ve˘‹
) {

524 
SpöLock
 
iﬂpicLock
;

525 
mw‹d
 
úqmod
 = 
úqTabÀ
[
úq
].
globÆIrq
;

526 
DBG
::
	`oué
(DBG::
Basic
, "IRQ m≠pög: ", 
	`FmtHex
(
úq
), '/', FmtHex(
úqTabÀ
[
úqmod
].
ioApicIrq
), " -> ", FmtHex(
ve˘‹
));

527 
kî√lS∑˚
.
m≠Dúe˘
<1>(
úqTabÀ
[
úqmod
].
ioApicAddr
, ioApicAddr, 
∑gesize
<1>(), 
AddªssS∑˚
::
MM≠IO
);

528 i‡(
ve˘‹
) {

529 
Sc›edLock
<> 
	`¶
(
iﬂpicLock
);

531 
	`M≠≥dIOAPIC
()->
	`m≠IRQ
–
úqTabÀ
[
úqmod
].
ioApicIrq
, 
ve˘‹
, 
b•ApicID
 );

533 
Sc›edLock
<> 
	`¶
(
iﬂpicLock
);

534 
	`M≠≥dIOAPIC
()->
	`maskIRQ
–
úqTabÀ
[
úqmod
].
ioApicIrq
 );

536 
kî√lS∑˚
.
unm≠Dúe˘
<1>(
ioApicAddr
, 
∑gesize
<1>());

537 
	}
}

539 
	gMachöe
::
	$ªgi°îIrqSync
(
mw‹d
 
úq
, mw‹d 
ve˘‹
) {

540 
Sc›edLock
<
LoˇlPro˚ss‹
> 
¶
;

541 
	`KASSERT0
(
úqTabÀ
[
úq
].
h™dÀrs
.
	`em±y
());

542 
	`m≠Irq
(
úq
, 
ve˘‹
);

543 
	}
}

545 
	gMachöe
::
	$ªgi°îIrqAsync
(
mw‹d
 
úq
, 
funcvoid1_t
 
h™dÀr
, 
±r_t
 
˘x
) {

546 
mw‹d
 
ve˘‹
 = 
úq
 + 0x20;

547 
DBG
::
	`oué
(DBG::
Basic
, "ªgi°îásyn¯IRQ h™dÀr: ", 
	`FmtHex
(
	`±r_t
(
h™dÀr
)), " f‹ irq/ve˘‹ ", FmtHex(
úq
), '/', FmtHex(
ve˘‹
));

548 
Sc›edLock
<
LoˇlPro˚ss‹
> 
¶
;

549 i‡(
úqTabÀ
[
úq
].
h™dÀrs
.
	`em±y
()Ë
	`m≠Irq
(úq, 
ve˘‹
);

550 
úqTabÀ
[
úq
].
h™dÀrs
.
	`push_back
–{
h™dÀr
, 
˘x
} );

551 
	}
}

553 
	gMachöe
::
	$dîegi°îIrqAsync
(
mw‹d
 
úq
, 
funcvoid1_t
 
h™dÀr
) {

554 
DBG
::
	`oué
(DBG::
Basic
, "dîegi°îásyn¯IRQ h™dÀr: ", 
	`FmtHex
(
	`±r_t
(
h™dÀr
)), " f‹ irq ", FmtHex(
úq
));

555 
Sc›edLock
<
LoˇlPro˚ss‹
> 
¶
;

556 autÿ
ô
 = 
úqTabÀ
[
úq
].
h™dÀrs
.
	`begö
();

557  ; 
ô
 !
úqTabÀ
[
úq
].
h™dÀrs
.
	`íd
(); ++it ) {

558 i‡(
ô
->
fú°
 =
h™dÀr
) {

559 
úqTabÀ
[
úq
].
h™dÀrs
.
	`îa£
(
ô
);

563 i‡(
úqTabÀ
[
úq
].
h™dÀrs
.
	`em±y
()Ë
	`m≠Irq
(irq, 0);

564 
	}
}

566 
	gMachöe
::
	$£tupIDT
(
uöt32_t
 
numbî
, 
∑ddr
 
addªss
, uöt32_à
i°
) {

567 
	`KASSERT1
(
numbî
 < 
maxIDT
,Çumber);

568 
idt
[
numbî
].
Off£t00
 = (
addªss
 & 0x000000000000FFFF);

569 
idt
[
numbî
].
Off£t16
 = (
addªss
 & 0x00000000FFFF0000) >> 16;

570 
idt
[
numbî
].
Off£t32
 = (
addªss
 & 0xFFFFFFFF00000000) >> 32;

571 
idt
[
numbî
].
SegmítSñe˘‹
 = 
Pro˚ss‹
::
kînCS
 * (
SegmítDes¸ùt‹
);

572 
idt
[
numbî
].
IST
 = 
i°
;

573 
idt
[
numbî
].
Ty≥
 = 0x0E;

574 
idt
[
numbî
].
P
 = 1;

575 
	}
}

577 
	gMachöe
::
	$£tupIDTabÀ
() {

578 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

580 
size_t
 
i
 = 0; i < 
MaxIrqCou¡
; i += 1) {

581 
úqTabÀ
[
i
].
ioApicAddr
 = 0;

582 
úqTabÀ
[
i
].
ioApicIrq
 = 0;

583 
úqTabÀ
[
i
].
globÆIrq
 = i;

584 
úqTabÀ
[
i
].
ovîrideFœgs
 = 0;

587 
	`mem£t
(
idt
, 0, (idt));

590 
	`£tupIDT
(0x00, (
vaddr
)&
i§_wøµî_0x00
);

591 
	`£tupIDT
(0x01, (
vaddr
)&
i§_wøµî_0x01
);

592 
	`£tupIDT
(0x02, (
vaddr
)&
i§_wøµî_0x02
, 
Pro˚ss‹
::
nmiIST
);

593 
	`£tupIDT
(0x03, (
vaddr
)&
i§_wøµî_0x03
);

594 
	`£tupIDT
(0x04, (
vaddr
)&
i§_wøµî_0x04
);

595 
	`£tupIDT
(0x05, (
vaddr
)&
i§_wøµî_0x05
);

596 
	`£tupIDT
(0x06, (
vaddr
)&
i§_wøµî_0x06
);

597 
	`£tupIDT
(0x07, (
vaddr
)&
i§_wøµî_0x07
);

598 
	`£tupIDT
(0x08, (
vaddr
)&
i§_wøµî_0x08
, 
Pro˚ss‹
::
dbfIST
);

599 
	`£tupIDT
(0x09, (
vaddr
)&
i§_wøµî_0x09
);

600 
	`£tupIDT
(0x0a, (
vaddr
)&
i§_wøµî_0x0a
);

601 
	`£tupIDT
(0x0b, (
vaddr
)&
i§_wøµî_0x0b
);

602 
	`£tupIDT
(0x0c, (
vaddr
)&
i§_wøµî_0x0c
, 
Pro˚ss‹
::
°fIST
);

603 
	`£tupIDT
(0x0d, (
vaddr
)&
i§_wøµî_0x0d
);

604 
	`£tupIDT
(0x0e, (
vaddr
)&
i§_wøµî_0x0e
, 
Pro˚ss‹
::
pgfIST
);

605 
	`£tupIDT
(0x0f, (
vaddr
)&
i§_wøµî_0x0f
);

606 
	`£tupIDT
(0x10, (
vaddr
)&
i§_wøµî_0x10
);

607 
	`£tupIDT
(0x11, (
vaddr
)&
i§_wøµî_0x11
);

608 
	`£tupIDT
(0x12, (
vaddr
)&
i§_wøµî_0x12
);

609 
	`£tupIDT
(0x13, (
vaddr
)&
i§_wøµî_0x13
);

610 
	`£tupIDT
(0x14, (
vaddr
)&
i§_wøµî_0x14
);

611 
	`£tupIDT
(0x15, (
vaddr
)&
i§_wøµî_0x15
);

612 
	`£tupIDT
(0x16, (
vaddr
)&
i§_wøµî_0x16
);

613 
	`£tupIDT
(0x17, (
vaddr
)&
i§_wøµî_0x17
);

614 
	`£tupIDT
(0x18, (
vaddr
)&
i§_wøµî_0x18
);

615 
	`£tupIDT
(0x19, (
vaddr
)&
i§_wøµî_0x19
);

616 
	`£tupIDT
(0x1a, (
vaddr
)&
i§_wøµî_0x1a
);

617 
	`£tupIDT
(0x1b, (
vaddr
)&
i§_wøµî_0x1b
);

618 
	`£tupIDT
(0x1c, (
vaddr
)&
i§_wøµî_0x1c
);

619 
	`£tupIDT
(0x1d, (
vaddr
)&
i§_wøµî_0x1d
);

620 
	`£tupIDT
(0x1e, (
vaddr
)&
i§_wøµî_0x1e
);

621 
	`£tupIDT
(0x1f, (
vaddr
)&
i§_wøµî_0x1f
);

624 
	`£tupIDT
(0x20, (
vaddr
)&
i§_wøµî_0x20
);

625 
	`£tupIDT
(0x21, (
vaddr
)&
i§_wøµî_0x21
);

626 
	`£tupIDT
(0x22, (
vaddr
)&
i§_wøµî_0x22
);

627 
	`£tupIDT
(0x23, (
vaddr
)&
i§_wøµî_0x23
);

628 
	`£tupIDT
(0x24, (
vaddr
)&
i§_wøµî_0x24
);

629 
	`£tupIDT
(0x25, (
vaddr
)&
i§_wøµî_0x25
);

630 
	`£tupIDT
(0x26, (
vaddr
)&
i§_wøµî_0x26
);

631 
	`£tupIDT
(0x27, (
vaddr
)&
i§_wøµî_0x27
);

632 
	`£tupIDT
(0x28, (
vaddr
)&
i§_wøµî_0x28
);

633 
	`£tupIDT
(0x29, (
vaddr
)&
i§_wøµî_0x29
);

634 
	`£tupIDT
(0x2a, (
vaddr
)&
i§_wøµî_0x2a
);

635 
	`£tupIDT
(0x2b, (
vaddr
)&
i§_wøµî_0x2b
);

636 
	`£tupIDT
(0x2c, (
vaddr
)&
i§_wøµî_0x2c
);

637 
	`£tupIDT
(0x2d, (
vaddr
)&
i§_wøµî_0x2d
);

638 
	`£tupIDT
(0x2e, (
vaddr
)&
i§_wøµî_0x2e
);

639 
	`£tupIDT
(0x2f, (
vaddr
)&
i§_wøµî_0x2f
);

640 
	`£tupIDT
(0x30, (
vaddr
)&
i§_wøµî_0x30
);

641 
	`£tupIDT
(0x31, (
vaddr
)&
i§_wøµî_0x31
);

642 
	`£tupIDT
(0x32, (
vaddr
)&
i§_wøµî_0x32
);

643 
	`£tupIDT
(0x33, (
vaddr
)&
i§_wøµî_0x33
);

644 
	`£tupIDT
(0x34, (
vaddr
)&
i§_wøµî_0x34
);

645 
	`£tupIDT
(0x35, (
vaddr
)&
i§_wøµî_0x35
);

646 
	`£tupIDT
(0x36, (
vaddr
)&
i§_wøµî_0x36
);

647 
	`£tupIDT
(0x37, (
vaddr
)&
i§_wøµî_0x37
);

648 
	`£tupIDT
(0x38, (
vaddr
)&
i§_wøµî_0x38
);

649 
	`£tupIDT
(0x39, (
vaddr
)&
i§_wøµî_0x39
);

650 
	`£tupIDT
(0x3a, (
vaddr
)&
i§_wøµî_0x3a
);

651 
	`£tupIDT
(0x3b, (
vaddr
)&
i§_wøµî_0x3b
);

652 
	`£tupIDT
(0x3c, (
vaddr
)&
i§_wøµî_0x3c
);

653 
	`£tupIDT
(0x3d, (
vaddr
)&
i§_wøµî_0x3d
);

654 
	`£tupIDT
(0x3e, (
vaddr
)&
i§_wøµî_0x3e
);

655 
	`£tupIDT
(0x3f, (
vaddr
)&
i§_wøµî_0x3f
);

656 
	`£tupIDT
(0x40, (
vaddr
)&
i§_wøµî_0x40
);

657 
	`£tupIDT
(0x41, (
vaddr
)&
i§_wøµî_0x41
);

658 
	`£tupIDT
(0x42, (
vaddr
)&
i§_wøµî_0x42
);

659 
	`£tupIDT
(0x43, (
vaddr
)&
i§_wøµî_0x43
);

660 
	`£tupIDT
(0x44, (
vaddr
)&
i§_wøµî_0x44
);

661 
	`£tupIDT
(0x45, (
vaddr
)&
i§_wøµî_0x45
);

662 
	`£tupIDT
(0x46, (
vaddr
)&
i§_wøµî_0x46
);

663 
	`£tupIDT
(0x47, (
vaddr
)&
i§_wøµî_0x47
);

664 
	`£tupIDT
(0x48, (
vaddr
)&
i§_wøµî_0x48
);

665 
	`£tupIDT
(0x49, (
vaddr
)&
i§_wøµî_0x49
);

666 
	`£tupIDT
(0x4a, (
vaddr
)&
i§_wøµî_0x4a
);

667 
	`£tupIDT
(0x4b, (
vaddr
)&
i§_wøµî_0x4b
);

668 
	`£tupIDT
(0x4c, (
vaddr
)&
i§_wøµî_0x4c
);

669 
	`£tupIDT
(0x4d, (
vaddr
)&
i§_wøµî_0x4d
);

670 
	`£tupIDT
(0x4e, (
vaddr
)&
i§_wøµî_0x4e
);

671 
	`£tupIDT
(0x4f, (
vaddr
)&
i§_wøµî_0x4f
);

672 
	`£tupIDT
(0x50, (
vaddr
)&
i§_wøµî_0x50
);

673 
	`£tupIDT
(0x51, (
vaddr
)&
i§_wøµî_0x51
);

674 
	`£tupIDT
(0x52, (
vaddr
)&
i§_wøµî_0x52
);

675 
	`£tupIDT
(0x53, (
vaddr
)&
i§_wøµî_0x53
);

676 
	`£tupIDT
(0x54, (
vaddr
)&
i§_wøµî_0x54
);

677 
	`£tupIDT
(0x55, (
vaddr
)&
i§_wøµî_0x55
);

678 
	`£tupIDT
(0x56, (
vaddr
)&
i§_wøµî_0x56
);

679 
	`£tupIDT
(0x57, (
vaddr
)&
i§_wøµî_0x57
);

680 
	`£tupIDT
(0x58, (
vaddr
)&
i§_wøµî_0x58
);

681 
	`£tupIDT
(0x59, (
vaddr
)&
i§_wøµî_0x59
);

682 
	`£tupIDT
(0x5a, (
vaddr
)&
i§_wøµî_0x5a
);

683 
	`£tupIDT
(0x5b, (
vaddr
)&
i§_wøµî_0x5b
);

684 
	`£tupIDT
(0x5c, (
vaddr
)&
i§_wøµî_0x5c
);

685 
	`£tupIDT
(0x5d, (
vaddr
)&
i§_wøµî_0x5d
);

686 
	`£tupIDT
(0x5e, (
vaddr
)&
i§_wøµî_0x5e
);

687 
	`£tupIDT
(0x5f, (
vaddr
)&
i§_wøµî_0x5f
);

688 
	`£tupIDT
(0x60, (
vaddr
)&
i§_wøµî_0x60
);

689 
	`£tupIDT
(0x61, (
vaddr
)&
i§_wøµî_0x61
);

690 
	`£tupIDT
(0x62, (
vaddr
)&
i§_wøµî_0x62
);

691 
	`£tupIDT
(0x63, (
vaddr
)&
i§_wøµî_0x63
);

692 
	`£tupIDT
(0x64, (
vaddr
)&
i§_wøµî_0x64
);

693 
	`£tupIDT
(0x65, (
vaddr
)&
i§_wøµî_0x65
);

694 
	`£tupIDT
(0x66, (
vaddr
)&
i§_wøµî_0x66
);

695 
	`£tupIDT
(0x67, (
vaddr
)&
i§_wøµî_0x67
);

696 
	`£tupIDT
(0x68, (
vaddr
)&
i§_wøµî_0x68
);

697 
	`£tupIDT
(0x69, (
vaddr
)&
i§_wøµî_0x69
);

698 
	`£tupIDT
(0x6a, (
vaddr
)&
i§_wøµî_0x6a
);

699 
	`£tupIDT
(0x6b, (
vaddr
)&
i§_wøµî_0x6b
);

700 
	`£tupIDT
(0x6c, (
vaddr
)&
i§_wøµî_0x6c
);

701 
	`£tupIDT
(0x6d, (
vaddr
)&
i§_wøµî_0x6d
);

702 
	`£tupIDT
(0x6e, (
vaddr
)&
i§_wøµî_0x6e
);

703 
	`£tupIDT
(0x6f, (
vaddr
)&
i§_wøµî_0x6f
);

704 
	`£tupIDT
(0x70, (
vaddr
)&
i§_wøµî_0x70
);

705 
	`£tupIDT
(0x71, (
vaddr
)&
i§_wøµî_0x71
);

706 
	`£tupIDT
(0x72, (
vaddr
)&
i§_wøµî_0x72
);

707 
	`£tupIDT
(0x73, (
vaddr
)&
i§_wøµî_0x73
);

708 
	`£tupIDT
(0x74, (
vaddr
)&
i§_wøµî_0x74
);

709 
	`£tupIDT
(0x75, (
vaddr
)&
i§_wøµî_0x75
);

710 
	`£tupIDT
(0x76, (
vaddr
)&
i§_wøµî_0x76
);

711 
	`£tupIDT
(0x77, (
vaddr
)&
i§_wøµî_0x77
);

712 
	`£tupIDT
(0x78, (
vaddr
)&
i§_wøµî_0x78
);

713 
	`£tupIDT
(0x79, (
vaddr
)&
i§_wøµî_0x79
);

714 
	`£tupIDT
(0x7a, (
vaddr
)&
i§_wøµî_0x7a
);

715 
	`£tupIDT
(0x7b, (
vaddr
)&
i§_wøµî_0x7b
);

716 
	`£tupIDT
(0x7c, (
vaddr
)&
i§_wøµî_0x7c
);

717 
	`£tupIDT
(0x7d, (
vaddr
)&
i§_wøµî_0x7d
);

718 
	`£tupIDT
(0x7e, (
vaddr
)&
i§_wøµî_0x7e
);

719 
	`£tupIDT
(0x7f, (
vaddr
)&
i§_wøµî_0x7f
);

720 
	`£tupIDT
(0x80, (
vaddr
)&
i§_wøµî_0x80
);

721 
	`£tupIDT
(0x81, (
vaddr
)&
i§_wøµî_0x81
);

722 
	`£tupIDT
(0x82, (
vaddr
)&
i§_wøµî_0x82
);

723 
	`£tupIDT
(0x83, (
vaddr
)&
i§_wøµî_0x83
);

724 
	`£tupIDT
(0x84, (
vaddr
)&
i§_wøµî_0x84
);

725 
	`£tupIDT
(0x85, (
vaddr
)&
i§_wøµî_0x85
);

726 
	`£tupIDT
(0x86, (
vaddr
)&
i§_wøµî_0x86
);

727 
	`£tupIDT
(0x87, (
vaddr
)&
i§_wøµî_0x87
);

728 
	`£tupIDT
(0x88, (
vaddr
)&
i§_wøµî_0x88
);

729 
	`£tupIDT
(0x89, (
vaddr
)&
i§_wøµî_0x89
);

730 
	`£tupIDT
(0x8a, (
vaddr
)&
i§_wøµî_0x8a
);

731 
	`£tupIDT
(0x8b, (
vaddr
)&
i§_wøµî_0x8b
);

732 
	`£tupIDT
(0x8c, (
vaddr
)&
i§_wøµî_0x8c
);

733 
	`£tupIDT
(0x8d, (
vaddr
)&
i§_wøµî_0x8d
);

734 
	`£tupIDT
(0x8e, (
vaddr
)&
i§_wøµî_0x8e
);

735 
	`£tupIDT
(0x8f, (
vaddr
)&
i§_wøµî_0x8f
);

736 
	`£tupIDT
(0x90, (
vaddr
)&
i§_wøµî_0x90
);

737 
	`£tupIDT
(0x91, (
vaddr
)&
i§_wøµî_0x91
);

738 
	`£tupIDT
(0x92, (
vaddr
)&
i§_wøµî_0x92
);

739 
	`£tupIDT
(0x93, (
vaddr
)&
i§_wøµî_0x93
);

740 
	`£tupIDT
(0x94, (
vaddr
)&
i§_wøµî_0x94
);

741 
	`£tupIDT
(0x95, (
vaddr
)&
i§_wøµî_0x95
);

742 
	`£tupIDT
(0x96, (
vaddr
)&
i§_wøµî_0x96
);

743 
	`£tupIDT
(0x97, (
vaddr
)&
i§_wøµî_0x97
);

744 
	`£tupIDT
(0x98, (
vaddr
)&
i§_wøµî_0x98
);

745 
	`£tupIDT
(0x99, (
vaddr
)&
i§_wøµî_0x99
);

746 
	`£tupIDT
(0x9a, (
vaddr
)&
i§_wøµî_0x9a
);

747 
	`£tupIDT
(0x9b, (
vaddr
)&
i§_wøµî_0x9b
);

748 
	`£tupIDT
(0x9c, (
vaddr
)&
i§_wøµî_0x9c
);

749 
	`£tupIDT
(0x9d, (
vaddr
)&
i§_wøµî_0x9d
);

750 
	`£tupIDT
(0x9e, (
vaddr
)&
i§_wøµî_0x9e
);

751 
	`£tupIDT
(0x9f, (
vaddr
)&
i§_wøµî_0x9f
);

752 
	`£tupIDT
(0xa0, (
vaddr
)&
i§_wøµî_0xa0
);

753 
	`£tupIDT
(0xa1, (
vaddr
)&
i§_wøµî_0xa1
);

754 
	`£tupIDT
(0xa2, (
vaddr
)&
i§_wøµî_0xa2
);

755 
	`£tupIDT
(0xa3, (
vaddr
)&
i§_wøµî_0xa3
);

756 
	`£tupIDT
(0xa4, (
vaddr
)&
i§_wøµî_0xa4
);

757 
	`£tupIDT
(0xa5, (
vaddr
)&
i§_wøµî_0xa5
);

758 
	`£tupIDT
(0xa6, (
vaddr
)&
i§_wøµî_0xa6
);

759 
	`£tupIDT
(0xa7, (
vaddr
)&
i§_wøµî_0xa7
);

760 
	`£tupIDT
(0xa8, (
vaddr
)&
i§_wøµî_0xa8
);

761 
	`£tupIDT
(0xa9, (
vaddr
)&
i§_wøµî_0xa9
);

762 
	`£tupIDT
(0xØ, (
vaddr
)&
i§_wøµî_0xØ
);

763 
	`£tupIDT
(0xab, (
vaddr
)&
i§_wøµî_0xab
);

764 
	`£tupIDT
(0xac, (
vaddr
)&
i§_wøµî_0xac
);

765 
	`£tupIDT
(0xad, (
vaddr
)&
i§_wøµî_0xad
);

766 
	`£tupIDT
(0x´, (
vaddr
)&
i§_wøµî_0x´
);

767 
	`£tupIDT
(0xaf, (
vaddr
)&
i§_wøµî_0xaf
);

768 
	`£tupIDT
(0xb0, (
vaddr
)&
i§_wøµî_0xb0
);

769 
	`£tupIDT
(0xb1, (
vaddr
)&
i§_wøµî_0xb1
);

770 
	`£tupIDT
(0xb2, (
vaddr
)&
i§_wøµî_0xb2
);

771 
	`£tupIDT
(0xb3, (
vaddr
)&
i§_wøµî_0xb3
);

772 
	`£tupIDT
(0xb4, (
vaddr
)&
i§_wøµî_0xb4
);

773 
	`£tupIDT
(0xb5, (
vaddr
)&
i§_wøµî_0xb5
);

774 
	`£tupIDT
(0xb6, (
vaddr
)&
i§_wøµî_0xb6
);

775 
	`£tupIDT
(0xb7, (
vaddr
)&
i§_wøµî_0xb7
);

776 
	`£tupIDT
(0xb8, (
vaddr
)&
i§_wøµî_0xb8
);

777 
	`£tupIDT
(0xb9, (
vaddr
)&
i§_wøµî_0xb9
);

778 
	`£tupIDT
(0xba, (
vaddr
)&
i§_wøµî_0xba
);

779 
	`£tupIDT
(0xbb, (
vaddr
)&
i§_wøµî_0xbb
);

780 
	`£tupIDT
(0xbc, (
vaddr
)&
i§_wøµî_0xbc
);

781 
	`£tupIDT
(0xbd, (
vaddr
)&
i§_wøµî_0xbd
);

782 
	`£tupIDT
(0xbe, (
vaddr
)&
i§_wøµî_0xbe
);

783 
	`£tupIDT
(0xbf, (
vaddr
)&
i§_wøµî_0xbf
);

784 
	`£tupIDT
(0xc0, (
vaddr
)&
i§_wøµî_0xc0
);

785 
	`£tupIDT
(0xc1, (
vaddr
)&
i§_wøµî_0xc1
);

786 
	`£tupIDT
(0xc2, (
vaddr
)&
i§_wøµî_0xc2
);

787 
	`£tupIDT
(0xc3, (
vaddr
)&
i§_wøµî_0xc3
);

788 
	`£tupIDT
(0xc4, (
vaddr
)&
i§_wøµî_0xc4
);

789 
	`£tupIDT
(0xc5, (
vaddr
)&
i§_wøµî_0xc5
);

790 
	`£tupIDT
(0xc6, (
vaddr
)&
i§_wøµî_0xc6
);

791 
	`£tupIDT
(0xc7, (
vaddr
)&
i§_wøµî_0xc7
);

792 
	`£tupIDT
(0xc8, (
vaddr
)&
i§_wøµî_0xc8
);

793 
	`£tupIDT
(0xc9, (
vaddr
)&
i§_wøµî_0xc9
);

794 
	`£tupIDT
(0xˇ, (
vaddr
)&
i§_wøµî_0xˇ
);

795 
	`£tupIDT
(0xcb, (
vaddr
)&
i§_wøµî_0xcb
);

796 
	`£tupIDT
(0xcc, (
vaddr
)&
i§_wøµî_0xcc
);

797 
	`£tupIDT
(0xcd, (
vaddr
)&
i§_wøµî_0xcd
);

798 
	`£tupIDT
(0x˚, (
vaddr
)&
i§_wøµî_0x˚
);

799 
	`£tupIDT
(0xcf, (
vaddr
)&
i§_wøµî_0xcf
);

800 
	`£tupIDT
(0xd0, (
vaddr
)&
i§_wøµî_0xd0
);

801 
	`£tupIDT
(0xd1, (
vaddr
)&
i§_wøµî_0xd1
);

802 
	`£tupIDT
(0xd2, (
vaddr
)&
i§_wøµî_0xd2
);

803 
	`£tupIDT
(0xd3, (
vaddr
)&
i§_wøµî_0xd3
);

804 
	`£tupIDT
(0xd4, (
vaddr
)&
i§_wøµî_0xd4
);

805 
	`£tupIDT
(0xd5, (
vaddr
)&
i§_wøµî_0xd5
);

806 
	`£tupIDT
(0xd6, (
vaddr
)&
i§_wøµî_0xd6
);

807 
	`£tupIDT
(0xd7, (
vaddr
)&
i§_wøµî_0xd7
);

808 
	`£tupIDT
(0xd8, (
vaddr
)&
i§_wøµî_0xd8
);

809 
	`£tupIDT
(0xd9, (
vaddr
)&
i§_wøµî_0xd9
);

810 
	`£tupIDT
(0xda, (
vaddr
)&
i§_wøµî_0xda
);

811 
	`£tupIDT
(0xdb, (
vaddr
)&
i§_wøµî_0xdb
);

812 
	`£tupIDT
(0xdc, (
vaddr
)&
i§_wøµî_0xdc
);

813 
	`£tupIDT
(0xdd, (
vaddr
)&
i§_wøµî_0xdd
);

814 
	`£tupIDT
(0xde, (
vaddr
)&
i§_wøµî_0xde
);

815 
	`£tupIDT
(0xdf, (
vaddr
)&
i§_wøµî_0xdf
);

816 
	`£tupIDT
(0xe0, (
vaddr
)&
i§_wøµî_0xe0
);

817 
	`£tupIDT
(0xe1, (
vaddr
)&
i§_wøµî_0xe1
);

818 
	`£tupIDT
(0xe2, (
vaddr
)&
i§_wøµî_0xe2
);

819 
	`£tupIDT
(0xe3, (
vaddr
)&
i§_wøµî_0xe3
);

820 
	`£tupIDT
(0xe4, (
vaddr
)&
i§_wøµî_0xe4
);

821 
	`£tupIDT
(0xe5, (
vaddr
)&
i§_wøµî_0xe5
);

822 
	`£tupIDT
(0xe6, (
vaddr
)&
i§_wøµî_0xe6
);

823 
	`£tupIDT
(0xe7, (
vaddr
)&
i§_wøµî_0xe7
);

824 
	`£tupIDT
(0xe8, (
vaddr
)&
i§_wøµî_0xe8
);

825 
	`£tupIDT
(0xe9, (
vaddr
)&
i§_wøµî_0xe9
);

826 
	`£tupIDT
(0xó, (
vaddr
)&
i§_wøµî_0xó
);

827 
	`£tupIDT
(0xeb, (
vaddr
)&
i§_wøµî_0xeb
);

828 
	`£tupIDT
(0xec, (
vaddr
)&
i§_wøµî_0xec
);

829 
	`£tupIDT
(0xed, (
vaddr
)&
i§_wøµî_0xed
);

830 
	`£tupIDT
(0xì, (
vaddr
)&
i§_wøµî_0xì
);

831 
	`£tupIDT
(0xef, (
vaddr
)&
i§_wøµî_0xef
);

832 
	`£tupIDT
(0xf0, (
vaddr
)&
i§_wøµî_0xf0
);

833 
	`£tupIDT
(0xf1, (
vaddr
)&
i§_wøµî_0xf1
);

834 
	`£tupIDT
(0xf2, (
vaddr
)&
i§_wøµî_0xf2
);

835 
	`£tupIDT
(0xf3, (
vaddr
)&
i§_wøµî_0xf3
);

836 
	`£tupIDT
(0xf4, (
vaddr
)&
i§_wøµî_0xf4
);

837 
	`£tupIDT
(0xf5, (
vaddr
)&
i§_wøµî_0xf5
);

838 
	`£tupIDT
(0xf6, (
vaddr
)&
i§_wøµî_0xf6
);

839 
	`£tupIDT
(0xf7, (
vaddr
)&
i§_wøµî_0xf7
);

840 
	`£tupIDT
(0xf8, (
vaddr
)&
i§_wøµî_0xf8
);

841 
	`£tupIDT
(0xf9, (
vaddr
)&
i§_wøµî_0xf9
);

842 
	`£tupIDT
(0xÁ, (
vaddr
)&
i§_wøµî_0xÁ
);

843 
	`£tupIDT
(0xfb, (
vaddr
)&
i§_wøµî_0xfb
);

844 
	`£tupIDT
(0xfc, (
vaddr
)&
i§_wøµî_0xfc
);

845 
	`£tupIDT
(0xfd, (
vaddr
)&
i§_wøµî_0xfd
);

846 
	`£tupIDT
(0x„, (
vaddr
)&
i§_wøµî_0x„
);

847 
	`£tupIDT
(0xff, (
vaddr
)&
i§_wøµî_0xff
);

848 
	}
}

850 
	gãm∂©e
<
boﬁ
 
	gúq
>

851 ˛as†
	cI§E¡ry
 {

852 
mw‹d
* 
	m‰ame
;

853 
c⁄°ex¥
 
mw‹d
* 
	$rù
(Ëc⁄° {  
‰ame
; }

854 
c⁄°ex¥
 
mw‹d
* 
	$cs
(Ëc⁄° {  
‰ame
+1; 
	}
}

855 
c⁄°ex¥
 
mw‹d
* 
	$rÊags
(Ëc⁄° {  
‰ame
+2; 
	}
}

856 
c⁄°ex¥
 
mw‹d
* 
	$r•
(Ëc⁄° {  
‰ame
+3; 
	}
}

857 
c⁄°ex¥
 
mw‹d
* 
	$ss
(Ëc⁄° {  
‰ame
+4; 
	}
}

858 
	gpublic
:

859 
	$I§E¡ry
(
mw‹d
* 
is
Ë: 
	$‰ame
(
is
) {

860 i‡(
úq
Ë
	`M≠≥dAPIC
()->
	`£ndEOI
();

861 i‡(
Pro˚ss‹
::
	`u£rSegmít
(*
	`cs
())Ë
CPU
::
	`Sw≠GS
();

862 
LoˇlPro˚ss‹
::
	`lockFake
();

863 
kî√lS∑˚
.
	`runKî√lInvÆid©i⁄
();

864 
	}
}

865 ~
	$I§E¡ry
() {

866 
LoˇlPro˚ss‹
::
	`u∆ockFake
();

867 i‡(
Pro˚ss‹
::
	`u£rSegmít
(*
	`cs
())) {

868 
	`checkSig«ls
();

869 
LoˇlPro˚ss‹
::
	`£tKî√lSèck
();

870 
CPU
::
	`Sw≠GS
();

872 
	}
}

873 
	$checkSig«ls
() {

874 
Pro˚ss
& 
p
 = 
	`CuºPro˚ss
();

875 i‡(
p
.
	`gëSig«lH™dÀr
()) {

876 
mw‹d
** 
u£rSP
 = (mw‹d**)
	`r•
();

877 *
u£rSP
 -= 1;

878 **
u£rSP
 = *
	`rù
();

879 *
u£rSP
 -= 1;

880 **
u£rSP
 = 0xdeadbeef;

881 *
	`rù
(Ë
p
.
	`gëSig«lH™dÀr
();

883 
	}
}

886 "C" 
	$ex˚±i⁄_h™dÀr_0x00
(
mw‹d
* 
i§Føme
) {

887 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

888 
KERR
::
	`oué
("DIVIDE ERROR @ ", 
	`FmtHex
(*
i§Føme
));

889 
	`ReboŸ
(*
i§Føme
);

890 
	}
}

892 "C" 
	$ex˚±i⁄_h™dÀr_0x01
(
mw‹d
* 
i§Føme
) {

893 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

894 
KERR
::
	`oué
("DEBUG @ ", 
	`FmtHex
(*
i§Føme
));

895 
	`ReboŸ
(*
i§Føme
);

896 
	}
}

898 "C" 
	$ex˚±i⁄_h™dÀr_0x02
(
mw‹d
* 
i§Føme
) {

899 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

900 
KERR
::
	`oué
("NMI @ ", 
	`FmtHex
(*
i§Føme
));

901 
	`ReboŸ
(*
i§Føme
);

902 
	}
}

904 "C" 
	$ex˚±i⁄_h™dÀr_0x03
(
mw‹d
* 
i§Føme
) {

905 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

906 
KERR
::
	`oué
("BREAKPOINT @ ", 
	`FmtHex
(*
i§Føme
));

907 
	`ReboŸ
(*
i§Føme
);

908 
	}
}

910 "C" 
	$ex˚±i⁄_h™dÀr_0x04
(
mw‹d
* 
i§Føme
) {

911 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

912 
KERR
::
	`oué
("OVERFLOW @ ", 
	`FmtHex
(*
i§Føme
));

913 
	`ReboŸ
(*
i§Føme
);

914 
	}
}

916 "C" 
	$ex˚±i⁄_h™dÀr_0x05
(
mw‹d
* 
i§Føme
) {

917 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

918 
KERR
::
	`oué
("BOUND RANGE EXCEEDED @ ", 
	`FmtHex
(*
i§Føme
));

919 
	`ReboŸ
(*
i§Føme
);

920 
	}
}

922 "C" 
	$ex˚±i⁄_h™dÀr_0x06
(
mw‹d
* 
i§Føme
) {

923 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

924 
KERR
::
	`oué
("INVALID OPCODE @ ", 
	`FmtHex
(*
i§Føme
));

925 
	`ReboŸ
(*
i§Føme
);

926 
	}
}

928 "C" 
	$ex˚±i⁄_h™dÀr_0x07
(
mw‹d
* 
i§Føme
) {

929 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

930 
KERR
::
	`oué
("DEVICE NOT AVAILABLE @ ", 
	`FmtHex
(*
i§Føme
));

931 
	`ReboŸ
(*
i§Føme
);

932 
	}
}

934 "C" 
	$ex˚±i⁄_h™dÀr_îrcode_0x08
(
mw‹d
* 
i§Føme
, mw‹d 
ec
) {

935 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

936 
KERR
::
	`oué
("DOUBLE FAULT @ ", 
	`FmtHex
(*
i§Føme
), " /Éº‹: ", FmtHex(
ec
));

937 
	`ReboŸ
(*
i§Føme
);

938 
	}
}

940 "C" 
	$ex˚±i⁄_h™dÀr_0x09
(
mw‹d
* 
i§Føme
) {

941 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

942 
KERR
::
	`oué
("COPROCESSOR SEGMENT OVERRUN @ ", 
	`FmtHex
(*
i§Føme
));

943 
	`ReboŸ
(*
i§Føme
);

944 
	}
}

946 "C" 
	$ex˚±i⁄_h™dÀr_îrcode_0x0a
(
mw‹d
* 
i§Føme
, mw‹d 
ec
) {

947 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

948 
KERR
::
	`oué
("INVALID TSS @ ", 
	`FmtHex
(*
i§Føme
), " /Éº‹: ", FmtHex(
ec
));

949 
	`ReboŸ
(*
i§Føme
);

950 
	}
}

952 "C" 
	$ex˚±i⁄_h™dÀr_îrcode_0x0b
(
mw‹d
* 
i§Føme
, mw‹d 
ec
) {

953 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

954 
KERR
::
	`oué
("SEGMENT NOT PRESENT @ ", 
	`FmtHex
(*
i§Føme
), " /Éº‹: ", FmtHex(
ec
));

955 
	`ReboŸ
(*
i§Føme
);

956 
	}
}

958 "C" 
	$ex˚±i⁄_h™dÀr_îrcode_0x0c
(
mw‹d
* 
i§Føme
, mw‹d 
ec
) {

959 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

960 
KERR
::
	`oué
("STACK FAULT @ ", 
	`FmtHex
(*
i§Føme
), " /Éº‹: ", FmtHex(
ec
));

961 
	`ReboŸ
(*
i§Føme
);

962 
	}
}

964 "C" 
	$ex˚±i⁄_h™dÀr_îrcode_0x0d
(
mw‹d
* 
i§Føme
, mw‹d 
ec
) {

965 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

966 
KERR
::
	`oué
("GENERAL PROTECTION FAULT @ ", 
	`FmtHex
(*
i§Føme
), " /Éº‹: ", FmtHex(
ec
));

967 
	`ReboŸ
(*
i§Føme
);

968 
	}
}

970 "C" 
	$ex˚±i⁄_h™dÀr_îrcode_0x0e
(
mw‹d
* 
i§Føme
, mw‹d 
ec
) {

971 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

972 
vaddr
 
da
 = 
CPU
::
	`ªadCR2
();

973 i‡(
Pagög
::
	`Áu…
(
da
, *
LoˇlPro˚ss‹
::
	`gëFømeM™agî
())) ;

974 
KERR
::
	`oué
("PAGE FAULT @ ", 
	`FmtHex
(*
i§Føme
), " / d©a: ", FmtHex(
da
), " / fœgs:", 
Pagög
::
	`PageFau…Fœgs
(
ec
));

975 
	`ReboŸ
(*
i§Føme
);

976 
	}
}

978 "C" 
	$ex˚±i⁄_h™dÀr_0x10
(
mw‹d
* 
i§Føme
) {

979 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

980 
KERR
::
	`oué
("FPU ERROR @ ", 
	`FmtHex
(*
i§Føme
));

981 
	`ReboŸ
(*
i§Føme
);

982 
	}
}

984 "C" 
	$ex˚±i⁄_h™dÀr_îrcode_0x11
(
mw‹d
* 
i§Føme
, mw‹d 
ec
) {

985 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

986 
KERR
::
	`oué
("ALIGNMENT CHECK @ ", 
	`FmtHex
(*
i§Føme
), " /Éº‹: ", FmtHex(
ec
));

987 
	`ReboŸ
(*
i§Føme
);

988 
	}
}

990 "C" 
	$ex˚±i⁄_h™dÀr_0x12
(
mw‹d
* 
i§Føme
) {

991 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

992 
KERR
::
	`oué
("MACHINE CHECK @ ", 
	`FmtHex
(*
i§Føme
));

993 
	`ReboŸ
(*
i§Føme
);

994 
	}
}

996 "C" 
	$ex˚±i⁄_h™dÀr_0x13
(
mw‹d
* 
i§Føme
) {

997 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

998 
KERR
::
	`oué
("SIMD FP @ ", 
	`FmtHex
(*
i§Føme
));

999 
	`ReboŸ
(*
i§Føme
);

1000 
	}
}

1002 "C" 
	$ex˚±i⁄_h™dÀr_0x14
(
mw‹d
* 
i§Føme
) {

1003 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

1004 
KERR
::
	`oué
("VIRTUALIZATION @ ", 
	`FmtHex
(*
i§Føme
));

1005 
	`ReboŸ
(*
i§Føme
);

1006 
	}
}

1008 "C" 
	$ex˚±i⁄_h™dÀr_undeföed
(
mw‹d
* 
i§Føme
, mw‹d 
vec
) {

1009 
I§E¡ry
<
Ál£
> 
	`õ
(
i§Føme
);

1010 
KERR
::
	`oué
("UNDEFINED EXCEPTION ", 
	`FmtHex
(
vec
), " @ ", FmtHex(*
i§Føme
));

1011 
	`ReboŸ
(*
i§Føme
);

1012 
	}
}

1014 "C" 
	$úq_h™dÀr_async
(
mw‹d
* 
i§Føme
, mw‹d 
idx
) {

1015 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1016 
úqMask
.
£t
<
åue
>(
idx
);

1017 #i‡
TESTING_REPORT_INTERRUPTS


1018 
KERR
::
	`out1
(" AI:", 
	`FmtHex
(
idx
));

1020 
	}
}

1022 "C" 
	$úq_h™dÀr_0xe0
(
mw‹d
* 
i§Føme
) {

1023 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1024 
LoˇlPro˚ss‹
::
	`gëScheduÀr
()->
	`¥ìm±
();

1025 
	}
}

1027 "C" 
	$úq_h™dÀr_0xed
(
mw‹d
* 
i§Føme
) {

1028 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1029 
LoˇlPro˚ss‹
::
	`gëScheduÀr
()->
	`¥ìm±
();

1030 
	}
}

1032 "C" 
	$úq_h™dÀr_0xì
(
mw‹d
* 
i§Føme
) {

1033 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1034 i‡(
tùiH™dÀr
) {

1035 
	`tùiH™dÀr
();

1037 
KERR
::
	`oué
("NO HANDLER FOR TEST IPI @ ", 
	`FmtHex
(*
i§Føme
));

1038 
	`ReboŸ
();

1040 
	}
}

1042 "C" 
	$úq_h™dÀr_0xef
(
mw‹d
* 
i§Føme
) {

1043 ;;Ë
CPU
::
	`HÆt
();

1044 
	}
}

1046 "C" 
	$úq_h™dÀr_0xf0
(
mw‹d
* 
i§Føme
) {

1047 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1048 
Clock
::
	`tickî
();

1049 #i‡
TESTING_REPORT_INTERRUPTS


1050 
KERR
::
	`out1
(" PIT");

1052 
	}
}

1054 "C" 
	$úq_h™dÀr_0xf7
(
mw‹d
* 
i§Føme
) {

1055 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1056 
KERR
::
	`out1
("Öarallel");

1057 
	}
}

1059 "C" 
	$úq_h™dÀr_0xf8
(
mw‹d
* 
i§Føme
) {

1060 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1061 
πc
.
	`°©icI¡îru±H™dÀr
();

1062 #i‡
TESTING_REPORT_INTERRUPTS


1063 
KERR
::
	`out1
(" RTC");

1065 i‡(!
úqMask
.
	`em±y
()Ë
asyncIrqSem
.
	`V
();

1066 
Timeout
::
	`checkExpúy
(
Clock
::
	`now
());

1067 
Machöe
::
	`ºPªem±IPI
(
πc
.
	`tick
());

1068 
	}
}

1070 "C" 
	$úq_h™dÀr_0xf9
(
mw‹d
* 
i§Føme
) {

1071 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1072 
KERR
::
	`out1
(" IRQ-F9");

1073 
	}
}

1075 "C" 
	$úq_h™dÀr_0xfc
(
mw‹d
* 
i§Føme
) {

1076 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1077 
KERR
::
	`out1
(" mouse");

1078 
	}
}

1080 "C" 
	$úq_h™dÀr_0xff
(
mw‹d
* 
i§Føme
) {

1081 
I§E¡ry
<
åue
> 
	`õ
(
i§Føme
);

1082 
KERR
::
	`out1
(" IRQ-FF");

1083 
	}
}

1085 
	$Bªakpoöt2
(
vaddr
 
ü
) {

1086 
asm
 volatile("nop");

1087 
	}
}

1089 
	$Sãµoöt
() {

1090 
CPU
::
	`ö8
(0x64) & 0x01) CPU::in8(0x60);

1091 !(
CPU
::
	`ö8
(0x64) & 0x01));

1092 
	}
}

1094 
	$ReboŸ
(
vaddr
 
ü
) {

1095 
asm
 volatile("cli");

1096 
	`Bªakpoöt
(
ü
);

1098 
mw‹d
 
i
 = 0; i < 
Machöe
::
	`gëPro˚ss‹Cou¡
(); i++) {

1099 i‡(
i
 !
LoˇlPro˚ss‹
::
	`gëIndex
()Ë
Machöe
::
	`£ndIPI
(i, 
APIC
::
St›IPI
);

1101 
mw‹d
 
rbp
;

1102 
asm
 vﬁ©ûe("mov %%rbp, %0" : "Ù"(
rbp
));

1103 
KOUT
::
	`oué
();

1104 
i
 = 0; i < 20 && 
rbp
 != 0; i += 1) {

1105 
KOUT
::
	`oué
("XBT: ", 
	`FmtHex
(*(
mw‹d
*)(
rbp
 + (mword))));

1106 
rbp
 = *(
mw‹d
*)(rbp);

1108 
KOUT
::
	`oué
();

1110 
	`Sãµoöt
();

1111 
	`lﬂdIDT
(0,0);

1112 
asm
 volatile("int $0xff");

1113 
	`uƒóchabÀ
();

1114 
	}
}

1116 "C" 
	$KosReboŸ
(Ë{ 
	`ReboŸ
(); 
	}
}

	@src/machine/Machine.h

17 #i‚de‡
_Machöe_h_


18 
	#_Machöe_h_
 1

	)

20 
	~"gíîic/basics.h
"

21 
	~"devi˚s/RTC.h
"

23 
˛ass
 
	gScheduÀr
;

24 
˛ass
 
	gThªad
;

26 ˛as†
	cMachöe
 : 
public
 
NoObje˘
 {

27 
‰õnd
 
öôGdb
(
mw‹d
);

29 
mw‹d
 
	m¥o˚ss‹Cou¡
;

31 
	$£tupIDT
(
uöt32_t
, 
∑ddr
, uöt32_à0Ë
	`__£˘i⁄
(".boot.text");

32 
	$£tupIDTabÀ
(Ë
	`__£˘i⁄
(".boot.text");

34 
	`m≠Irq
(
mw‹d
 
úq
, mw‹d 
ve˘‹
);

35 
	`asyncIrqLo›
();

37 
	$öôAP2
(Ë
	`__£˘i⁄
(".boot.text");

38 
	$öôBSP2
(Ë
	`__£˘i⁄
(".boot.text");

39 
	`boŸCÀ™up
();

41 
public
:

43 
RTC
 
	`gëRTC
();

45 
	$öôAP
(
mw‹d
 
idx
Ë
	`__£˘i⁄
(".boot.text");

46 
	$öôBSP
(
mw‹d
 
mag
, 
vaddr
 
mb
, mw‹d 
idx
Ë
	`__£˘i⁄
(".boot.text");

47 
	`boŸMaö
();

49 
mw‹d
 
	$gëPro˚ss‹Cou¡
(Ë{  
¥o˚ss‹Cou¡
; }

50 
	`£tAfföôy
(
Thªad
& 
t
, 
mw‹d
 
idx
);

51 
	`£ndIPI
(
mw‹d
 
idx
, 
uöt8_t
 
vec
);

52 
	`£ndWakeIPI
(
ScheduÀr
* 
scheduÀr
);

53 
	`ºPªem±IPI
(
mw‹d
 
tick
);

55 
	`ªgi°îIrqSync
(
mw‹d
 
úq
, mw‹d 
vec
);

56 
	`ªgi°îIrqAsync
(
mw‹d
 
úq
, 
funcvoid1_t
 
h™dÀr
, 
±r_t
 
˘x
);

57 
	`dîegi°îIrqAsync
(
mw‹d
 
úq
, 
funcvoid1_t
 
h™dÀr
);

58 
	}
};

60 
	$Bªakpoöt2
(
vaddr
 
ü
 = 0Ë
__nölöe
;

62 
ölöe
 
	$Bªakpoöt
(
vaddr
 
ü
 = 0) {

63 
asm
 volatile( "xchg %%bx, %%bx" ::: "memory" );

64 
	`Bªakpoöt2
(
ü
);

65 
	}
}

	@src/machine/Memory.h

17 #i‚de‡
_Mem‹y_h_


18 
	#_Mem‹y_h_
 1

	)

20 
	~"gíîic/bôm™ù.h
"

21 
	~"machöe/asmsh¨e.h
"

34 
	#__ˇlig√d
 
	`__©åibuã__
((
	`__Æig√d__
(64)))

	)

36 c⁄° 
mw‹d
 
	gt›addr
 = 
limô
<mword>();

38 c⁄° 
size_t
 
	g∑geoff£tbôs
 = 12;

39 c⁄° 
size_t
 
	g∑gëabÀbôs
 = 9;

40 c⁄° 
size_t
 
	g∑gëabÀíåõs
 = 1 << 
∑gëabÀbôs
;

41 c⁄° 
size_t
 
	g∑gñevñs
 = 4;

42 c⁄° 
size_t
 
	g∑gëabÀ∂
 = 1;

43 c⁄° 
size_t
 
	g‰amebôs
 = 
∑geoff£tbôs
 + 40;

44 c⁄° 
size_t
 
	g∑gebôs
 = 
∑geoff£tbôs
 + 
∑gëabÀbôs
 * 
∑gñevñs
;

46 
	gãm∂©e
<
	gN
>

47 
c⁄°ex¥
 
size_t
 
	$∑gesizebôs
() {

48 
	`°©ic_as£π
–
N
 <
∑gñevñs
 + 1, "pageÜevelÅemplate violation" );

49  
∑geoff£tbôs
 + (
N
-1Ë* 
∑gëabÀbôs
;

50 
	}
}

52 
	gãm∂©e
<
	gN
>

53 
c⁄°ex¥
 
size_t
 
	$∑gesize
() {

54 
	`°©ic_as£π
–
N
 <
∑gñevñs
, "pageÜevelÅemplate violation" );

55  
pow2
<
size_t
>(
∑gesizebôs
<
N
>());

56 
	}
}

58 
	gãm∂©e
<
	gN
>

59 
c⁄°ex¥
 
size_t
 
	$∑geoff£t
(
mw‹d
 
addr
) {

60 
	`°©ic_as£π
–
N
 <
∑gñevñs
, "pageÜevelÅemplate violation" );

61  
addr
 & 
bômask
<
mw‹d
>(
∑gesizebôs
<
N
>());

62 
	}
}

70 c⁄° 
mw‹d
 
	gu£πödex
 = 
∑gëabÀíåõs
 / 2;

71 c⁄° 
mw‹d
 
	gª˝tödex
 = 
∑gëabÀíåõs
 / 2;

72 c⁄° 
mw‹d
 
	gkînbödex
 = 
∑gëabÀíåõs
 - 4;

73 c⁄° 
mw‹d
 
	gkî¡ödex
 = 
∑gëabÀíåõs
 - 1;

74 c⁄° 
mw‹d
 
	gdev±ödex
 = 
∑gëabÀíåõs
 - 1;

75 c⁄° 
vaddr
 
	gkî√lBa£
 = vaddr(
KERNBASE
);

78 c⁄° 
mw‹d
 
	gˇn⁄Te°
 = 
pow2
<mw‹d>(
∑gebôs
 - 1);

79 c⁄° 
mw‹d
 
	gˇn⁄Pªfix
 = ~
bômask
<mw‹d>(
∑gebôs
);

80 c⁄° 
vaddr
 
	gu£rbŸ
 = 
∑gesize
<2>();

81 c⁄° 
vaddr
 
	gu£π›
 = (
∑gesize
<
∑gñevñs
>(Ë* 
u£πödex
);

82 c⁄° 
vaddr
 
	gkî√lbŸ
 = (
∑gesize
<
∑gñevñs
>(Ë* 
kînbödex
Ë| 
ˇn⁄Pªfix
;

83 c⁄° 
vaddr
 
	gkî√…›
 = (
∑gesize
<
∑gñevñs
>(Ë* 
kî¡ödex
Ë| 
ˇn⁄Pªfix
;

84 c⁄° 
vaddr
 
	gdevi˚Addr
 = (
∑gesize
<
∑gñevñs
>(Ë* 
dev±ödex
Ë| 
ˇn⁄Pªfix
;

85 
°©ic_as£π
(
devi˚Addr
 >
kî√…›
, "deviceAddr < kerneltop");

88 c⁄° 
vaddr
 
	g≠icAddr
 = 
devi˚Addr
 + 0 * 
∑gesize
<1>();

89 c⁄° 
vaddr
 
	gioApicAddr
 = 
devi˚Addr
 + 1 * 
∑gesize
<1>();

90 c⁄° 
vaddr
 
	gvideoAddr
 = 
devi˚Addr
 + 2 * 
∑gesize
<1>();

91 c⁄° 
vaddr
 
	g˛⁄eAddr
 = 
devi˚Addr
 + 3 * 
∑gesize
<1>();

92 c⁄° 
vaddr
 
	gdevi˚End
 = 
devi˚Addr
 + 4 * 
∑gesize
<1>();

93 
°©ic_as£π
(
kî√lBa£
 >
devi˚End
, "KERNBASE < deviceEnd");

96 c⁄° 
size_t
 
	gkî√Õl
 = 2;

97 c⁄° 
size_t
 
	gkî√Õs
 = 
∑gesize
<
kî√Õl
>();

98 c⁄° 
size_t
 
	gboŸHópSize
 = 16 * 
∑gesize
<1>();

99 c⁄° 
size_t
 
	gboŸHópM≠
 = 
kî√…›
 - 
∑gesize
<3>();

100 c⁄° 
size_t
 
	gboŸSizePT
 = (4 + 
divup
(
mw‹d
(
MAXKERNSIZE
), 
∑gesize
<
kî√Õl
+1>())Ë* 
	g∑gesize
<1>();

103 c⁄° 
size_t
 
	g°ack∂
 = 1;

104 c⁄° 
size_t
 
	gmöimumSèck
 = 1 * 
∑gesize
<
°ack∂
>();

105 c⁄° 
size_t
 
	gdeÁu…Sèck
 = 2 * 
∑gesize
<
°ack∂
>();

106 c⁄° 
size_t
 
	gdeÁu…U£rSèck
 = 2 * 
∑gesize
<
°ack∂
>();

107 c⁄° 
size_t
 
	g°ackGu¨dPage
 = 1 * 
∑gesize
<
°ack∂
>();

	@src/machine/Paging.cc

17 
	~"machöe/Pagög.h
"

19 c⁄° 
	gBôSåög
<
	guöt64_t
, 0, 1> 
	gPagög
::
PageFau…Fœgs
::
P
;

20 c⁄° 
	gBôSåög
<
	guöt64_t
, 1, 1> 
	gPagög
::
PageFau…Fœgs
::
WR
;

21 c⁄° 
	gBôSåög
<
	guöt64_t
, 2, 1> 
	gPagög
::
PageFau…Fœgs
::
US
;

22 c⁄° 
	gBôSåög
<
	guöt64_t
, 3, 1> 
	gPagög
::
PageFau…Fœgs
::
RSVD
;

23 c⁄° 
	gBôSåög
<
	guöt64_t
, 4, 1> 
	gPagög
::
PageFau…Fœgs
::
ID
;

25 
	go°ªam
& 
	g›î©‹
<<(o°ªam& 
	gos
, c⁄° 
	gPagög
::
PageFau…Fœgs
& 
f
) {

26 i‡(
f
.
t
 & 
Pagög
::
PageFau…Fœgs
::
P
()Ë
os
 << " P";

27 i‡(
	gf
.
	gt
 & 
	gPagög
::
PageFau…Fœgs
::
WR
()Ë
os
 << " W/R";

28 i‡(
	gf
.
	gt
 & 
	gPagög
::
PageFau…Fœgs
::
US
()Ë
os
 << " U/S";

29 i‡(
	gf
.
	gt
 & 
	gPagög
::
PageFau…Fœgs
::
RSVD
()Ë
os
 << " RSVD";

30 i‡(
	gf
.
	gt
 & 
	gPagög
::
PageFau…Fœgs
::
ID
()Ë
os
 << " I/D";

31  
	gos
;

34 c⁄° 
	gBôSåög
<
	guöt64_t
, 0, 1> 
	gPagög
::
P
;

35 c⁄° 
	gBôSåög
<
	guöt64_t
, 1, 1> 
	gPagög
::
RW
;

36 c⁄° 
	gBôSåög
<
	guöt64_t
, 2, 1> 
	gPagög
::
US
;

37 c⁄° 
	gBôSåög
<
	guöt64_t
, 3, 1> 
	gPagög
::
PWT
;

38 c⁄° 
	gBôSåög
<
	guöt64_t
, 4, 1> 
	gPagög
::
PCD
;

39 c⁄° 
	gBôSåög
<
	guöt64_t
, 5, 1> 
	gPagög
::
A
;

40 c⁄° 
	gBôSåög
<
	guöt64_t
, 6, 1> 
	gPagög
::
D
;

41 c⁄° 
	gBôSåög
<
	guöt64_t
, 7, 1> 
	gPagög
::
PS
;

42 c⁄° 
	gBôSåög
<
	guöt64_t
, 8, 1> 
	gPagög
::
G
;

43 c⁄° 
	gBôSåög
<
	guöt64_t
,12,40> 
	gPagög
::
ADDR
;

44 c⁄° 
	gBôSåög
<
	guöt64_t
,63, 1> 
	gPagög
::
XD
;

46 
	go°ªam
& 
	g›î©‹
<<(o°ªam& 
	gos
, c⁄° 
	gPagög
::
FmtPE
& 
f
) {

47 i‡(
f
.
t
 & 
Pagög
::
P
()Ë
os
 << " P";

48 i‡(
	gf
.
	gt
 & 
	gPagög
::
RW
()Ë
os
 << " RW";

49 i‡(
	gf
.
	gt
 & 
	gPagög
::
US
()Ë
os
 << " US";

50 i‡(
	gf
.
	gt
 & 
	gPagög
::
PWT
()Ë
os
 << " PWT";

51 i‡(
	gf
.
	gt
 & 
	gPagög
::
PCD
()Ë
os
 << " PCD";

52 i‡(
	gf
.
	gt
 & 
	gPagög
::
A
()Ë
os
 << " A";

53 i‡(
	gf
.
	gt
 & 
	gPagög
::
D
()Ë
os
 << " D";

54 i‡(
	gf
.
	gt
 & 
	gPagög
::
PS
()Ë
os
 << " PS";

55 i‡(
	gf
.
	gt
 & 
	gPagög
::
G
()Ë
os
 << " G";

56 i‡(
	gf
.
	gt
 & 
	gPagög
::
ADDR
()Ë
os
 << " ADDR:" << 
FmtHex
(
f
.
t
 & 
Pagög
::ADDR());

57 i‡(
	gf
.
	gt
 & 
	gPagög
::
XD
()Ë
os
 << " XD";

58  
	gos
;

	@src/machine/Paging.h

17 #i‚de‡
_Pagög_h_


18 
	#_Pagög_h_
 1

	)

20 
	~"kî√l/FømeM™agî.h
"

21 
	~"kî√l/Ouçut.h
"

22 
	~"machöe/asmsh¨e.h
"

23 
	~"machöe/CPU.h
"

25 
	~<c°rög
>

37 ˛as†
	cPagög
 {

38 
‰õnd
 
˛ass
 
	mMachöe
;

40 
	mpublic
:

41 
uöt64_t
 
	tPageE¡ry
;

42 
	sPageFau…Fœgs
 {

43 
uöt64_t
 
	mt
;

44 c⁄° 
	mBôSåög
<
	muöt64_t
, 0, 1> 
	mP
;

45 c⁄° 
	mBôSåög
<
	muöt64_t
, 1, 1> 
	mWR
;

46 c⁄° 
	mBôSåög
<
	muöt64_t
, 2, 1> 
	mUS
;

47 c⁄° 
	mBôSåög
<
	muöt64_t
, 3, 1> 
	mRSVD
;

48 c⁄° 
	mBôSåög
<
	muöt64_t
, 4, 1> 
	mID
;

49 
PageFau…Fœgs
–
uöt64_t
 
t
 ) :Å(t) {}

51 
‰õnd
 
	go°ªam
& 
	g›î©‹
<<(o°ªam&, c⁄° 
	gPageFau…Fœgs
&);

53 
	g¥iv©e
:

54 c⁄° 
BôSåög
<
uöt64_t
, 0, 1> 
	gP
;

55 c⁄° 
	gBôSåög
<
	guöt64_t
, 1, 1> 
	gRW
;

56 c⁄° 
	gBôSåög
<
	guöt64_t
, 2, 1> 
	gUS
;

57 c⁄° 
	gBôSåög
<
	guöt64_t
, 3, 1> 
	gPWT
;

58 c⁄° 
	gBôSåög
<
	guöt64_t
, 4, 1> 
	gPCD
;

59 c⁄° 
	gBôSåög
<
	guöt64_t
, 5, 1> 
	gA
;

60 c⁄° 
	gBôSåög
<
	guöt64_t
, 6, 1> 
	gD
;

61 c⁄° 
	gBôSåög
<
	guöt64_t
, 7, 1> 
	gPS
;

62 c⁄° 
	gBôSåög
<
	guöt64_t
, 8, 1> 
	gG
;

63 c⁄° 
	gBôSåög
<
	guöt64_t
,12,40> 
	gADDR
;

64 c⁄° 
	gBôSåög
<
	guöt64_t
,63, 1> 
	gXD
;

66 
	g¥Ÿe˘ed
:

67 
	ePageTy≥
 {

68 
Code
 = 0,

69 
	gU£r
 = 
US
(),

70 
	gRoD©a
 = 
XD
(),

71 
	gD©a
 = 
XD
(Ë| 
RW
(),

72 
	gKî√lD©a
 = 
XD
(Ë| 
RW
(Ë| 
G
(),

73 
	gMM≠IO
 = 
XD
(Ë| 
RW
(Ë| 
PWT
(Ë| 
PCD
(),

74 
	gKî√lPT
 = 
RW
(Ë| 
P
(),

75 
	gPageTabÀ
 = 
RW
(Ë| 
P
(Ë| 
US
(),

78 
	ePageSètus
 {

79 
	gAvaûabÀ
 = 0x01,

80 
	gUnm≠≥d
 = 0x02,

81 
	gRe£rved
 = 0x04,

82 
	gM≠≥d
 = 0x08

85 
	sFmtPE
 {

86 
PageE¡ry
 
	gt
;

87 
FmtPE
(
PageE¡ry
 
t
) :Å(t) {}

89 
‰õnd
 
	go°ªam
& 
	g›î©‹
<<(o°ªam&, c⁄° 
	gFmtPE
&);

91 
	g¥iv©e
:

92 
ãm∂©e
<
N
> 
uöt64_t
 
	$PAT
(
PageE¡ry
 
c
) {

93 
	`°©ic_as£π
–
N
 >1 && N < 
∑gñevñs
, "illegalÅemplateÖarameter" );

94 i‡(
N
 =1Ë 
PS
.
	`gë
(
c
);

95  
ADDR
.
	`gë
(
c
Ë& 
∑gesize
<1>();

96 
	}
}

100 
	gãm∂©e
<
	gN
> 
c⁄°ex¥
 
mw‹d
 
	$±¥efix
() {

101 
	`°©ic_as£π
–
N
 > 0 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

102  (
ª˝tödex
 << 
∑gesizebôs
<1+
∑gñevñs
-
N
>()Ë| 
±¥efix
<N-1>();

103 
	}
}

106 
c⁄°ex¥
 
mw‹d
 
	$±íd
() {

107  
ˇn⁄Pªfix
 | ((
ª˝tödex
 + 1Ë<< 
∑gesizebôs
<
∑gñevñs
>());

108 
	}
}

111 
	gãm∂©e
 <
	gN
> 
c⁄°ex¥
 
PageE¡ry
* 
	$gëTabÀ
–
vaddr
 
vma
 ) {

112 
	`°©ic_as£π
–
N
 > 0 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

113  (
PageE¡ry
*)(
±¥efix
<
N
>() |

114 (((
vma
 & 
bômask
<
PageE¡ry
>(
∑gebôs
)Ë>> 
∑gesizebôs
<
N
+1>()) <<Öagesizebits<1>()));

115 
	}
}

118 
	gãm∂©e
 <
	gN
> 
c⁄°ex¥
 
PageE¡ry
* 
	$gëE¡ry
–
vaddr
 
vma
 ) {

119 
	`°©ic_as£π
–
N
 > 0 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

120  (
PageE¡ry
*)(
±¥efix
<
N
>() |

121 (((
vma
 & 
bômask
<
PageE¡ry
>(
∑gebôs
)Ë>> 
∑gesizebôs
<
N
>()) << 3));

122 
	}
}

125 
	gãm∂©e
<
	gN
> 
c⁄°ex¥
 
mw‹d
 
	$gëIndex
(
mw‹d
 
x
) {

126  (
x
 & 
bômask
<
mw‹d
>(
∑gesizebôs
<
N
+1>())) >>Öagesizebits<N>();

127 
	}
}

129 
	gãm∂©e
<
	gN
> 
c⁄°ex¥
 
PageE¡ry
 
	$∑geBô
() {

130 
	`°©ic_as£π
–
N
 > 0 && N < 
∑gñevñs
, "pageÜevelÅemplate violation" );

131  
N
 > 1 ? 
	`PS
() : 0;

132 
	}
}

134 
	gãm∂©e
<
	gN
> 
c⁄°ex¥
 
boﬁ
 
	$isPage
(c⁄° 
PageE¡ry
& 
≥
) {

135 
	`°©ic_as£π
–
N
 > 0 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

136  (
N
 < 
∑gñevñs
Ë&& (N =1 || 
PS
.
	`gë
(
≥
));

137 
	}
}

139 
	$£tPE
(
PageE¡ry
& 
≥
, c⁄° PageE¡ry& 
√w≥
Ë{Öê√w≥; 
	}
}

142 
ölöe
 
∑ddr
 
boŸ°øp
(
vaddr
 
kî√lEnd
);

143 
ölöe
 
boŸ°øp2
(
FømeM™agî
& 
fm
);

145 
	gãm∂©e
 <
	gN
>

146 
ölöe
 
boﬁ
 
	$m≠TabÀ
–
vaddr
 
vma
, 
FømeM™agî
& 
fm
 ) 
__u£ªsu…
;

148 
¥Ÿe˘ed
:

149 c⁄° 
∑ddr
 
gu¨dPage
 = 
t›addr
 & 
	`ADDR
();

150 c⁄° 
∑ddr
 
œzyPage
 = 
gu¨dPage
 - 
∑gesize
<1>();

152 
ãm∂©e
 <
N
, 
boﬁ
 
¥e£¡
>

153 
ölöe
 
boﬁ
 
	$m≠
–
vaddr
 
vma
, 
∑ddr
 
pma
, 
uöt64_t
 
ty≥
, 
FømeM™agî
& 
fm
 ) 
__u£ªsu…
;

155 
ãm∂©e
 <
N
, 
boﬁ
 
async
=
Ál£
>

156 
PageE¡ry
* 
	$unm≠1
–
vaddr
 
vma
 ) {

157 
	`°©ic_as£π
–
N
 >1 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

158 
	`KASSERT1
(
	`Æig√d
(
vma
, 
∑gesize
<
N
>()), 
	`FmtHex
(vma));

159 
PageE¡ry
* 
≥
 = 
gëE¡ry
<
N
>(
vma
);

160 
	`KASSERT1
(
isPage
<
N
>(*
≥
), 
	`FmtHex
(
vma
));

161 i‡(
P
.
	`gë
(*
≥
)) {

162 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög::unm≠1<", 
N
, ">: ", 
	`FmtHex
(
vma
), '/', FmtHex(
∑gesize
<N>()), " -> ", 
	`FmtPE
(*
≥
));

163 i‡(
async
Ë
	`£tPE
–*
≥
, *≥ & ~
	`P
() );

164  
≥
;

166 
	`KASSERT1
(((*
≥
 & 
	`ADDR
()Ë=
œzyPage
Ë|| ((*≥ & ADDR()Ë=
gu¨dPage
), 
	`FmtHex
(
vma
));

167 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög::unm≠1<", 
N
, ">: ", 
	`FmtHex
(
vma
), '/', FmtHex(
∑gesize
<N>()), " -> 0");

168 
	`£tPE
–*
≥
, 0 );

169  
nuŒ±r
;

171 
	}
}

173 
∑ddr
 
	$unm≠2
(
PageE¡ry
* 
≥
) {

174 
∑ddr
 
pma
 = *
≥
 & 
	`ADDR
();

175 
	`£tPE
–*
≥
, 0 );

176  
pma
;

177 
	}
}

179 
	gãm∂©e
 <
	gN
>

180 
∑ddr
 
	$unm≠
–
vaddr
 
vma
 ) {

181 
PageE¡ry
* 
≥
 = 
unm≠1
<
N
,
Ál£
>(
vma
);

182  
	`unm≠2
(
≥
);

183 
	}
}

185 
	gãm∂©e
 <
	gN
=
∑gñevñs
>

186 
size_t
 
	$ã°
–
vaddr
 
vma
, 
uöt64_t
 
°©us
 ) {

187 
	`°©ic_as£π
–
N
 > 0 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

188 
PageE¡ry
* 
≥
 = 
gëE¡ry
<
N
>(
vma
);

189 
PageSètus
 
s
;

190 i‡(
P
.
	`gë
(*
≥
)) {

191 i‡(
isPage
<
N
>(*
≥
)Ë
s
 = 
M≠≥d
;

192  
ã°
<
N
-1>(
vma
, 
°©us
);

193 } *
≥
 & 
	`ADDR
()) {

194 
œzyPage
:

195 
gu¨dPage
: 
s
 = 
Re£rved
; ;

196 0: 
s
 = 
AvaûabÀ
; ;

197 : 
s
 = 
Unm≠≥d
; ;

199  (
s
 & 
°©us
Ë? 
∑gesize
<
N
>() : 0;

200 
	}
}

202 
size_t
 
	$ã°‰ì
–
vaddr
 
vma
 ) {  
	`ã°
(vma, 
AvaûabÀ
|
Unm≠≥d
); 
	}
}

203 
size_t
 
	$ã°u£d
–
vaddr
 
vma
 ) {  
	`ã°
(vma, 
Re£rved
|
M≠≥d
); 
	}
}

205 
	gãm∂©e
 <
	gN
 = 
∑gñevñs
>

206 
	$˛órAŒ
–
vaddr
 
°¨t
, vadd∏
íd
, 
FømeM™agî
& 
fm
 ) {

207 
	`°©ic_as£π
–
N
 >1 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

208 
vaddr
 
vma
 = 
°¨t
; vm®< 
íd
; vm®+
∑gesize
<
N
>()) {

209 
PageE¡ry
* 
≥
 = 
gëE¡ry
<
N
>(
vma
);

210 i‡(
P
.
	`gë
(*
≥
)) {

211 
∑ddr
 
pma
 = *
≥
 & 
	`ADDR
();

212 i‡(
isPage
<
N
>(*
≥
)) {

213 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög::˛órAŒP<", 
N
, ">: ", 
	`FmtHex
(
vma
), '/', FmtHex(
∑gesize
<N>()), " -> ", 
	`FmtPE
(*
≥
));

214 
	`KASSERT1
(
N
 < 
∑gñevñs
, N);

215 
fm
.
ªÀa£Føme
<
N
>(
pma
);

217 
˛órAŒ
<
N
-1>(
vma
, vm®+ 
∑gesize
<N>(), 
fm
);

218 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög::˛órAŒT<", 
N
-1, ">: ", 
	`FmtHex
(
vma
), '/', FmtHex(
∑gesize
<N>()), " -> ", 
	`FmtPE
(*
≥
));

219 
fm
.
ªÀa£Føme
<
∑gëabÀ∂
>(
pma
);

222 
	`£tPE
–*
≥
, 0 );

224 
	}
}

226 
	$ö°ÆlPagëabÀ
(
∑ddr
 
±
) {

227 
CPU
::
	`wrôeCR3
(
±
);

228 
	}
}

230 
ölöe
 
∑ddr
 
˛⁄eKî√lPT
–
FømeM™agî
& 
fm
 );

232 
Pagög
() = ;

233 
Pagög
(c⁄° Pagög&Ë
dñëe
;

234 
	gPagög
& 
	g›î©‹
=(c⁄° 
Pagög
&Ë
dñëe
;

236 
	gpublic
:

237 
ãm∂©e
 <
N
 = 
∑gñevñs
>

238 
ölöe
 
boﬁ
 
	$Áu…
–
vaddr
 
vma
, 
FømeM™agî
& 
fm
 ) 
__u£ªsu…
;

240 
ãm∂©e
<
N
 = 
∑gñevñs
>

241 
∑ddr
 
	$vt›
–
vaddr
 
vma
 ) {

242 
	`°©ic_as£π
–
N
 > 0 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

243 
PageE¡ry
* 
≥
 = 
gëE¡ry
<
N
>(
vma
);

244 
	`KASSERT1
(
P
.
	`gë
(*
≥
), 
	`FmtHex
(
vma
));

245 i‡(!
isPage
<
N
>(*
≥
)Ë 
vt›
<N-1>(
vma
);

246  (*
≥
 & 
	`ADDR
()Ë+ 
∑geoff£t
<
N
>(
vma
);

247 
	}
}

251 
	gãm∂©e
<> 
ölöe
 
size_t
 
	gPagög
::
ã°
<0>(
vaddr
, 
	guöt64_t
 ) { 
KABORT0
();  0; }

252 
	gãm∂©e
<> 
ölöe
 
	gPagög
::
˛órAŒ
<0>(
vaddr
, 
	gvaddr
, 
	gFømeM™agî
&Ë{ 
KABORT0
(); }

253 
	gãm∂©e
<> 
ölöe
 
boﬁ
 
	gPagög
::
Áu…
<0>(
vaddr
, 
	gFømeM™agî
&Ë{ 
KABORT0
();  
	gÁl£
; }

254 
	gãm∂©e
<> 
ölöe
 
∑ddr
 
	gPagög
::
vt›
<0>(
vaddr
Ë{ 
KABORT0
();  0; }

257 
	gãm∂©e
<> 
ölöe
 
c⁄°ex¥
 
mw‹d
 
	gPagög
::
±¥efix
<0>() {

258  
ª˝tödex
 < 
∑gëabÀíåõs
/2 ? 0 : 
ˇn⁄Pªfix
;

262 
	gãm∂©e
 <
	gN
>

263 
ölöe
 
boﬁ
 
	gPagög
::
	$m≠TabÀ
–
vaddr
 
vma
, 
FømeM™agî
& 
fm
 ) {

264 
	`°©ic_as£π
–
N
 >1 && N < 
∑gñevñs
, "pageÜevelÅemplate violation" );

265 i‡(!
m≠TabÀ
<
N
+1>(
vma
, 
fm
)Ë 
Ál£
;

266 
PageE¡ry
* 
≥
 = 
gëE¡ry
<
N
+1>(
vma
);

267 i‡(!
P
.
	`gë
(*
≥
)) {

268 
∑ddr
 
pma
 = 
fm
.
ÆlocFøme
<
∑gëabÀ∂
>();

269 
	`£tPE
–*
≥
, 
pma
 | 
PageTabÀ
 );

270 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög::/m≠T<", 
N
, ">: ", 
	`FmtHex
(
	`Æign_down
(
vma
, 
∑gesize
<N+1>())), '/', FmtHex’agesize<N+1>()), " -> ", 
	`FmtPE
(*
≥
), " created");

271 
	`mem£t
–
gëTabÀ
<
N
>(
vma
), 0, 
∑gesize
<
∑gëabÀ∂
>() );

272  
åue
;

274 i‡(!
isPage
<
N
+1>(*
≥
)) {

275 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög::m≠T<", 
N
, ">: ", 
	`FmtHex
(
	`Æign_down
(
vma
, 
∑gesize
<N+1>())), '/', FmtHex’agesize<N+1>()), " -> ", 
	`FmtPE
(*
≥
), " checked");

276  
åue
;

278 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög::m≠T<", 
N
, ">: ", 
	`FmtHex
(
	`Æign_down
(
vma
, 
∑gesize
<N+1>())), '/', FmtHex’agesize<N+1>()), " -> ", 
	`FmtPE
(*
≥
), " isÖage!");

279  
Ál£
;

280 
	}
}

283 
	gãm∂©e
<> 
ölöe
 
boﬁ
 
	gPagög
::
m≠TabÀ
<
∑gñevñs
>(
vaddr
, 
	gFømeM™agî
&) {

284  
	gåue
;

288 
	gãm∂©e
 <
	gN
, 
boﬁ
 
	g¥e£¡
>

289 
ölöe
 
boﬁ
 
	gPagög
::
	$m≠
–
vaddr
 
vma
, 
∑ddr
 
pma
, 
uöt64_t
 
ty≥
, 
FømeM™agî
& 
fm
 ) {

290 
	`°©ic_as£π
–
N
 >1 && N < 
∑gñevñs
, "pageÜevelÅemplate violation" );

291 
	`KASSERT1
–
	`Æig√d
(
vma
, 
∑gesize
<
N
>()), 
	`FmtHex
(vma) );

292 
	`KASSERT1
–(
pma
 & ~
	`ADDR
()Ë=0, 
	`FmtHex
(pma) );

293 i‡(!
m≠TabÀ
<
N
>(
vma
, 
fm
)Ë 
Ál£
;

294 
PageE¡ry
* 
≥
 = 
gëE¡ry
<
N
>(
vma
);

295 
	`KASSERT1
–!
P
.
	`gë
(*
≥
), 
	`FmtHex
(
vma
) );

296 
	`£tPE
–*
≥
, 
pma
 | 
ty≥
 | 
∑geBô
<
N
>(Ë| (
¥e£¡
 ? 
	`P
() : 0) );

297 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög::m≠<", 
N
, 
¥e£¡
 ? ",P" : ",R", ">: ", 
	`FmtHex
(
vma
), '/', FmtHex(
∑gesize
<N>()), " -> ", 
	`FmtPE
(*
≥
));

298  
åue
;

299 
	}
}

302 
	gãm∂©e
 <
	gN
>

303 
ölöe
 
boﬁ
 
	gPagög
::
	$Áu…
–
vaddr
 
vma
, 
FømeM™agî
& 
fm
 ) {

304 
	`°©ic_as£π
–
N
 > 0 && N <
∑gñevñs
, "pageÜevelÅemplate violation" );

305 
PageE¡ry
* 
≥
 = 
gëE¡ry
<
N
>(
vma
);

306 i‡(
P
.
	`gë
(*
≥
)) {

307 i‡(!
isPage
<
N
>(*
≥
)Ë 
Áu…
<N-1>(
vma
, 
fm
);

308 } i‡(
isPage
<
N
>(*
≥
Ë&& (*≥ & 
	`ADDR
()Ë=
œzyPage
) {

309 
∑ddr
 
pma
 = 
fm
.
ÆlocFøme
<
N
>();

310 
	`KASSERT0
(
pma
 !
t›addr
);

311 
	`£tPE
–*
≥
, 
pma
 | (*≥ & ~
	`ADDR
()Ë| 
	`P
() );

313  
åue
;

316  
Ál£
;

317 
	}
}

320 
ölöe
 
∑ddr
 
	gPagög
::
	$boŸ°øp
(
vaddr
 
kî√lEnd
) {

321 
	`KASSERT1
(
kî√lEnd
 <
kî√lBa£
 + 
MAXKERNSIZE
, kernelEnd);

323 
buf_t
 
boŸMemPT
[
boŸSizePT
] 
	`__Æig√d
(
∑gesize
<
∑gëabÀ∂
>());

324 
	`mem£t
(
boŸMemPT
, 0, 
boŸSizePT
);

326 
PageE¡ry
* 
pml4
 = (PageE¡ry*)(
boŸMemPT
);

327 
PageE¡ry
* 
pd±h
 = (PageE¡ry*)(
boŸMemPT
 + 1 * 
∑gesize
<
∑gëabÀ∂
>());

328 
PageE¡ry
* 
pdh
 = (PageE¡ry*)(
boŸMemPT
 + 2 * 
∑gesize
<
∑gëabÀ∂
>());

329 
PageE¡ry
* 
pd±k
 = (PageE¡ry*)(
boŸMemPT
 + 3 * 
∑gesize
<
∑gëabÀ∂
>());

330 
PageE¡ry
* 
pdk
 = (PageE¡ry*)(
boŸMemPT
 + 4 * 
∑gesize
<
∑gëabÀ∂
>());

332 
pml4
[
ª˝tödex
] = (
	`∑ddr
’ml4Ë- 
kî√lBa£
Ë| 
Kî√lPT
;

334 
pml4
 [
gëIndex
<4>(
boŸHópM≠
)] = (
	`∑ddr
(
pd±h
Ë- 
kî√lBa£
Ë| 
Kî√lPT
;

335 
pd±h
[
gëIndex
<3>(
boŸHópM≠
)] = (
	`∑ddr
(
pdh
Ë- 
kî√lBa£
Ë| 
Kî√lPT
;

337 
pml4
 [
gëIndex
<4>(
kî√lBa£
)] = (
	`∑ddr
(
pd±k
Ë- kî√lBa£Ë| 
Kî√lPT
;

338 
∑ddr
 
m
 = 0; m < 
kî√lEnd
 - 
kî√lBa£
; m +
kî√Õs
) {

339 i‡(
m
 % 
∑gesize
<
kî√Õl
+1>() == 0) {

340 
size_t
 
idx
 = 
gëIndex
<
kî√Õl
+1>(
kî√lBa£
Ë+ 
m
 / 
∑gesize
<kernelpl+1>();

341 
pd±k
[
idx
] = (
	`∑ddr
(
pdk
Ë- 
kî√lBa£
Ë| 
PageTabÀ
;

343 *
pdk
 = 
m
 | 
	`PS
(Ë| 
Kî√lPT
;

344 
pdk
 += 1;

345 
DBG
::
	`oué
(DBG::
Pagög
, "Pagög(", 
	`FmtHex
(
pml4
), ")/m≠<", 
kî√Õl
, ">: ", FmtHex(
kî√lBa£
 + 
m
), '/', FmtHex(
∑gesize
<kî√Õl>()), " -> ", FmtHex(m), " PE:", FmtHex(
gëE¡ry
<kernelpl>(kernelBase + m)));

348 
	`ö°ÆlPagëabÀ
(
	`∑ddr
(
pml4
Ë- 
kî√lBa£
);

349  
	`∑ddr
(
pml4
Ë- 
kî√lBa£
;

350 
	}
}

353 
ölöe
 
	gPagög
::
	$boŸ°øp2
(
FømeM™agî
& 
fm
) {

354 
vaddr
 
vma
 = 
kî√lbŸ
; vm®< 
kî√…›
; vm®+
∑gesize
<
∑gñevñs
>()) {

355 
boﬁ
 
check
 = 
m≠TabÀ
<
∑gñevñs
-1>(
vma
, 
fm
);

356 
	`KASSERT1
(
check
, 
vma
);

358 
	}
}

361 
ölöe
 
∑ddr
 
	gPagög
::
	$˛⁄eKî√lPT
(
FømeM™agî
& 
fm
) {

362 
∑ddr
 
√w±
 = 
fm
.
ÆlocFøme
<
∑gëabÀ∂
>();

363 
boﬁ
 
check
 = 
m≠
<
∑gëabÀ∂
,
åue
>(
˛⁄eAddr
, 
√w±
, 
D©a
, 
fm
);

364 
	`KASSERT0
(
check
);

365 
	`mem£t
(
	`±r_t
(
˛⁄eAddr
), 0, 
∑gesize
<
∑gëabÀ∂
>());

366 
PageE¡ry
* 
˛⁄edPE
 = (PageE¡ry*)
˛⁄eAddr
;

367 
˛⁄edPE
[
ª˝tödex
] = 
√w±
 | 
Kî√lPT
;

368 
PageE¡ry
* 
kî√lPE
 = (PageE¡ry*)
±¥efix
<4>();

369 
size_t
 
idx
 = 
kînbödex
; idx < 
∑gëabÀíåõs
; idx += 1) {

370 
˛⁄edPE
[
idx
] = 
kî√lPE
[idx];

372 
unm≠
<
∑gëabÀ∂
>(
˛⁄eAddr
);

373 
CPU
::
	`InvTLB
(
˛⁄eAddr
);

374  
√w±
;

375 
	}
}

	@src/machine/Processor.cc

17 
	~"ru¡ime/ScheduÀr.h
"

18 
	~"ru¡ime/Thªad.h
"

19 
	~"kî√l/AddªssS∑˚.h
"

20 
	~"kî√l/Ouçut.h
"

21 
	~"machöe/APIC.h
"

22 
	~"machöe/Pro˚ss‹.h
"

23 
	~"machöe/Pagög.h
"

25 
	gPro˚ss‹
::
	$ö°Æl
() {

26 
MSR
::
	`wrôe
(MSR::
GS_BASE
, 
	`mw‹d
(
this
));

27 
MSR
::
	`wrôe
(MSR::
KERNEL_GS_BASE
, 0);

28 
	}
}

30 
	gPro˚ss‹
::
	$check
(
boﬁ
 
ouçut
) {

31 
DBG
::
Levñ
 
dl
 = 
ouçut
 ? DBG::
Basic
 : DBG::
MaxLevñ
;

32 
DBG
::
	`oué
(
dl
, "*********** CPU INFO ***********");

33 
DBG
::
	`out1
(
dl
, "checking BSP capabilities:");

34 
	`KASSERT0
(
	`__©omic_Æways_lock_‰ì
((
mw‹d
),0));

35 
	`KASSERT0
(
CPU
::
	`CPUID
()); 
DBG
::
	`out1
(
dl
, " CPUID");

36 
	`KASSERT0
(
CPUID
::
	`MSR
()); 
DBG
::
	`out1
(
dl
, " MSR");

37 
	`KASSERT0
(
CPUID
::
	`APIC
()); 
DBG
::
	`out1
(
dl
, " APIC");

38 
	`KASSERT0
(
CPUID
::
	`NX
()); 
DBG
::
	`out1
(
dl
, " NX");

39 
	`KASSERT0
(
CPUID
::
	`SYSCALL
()); 
DBG
::
	`out1
(
dl
, " SYSCALL");

40 i‡(
CPUID
::
	`MWAIT
()Ë
DBG
::
	`out1
(
dl
, " MWAIT");

41 i‡(
CPUID
::
	`X2APIC
()Ë
DBG
::
	`out1
(
dl
, " X2A");

42 i‡(
CPUID
::
	`POPCNT
()Ë
DBG
::
	`out1
(
dl
, " POPCNT");

43 i‡(
CPUID
::
	`TSCD
()Ë
DBG
::
	`out1
(
dl
, " TSC");

44 i‡(
CPUID
::
	`ARAT
()Ë
DBG
::
	`out1
(
dl
, " ARAT");

45 i‡(
CPUID
::
	`FSGSBASE
()Ë
DBG
::
	`out1
(
dl
, " FSGSBASE");

46 i‡(
CPUID
::
	`Page1G
()Ë
DBG
::
	`out1
(
dl
, " Page1G");

47 
DBG
::
	`oué
(
dl
);

48 
MSR
::
	`íabÀNX
();

49 
CPU
::
	`wrôeCR4
(CPU::
	`ªadCR4
(Ë| CPU::
	`PGE
());

51 
	}
}

53 
	gPro˚ss‹
::
	$öô
(
∑ddr
 
pml4
,

54 
I¡îru±Des¸ùt‹
* 
idtTabÀ
, 
size_t
 
idtSize
, 
funcvoid0_t
 
func
) {

56 
	`ö°Æl
();

57 
	`check
(
Ál£
);

58 
CPU
::
	`wrôeCR3
(
pml4
);

60 
MSR
::
	`íabÀSYSCALL
();

63 
MSR
::
	`wrôe
(MSR::
SYSCALL_STAR
, 
	`mw‹d
(0x0013000800000000));

64 
MSR
::
	`wrôe
(MSR::
SYSCALL_LSTAR
, 
	`mw‹d
(
sysˇŒ_wøµî
));

65 
MSR
::
	`wrôe
(MSR::
SYSCALL_CSTAR
, 0x0);

66 
MSR
::
	`wrôe
(MSR::
SYSCALL_SFMASK
, 
CPU
::
RFœgs
::
	`IF
());

68 
DBG
::
	`oué
(DBG::
Basic
, "Fau… Sèck f‹ ", 
ödex
, "áà", 
	`FmtHex
(
Áu…Sèck
));

71 
	`mem£t
(&
tss
, 0, (
TaskSèãSegmít
));

74 
tss
.
i°
[
nmiIST
-1] = (
vaddr
)
Áu…Sèck
 + (faultStack);

75 
tss
.
i°
[
dbfIST
-1] = (
vaddr
)
Áu…Sèck
 + (faultStack);

76 
tss
.
i°
[
°fIST
-1] = (
vaddr
)
Áu…Sèck
 + (faultStack);

77 
tss
.
i°
[
pgfIST
-1] = (
vaddr
)
Áu…Sèck
 + (faultStack);

79 
	`mem£t
(
gdt
, 0, (gdt));

80 
	`£tupGDT
(
kînCS
, 0, 
åue
);

81 
	`£tupGDT
(
kînDS
, 0, 
Ál£
);

82 
	`£tupGDT
(
u£rDS
, 3, 
Ál£
);

83 
	`£tupGDT
(
u£rCS
, 3, 
åue
);

84 
	`£tupTSS
(
tssSñ
, (
vaddr
)&
tss
);

85 
	`lﬂdGDT
(
gdt
, (gdt));

86 
	`lﬂdTR
(
tssSñ
 * (
SegmítDes¸ùt‹
));

87 
	`˛órLDT
();

89 
	`lﬂdIDT
(
idtTabÀ
, 
idtSize
);

92 
cuºThªad
 = 
Thªad
::
	`¸óã
(
deÁu…Sèck
);

93 
cuºThªad
->
	`£tAfföôy
(
scheduÀr
)->
	`dúe˘
((
±r_t
)
func
, 
nuŒ±r
);

94 
	}
}

96 
	gPro˚ss‹
::
	$£tupGDT
(
numbî
, 
d∂
, 
boﬁ
 
code
) {

97 
	`KASSERT1
(
numbî
 < 
maxGDT
,Çumber);

98 
	`KASSERT1
(
d∂
 < 4, dpl);

99 
gdt
[
numbî
].
RW
 = 1;

100 
gdt
[
numbî
].
C
 = 
code
 ? 1 : 0;

101 
gdt
[
numbî
].
S
 = 1;

102 
gdt
[
numbî
].
DPL
 = 
d∂
;

103 
gdt
[
numbî
].
P
 = 1;

104 
gdt
[
numbî
].
L
 = 1;

105 
	}
}

107 
	gPro˚ss‹
::
	$£tupTSS
(
numbî
, 
∑ddr
 
addªss
) {

108 
Sy°emDes¸ùt‹
* 
tssDesc
 = (Sy°emDes¸ùt‹*)&
gdt
[
numbî
];

109 
tssDesc
->
Limô00
 = 0xffff;

110 
tssDesc
->
Ba£00
 = (
addªss
 & 0x000000000000FFFF);

111 
tssDesc
->
Ba£16
 = (
addªss
 & 0x0000000000FF0000) >> 16;

112 
tssDesc
->
Ty≥
 = 0x9;

113 
tssDesc
->
P
 = 1;

114 
tssDesc
->
Ba£24
 = (
addªss
 & 0x00000000FF000000) >> 24;

115 
tssDesc
->
Ba£32
 = (
addªss
 & 0xFFFFFFFF00000000) >> 32;

116 
	}
}

118 
	gLoˇlPro˚ss‹
::
	$öôI¡îru±s
(
boﬁ
 
úqs
) {

119 
	`M≠≥dAPIC
()->
	`£tFœtMode
();

120 
	`M≠≥dAPIC
()->
	`£tLogiˇlDe°
(
úqs
 ? 0x01 : 0x00);

121 
	`M≠≥dAPIC
()->
	`£tTaskPri‹ôy
(0x00);

122 
	`M≠≥dAPIC
()->
	`íabÀ
(0xff);

123 
	`u∆ock
(1);

124 
	}
}

	@src/machine/Processor.h

17 #i‚de‡
_Pro˚ss‹_h_


18 
	#_Pro˚ss‹_h_
 1

	)

20 
	~"machöe/asmde˛.h
"

21 
	~"machöe/asmsh¨e.h
"

22 
	~"machöe/CPU.h
"

23 
	~"machöe/Des¸ùt‹s.h
"

24 
	~"machöe/Mem‹y.h
"

26 
˛ass
 
	gThªad
;

27 
˛ass
 
	gAddªssS∑˚
;

28 
˛ass
 
	gFømeM™agî
;

29 
˛ass
 
	gScheduÀr
;

30 
	gPageInvÆid©i⁄
;

32 ˛as†
	cPro˚ss‹
 {

33 
‰õnd
 
˛ass
 
	mMachöe
;

34 
‰õnd
 
˛ass
 
	mLoˇlPro˚ss‹
;

37 
mw‹d
 
	mlockCou¡
;

38 
Thªad
* 
	mcuºThªad
;

39 
AddªssS∑˚
* 
	mcuºAS
;

40 
PageInvÆid©i⁄
* 
	mu£rPI
;

41 
PageInvÆid©i⁄
* 
	mkînPI
;

44 
ScheduÀr
* 
	mscheduÀr
;

45 
FømeM™agî
* 
	m‰ameM™agî
;

48 
mw‹d
 
	mödex
;

49 
mw‹d
 
	m≠icID
;

50 
mw‹d
 
	msy°emID
;

53 c⁄° 
	mnmiIST
 = 1;

54 c⁄° 
	mdbfIST
 = 2;

55 c⁄° 
	m°fIST
 = 3;

56 c⁄° 
	mpgfIST
 = 4;

57 
TaskSèãSegmít
 
	mtss
;

58 
buf_t
 
	mÁu…Sèck
[
möimumSèck
];

64 c⁄° 
	mkînCS
 = 1;

65 c⁄° 
	mkînDS
 = 2;

66 c⁄° 
	mu£rDS
 = 3;

67 c⁄° 
	mu£rCS
 = 4;

68 c⁄° 
	mtssSñ
 = 5;

69 c⁄° 
	mmaxGDT
 = 7;

70 
SegmítDes¸ùt‹
 
	mgdt
[
maxGDT
];

72 
	$ö°Æl
(Ë
	`__£˘i⁄
(".boot.text");

73 
	$check
(
boﬁ
 
ouçut
Ë
	`__£˘i⁄
(".boot.text");

74 
	$öô
(
∑ddr
, 
I¡îru±Des¸ùt‹
*, 
size_t
, 
funcvoid0_t
Ë
	`__£˘i⁄
(".boot.text");

75 
	$£tupGDT
(
uöt32_t
 
n
, uöt32_à
d∂
, 
boﬁ
 
code
Ë
	`__£˘i⁄
(".boot.text");

76 
	$£tupTSS
(
uöt32_t
 
num
, 
∑ddr
 
addr
Ë
	`__£˘i⁄
(".boot.text");

78 
	`Pro˚ss‹
(c⁄° 
Pro˚ss‹
&Ë
dñëe
;

79 
Pro˚ss‹
& 
›î©‹
=(c⁄° Pro˚ss‹&Ë
dñëe
;

81 
	$£tup
(
AddªssS∑˚
& 
as
, 
PageInvÆid©i⁄
* 
ki
, 
ScheduÀr
& 
s
, 
FømeM™agî
& 
fm
, 
mw‹d
 
idx
, mw‹d 
≠ic
, mw‹d 
sys
) {

82 
cuºAS
 = &
as
;

83 
kînPI
 = 
ki
;

84 
scheduÀr
 = &
s
;

85 
‰ameM™agî
 = &
fm
;

86 
ödex
 = 
idx
;

87 
≠icID
 = 
≠ic
;

88 
sy°emID
 = 
sys
;

91 
public
:

92 
	$Pro˚ss‹
(Ë: 
	`lockCou¡
(1), 
	`cuºThªad
(
nuŒ±r
), 
	`cuºAS
(nullptr),

93 
	`u£rPI
(
nuŒ±r
), 
	`kînPI
“uŒ±r), 
	`scheduÀr
(nullptr),

94 
	`‰ameM™agî
(
nuŒ±r
), 
	`ödex
(0), 
	`≠icID
(0), 
	$sy°emID
(0Ë{
	}
}

96 
ölöe
 
boﬁ
 
	$u£rSegmít
(
mw‹d
 
cs
) {

98  
cs
 !(
kînCS
 * (
SegmítDes¸ùt‹
));

99 
	}
}

100 } 
__∑cked
 
	g__ˇlig√d
;

102 ˛as†
	cLoˇlPro˚ss‹
 {

103 
	$íabÀI¡îru±s
(Ë{ 
asm
 volatile("sti"); }

104 
	$dißbÀI¡îru±s
(Ë{ 
asm
 vﬁ©ûe("˛i"); 
	}
}

105 
	$öcLockCou¡
() {

106 
asm
 vﬁ©ûe("addq $1, %%gs:%c0" :: "i"(
	`off£tof
(
Pro˚ss‹
, 
lockCou¡
)) : "cc");

107 
	}
}

108 
	$decLockCou¡
() {

109 
asm
 vﬁ©ûe("subq $1, %%gs:%c0" :: "i"(
	`off£tof
(
Pro˚ss‹
, 
lockCou¡
)) : "cc");

110 
	}
}

112 
	gpublic
:

113 
öôI¡îru±s
(
boﬁ
 
úqs
);

114 
mw‹d
 
	$gëLockCou¡
() {

115 
mw‹d
 
x
;

116 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
lockCou¡
)));

117  
x
;

118 
	}
}

119 
mw‹d
 
	$checkLock
() {

120 
	`KASSERT1
(
CPU
::
	`öãºu±sE«bÀd
(Ë=(
	`gëLockCou¡
() == 0), getLockCount());

121  
	`gëLockCou¡
();

122 
	}
}

123 
	$lockFake
() {

124 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

125 
	`öcLockCou¡
();

126 
	}
}

127 
	$u∆ockFake
() {

128 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

129 
	`decLockCou¡
();

130 
	}
}

131 
	$lock
(
boﬁ
 
check
 = 
Ál£
) {

132 i‡(
check
Ë
	`KASSERT1
(
	`checkLock
(Ë=0, 
	`gëLockCou¡
());

135 
	`¶ow∑th
(
	`gëLockCou¡
(Ë=0Ë
	`dißbÀI¡îru±s
();

136 
	`öcLockCou¡
();

137 
	}
}

138 
	$u∆ock
(
boﬁ
 
check
 = 
Ál£
) {

139 i‡(
check
Ë
	`KASSERT1
(
	`checkLock
(Ë=1, 
	`gëLockCou¡
());

140 
	`decLockCou¡
();

142 
	`¶ow∑th
(
	`gëLockCou¡
(Ë=0Ë
	`íabÀI¡îru±s
();

143 
	}
}

146 
Thªad
* 
	$gëCuºThªad
() {

147 
Thªad
* 
x
;

148 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
cuºThªad
)));

149  
x
;

150 
	}
}

151 
	$£tCuºThªad
(
Thªad
* 
x
) {

152 
asm
 vﬁ©ûe("movq %0, %%gs:%c1" :: "r"(
x
), "i"(
	`off£tof
(
Pro˚ss‹
, 
cuºThªad
)));

153 
	}
}

154 
AddªssS∑˚
* 
	$gëCuºAS
() {

155 
AddªssS∑˚
* 
x
;

156 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
cuºAS
)));

157  
x
;

158 
	}
}

159 
	$£tCuºAS
(
AddªssS∑˚
* 
x
) {

160 
asm
 vﬁ©ûe("movq %0, %%gs:%c1" :: "r"(
x
), "i"(
	`off£tof
(
Pro˚ss‹
, 
cuºAS
)));

161 
	}
}

162 
PageInvÆid©i⁄
* 
	$gëU£rPI
() {

163 
PageInvÆid©i⁄
* 
x
;

164 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
u£rPI
)));

165  
x
;

166 
	}
}

167 
	$£tU£rPI
(
PageInvÆid©i⁄
* 
x
) {

168 
asm
 vﬁ©ûe("movq %0, %%gs:%c1" :: "r"(
x
), "i"(
	`off£tof
(
Pro˚ss‹
, 
u£rPI
)));

169 
	}
}

170 
PageInvÆid©i⁄
* 
	$gëKînPI
() {

171 
PageInvÆid©i⁄
* 
x
;

172 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
kînPI
)));

173  
x
;

174 
	}
}

175 
	$£tKînPI
(
PageInvÆid©i⁄
* 
x
) {

176 
asm
 vﬁ©ûe("movq %0, %%gs:%c1" :: "r"(
x
), "i"(
	`off£tof
(
Pro˚ss‹
, 
kînPI
)));

177 
	}
}

178 
ScheduÀr
* 
	$gëScheduÀr
() {

179 
ScheduÀr
* 
x
;

180 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
scheduÀr
)));

181  
x
;

182 
	}
}

183 
FømeM™agî
* 
	$gëFømeM™agî
() {

184 
FømeM™agî
* 
x
;

185 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
‰ameM™agî
)));

186  
x
;

187 
	}
}

188 
mw‹d
 
	$gëIndex
() {

189 
mw‹d
 
x
;

190 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
ödex
)));

191  
x
;

192 
	}
}

193 
mw‹d
 
	$gëApicID
() {

194 
mw‹d
 
x
;

195 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
≠icID
)));

196  
x
;

197 
	}
}

198 
mw‹d
 
	$gëSy°emID
() {

199 
mw‹d
 
x
;

200 
asm
 vﬁ©ûe("movq %%gs:%c1, %0" : "Ù"(
x
Ë: "i"(
	`off£tof
(
Pro˚ss‹
, 
sy°emID
)));

201  
x
;

202 
	}
}

203 
	$£tKî√lSèck
() {

204 c⁄° 
mw‹d
 
off£t
 = 
	`off£tof
(
Pro˚ss‹
, 
tss
Ë+ off£tof(
TaskSèãSegmít
, 
r•
);

205 
	`°©ic_as£π
(
off£t
 =
TSSRSP
, "TSSRSP");

206 
asm
 vﬁ©ûe("movq %0, %%gs:%c1" :: "r"(
	`gëCuºThªad
()), "i"(
off£t
));

207 
	}
}

	@src/machine/SpinLock.h

17 #i‚de‡
_SpöLock_h_


18 
	#_SpöLock_h_
 1

	)

20 
	~"machöe/CPU.h
"

21 
	~"machöe/Pro˚ss‹.h
"

23 ˛as†
	cBö¨yLock
 {

24 vﬁ©ûê
boﬁ
 
	mlocked
;

25 
	mpublic
:

26 
	$Bö¨yLock
(Ë: 
	$locked
(
Ál£
) {}

27 
boﬁ
 
	$check
(Ëc⁄° {  
locked
; 
	}
}

28 
boﬁ
 
	$åyAcquúe
() {

29 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

30  !
	`__©omic_ã°_™d_£t
(&
locked
, 
__ATOMIC_SEQ_CST
);

31 
	}
}

32 
	$acquúe
() {

33 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

35 
	`Á°∑th
(!
	`__©omic_ã°_™d_£t
(&
locked
, 
__ATOMIC_SEQ_CST
)) ;

36 
locked
Ë
CPU
::
	`Pau£
();

38 
	}
}

39 
	$ªÀa£
() {

40 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

41 
	`KASSERT0
(
	`check
());

42 
locked
 = 
Ál£
;

43 
	}
}

44 } 
	g__ˇlig√d
;

46 ˛as†
	cTickëLock
 {

47 vﬁ©ûê
mw‹d
 
	m£rvög
;

48 
mw‹d
 
	mtickë
;

49 
	mpublic
:

50 
	$TickëLock
(Ë: 
	`£rvög
(0), 
	$tickë
(0) {}

51 
boﬁ
 
	$check
(Ëc⁄° {  
	`sw‹d
(
tickë
-
£rvög
Ë> 0; 
	}
}

52 
boﬁ
 
	$åyAcquúe
() {

53 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

54 
mw‹d
 
åytickë
 = 
£rvög
;

55  
	`__©omic_com∑ª_exch™ge_n
(&
tickë
, &
åytickë
,Årytickë + 1, 0, 
__ATOMIC_SEQ_CST
, 
__ATOMIC_RELAXED
);

56 
	}
}

57 
	$acquúe
() {

58 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

59 
mw‹d
 
mytickë
 = 
	`__©omic_„tch_add
(&
tickë
, 1, 
__ATOMIC_SEQ_CST
);

60 
mytickë
 !
£rvög
Ë
CPU
::
	`Pau£
();

61 
	}
}

62 
	$ªÀa£
() {

63 
	`KASSERT0
(!
CPU
::
	`öãºu±sE«bÀd
());

64 
	`KASSERT0
(
	`check
());

65 
£rvög
 += 1;

66 
	}
}

69 ˛as†
	cSpöLock
 : 
¥Ÿe˘ed
 
Bö¨yLock
 {

70 
public
:

71 
boﬁ
 
	$åyAcquúe
() {

72 
LoˇlPro˚ss‹
::
	`lock
();

73 i‡(
Bö¨yLock
::
	`åyAcquúe
()Ë 
åue
;

74 
LoˇlPro˚ss‹
::
	`u∆ock
();

75  
Ál£
;

77 
	$acquúe
(
SpöLock
* 
l
 = 
nuŒ±r
) {

78 
LoˇlPro˚ss‹
::
	`lock
();

79 
Bö¨yLock
::
	`acquúe
();

80 i‡(
l
Ël->
	`ªÀa£
();

81 
	}
}

82 
	$ªÀa£
() {

83 
Bö¨yLock
::
	`ªÀa£
();

84 
LoˇlPro˚ss‹
::
	`u∆ock
();

85 
	}
}

86 
boﬁ
 
	$check
(Ëc⁄° {  
Bö¨yLock
::
	`check
(); 
	}
}

89 ˛as†
	cNoLock
 {

90 
	mpublic
:

91 
	$acquúe
() {}

92 
	$ªÀa£
(Ë{
	}
}

95 
	gãm∂©e
 <
ty≥«me
 
	gLock
 = 
SpöLock
>

96 ˛as†
	cSc›edLock
 {

97 
Lock
& 
lk
;

98 
	mpublic
:

99 
	$Sc›edLock
(
Lock
& 
lk
Ë: 
	$lk
(
lk
Ë{Ük.
	`acquúe
(); }

100 ~
	$Sc›edLock
(Ë{ 
lk
.
	`ªÀa£
(); 
	}
}

103 
	gãm∂©e
 <>

104 
˛ass
 
	gSc›edLock
<
	gLoˇlPro˚ss‹
> {

105 
	gpublic
:

106 
Sc›edLock
(Ë{ 
LoˇlPro˚ss‹
::
lock
(); }

107 ~
Sc›edLock
(Ë{ 
	gLoˇlPro˚ss‹
::
u∆ock
(); }

	@src/machine/asmdecl.h

17 #i‚de‡
_asmde˛_h_


18 
	#_asmde˛_h_
 1

	)

20 
	~"gíîic/basics.h
"

23 "C" 
lﬂdIDT
(
±r_t
 
idt
, 
uöt16_t
 
size
);

24 "C" 
lﬂdGDT
(
±r_t
 
gdt
, 
uöt16_t
 
size
);

25 "C" 
˛órLDT
();

26 "C" 
lﬂdTR
(
uöt16_t
 
£À˘‹
);

29 "C" 
sysˇŒ_wøµî
();

30 "C" 
	$°¨tU£rCode
(
±r_t
 
¨g1
,Öå_à
¨g2
, 
vaddr
 
k•
, 
funcvoid2_t
 
övoke
, vadd∏
u•
Ë
__n‹ëu∫
;

33 "C" 
	`i§_wøµî_0x00
();

34 "C" 
	`i§_wøµî_0x01
();

35 "C" 
	`i§_wøµî_0x02
();

36 "C" 
	`i§_wøµî_0x03
();

37 "C" 
	`i§_wøµî_0x04
();

38 "C" 
	`i§_wøµî_0x05
();

39 "C" 
	`i§_wøµî_0x06
();

40 "C" 
	`i§_wøµî_0x07
();

41 "C" 
	`i§_wøµî_0x08
();

42 "C" 
	`i§_wøµî_0x09
();

43 "C" 
	`i§_wøµî_0x0a
();

44 "C" 
	`i§_wøµî_0x0b
();

45 "C" 
	`i§_wøµî_0x0c
();

46 "C" 
	`i§_wøµî_0x0d
();

47 "C" 
	`i§_wøµî_0x0e
();

48 "C" 
	`i§_wøµî_0x0f
();

49 "C" 
	`i§_wøµî_0x10
();

50 "C" 
	`i§_wøµî_0x11
();

51 "C" 
	`i§_wøµî_0x12
();

52 "C" 
	`i§_wøµî_0x13
();

53 "C" 
	`i§_wøµî_0x14
();

54 "C" 
	`i§_wøµî_0x15
();

55 "C" 
	`i§_wøµî_0x16
();

56 "C" 
	`i§_wøµî_0x17
();

57 "C" 
	`i§_wøµî_0x18
();

58 "C" 
	`i§_wøµî_0x19
();

59 "C" 
	`i§_wøµî_0x1a
();

60 "C" 
	`i§_wøµî_0x1b
();

61 "C" 
	`i§_wøµî_0x1c
();

62 "C" 
	`i§_wøµî_0x1d
();

63 "C" 
	`i§_wøµî_0x1e
();

64 "C" 
	`i§_wøµî_0x1f
();

65 "C" 
	`i§_wøµî_0x20
();

66 "C" 
	`i§_wøµî_0x21
();

67 "C" 
	`i§_wøµî_0x22
();

68 "C" 
	`i§_wøµî_0x23
();

69 "C" 
	`i§_wøµî_0x24
();

70 "C" 
	`i§_wøµî_0x25
();

71 "C" 
	`i§_wøµî_0x26
();

72 "C" 
	`i§_wøµî_0x27
();

73 "C" 
	`i§_wøµî_0x28
();

74 "C" 
	`i§_wøµî_0x29
();

75 "C" 
	`i§_wøµî_0x2a
();

76 "C" 
	`i§_wøµî_0x2b
();

77 "C" 
	`i§_wøµî_0x2c
();

78 "C" 
	`i§_wøµî_0x2d
();

79 "C" 
	`i§_wøµî_0x2e
();

80 "C" 
	`i§_wøµî_0x2f
();

81 "C" 
	`i§_wøµî_0x30
();

82 "C" 
	`i§_wøµî_0x31
();

83 "C" 
	`i§_wøµî_0x32
();

84 "C" 
	`i§_wøµî_0x33
();

85 "C" 
	`i§_wøµî_0x34
();

86 "C" 
	`i§_wøµî_0x35
();

87 "C" 
	`i§_wøµî_0x36
();

88 "C" 
	`i§_wøµî_0x37
();

89 "C" 
	`i§_wøµî_0x38
();

90 "C" 
	`i§_wøµî_0x39
();

91 "C" 
	`i§_wøµî_0x3a
();

92 "C" 
	`i§_wøµî_0x3b
();

93 "C" 
	`i§_wøµî_0x3c
();

94 "C" 
	`i§_wøµî_0x3d
();

95 "C" 
	`i§_wøµî_0x3e
();

96 "C" 
	`i§_wøµî_0x3f
();

97 "C" 
	`i§_wøµî_0x40
();

98 "C" 
	`i§_wøµî_0x41
();

99 "C" 
	`i§_wøµî_0x42
();

100 "C" 
	`i§_wøµî_0x43
();

101 "C" 
	`i§_wøµî_0x44
();

102 "C" 
	`i§_wøµî_0x45
();

103 "C" 
	`i§_wøµî_0x46
();

104 "C" 
	`i§_wøµî_0x47
();

105 "C" 
	`i§_wøµî_0x48
();

106 "C" 
	`i§_wøµî_0x49
();

107 "C" 
	`i§_wøµî_0x4a
();

108 "C" 
	`i§_wøµî_0x4b
();

109 "C" 
	`i§_wøµî_0x4c
();

110 "C" 
	`i§_wøµî_0x4d
();

111 "C" 
	`i§_wøµî_0x4e
();

112 "C" 
	`i§_wøµî_0x4f
();

113 "C" 
	`i§_wøµî_0x50
();

114 "C" 
	`i§_wøµî_0x51
();

115 "C" 
	`i§_wøµî_0x52
();

116 "C" 
	`i§_wøµî_0x53
();

117 "C" 
	`i§_wøµî_0x54
();

118 "C" 
	`i§_wøµî_0x55
();

119 "C" 
	`i§_wøµî_0x56
();

120 "C" 
	`i§_wøµî_0x57
();

121 "C" 
	`i§_wøµî_0x58
();

122 "C" 
	`i§_wøµî_0x59
();

123 "C" 
	`i§_wøµî_0x5a
();

124 "C" 
	`i§_wøµî_0x5b
();

125 "C" 
	`i§_wøµî_0x5c
();

126 "C" 
	`i§_wøµî_0x5d
();

127 "C" 
	`i§_wøµî_0x5e
();

128 "C" 
	`i§_wøµî_0x5f
();

129 "C" 
	`i§_wøµî_0x60
();

130 "C" 
	`i§_wøµî_0x61
();

131 "C" 
	`i§_wøµî_0x62
();

132 "C" 
	`i§_wøµî_0x63
();

133 "C" 
	`i§_wøµî_0x64
();

134 "C" 
	`i§_wøµî_0x65
();

135 "C" 
	`i§_wøµî_0x66
();

136 "C" 
	`i§_wøµî_0x67
();

137 "C" 
	`i§_wøµî_0x68
();

138 "C" 
	`i§_wøµî_0x69
();

139 "C" 
	`i§_wøµî_0x6a
();

140 "C" 
	`i§_wøµî_0x6b
();

141 "C" 
	`i§_wøµî_0x6c
();

142 "C" 
	`i§_wøµî_0x6d
();

143 "C" 
	`i§_wøµî_0x6e
();

144 "C" 
	`i§_wøµî_0x6f
();

145 "C" 
	`i§_wøµî_0x70
();

146 "C" 
	`i§_wøµî_0x71
();

147 "C" 
	`i§_wøµî_0x72
();

148 "C" 
	`i§_wøµî_0x73
();

149 "C" 
	`i§_wøµî_0x74
();

150 "C" 
	`i§_wøµî_0x75
();

151 "C" 
	`i§_wøµî_0x76
();

152 "C" 
	`i§_wøµî_0x77
();

153 "C" 
	`i§_wøµî_0x78
();

154 "C" 
	`i§_wøµî_0x79
();

155 "C" 
	`i§_wøµî_0x7a
();

156 "C" 
	`i§_wøµî_0x7b
();

157 "C" 
	`i§_wøµî_0x7c
();

158 "C" 
	`i§_wøµî_0x7d
();

159 "C" 
	`i§_wøµî_0x7e
();

160 "C" 
	`i§_wøµî_0x7f
();

161 "C" 
	`i§_wøµî_0x80
();

162 "C" 
	`i§_wøµî_0x81
();

163 "C" 
	`i§_wøµî_0x82
();

164 "C" 
	`i§_wøµî_0x83
();

165 "C" 
	`i§_wøµî_0x84
();

166 "C" 
	`i§_wøµî_0x85
();

167 "C" 
	`i§_wøµî_0x86
();

168 "C" 
	`i§_wøµî_0x87
();

169 "C" 
	`i§_wøµî_0x88
();

170 "C" 
	`i§_wøµî_0x89
();

171 "C" 
	`i§_wøµî_0x8a
();

172 "C" 
	`i§_wøµî_0x8b
();

173 "C" 
	`i§_wøµî_0x8c
();

174 "C" 
	`i§_wøµî_0x8d
();

175 "C" 
	`i§_wøµî_0x8e
();

176 "C" 
	`i§_wøµî_0x8f
();

177 "C" 
	`i§_wøµî_0x90
();

178 "C" 
	`i§_wøµî_0x91
();

179 "C" 
	`i§_wøµî_0x92
();

180 "C" 
	`i§_wøµî_0x93
();

181 "C" 
	`i§_wøµî_0x94
();

182 "C" 
	`i§_wøµî_0x95
();

183 "C" 
	`i§_wøµî_0x96
();

184 "C" 
	`i§_wøµî_0x97
();

185 "C" 
	`i§_wøµî_0x98
();

186 "C" 
	`i§_wøµî_0x99
();

187 "C" 
	`i§_wøµî_0x9a
();

188 "C" 
	`i§_wøµî_0x9b
();

189 "C" 
	`i§_wøµî_0x9c
();

190 "C" 
	`i§_wøµî_0x9d
();

191 "C" 
	`i§_wøµî_0x9e
();

192 "C" 
	`i§_wøµî_0x9f
();

193 "C" 
	`i§_wøµî_0xa0
();

194 "C" 
	`i§_wøµî_0xa1
();

195 "C" 
	`i§_wøµî_0xa2
();

196 "C" 
	`i§_wøµî_0xa3
();

197 "C" 
	`i§_wøµî_0xa4
();

198 "C" 
	`i§_wøµî_0xa5
();

199 "C" 
	`i§_wøµî_0xa6
();

200 "C" 
	`i§_wøµî_0xa7
();

201 "C" 
	`i§_wøµî_0xa8
();

202 "C" 
	`i§_wøµî_0xa9
();

203 "C" 
	`i§_wøµî_0xØ
();

204 "C" 
	`i§_wøµî_0xab
();

205 "C" 
	`i§_wøµî_0xac
();

206 "C" 
	`i§_wøµî_0xad
();

207 "C" 
	`i§_wøµî_0x´
();

208 "C" 
	`i§_wøµî_0xaf
();

209 "C" 
	`i§_wøµî_0xb0
();

210 "C" 
	`i§_wøµî_0xb1
();

211 "C" 
	`i§_wøµî_0xb2
();

212 "C" 
	`i§_wøµî_0xb3
();

213 "C" 
	`i§_wøµî_0xb4
();

214 "C" 
	`i§_wøµî_0xb5
();

215 "C" 
	`i§_wøµî_0xb6
();

216 "C" 
	`i§_wøµî_0xb7
();

217 "C" 
	`i§_wøµî_0xb8
();

218 "C" 
	`i§_wøµî_0xb9
();

219 "C" 
	`i§_wøµî_0xba
();

220 "C" 
	`i§_wøµî_0xbb
();

221 "C" 
	`i§_wøµî_0xbc
();

222 "C" 
	`i§_wøµî_0xbd
();

223 "C" 
	`i§_wøµî_0xbe
();

224 "C" 
	`i§_wøµî_0xbf
();

225 "C" 
	`i§_wøµî_0xc0
();

226 "C" 
	`i§_wøµî_0xc1
();

227 "C" 
	`i§_wøµî_0xc2
();

228 "C" 
	`i§_wøµî_0xc3
();

229 "C" 
	`i§_wøµî_0xc4
();

230 "C" 
	`i§_wøµî_0xc5
();

231 "C" 
	`i§_wøµî_0xc6
();

232 "C" 
	`i§_wøµî_0xc7
();

233 "C" 
	`i§_wøµî_0xc8
();

234 "C" 
	`i§_wøµî_0xc9
();

235 "C" 
	`i§_wøµî_0xˇ
();

236 "C" 
	`i§_wøµî_0xcb
();

237 "C" 
	`i§_wøµî_0xcc
();

238 "C" 
	`i§_wøµî_0xcd
();

239 "C" 
	`i§_wøµî_0x˚
();

240 "C" 
	`i§_wøµî_0xcf
();

241 "C" 
	`i§_wøµî_0xd0
();

242 "C" 
	`i§_wøµî_0xd1
();

243 "C" 
	`i§_wøµî_0xd2
();

244 "C" 
	`i§_wøµî_0xd3
();

245 "C" 
	`i§_wøµî_0xd4
();

246 "C" 
	`i§_wøµî_0xd5
();

247 "C" 
	`i§_wøµî_0xd6
();

248 "C" 
	`i§_wøµî_0xd7
();

249 "C" 
	`i§_wøµî_0xd8
();

250 "C" 
	`i§_wøµî_0xd9
();

251 "C" 
	`i§_wøµî_0xda
();

252 "C" 
	`i§_wøµî_0xdb
();

253 "C" 
	`i§_wøµî_0xdc
();

254 "C" 
	`i§_wøµî_0xdd
();

255 "C" 
	`i§_wøµî_0xde
();

256 "C" 
	`i§_wøµî_0xdf
();

257 "C" 
	`i§_wøµî_0xe0
();

258 "C" 
	`i§_wøµî_0xe1
();

259 "C" 
	`i§_wøµî_0xe2
();

260 "C" 
	`i§_wøµî_0xe3
();

261 "C" 
	`i§_wøµî_0xe4
();

262 "C" 
	`i§_wøµî_0xe5
();

263 "C" 
	`i§_wøµî_0xe6
();

264 "C" 
	`i§_wøµî_0xe7
();

265 "C" 
	`i§_wøµî_0xe8
();

266 "C" 
	`i§_wøµî_0xe9
();

267 "C" 
	`i§_wøµî_0xó
();

268 "C" 
	`i§_wøµî_0xeb
();

269 "C" 
	`i§_wøµî_0xec
();

270 "C" 
	`i§_wøµî_0xed
();

271 "C" 
	`i§_wøµî_0xì
();

272 "C" 
	`i§_wøµî_0xef
();

273 "C" 
	`i§_wøµî_0xf0
();

274 "C" 
	`i§_wøµî_0xf1
();

275 "C" 
	`i§_wøµî_0xf2
();

276 "C" 
	`i§_wøµî_0xf3
();

277 "C" 
	`i§_wøµî_0xf4
();

278 "C" 
	`i§_wøµî_0xf5
();

279 "C" 
	`i§_wøµî_0xf6
();

280 "C" 
	`i§_wøµî_0xf7
();

281 "C" 
	`i§_wøµî_0xf8
();

282 "C" 
	`i§_wøµî_0xf9
();

283 "C" 
	`i§_wøµî_0xÁ
();

284 "C" 
	`i§_wøµî_0xfb
();

285 "C" 
	`i§_wøµî_0xfc
();

286 "C" 
	`i§_wøµî_0xfd
();

287 "C" 
	`i§_wøµî_0x„
();

288 "C" 
	`i§_wøµî_0xff
();

	@src/machine/asmshare.h

17 #i‚de‡
_asmsh¨e_h_


18 
	#_asmsh¨e_h_
 1

	)

22 #ifde‡
__ASSEMBLY__


23 .
£t
 
	gBOOTAP16
, 0x1000

24 .
£t
 
	gTSSRSP
, 0x54

26 
	#BOOTAP16
 0x1000

	)

27 
	#TSSRSP
 0x54

	)

28 
	#MAXKERNSIZE
 0x40000000

	)

	@src/main/Experiments.cc

1 
	~"ru¡ime/Thªad.h
"

2 
	~"kî√l/Ouçut.h
"

3 
	~"machöe/APIC.h
"

4 
	~"machöe/Machöe.h
"

6 (*
tùiH™dÀr
)();

9 
«me•a˚
 
IPI_Ex≥rimít
 {

11 vﬁ©ûê
boﬁ
 
d⁄e
 = 
Ál£
;

13 vﬁ©ûê
mw‹d
 
tùiCou¡
 = 0;

14 
	`tùiCou¡î
(Ë{ 
tùiCou¡
 += 1; }

16 
mw‹d
 
rCou¡
 = 0;

17 
	`ª˚ivî
(Ë{ !
d⁄e
Ë
rCou¡
 += 1; }

19 
mw‹d
 
sCou¡
 = 0;

20 
mw‹d
 
tscSèπ
, 
tscEnd
;

21 
	`£ndî
() {

22 
tscSèπ
 = 
CPU
::
	`ªadTSC
();

23 
i
 = 0; i < 1000; i += 1) {

24 
mw‹d
 
tc
 = 
tùiCou¡
;

25 
Machöe
::
	`£ndIPI
(1, 
APIC
::
Te°IPI
);

26 
tc
 =
tùiCou¡
Ë
sCou¡
 += 1;

28 
tscEnd
 = 
CPU
::
	`ªadTSC
();

29 
d⁄e
 = 
åue
;

32 
	`run
() {

33 
KOUT
::
	`oué
("IPIÉxperimentÑunning...");

34 
tùiH™dÀr
 = 
tùiCou¡î
;

35 
Thªad
* 
t
 = Thªad::
	`¸óã
();

36 
Machöe
::
	`£tAfföôy
(*
t
, 1);

37 
t
->
	`°¨t
((
±r_t
)
ª˚ivî
);

38 
t
 = 
Thªad
::
	`¸óã
();

39 
Machöe
::
	`£tAfföôy
(*
t
, 2);

40 
t
->
	`°¨t
((
±r_t
)
£ndî
);

41 !
d⁄e
);

42 
KOUT
::
	`oué
("IPIÉx≥rimíàªsu…s: ", 
tùiCou¡
, ' ', 
sCou¡
, ' ', 
rCou¡
, ' ', 
tscEnd
 - 
tscSèπ
);

45 
	}
}

47 
	$Ex≥rimíts
() {

48 
IPI_Ex≥rimít
::
	`run
();

50 
	}
}

	@src/main/InitProcess.cc

17 
	~"kî√l/Pro˚ss.h
"

18 
	~"kî√l/Tªe.h
"

20 
	$InôPro˚ss
() {

22 
Tªe
<
ThªadNode
> *
ªadyTªe
 = 
√w
 Tree<ThreadNode>();

24 i‡(
ªadyTªe
){}

26 
Pro˚ss
* 
p0
 = 
k√w
<Process>();

27 
p0
->
	`exec
("systest");

28 #i‡!
TESTING_KEYCODE_LOOP


29 
Pro˚ss
* 
p1
 = 
k√w
<Process>();

30 
p1
->
	`exec
("kbloop");

32 
Pro˚ss
* 
p2
 = 
k√w
<Process>();

33 
p2
->
	`exec
("threadtest");

34 
Pro˚ss
* 
p3
 = 
k√w
<Process>();

35 
p3
->
	`exec
("manythread");

37 
	}
}

	@src/main/LockTest.cc

17 
	~"gíîic/Buf„rs.h
"

18 
	~"ru¡ime/SyncQueues.h
"

19 
	~"ru¡ime/Thªad.h
"

20 
	~"kî√l/Clock.h
"

21 
	~"kî√l/Ouçut.h
"

22 
	~<©omic
>

24 
Muãx
 
	gmtx
;

25 
Sem≠h‹e
 
£m
(1);

26 
Sem≠h‹e
 
	gt£m
;

27 
mw‹d
 
	gacquúeCou¡
;

28 
mw‹d
 
	gªÀa£Cou¡
;

30 c⁄° 
	gã°cou¡
 = 5000;

31 c⁄° 
	g¥ötcou¡
 = 500;

34 
	$muãxTe°Maö
(
±r_t
 
x
) {

35 
i
 = 0; i < 
ã°cou¡
; i++) {

36 
mw‹d
 
t
 = 
Clock
::
	`now
();

37 i‡(
t
 % 11 =0 && 
mtx
.
	`åyAcquúe
(t +Å % 11)) {

38 
DBG
::
	`oué
(DBG::
Te°s
, "muãx ", (*)
x
, "Çb");

40 
mtx
.
	`acquúe
();

42 
	`__©omic_add_„tch
–&
acquúeCou¡
, 1, 
__ATOMIC_RELAXED
);

43 i‡(
i
 % 
¥ötcou¡
 == 0) {

44 
DBG
::
	`oué
(DBG::
Te°s
, "muãx ", (*)
x
, ' ', 
i
);

46 
mtx
.
	`ªÀa£
();

47 
	`__©omic_add_„tch
–&
ªÀa£Cou¡
, 1, 
__ATOMIC_RELAXED
);

49 
DBG
::
	`oué
(DBG::
Te°s
, "muãx ", (*)
x
, " done");

50 
t£m
.
	`V
();

51 
	}
}

53 
	$MuãxTe°
() {

54 
KOUT
::
	`oué
("running MutexTest...");

55 
acquúeCou¡
 = 
ªÀa£Cou¡
 = 0;

56 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m0");

57 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m1");

58 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m2");

59 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m3");

60 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m4");

61 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m5");

62 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m6");

63 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m7");

64 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m8");

65 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
muãxTe°Maö
, (ptr_t)"m9");

66 
DBG
::
	`oué
(DBG::
Te°s
, "MutexTest:állÅhreadsÑunning...");

67 
mw‹d
 
i
 = 0; i < 10; i +1Ë
t£m
.
	`P
();

68 
	`KASSERT1
(
acquúeCou¡
 =
ªÀa£Cou¡
, "acquire/release counts differ");

69 
	`KASSERT1
(
acquúeCou¡
 =
ã°cou¡
 * 10, "wrongÇumber ofácquire/release");

70 
	}
}

73 
	$£m≠h‹eTe°Maö
(
±r_t
 
x
) {

74 
i
 = 0; i < 
ã°cou¡
; i++) {

75 
mw‹d
 
t
 = 
Clock
::
	`now
();

76 i‡(
t
 % 11 =0 && 
£m
.
	`åyP
(t +Å % 11)) {

77 
DBG
::
	`oué
(DBG::
Te°s
, "£m≠h‹ê", (*)
x
, "Çb");

79 
£m
.
	`P
();

81 
	`__©omic_add_„tch
–&
acquúeCou¡
, 1, 
__ATOMIC_RELAXED
);

82 i‡(
i
 % 
¥ötcou¡
 == 0) {

83 
DBG
::
	`oué
(DBG::
Te°s
, "£m≠h‹ê", (*)
x
, ' ', 
i
);

85 
£m
.
	`V
();

86 
	`__©omic_add_„tch
–&
ªÀa£Cou¡
, 1, 
__ATOMIC_RELAXED
);

88 
DBG
::
	`oué
(DBG::
Te°s
, "£m≠h‹ê", (*)
x
, " done");

89 
t£m
.
	`V
();

90 
	}
}

92 
	$Sem≠h‹eTe°
() {

93 
KOUT
::
	`oué
("running SemaphoreTest...");

94 
acquúeCou¡
 = 
ªÀa£Cou¡
 = 0;

95 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s0");

96 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s1");

97 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s2");

98 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s3");

99 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s4");

100 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s5");

101 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s6");

102 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s7");

103 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s8");

104 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
£m≠h‹eTe°Maö
, (ptr_t)"s9");

105 
DBG
::
	`oué
(DBG::
Te°s
, "SemaphoreTest:állÅhreadsÑunning...");

106 
mw‹d
 
i
 = 0; i < 10; i +1Ë
t£m
.
	`P
();

107 
	`KASSERT1
(
acquúeCou¡
 =
ªÀa£Cou¡
, "acquire/release count differ");

108 
	`KASSERT1
(
acquúeCou¡
 =
ã°cou¡
 * 10, "wrongÇumber ofácquire/release");

109 
	}
}

112 c⁄° 
mw‹d
 
	gSENTINEL
 = ~0;

113 
	gMesßgeQueue
<
	gFixedRögBuf„r
<
	gmw‹d
, 256>> 
	gsyncQueue
;

115 
	$c⁄sumî
(
±r_t
) {

117 
mw‹d
 
vÆ
 = 
syncQueue
.
	`ªcv
();

118 i‡(
vÆ
 =
SENTINEL
) ;

119 i‡(
vÆ
 % 
¥ötcou¡
 =0Ë
DBG
::
	`oué
(DBG::
Basic
, "removed:", val);

121 
t£m
.
	`V
();

122 
	}
}

124 
	$¥odu˚r
(
±r_t
) {

125 
mw‹d
 
i
 = 0; i < 
ã°cou¡
; i += 1) {

126 !
syncQueue
.
	`åySíd
(
i
)Ë
CPU
::
	`Pau£
();

128 
syncQueue
.
	`£nd
(
SENTINEL
);

129 
	}
}

131 
	$SyncQueueTe°
() {

132 
KOUT
::
	`oué
("running SyncQueueTest...");

133 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
c⁄sumî
);

134 
Thªad
::
	`¸óã
()->
	`°¨t
((
±r_t
)
¥odu˚r
);

135 
t£m
.
	`P
();

136 
	}
}

138 
	$LockTe°
() {

139 
	`MuãxTe°
();

140 
	`Sem≠h‹eTe°
();

141 
	`SyncQueueTe°
();

142 
KOUT
::
	`oué
("LockTest done");

144 
	}
}

	@src/main/Makefile

1 
	gSRCDIR
:=
$
(
CURDIR
)/..

2 
ö˛ude
 
$
(
SRCDIR
)/
Makefûe
.
c⁄fig


4 
U£rMaö
.
h
: 
$
(
SRCDIR
)/
Makefûe
.
c⁄fig


5 
rm
 -
f
 
$
@

6 ./
£tup_u£rmaö
.
sh
 
	$$
(
MODULES
)

8 
˛ón
:

10 
v˛ón
:

11 
rm
 -
f
 
U£rMaö
.
h


13 
dï
 
dïíd
 
Makefûe
.dep:

	@src/main/TcpTest.cc

8 
	~"kî√l/Mem‹yM™agî.h
"

9 
	~"kî√l/Ouçut.h
"

11 
	~"exã∫/lwù/lwù/§c/ö˛ude/lwù/sockës.h
"

13 
	~<c°rög
>

15 
	$T˝Te°
() {

16 
fd
 = 
	`lwù_sockë
(
PF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

17 i‡(
fd
 < 0) {

18 
DBG
::
	`oué
(DBG::
Lwù
,"cannot create socket");

22 
sockaddr_ö
 
addr
;

23 
	`mem£t
(&
addr
, 0, (addr));

24 
addr
.
sö_Ámûy
 = 
AF_INET
;

25 
addr
.
sö_p‹t
 = 
	`ht⁄s
(80);

27 
ù_addr
 
ãmp
;

28 
ªs
 = 
	`ùaddr_©⁄
("74.125.226.146", &
ãmp
);

30 i‡(
ªs
 < 0) {

31 
DBG
::
	`oué
(DBG::
Lwù
,"error: firstÖarameter isÇotá validáddress family");

32 
	`lwù_˛o£
(
fd
);

34 } i‡(
ªs
 == 0) {

35 
DBG
::
	`oué
(DBG::
Lwù
,"char string (secondÖarameter doesÇot contain valid ipaddress)");

36 
	`lwù_˛o£
(
fd
);

40 
addr
.
sö_addr
.
s_addr
 = 
ãmp
.addr;

42 i‡(
	`lwù_c⁄√˘
(
fd
, (
sockaddr
 *)&
addr
, (addr)) < 0) {

43 
DBG
::
	`oué
(DBG::
Lwù
,"TCP connect failed");

44 
	`lwù_˛o£
(
fd
);

48 
DBG
::
	`oué
(DBG::
Lwù
,"ConnectedÅo 74.125.226.146");

50 c⁄° *
msg
 = "Test Message\n";

51 
	`lwù_wrôe
(
fd
,
msg
,
	`°æí
(msg));

52 
buf„r
[1024];

53 
Àn
 = 
	`lwù_ªad
(
fd
,
buf„r
,1023);

54 
buf„r
[
Àn
] = '\0';

55 
DBG
::
	`oué
(DBG::
Lwù
,"TCPÑe˚ived: ",
buf„r
);

57 
	`lwù_shutdown
(
fd
, 
SHUT_RDWR
);

58 
	`lwù_˛o£
(
fd
);

60 
	}
}

	@src/main/UserMain.h

1 
LockTe°
();

2 
T˝Te°
();

3 
Ex≥rimíts
();

4 
InôPro˚ss
();

6 
	$U£rMaö
() {

7 
	`LockTe°
();

8 
	`T˝Te°
();

9 
	`Ex≥rimíts
();

10 
	`InôPro˚ss
();

11 
	}
}

	@src/runtime/BlockingSync.cc

17 
	~"ru¡ime/BlockögSync.h
"

19 
BasicLock
 
	gTimeout
::
lock
;

20 
	gmu…im≠
<
	gmw‹d
,
	gThªad
*> 
	gTimeout
::
queue
;

	@src/runtime/BlockingSync.h

17 #i‚de‡
_BlockögSync_h_


18 
	#_BlockögSync_h_
 1

	)

20 
	~"gíîic/EmbeddedC⁄èöîs.h
"

21 
	~"ru¡ime/Ru¡ime.h
"

22 
	~"ru¡ime/ScheduÀr.h
"

23 
	~"ru¡ime/Thªad.h
"

25 
	~<li°
>

26 
	~<m≠
>

28 ˛as†
	cTimeout
 {

29 
‰õnd
 
˛ass
 
	mTimeoutInfo
;

30 
‰õnd
 
˛ass
 
	mTimeoutBlockögInfo
;

31 
BasicLock
 
	mlock
;

32 
	mmu…im≠
<
	mmw‹d
,
	mThªad
*> 
	mqueue
;

34 
	mpublic
:

35 
ölöe
 
¶ìp
(
mw‹d
 
timeout
);

36 
ölöe
 
checkExpúy
(
mw‹d
 
now
);

39 ˛as†
	cUnblockInfo
 {

40 
	mpublic
:

41 
vútuÆ
 
	$ˇn˚lTimeout
() {}

42 
vútuÆ
 
	$ˇn˚lBlockög
(
Thªad
& 
t
Ë{
	}
}

45 ˛as†
	cTimeoutInfo
 : 
public
 
vútuÆ
 
UnblockInfo
 {

46 
¥Ÿe˘ed
:

47 
	$de˛ty≥
(
Timeout
::
queue
)::
ôî©‹
 
tôî
;

48 
public
:

49 
	$su•íd
(
mw‹d
 
timeout
) {

50 
Thªad
* 
thr
 = 
Ru¡ime
::
	`gëCuºThªad
();

51 
Timeout
::
lock
.
	`acquúe
();

52 i‡(
thr
->
	`block
(
this
)) {

53 
tôî
 = 
Timeout
::
queue
.
	`ö£π
–{
timeout
, 
thr
} );

54 
Ru¡ime
::
	`gëScheduÀr
()->
	`su•íd
(
Timeout
::
lock
);

56 
Timeout
::
lock
.
	`ªÀa£
();

59 
vútuÆ
 
	$ˇn˚lTimeout
() {

60 
AutoLock
 
	`Æ
(
Timeout
::
lock
);

61 
Timeout
::
queue
.
	`îa£
(
tôî
);

62 
	}
}

65 ˛as†
	cBlockögInfo
 : 
public
 
vútuÆ
 
UnblockInfo
 {

66 
¥Ÿe˘ed
:

67 
BasicLock
& 
bLock
;

68 
boﬁ
 
	mtimedOut
;

69 
	mpublic
:

70 
	$BlockögInfo
(
BasicLock
& 
bl
Ë: 
	`bLock
(bl), 
	$timedOut
(
Ál£
) {

71 
	`GENASSERT0
(
bl
.
	`check
());

73 
boﬁ
 
	`su•íd
(
EmbeddedLi°
<
Thªad
>& 
queue
) {

74 
Thªad
* 
thr
 = 
Ru¡ime
::
	`gëCuºThªad
();

75 i‡(
thr
->
	`block
(
this
)) {

76 
queue
.
	`push_back
(*
thr
);

77 
Ru¡ime
::
	`gëScheduÀr
()->
	`su•íd
(
bLock
);

78  !
timedOut
;

80 
bLock
.
	`ªÀa£
();

81  
Ál£
;

82 
	}
}

83 
vútuÆ
 
	$ˇn˚lBlockög
(
Thªad
& 
t
) {

84 
timedOut
 = 
åue
;

85 
AutoLock
 
	`Æ
(
bLock
);

86 
EmbeddedLi°
<
Thªad
>::
	`ªmove
(
t
);

87 
	}
}

90 
˛ass
 
	gTimeoutBlockögInfo
 : 
public
 
TimeoutInfo
,Öubli¯
	gBlockögInfo
 {

91 
	gpublic
:

92 
TimeoutBlockögInfo
(
BasicLock
& 
bl
Ë: 
BlockögInfo
(bl) {}

93 
boﬁ
 
su•íd
(
EmbeddedLi°
<
Thªad
>& 
queue
, 
mw‹d
 
timeout
) {

94 
Thªad
* 
	gthr
 = 
Ru¡ime
::
gëCuºThªad
();

95 
	gTimeout
::
lock
.
acquúe
();

96 i‡(
	gthr
->
block
(
this
)) {

97 
	gqueue
.
push_back
(*
thr
);

98 
	gtôî
 = 
Timeout
::
queue
.
ö£π
–{
timeout
, 
thr
} );

99 
	gRu¡ime
::
gëScheduÀr
()->
su•íd
(
bLock
, 
Timeout
::
lock
);

100  !
	gtimedOut
;

102 
	gTimeout
::
lock
.
ªÀa£
();

103 
	gbLock
.
ªÀa£
();

104  
	gÁl£
;

108 
ölöe
 
	gTimeout
::
	$¶ìp
(
mw‹d
 
timeout
) {

109 
TimeoutInfo
 
ti
;

110 
ti
.
	`su•íd
(
timeout
);

111 
	}
}

113 
ölöe
 
	gTimeout
::
	$checkExpúy
(
mw‹d
 
now
) {

114 
li°
<
Thªad
*> 
fúeLi°
;

115 
lock
.
	`acquúe
();

116 autÿ
ô
 = 
queue
.
	`begö
(); ià!queue.
	`íd
(Ë&& it->
fú°
 <
now
; ) {

117 
Thªad
* 
t
 = 
ô
->
£c⁄d
;

118 i‡(
t
->
	`unblock
()) {

119 
ô
 = 
queue
.
	`îa£
(it);

120 
fúeLi°
.
	`push_back
(
t
);

122 
ô
 = 
	`√xt
(it);

125 
lock
.
	`ªÀa£
();

126 autÿ
t
 : 
fúeLi°
) {

127 
t
->
	`gëUnblockInfo
().
	`ˇn˚lBlockög
(*t);

128 
ScheduÀr
::
	`ªsume
(*
t
);

130 
	}
}

132 ˛as†
	cBlockögQueue
 {

133 
	mEmbeddedLi°
<
	mThªad
> 
	mqueue
;

135 
BlockögQueue
(c⁄° BlockögQueue&Ë
dñëe
;

136 c⁄° 
	mBlockögQueue
& 
	m›î©‹
=(c⁄° 
BlockögQueue
&Ë
dñëe
;

138 
	mpublic
:

139 
BlockögQueue
() = ;

140 ~
	$BlockögQueue
(Ë{ 
	`GENASSERT0
(
	`em±y
()); }

141 
boﬁ
 
	$em±y
(Ëc⁄° {  
queue
.
	`em±y
(); 
	}
}

144 
boﬁ
 
block
(
BasicLock
& 
bLock
, 
mw‹d
 
timeout
 = 
limô
<mword>()) {

145 i‡(
timeout
 =
limô
<
mw‹d
>()) {

146 
BlockögInfo
 
bi
(
bLock
);

147  
	gbi
.
su•íd
(
queue
);

148 } i‡(
	gtimeout
 > 0) {

149 
TimeoutBlockögInfo
 
tbi
(
bLock
);

150  
	gtbi
.
su•íd
(
queue
, 
timeout
);

152 
	gbLock
.
ªÀa£
();

153  
	gÁl£
;

156 
boﬁ
 
	$ªsume
(
BasicLock
& 
bLock
, 
Thªad
*& 
t
) {

157 
t
 = 
queue
.
	`‰⁄t
();Å !queue.
	`„n˚
();Å = 
EmbeddedLi°
<
Thªad
>::
	`√xt
(*t)) {

158 i‡(
t
->
	`unblock
()) {

159 
EmbeddedLi°
<
Thªad
>::
	`ªmove
(*
t
);

160 
bLock
.
	`ªÀa£
();

161 
t
->
	`gëUnblockInfo
().
	`ˇn˚lTimeout
();

162 
ScheduÀr
::
	`ªsume
(*
t
);

163  
åue
;

166  
Ál£
;

167 
	}
}

169 
boﬁ
 
	$ªsume
(
BasicLock
& 
bl
Ë{ 
Thªad
* 
dummy
;  
	`ªsume
(bl, dummy); 
	}
}

172 ˛as†
	cMuãx
 {

173 
	m¥Ÿe˘ed
:

174 
BasicLock
 
lock
;

175 
Thªad
* 
	mow√r
;

176 
BlockögQueue
 
	mbq
;

178 
boﬁ
 
öã∫ÆAcquúe
(boﬁ 
ow√rLock
, 
mw‹d
 
timeout
 = 
limô
<mword>()) {

179 
¶ow∑th
(
ow√r
 =
Ru¡ime
::
gëCuºThªad
()) {

180 
GENASSERT1
(
ow√rLock
, 
FmtHex
(
ow√r
));

182 
	mlock
.
acquúe
();

183 
¶ow∑th
(
ow√r
 !
nuŒ±r
Ë 
bq
.
block
(
lock
, 
timeout
);

184 
	mow√r
 = 
Ru¡ime
::
gëCuºThªad
();

185 
	mlock
.
ªÀa£
();

187  
	måue
;

190 
	$öã∫ÆRñó£
() {

191 
	`¶ow∑th
(!
bq
.
	`ªsume
(
lock
, 
ow√r
)) {

192 
ow√r
 = 
nuŒ±r
;

193 
lock
.
	`ªÀa£
();

195 
	}
}

197 
	gpublic
:

198 
	$Muãx
(Ë: 
	$ow√r
(
nuŒ±r
Ë{
	}
}

200 
boﬁ
 
	$acquúe
() {

201  
	`öã∫ÆAcquúe
(
Ál£
);

202 
	}
}

204 
boﬁ
 
	$åyAcquúe
(
mw‹d
 
t
 = 0) {

205  
	`öã∫ÆAcquúe
(
Ál£
, 
t
);

206 
	}
}

208 
	$ªÀa£
() {

209 
	`GENASSERT1
(
ow√r
 =
Ru¡ime
::
	`gëCuºThªad
(), 
	`FmtHex
(owner));

210 
lock
.
	`acquúe
();

211 
	`öã∫ÆRñó£
();

212 
	}
}

215 ˛as†
	cOw√rLock
 : 
¥iv©e
 
Muãx
 {

216 
mw‹d
 
cou¡î
;

218 
	mpublic
:

219 
	$Ow√rLock
(Ë: 
	$cou¡î
(0) {}

221 
mw‹d
 
	$acquúe
() {

222 
	`¶ow∑th
(
	`öã∫ÆAcquúe
(
åue
)Ë ++
cou¡î
;  0;

223 
	}
}

225 
mw‹d
 
	$åyAcquúe
(
mw‹d
 
t
 = 0) {

226 
	`¶ow∑th
(
	`öã∫ÆAcquúe
(
åue
, 
t
)Ë ++
cou¡î
;  0;

227 
	}
}

229 
mw‹d
 
	$ªÀa£
() {

230 
	`GENASSERT1
(
ow√r
 =
Ru¡ime
::
	`gëCuºThªad
(), 
	`FmtHex
(owner));

231 
lock
.
	`acquúe
();

232 
cou¡î
 -= 1;

233 
mw‹d
 
ªtvÆ
 = 
cou¡î
;

234 i‡(
cou¡î
 =0Ë
	`öã∫ÆRñó£
();

235 
lock
.
	`ªÀa£
();

236  
ªtvÆ
;

237 
	}
}

240 ˛as†
	cSem≠h‹e
 {

241 
BasicLock
 
	mlock
;

242 
mw‹d
 
	mcou¡î
;

243 
BlockögQueue
 
	mbq
;

245 
boﬁ
 
öã∫ÆP
(
BasicLock
* 
l
, 
mw‹d
 
timeout
 = 
limô
<mword>()) {

246 
lock
.
acquúe
(
l
);

247 
Á°∑th
(
cou¡î
 < 1Ë 
	mbq
.
block
(
lock
, 
timeout
);

248 
	mcou¡î
 -= 1;

249 
	mlock
.
ªÀa£
();

250  
	måue
;

253 
	gpublic
:

254 
ex∂icô
 
	$Sem≠h‹e
(
mw‹d
 
c
 = 0Ë: 
	$cou¡î
(
c
Ë{
	}
}

255 
boﬁ
 
	$em±y
(Ë{  
bq
.
	`em±y
(); 
	}
}

257 
boﬁ
 
	$P
(
BasicLock
* 
l
 = 
nuŒ±r
) {

258  
	`öã∫ÆP
(
l
);

259 
	}
}

261 
boﬁ
 
	$åyP
(
mw‹d
 
t
 = 0, 
BasicLock
* 
l
 = 
nuŒ±r
) {

262  
	`öã∫ÆP
(
l
, 
t
);

263 
	}
}

265 
	$V
(
BasicLock
* 
l
 = 
nuŒ±r
) {

266 
lock
.
	`acquúe
(
l
);

267 
	`¶ow∑th
(!
bq
.
	`ªsume
(
lock
)) {

268 
cou¡î
 += 1;

269 
lock
.
	`ªÀa£
();

271 
	}
}

274 ˛as†
	cC⁄dôi⁄
 {

275 
BlockögQueue
 
	mbq
;

276 
	mpublic
:

277 
boﬁ
 
	$em±y
(Ë{  
bq
.
	`em±y
(); }

278 
boﬁ
 
	$waô
(
BasicLock
& 
lock
Ë{  
bq
.
	`block
÷ock); 
	}
}

279 
	$sig«l
(
BasicLock
& 
lock
Ë{ 
	`¶ow∑th
(!
bq
.
	`ªsume
÷ock)Ëlock.
	`ªÀa£
(); 
	}
}

	@src/runtime/JoinableThread.h

17 #i‚de‡
_JoöabÀThªad_h_


18 
	#_JoöabÀThªad_h_
 1

	)

20 
	~"gíîic/Buf„rs.h
"

21 
	~"ru¡ime/SyncQueues.h
"

22 
	~"ru¡ime/Thªad.h
"

24 ˛as†
	cJoöabÀThªad
 : 
public
 
Thªad
 {

25 
C⁄dôi⁄
 
waô
;

26 
±r_t
* 
	mªsu…
;

27 
	eSèã
 { 
	mReguœr
, 
	mDëached
, 
	mJoöög
 } 
	g°©e
;

28 
	gpublic
:

29 
	$JoöabÀThªad
(
vaddr
 
sb
, 
size_t
 
ss
Ë: 
	`Thªad
(sb, ss), 
	$°©e
(
Reguœr
Ë{
	}
}

30 
	$po°
(
±r_t
 
ªs
, 
BasicLock
& 
lock
) {

31 i‡(
°©e
 =
Dëached
) ;

32 i‡(
waô
.
	`em±y
()) {

33 
ªsu…
 = &
ªs
;

34 
waô
.
	`waô
(
lock
);

36 *
ªsu…
 = 
ªs
;

37 
waô
.
	`sig«l
(
lock
);

39 
	}
}

40 
boﬁ
 
	$joö
(
±r_t
& 
ªs
, 
BasicLock
& 
l
) {

41 i‡(
°©e
 !
Reguœr
Ë 
Ál£
;

42 
°©e
 = 
Joöög
;

43 i‡(
waô
.
	`em±y
()) {

44 
ªsu…
 = &
ªs
;

45 
waô
.
	`waô
(
l
);

47 
ªs
 = *
ªsu…
;

48 
waô
.
	`sig«l
(
l
);

50  
åue
;

51 
	}
}

	@src/runtime/Runtime.h

17 #i‚de‡
_Ru¡ime_h_


18 
	#_Ru¡ime_h_
 1

	)

20 #i‡
deföed
(
__KOS__
)

22 
	~"kî√l/AddªssS∑˚.h
"

23 
	~"kî√l/Ouçut.h
"

24 
	~"machöe/Machöe.h
"

25 
	~"machöe/Pro˚ss‹.h
"

26 
	~"machöe/SpöLock.h
"

28 
SpöLock
 
	tBasicLock
;

29 
	gSc›edLock
<
	tBasicLock
> 
	tAutoLock
;

31 
˛ass
 
	gScheduÀr
;

32 
˛ass
 
	gThªad
;

34 c⁄° 
mw‹d
 
	gt›Pri‹ôy
 = 0;

35 c⁄° 
mw‹d
 
	gdefPri‹ôy
 = 1;

36 c⁄° 
mw‹d
 
	gidÀPri‹ôy
 = 2;

37 c⁄° 
mw‹d
 
	gmaxPri‹ôy
 = 3;

39 
	#CHECK_LOCK_MIN
(
x
) \

40 
	`KASSERT1
(
LoˇlPro˚ss‹
::
	`checkLock
(Ë> (
x
), LoˇlPro˚ss‹::
	`gëLockCou¡
())

	)

42 
	#CHECK_LOCK_COUNT
(
x
) \

43 
	`KASSERT1
(
LoˇlPro˚ss‹
::
	`checkLock
(Ë=(
x
), LoˇlPro˚ss‹::
	`gëLockCou¡
())

	)

45 
«me•a˚
 
	gRu¡ime
 {

49 
	sThªadSèts
 {

50 
mw‹d
 
	gtscLa°
;

51 
mw‹d
 
	gtscTŸÆ
;

52 
ThªadSèts
(Ë: 
tscLa°
(0), 
tscTŸÆ
(0) {}

53 
upd©e
(
ThªadSèts
& 
√xt
) {

54 
mw‹d
 
	gtsc
 = 
CPU
::
ªadTSC
();

55 
	gtscTŸÆ
 +
tsc
 - 
tscLa°
;

56 
	g√xt
.
	gtscLa°
 = 
tsc
;

58 
mw‹d
 
gëCy˛eCou¡
(Ëc⁄° {  
	gtscTŸÆ
; }

61 
	gCPU
::
	tMachC⁄ãxt
 MachContext;

65 
	sFakeLock
 {

66 
FakeLock
(Ë{ 
	gLoˇlPro˚ss‹
::
lockFake
(); }

67 ~
FakeLock
(Ë{ 
	gLoˇlPro˚ss‹
::
u∆ock
(
åue
); }

70 
	sRólLock
 {

71 
RólLock
(Ë{ 
	gLoˇlPro˚ss‹
::
lock
(
åue
); }

72 ~
RólLock
(Ë{ 
	gLoˇlPro˚ss‹
::
u∆ock
(
åue
); }

77 
AddªssS∑˚
 
	tMem‹yC⁄ãxt
;

79 
	gMem‹yC⁄ãxt
& 
gëDeÁu…Mem‹yC⁄ãxt
(Ë{  
	gkî√lS∑˚
; }

80 
	gMem‹yC⁄ãxt
& 
gëMem‹yC⁄ãxt
(Ë{  
CuºAS
(); }

82 
vaddr
 
ÆlocThªadSèck
(
size_t
 
ss
) {

83  
	gkî√lS∑˚
.
ÆlocSèck
(
ss
);

86 
ªÀa£ThªadSèck
(
vaddr
 
vma
, 
size_t
 
ss
) {

87 
	gkî√lS∑˚
.
ªÀa£Sèck
(
vma
, 
ss
);

92 
Thªad
* 
gëCuºThªad
(Ë{  
	gLoˇlPro˚ss‹
::getCurrThread(); }

93 
£tCuºThªad
(
Thªad
* 
t
Ë{ 
	gLoˇlPro˚ss‹
::setCurrThread(t); }

94 
ScheduÀr
* 
gëScheduÀr
(Ë{  
	gLoˇlPro˚ss‹
::getScheduler(); }

95 
wakeUp
(
ScheduÀr
* 
s
Ë{ 
	gMachöe
::
£ndWakeIPI
(s); }

99 
idÀLo›
(
ScheduÀr
*);

100 
po°Resume
(
boﬁ
, 
Thªad
&, 
AddªssS∑˚
&);

104 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

105 
debugT
(c⁄° 
Args
&... 
a
Ë{ 
	gDBG
::
oué
(
DBG
::
Thªads
,á...); }

107 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

108 
debugS
(c⁄° 
Args
&... 
a
Ë{ 
	gDBG
::
oué
(
DBG
::
ScheduÀr
,á...); }

112 #îr‹ 
undeföed
 
∂©f‹m
: 
⁄ly
 
__KOS__
 
suµ‹ãd
 
©
 
this
 
time


	@src/runtime/RuntimeImpl.h

17 #i‚de‡
_Ru¡imeIm∂_h_


18 
	#_Ru¡imeIm∂_h_
 1

	)

20 #i‡
deföed
(
__KOS__
)

22 
	~"ru¡ime/Ru¡ime.h
"

23 
	~"ru¡ime/ScheduÀr.h
"

24 
	~"kî√l/Pro˚ss.h
"

26 
«me•a˚
 
	gRu¡ime
 {

27 
idÀLo›
(
ScheduÀr
* 
s
) {

30 
mw‹d
 
	ghÆt
 = 
s
->
¥ìm±i⁄
 + 3;

31 !
	gs
->
	gªadyCou¡
 && 
sw‹d
(
hÆt
 - 
s
->
¥ìm±i⁄
Ë> 0Ë
	gCPU
::
Pau£
();

32 
	ghÆt
 = 
s
->
ªsum±i⁄
;

33 
	gLoˇlPro˚ss‹
::
lock
(
åue
);

34 
	gs
->
¥ìm±
();

35 
	gLoˇlPro˚ss‹
::
u∆ock
(
åue
);

36 
	ghÆt
 =
s
->
ªsum±i⁄
Ë
CPU
::
HÆt
();

38 
uƒóchabÀ
();

41 
po°Resume
(
boﬁ
 
övoke
, 
Thªad
& 
¥evThªad
, 
AddªssS∑˚
& 
√xtAS
) {

42 
CHECK_LOCK_COUNT
(1);

43 
	gAddªssS∑˚
& 
	g¥evAS
 = 
CuºAS
();

44 
Á°∑th
(
¥evThªad
.
°©e
 =
Thªad
::
Föishög
) {

45 i‡(
¥evAS
.
u£r
(Ë&& 
ªöãΩªt_ˇ°
<
Pro˚ss
*>(&¥evAS)->
de°royThªad
(
¥evThªad
)) {

46 
¥evAS
.
˛órU£rPagög
();

47 
	g√xtAS
.
íãr
();

48 
dñëe
 
	gªöãΩªt_ˇ°
<
	gPro˚ss
*>(&
	g¥evAS
);

50 
	g√xtAS
.
íãr
();

52 
	g¥evThªad
.
de°roy
();

54 i‡(
	g¥evAS
.
u£r
()Ë
	g¥evThªad
.
	g˘x
.
ßve
();

55 
	g√xtAS
.
íãr
();

57 i‡(
	g√xtAS
.
u£r
()Ë
	gRu¡ime
::
gëCuºThªad
()->
˘x
.
ª°‹e
();

58 i‡(
	gövoke
Ë
	gLoˇlPro˚ss‹
::
u∆ock
(
åue
);

63 #îr‹ 
undeföed
 
∂©f‹m
: 
⁄ly
 
__KOS__
 
suµ‹ãd
 
©
 
this
 
time


	@src/runtime/Scheduler.cc

17 
	~"ru¡ime/Ru¡imeIm∂.h
"

18 
	~"ru¡ime/ScheduÀr.h
"

19 
	~"ru¡ime/Sèck.h
"

20 
	~"ru¡ime/Thªad.h
"

21 
	~"kî√l/Ouçut.h
"

23 
	~"kî√l/Tªe.h
"

24 
	~"kî√l/Clock.h
"

25 
	~"machöe/Machöe.h
"

27 
	gScheduÀr
::
	$ScheduÀr
(Ë: 
	`ªadyCou¡
(0), 
	`¥ìm±i⁄
(0), 
	`ªsum±i⁄
(0), 
	$∑π√r
(
this
)

29 
Thªad
* 
idÀThªad
 = Thªad::
	`¸óã
((
vaddr
)
idÀSèck
, 
möimumSèck
);

30 
idÀThªad
->
	`£tAfföôy
(
this
)->
	`£tPri‹ôy
(
idÀPri‹ôy
);

32 
idÀThªad
->
°ackPoöãr
 = 
	`°ackInô
(idÀThªad->°ackPoöãr, &
Ru¡ime
::
	`gëDeÁu…Mem‹yC⁄ãxt
(), (
±r_t
)Ru¡ime::
idÀLo›
, 
this
, 
nuŒ±r
,Çullptr);

33 
ªadyQueue
[
idÀPri‹ôy
].
	`push_back
(*
idÀThªad
);

34 
ªadyCou¡
 += 1;

35 
	}
}

37 
	gTªe
<
	gThªadNode
> *
	g_globÆThªadTªe
;

38 
ölöe
 
	gTªe
<
	gThªadNode
> *
	$globÆThªadTªe
()

40 i‡(
_globÆThªadTªe
 =
NULL
) {

41 
_globÆThªadTªe
 = 
√w
 
Tªe
<
ThªadNode
>();

43  
_globÆThªadTªe
;

44 
	}
}

47 
uöt64_t
 
	gScheduÀr
::
möGønuœrôy
 = 1;

48 
uöt64_t
 
	gScheduÀr
::
ïochLígth
 = 1;

49 
uöt64_t
 
	gScheduÀr
::
deÁu…EpochLígth
 = 1;

51 
ölöe
 
	$u∆ock
(Ë{
	}
}

53 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

54 
ölöe
 
	$u∆ock
(
BasicLock
 &
l
, 
Args
&... 
a
) {

55 
l
.
	`ªÀa£
();

56 
	`u∆ock
(
a
...);

57 
	}
}

60 
	gãm∂©e
<
	gty≥«me
... 
	gArgs
>

61 
ölöe
 
	gScheduÀr
::
	$swôchThªad
(
ScheduÀr
* 
èrgë
, 
Args
&... 
a
) {

62 
¥ìm±i⁄
 += 1;

63 
	`CHECK_LOCK_MIN
(...(
Args
));

64 
Thªad
* 
√xtThªad
;

65 
ªadyLock
.
	`acquúe
();

67 
mw‹d
 
i
 = 0; i < ((
èrgë
 =
this
Ë? 
idÀPri‹ôy
 : 
maxPri‹ôy
);

68 
i
 += 1) {

75 i‡(
	`globÆThªadTªe
()->
	`em±y
(Ë=
Ál£
) {

76 
ThªadNode
 *
möThªadNode
 = 
	`globÆThªadTªe
()->
	`ªadMöNode
();

77 
√xtThªad
 = 
möThªadNode
->
thªad
;

78 
ªadyCou¡
 -= 1;

79 
thªadFound
;

84 
ªadyLock
.
	`ªÀa£
();

86 i‡(
èrgë
 =
nuŒ±r
) {

90 
	`GENASSERT0
(!...(
Args
));

93 
thªadFound
:

101 
ªadyLock
.
	`ªÀa£
();

102 
ªsum±i⁄
 += 1;

103 
Thªad
* 
cuºThªad
 = 
Ru¡ime
::
	`gëCuºThªad
();

104 
	`GENASSERTN
(
cuºThªad
 && 
√xtThªad
 &&ÇextThread != currThread, currThread, ' ',ÇextThread);

106 i‡(
èrgë
Ë
cuºThªad
->
√xtScheduÀr
 =Åarget;

107 
cuºThªad
->
√xtScheduÀr
 = 
this
;

108 
	`u∆ock
(
a
...);

109 
	`CHECK_LOCK_COUNT
(1);

110 
Ru¡ime
::
	`debugS
("Thªad swôch <", (
èrgë
 ? 'Y' : 'S'), ">: ", 
	`FmtHex
(
cuºThªad
), '(', FmtHex(cuºThªad->
°ackPoöãr
), "Ëtÿ", FmtHex(
√xtThªad
), '(', FmtHex(nextThread->stackPointer), ')');

112 
Ru¡ime
::
Mem‹yC⁄ãxt
& 
˘x
 = Ru¡ime::
	`gëMem‹yC⁄ãxt
();

113 
Ru¡ime
::
	`£tCuºThªad
(
√xtThªad
);

116 
√xtThªad
->
°¨tTime
 = 
Machöe
::
	`gëRTC
().
	`tick
();

126 
Thªad
* 
¥evThªad
 = 
	`°ackSwôch
(
cuºThªad
, 
èrgë
, &cuºThªad->
°ackPoöãr
, 
√xtThªad
->stackPointer);

130 
Ru¡ime
::
	`po°Resume
(
Ál£
, *
¥evThªad
, 
˘x
);

131 i‡(
cuºThªad
->
°©e
 =
Thªad
::
C™˚Œed
) {

132 
cuºThªad
->
°©e
 = 
Thªad
::
Föishög
;

133 
	`swôchThªad
(
nuŒ±r
);

134 
	`uƒóchabÀ
();

136 
	}
}

138 "C" 
Thªad
* 
	$po°Swôch
(
Thªad
* 
¥evThªad
, 
ScheduÀr
* 
èrgë
) {

139 
	`CHECK_LOCK_COUNT
(1);

140 
	`Á°∑th
(
èrgë
Ë
ScheduÀr
::
	`ªsume
(*
¥evThªad
);

141  
¥evThªad
;

142 
	}
}

144 "C" 
	$övokeThªad
(
Thªad
* 
¥evThªad
, 
Ru¡ime
::
Mem‹yC⁄ãxt
* 
˘x
, 
funcvoid3_t
 
func
, 
±r_t
 
¨g1
,Öå_à
¨g2
,Öå_à
¨g3
) {

145 
Ru¡ime
::
	`po°Resume
(
åue
, *
¥evThªad
, *
˘x
);

146 
	`func
(
¨g1
, 
¨g2
, 
¨g3
);

147 
Ru¡ime
::
	`gëScheduÀr
()->
	`ãrmö©e
();

148 
	}
}

150 
ScheduÀr
::
	$íqueue
(
Thªad
& 
t
)

152 
	`GENASSERT1
(
t
.
¥i‹ôy
 < 
maxPri‹ôy
,Å.priority);

153 
ªadyLock
.
	`acquúe
();

155 
boﬁ
 
wake
 = (
ªadyCou¡
 == 0);

156 
ªadyCou¡
 += 1;

157 
ªadyLock
.
	`ªÀa£
();

158 
Ru¡ime
::
	`debugS
("Thªad ", 
	`FmtHex
(&
t
), " queued o¿", FmtHex(
this
));

159 i‡(
wake
Ë
Ru¡ime
::
	`wakeUp
(
this
);

166 
numTasks
 = (
	`globÆThªadTªe
()->
	`em±y
(Ë=
Ál£
Ë? globÆThªadTªe()->
roŸ
->
size
 : 0;

168 i‡(
ScheduÀr
::
deÁu…EpochLígth
 <(ScheduÀr::
möGønuœrôy
 * 
numTasks
)) {

169 
ScheduÀr
::
ïochLígth
 = ScheduÀr::
deÁu…EpochLígth
;

171 
ScheduÀr
::
ïochLígth
 = (
numTasks
 * ScheduÀr::
möGønuœrôy
);

174 i‡(
	`globÆThªadTªe
()->
	`em±y
(Ë=
Ál£
) {

175 
ThªadNode
 *
möThªadNode
 = 
	`globÆThªadTªe
()->
	`ªadMöNode
();

176 
t
.
vRu¡ime
 = 
möThªadNode
->
thªad
->vRuntime;

178 
t
.
vRu¡ime
 = 0;

180 
	}
}

182 
ScheduÀr
::
	$ªsume
(
Thªad
& 
t
)

184 
	`GENASSERT1
(&
t
 !
Ru¡ime
::
	`gëCuºThªad
(), Runtime::getCurrThread());

186 
uöt64_t
 
ãmp
 = 
t
.
vRu¡ime
;

188 i‡(
t
.
√xtScheduÀr
Ët.√xtScheduÀr->
	`íqueue
(t);

189 
Ru¡ime
::
	`gëScheduÀr
()->
	`íqueue
(
t
);

191 
t
.
vRu¡ime
 = 
ãmp
;

193 i‡(
	`globÆThªadTªe
()->
	`em±y
(Ë=
Ál£
) {

194 
ThªadNode
 *
möThªadNode
 = 
	`globÆThªadTªe
()->
	`ªadMöNode
();

195 
t
.
vRu¡ime
 +
möThªadNode
->
thªad
->vRuntime;

196 
ThªadNode
 *
thªadNode
 = 
√w
 
	`ThªadNode
(&
t
);

197 
	`globÆThªadTªe
()->
	`ö£π
(*
thªadNode
);

201 
	}
}

205 
ScheduÀr
::
	$¥ìm±
() {

206 #i‡
TESTING_NEVER_MIGRATE


207 
	`swôchThªad
(
this
);

210 
ScheduÀr
 *
èrgë
 = 
nuŒ±r
;

211 
mw‹d
 
afföôyMask
 = 
Ru¡ime
::
	`gëCuºThªad
()->
	`gëAfföôyMask
();

213 if–
afföôyMask
 == 0 ) {

215 
èrgë
 = 
Ru¡ime
::
	`gëCuºThªad
()->
	`gëAfföôy
();

230 
Thªad
* 
cuºítThªad
 = 
Ru¡ime
::
	`gëCuºThªad
();

231 
Thªad
* 
√xtThªad
 = 
NULL
;

238 i‡(
cuºítThªad
 !
nuŒ±r
) {

240 
uöt64_t
 
thªadRu¡ime
 = 
Machöe
::
	`gëRTC
().
	`tick
(Ë- 
cuºítThªad
->
°¨tTime
;

241 
cuºítThªad
->
vRu¡ime
 +(
thªadRu¡ime
 * cuºítThªad->
¥i‹ôy
);

257 i‡(
cuºítThªad
->
vRu¡ime
 >
ScheduÀr
::
möGønuœrôy
) {

258 i‡(
	`globÆThªadTªe
()->
	`em±y
(Ë=
Ál£
 && globÆThªadTªe()->
	`ªadMöNode
(Ë!
NULL
) {

259 
ThªadNode
 *
möThªadNode
 = 
	`globÆThªadTªe
()->
	`p›MöNode
();

260 
Thªad
 *
möThªad
 = 
möThªadNode
->
thªad
;

262 i‡(
cuºítThªad
->
vRu¡ime
 < 
möThªad
->vRuntime) {

265 
ThªadNode
 *
cuºítThªadNode
 = 
√w
 
	`ThªadNode
(
cuºítThªad
);

266 
	`globÆThªadTªe
()->
	`ö£π
(*
cuºítThªadNode
);

267 
√xtThªad
 = 
möThªad
;

307 #i‡
TESTING_ALWAYS_MIGRATE


308 i‡(!
èrgë
Ëèrgë = 
∑π√r
;

310 i‡(!
èrgë
Ëèrgë = (
∑π√r
->
ªadyCou¡
 + 2 <ÑódyCou¡Ë?Ö¨äî : 
this
;

313 
	`swôchThªad
(
èrgë
);

315 
	}
}

317 
ScheduÀr
::
	$su•íd
(
BasicLock
& 
lk
)

319 
Thªad
 *
cuºítThªad
 = 
Ru¡ime
::
	`gëCuºThªad
();

321 i‡(
cuºítThªad
 !
nuŒ±r
) {

322 i‡(
	`globÆThªadTªe
()->
	`em±y
(Ë=
Ál£
) {

323 
ThªadNode
 *
möThªadNode
 = 
	`globÆThªadTªe
()->
	`ªadMöNode
();

324 
cuºítThªad
->
vRu¡ime
 -
möThªadNode
->
thªad
->vRuntime;

328 
Ru¡ime
::
FakeLock
 
Ê
;

329 
	`swôchThªad
(
nuŒ±r
, 
lk
);

330 
	}
}

332 
ScheduÀr
::
	$su•íd
(
BasicLock
& 
lk1
, BasicLock& 
lk2
)

334 
Thªad
 *
cuºítThªad
 = 
Ru¡ime
::
	`gëCuºThªad
();

336 i‡(
cuºítThªad
 !
nuŒ±r
) {

337 i‡(
	`globÆThªadTªe
()->
	`em±y
(Ë=
Ál£
) {

338 
ThªadNode
 *
möThªadNode
 = 
	`globÆThªadTªe
()->
	`ªadMöNode
();

339 
cuºítThªad
->
vRu¡ime
 -
möThªadNode
->
thªad
->vRuntime;

343 
Ru¡ime
::
FakeLock
 
Ê
;

344 
	`swôchThªad
(
nuŒ±r
, 
lk1
, 
lk2
);

345 
	}
}

347 
ScheduÀr
::
	$ãrmö©e
() {

348 
Ru¡ime
::
RólLock
 
æ
;

349 
Thªad
* 
thr
 = 
Ru¡ime
::
	`gëCuºThªad
();

350 
	`GENASSERT1
(
thr
->
°©e
 !
Thªad
::
Blocked
,Åhr->state);

351 
thr
->
°©e
 = 
Thªad
::
Föishög
;

352 
	`swôchThªad
(
nuŒ±r
);

353 
	`uƒóchabÀ
();

354 
	}
}

356 
ScheduÀr
::
	$yõld
(){

357 
Ru¡ime
::
RólLock
 
æ
;

358 
	`¥ìm±
();

359 
	}
}

	@src/runtime/Scheduler.h

17 #i‚de‡
_ScheduÀr_h_


18 
	#_ScheduÀr_h_
 1

	)

20 
	~"gíîic/EmbeddedC⁄èöîs.h
"

21 
	~"ru¡ime/Ru¡ime.h
"

23 
˛ass
 
	gThªad
;

25 ˛as†
	cScheduÀr
 {

26 
‰õnd
 
	mRu¡ime
::
idÀLo›
(
ScheduÀr
*);

27 
buÂå_t
 
	midÀSèck
[
möimumSèck
];

30 
BasicLock
 
	mªadyLock
;

31 vﬁ©ûê
mw‹d
 
	mªadyCou¡
;

32 
	mEmbeddedLi°
<
	mThªad
> 
	mªadyQueue
[
maxPri‹ôy
];

33 vﬁ©ûê
mw‹d
 
	m¥ìm±i⁄
;

34 vﬁ©ûê
mw‹d
 
	mªsum±i⁄
;

36 
ScheduÀr
* 
	m∑π√r
;

38 
	mãm∂©e
<
	mty≥«me
... 
	mArgs
>

39 
ölöe
 
swôchThªad
(
ScheduÀr
* 
èrgë
, 
Args
&... 
a
);

41 
ölöe
 
íqueue
(
Thªad
& 
t
);

43 
ScheduÀr
(c⁄° ScheduÀr&Ë
dñëe
;

44 c⁄° 
	mScheduÀr
& 
	m›î©‹
=(c⁄° 
ScheduÀr
&Ë
dñëe
;

46 
	mpublic
:

47 
ScheduÀr
();

48 
	$£tP¨äî
(
ScheduÀr
& 
s
Ë{ 
∑π√r
 = &s; }

49 
	`ªsume
(
Thªad
& 
t
);

50 
	`¥ìm±
();

51 
	`su•íd
(
BasicLock
& 
lk
);

52 
	`su•íd
(
BasicLock
& 
lk1
, BasicLock& 
lk2
);

53 
	$ãrmö©e
(Ë
__n‹ëu∫
;

54 
	`yõld
();

55 
uöt64_t
 
möGønuœrôy
;

56 
uöt64_t
 
ïochLígth
;

57 
uöt64_t
 
deÁu…EpochLígth
;

60 
	}
};

	@src/runtime/Stack.h

17 #i‚de‡
_°ack_h_


18 
	#_°ack_h_
 1

	)

20 
	~"ru¡ime/Ru¡ime.h
"

23 
˛ass
 
	gScheduÀr
;

24 
˛ass
 
	gThªad
;

26 "C" 
mw‹d
 
°ackDúe˘
(
vaddr
 
°ack
, 
±r_t
 
func
,Öå_à
¨g1
,Öå_à
¨g2
,Öå_à
¨g3
,Öå_à
¨g4
);

28 "C" 
mw‹d
 
°ackInô
(
vaddr
 
°ack
, 
Ru¡ime
::
Mem‹yC⁄ãxt
* 
√xtMemCtx
, 
±r_t
 
func
,Öå_à
¨g1
,Öå_à
¨g2
,Öå_à
¨g3
);

30 "C" 
Thªad
* 
°ackSwôch
(Thªad* 
cuºThªad
, 
ScheduÀr
* 
èrgë
, 
vaddr
* 
cuºSP
, vadd∏
√xtSP
);

	@src/runtime/SyncQueues.h

17 #i‚de‡
_SyncQueues_h_


18 
	#_SyncQueues_h_
 1

	)

20 
	~"ru¡ime/BlockögSync.h
"

22 
	gãm∂©e
<
ty≥«me
 
	gBuf„r
>

23 ˛as†
	cMesßgeQueue
 {

24 
ty≥«me
 
	tBuf„r
::
	tEÀmít
 Element;

25 
BasicLock
 
	mlock
;

26 
Buf„r
 
	mbuf„r
;

27 
size_t
 
	m£ndSlŸs
;

28 
size_t
 
	mªcvSlŸs
;

29 
BlockögQueue
 
	m£ndQueue
;

30 
BlockögQueue
 
	mªcvQueue
;

32 
boﬁ
 
öã∫ÆSíd
(c⁄° 
EÀmít
& 
ñem
, 
mw‹d
 
timeout
 = 
limô
<mword>()) {

33 
lock
.
acquúe
();

34 
Á°∑th
(
£ndSlŸs
 == 0) {

35 
¶ow∑th
(!
£ndQueue
.
block
(
lock
, 
timeout
)Ë 
Ál£
;

36 
	mlock
.
acquúe
();

38 
	m£ndSlŸs
 -= 1;

40 
	mbuf„r
.
push
(
ñem
);

41 
¶ow∑th
(!
ªcvQueue
.
ªsume
(
lock
)) {

42 
	mªcvSlŸs
 += 1;

43 
	mlock
.
ªÀa£
();

45  
	måue
;

48 
boﬁ
 
öã∫ÆRecv
(
EÀmít
& 
ñem
, 
mw‹d
 
timeout
 = 
limô
<mword>()) {

49 
lock
.
acquúe
();

50 
Á°∑th
(
ªcvSlŸs
 == 0) {

51 
¶ow∑th
(!
ªcvQueue
.
block
(
lock
, 
timeout
)Ë 
Ál£
;

52 
	glock
.
acquúe
();

54 
	gªcvSlŸs
 -= 1;

56 
	gñem
 = 
buf„r
.
‰⁄t
();

57 
	gbuf„r
.
p›
();

58 
¶ow∑th
(!
£ndQueue
.
ªsume
(
lock
)) {

59 
	g£ndSlŸs
 += 1;

60 
	glock
.
ªÀa£
();

62  
	gåue
;

65 
	gpublic
:

66 
ex∂icô
 
	$MesßgeQueue
(
size_t
 
N
 = 0Ë: 
	`buf„r
(N),

67 
	`£ndSlŸs
(
buf„r
.
	`max_size
()), 
	$ªcvSlŸs
(0Ë{
	}
}

69 ~
	$MesßgeQueue
() {

70 
	`GENASSERT0
(
buf„r
.
	`em±y
());

71 
	`GENASSERT1
(
£ndSlŸs
 =
buf„r
.
	`max_size
(), sendSlots);

72 
	`GENASSERT1
(
ªcvSlŸs
 == 0,ÑecvSlots);

73 
	}
}

75 
mw‹d
 
	$size
(Ë{  
buf„r
.
	`size
(); 
	}
}

77 
boﬁ
 
	$£nd
(c⁄° 
EÀmít
& 
ñem
) {

78  
	`öã∫ÆSíd
(
ñem
);

79 
	}
}

81 
boﬁ
 
	$åySíd
(c⁄° 
EÀmít
& 
ñem
, 
mw‹d
 
t
 = 0) {

82  
	`öã∫ÆSíd
(
ñem
, 
t
);

83 
	}
}

85 
boﬁ
 
	$ªcv
(
EÀmít
& 
ñem
) {

86  
	`öã∫ÆRecv
(
ñem
);

87 
	}
}

89 
boﬁ
 
	$åyRecv
(
EÀmít
& 
ñem
, 
mw‹d
 
t
 = 0) {

90  
	`öã∫ÆRecv
(
ñem
, 
t
);

91 
	}
}

93 
EÀmít
 
	$ªcv
() {

94 
EÀmít
 
e
 = 
	`EÀmít
();

95 
	`öã∫ÆRecv
(
e
);

96  
e
;

97 
	}
}

	@src/runtime/SynchronizedArray.h

17 #i‚de‡
_Synchr⁄izedAºay_h_


18 
	#_Synchr⁄izedAºay_h_
 1

	)

20 
	~"gíîic/M™agedAºay.h
"

21 
	~"ru¡ime/BlockögSync.h
"

23 ˛as†
	cSynchr⁄izedEÀmít
 {

24 
	mãm∂©e
 <
	mty≥«me
,Åem∂©e<ty≥«me> 
	m˛ass
> 
‰õnd
 
˛ass
 
	mSynchr⁄izedAºay
;

25 
C⁄dôi⁄
 
	mwaô
;

26 
mw‹d
 
	mcou¡
;

27 
	mpublic
:

28 
	$Synchr⁄izedEÀmít
(Ë: 
	$cou¡
(0) {}

29 
	}
};

32 
	gãm∂©e
<
ty≥«me
 
	gT
,Åem∂©e<
	gty≥«me
> 
˛ass
 
	gAŒoc
>

33 
˛ass
 
	gSynchr⁄izedAºay
 : 
¥Ÿe˘ed
 
M™agedAºay
<
T
,
	gAŒoc
> {

34 
BasicLock
 
	glock
;

35 
usög
 
	gBa£˛ass
 = 
M™agedAºay
<
T
,
	gAŒoc
>;

36 
	gpublic
:

37 
Synchr⁄izedAºay
(
size_t
 
n
 = 0Ë: 
Ba£˛ass
(n) {}

38 
size_t
 
cuºítIndex
(Ëc⁄° {  
Ba£˛ass
::currentIndex(); }

39 
size_t
 
°‹e
(c⁄° 
T
& 
ñem
) {

40 
	glock
.
acquúe
();

41 
size_t
 
	gidx
 = 
Ba£˛ass
::
ª£rveIndex
();

42 
	glock
.
ªÀa£
();

43 
	gBa£˛ass
::
£t
(
idx
, 
ñem
);

44 i‡(!
	gñem
Ë
	gBa£˛ass
::
övÆid©e
(
idx
);

45  
	gidx
;

47 
T
 
ac˚ss
(
size_t
 
idx
) {

48 
AutoLock
 
Æ
(
lock
);

49 i‡(!
	gBa£˛ass
::
vÆid
(
idx
)Ë 
nuŒ±r
;

50 
	gT
& 
	gñem
 = 
Ba£˛ass
::
gë
(
idx
);

51 
GENASSERT0
(
ñem
);

52 i‡(!
	gñem
->
	gSynchr⁄izedEÀmít
::
waô
.
em±y
()Ë 
nuŒ±r
;

53 
	gñem
->
	gSynchr⁄izedEÀmít
::
cou¡
 += 1;

54  
	gñem
;

56 
d⁄e
(
size_t
 
idx
) {

57 
	glock
.
acquúe
();

58 
GENASSERT1
(
Ba£˛ass
::
vÆid
(
idx
), idx);

59 
	gT
& 
	gñem
 = 
Ba£˛ass
::
gë
(
idx
);

60 
GENASSERT1
(
ñem
 &&ÉÀm->
Synchr⁄izedEÀmít
::
cou¡
 > 0, 
FmtHex
(elem));

61 
	gñem
->
	gSynchr⁄izedEÀmít
::
cou¡
 -= 1;

62 i‡(
	gñem
->
	gSynchr⁄izedEÀmít
::
cou¡
 =0 && !
ñem
->
Synchr⁄izedEÀmít
::
waô
.
em±y
()) {

63 
Ba£˛ass
::
övÆid©e
(
idx
);

64 
	gñem
->
	gSynchr⁄izedEÀmít
::
waô
.
sig«l
(
lock
);

66 
	glock
.
ªÀa£
();

69 
T
 
ªmove
(
size_t
 
idx
) {

70 
	glock
.
acquúe
();

71 i‡(!
	gBa£˛ass
::
vÆid
(
idx
)Ë{ 
lock
.
ªÀa£
();  
	gnuŒ±r
; }

72 
	gT
& 
	gñem
 = 
Ba£˛ass
::
gë
(
idx
);

73 
GENASSERT0
(
ñem
);

74 i‡(
	gñem
->
	gSynchr⁄izedEÀmít
::
cou¡
 > 0) {

75 
ñem
->
Synchr⁄izedEÀmít
::
waô
.waô(
lock
);

77 
	gBa£˛ass
::
övÆid©e
(
idx
);

78 
	glock
.
ªÀa£
();

80  
	gñem
;

82 
ªÀa£
(
size_t
 
idx
) {

83 
AutoLock
 
Æ
(
lock
);

84 
	gBa£˛ass
::
ªÀa£
(
idx
);

	@src/runtime/Thread.cc

17 
	~"ru¡ime/BlockögSync.h
"

18 
	~"ru¡ime/Ru¡imeIm∂.h
"

19 
	~"ru¡ime/ScheduÀr.h
"

20 
	~"ru¡ime/Sèck.h
"

21 
	~"ru¡ime/Thªad.h
"

22 
	~"kî√l/Ouçut.h
"

24 
Thªad
* 
	gThªad
::
	$¸óã
(
vaddr
 
mem
, 
size_t
 
ss
) {

25 
vaddr
 
This
 = 
mem
 + 
ss
 - (
Thªad
);

26 
Ru¡ime
::
	`debugT
("Thªad cª©e: ", 
	`FmtHex
(
mem
), '/', FmtHex(
ss
), '/', FmtHex(
This
));

27  
	`√w
 (
	`±r_t
(
This
)Ë
	`Thªad
(
mem
, 
ss
);

28 
	}
}

30 
Thªad
* 
	gThªad
::
	$¸óã
(
size_t
 
ss
) {

31 
vaddr
 
mem
 = 
Ru¡ime
::
	`ÆlocThªadSèck
(
ss
);

32  
	`¸óã
(
mem
, 
ss
);

33 
	}
}

35 
Thªad
* 
	gThªad
::
	$¸óã
() {

36  
	`¸óã
(
deÁu…Sèck
);

37 
	}
}

39 
	gThªad
::
	$de°roy
() {

40 
	`GENASSERT1
(
°©e
 =
Föishög
, state);

41 
Ru¡ime
::
	`debugT
("Thªad de°roy: ", 
	`FmtHex
(
°ackBŸtom
), '/', FmtHex(
°ackSize
), '/', FmtHex(
this
));

42 
Ru¡ime
::
	`ªÀa£ThªadSèck
(
°ackBŸtom
, 
°ackSize
);

43 
	}
}

45 
	gThªad
::
	$°¨t
(
±r_t
 
func
,Öå_à
p1
,Öå_à
p2
,Öå_à
p3
) {

46 
°ackPoöãr
 = 
	`°ackInô
(°ackPoöãr, &
Ru¡ime
::
	`gëMem‹yC⁄ãxt
(), 
func
, 
p1
, 
p2
, 
p3
);

47 
ScheduÀr
::
	`ªsume
(*
this
);

48 
	}
}

50 
	gThªad
::
	$dúe˘
(
±r_t
 
func
,Öå_à
p1
,Öå_à
p2
,Öå_à
p3
,Öå_à
p4
) {

51 
	`°ackDúe˘
(
°ackPoöãr
, 
func
, 
p1
, 
p2
, 
p3
, 
p4
);

52 
	}
}

54 
	gThªad
::
	$ˇn˚l
() {

55 
	`GENASSERT1
(
this
 !
Ru¡ime
::
	`gëCuºThªad
(), Runtime::getCurrThread());

56 i‡(
	`__©omic_exch™ge_n
(&
°©e
, 
C™˚Œed
, 
__ATOMIC_RELAXED
Ë=
Blocked
) {

57 
unblockInfo
->
	`ˇn˚lTimeout
();

58 
unblockInfo
->
	`ˇn˚lBlockög
(*
this
);

59 
ScheduÀr
::
	`ªsume
(*
this
);

61 
	}
}

	@src/runtime/Thread.h

15 #i‚de‡
_Thªad_h_


16 
	#_Thªad_h_
 1

	)

18 
	~"gíîic/EmbeddedC⁄èöîs.h
"

19 
	~"ru¡ime/Ru¡ime.h
"

21 
˛ass
 
	gScheduÀr
;

22 
˛ass
 
	gUnblockInfo
;

24 
˛ass
 
	gThªad
 : 
public
 
EmbeddedLi°
<
Thªad
>::
Lök


27 
public
:

29 
uöt64_t
 
vRu¡ime
 = 0;

30 
uöt64_t
 
	g°¨tTime
 = 0;

32 
‰õnd
 
˛ass
 
	gScheduÀr
;

33 
‰õnd
 
	gRu¡ime
::
po°Resume
(
boﬁ
, 
Thªad
&, 
AddªssS∑˚
&);

35 
vaddr
 
	g°ackPoöãr
;

36 
vaddr
 
	g°ackBŸtom
;

37 
size_t
 
	g°ackSize
;

39 
mw‹d
 
	g¥i‹ôy
;

40 
boﬁ
 
	gafföôy
;

41 
˝u_£t_t
 
	gafföôyMask
;

44 
ScheduÀr
* 
	g√xtScheduÀr
;

46 
	gRu¡ime
::
MachC⁄ãxt
 
˘x
;

47 
	gRu¡ime
::
ThªadSèts
 
°©s
;

49 
Thªad
(c⁄° Thªad&Ë
dñëe
;

50 c⁄° 
	gThªad
& 
	g›î©‹
=(c⁄° 
Thªad
&Ë
dñëe
;

52 
	eSèã
 { 
	gRu¬ög
, 
	gBlocked
, 
	gC™˚Œed
, 
	gFöishög
 } 
	g°©e
;

53 
UnblockInfo
* 
	gunblockInfo
;

55 
Thªad
(
vaddr
 
sb
, 
size_t
 
ss
) :

56 
°ackPoöãr
(
vaddr
(
this
)), 
°ackBŸtom
(
sb
), 
°ackSize
(
ss
),

57 
¥i‹ôy
(
defPri‹ôy
), 
afföôy
(
Ál£
), 
afföôyMask
(0), 
√xtScheduÀr
(
nuŒ±r
),

58 
°©e
(
Ru¬ög
), 
unblockInfo
(
nuŒ±r
) {}

61 
Thªad
* 
¸óã
(
vaddr
 
mem
, 
size_t
 
ss
);

63 
Thªad
* 
¸óã
(
size_t
 
ss
);

64 
Thªad
* 
¸óã
();

65 
de°roy
();

66 
°¨t
(
±r_t
 
func
,Öå_à
p1
 = 
nuŒ±r
,Öå_à
p2
 =ÇuŒ±r,Öå_à
p3
 =Çullptr);

67 
dúe˘
(
±r_t
 
func
,Öå_à
p1
 = 
nuŒ±r
,Öå_à
p2
 =ÇuŒ±r,Öå_à
p3
 =ÇuŒ±r,Öå_à
p4
 =Çullptr);

68 
ˇn˚l
();

70 
boﬁ
 
block
(
UnblockInfo
* 
ubi
) {

71 
GENASSERT1
(
this
 =
Ru¡ime
::
gëCuºThªad
(), Runtime::getCurrThread());

72 
GENASSERT1
(
°©e
 !
Blocked
, state);

73 
	gunblockInfo
 = 
ubi
;

74 
Sèã
 
	gex≥˘ed
 = 
Ru¬ög
;

75  
__©omic_com∑ª_exch™ge_n
–&
°©e
, &
ex≥˘ed
, 
Blocked
, 0, 
__ATOMIC_RELAXED
, __ATOMIC_RELAXED );

78 
boﬁ
 
unblock
() {

79 
GENASSERT1
(
this
 !
Ru¡ime
::
gëCuºThªad
(), Runtime::getCurrThread());

80 
Sèã
 
	gex≥˘ed
 = 
Blocked
;

81  
__©omic_com∑ª_exch™ge_n
–&
°©e
, &
ex≥˘ed
, 
Ru¬ög
, 0, 
__ATOMIC_RELAXED
, __ATOMIC_RELAXED );

84 
	gUnblockInfo
& 
gëUnblockInfo
() {

85 
GENASSERT0
(
unblockInfo
);

86  *
	gunblockInfo
;

89 
Thªad
* 
£tPri‹ôy
(
mw‹d
 
p
Ë{ 
	g¥i‹ôy
 =Ö;  
	gthis
; }

91 
£tAfföôyMask
–
˝u_£t_t
 
mask
 ) { 
	gafföôyMask
 = mask; }

92 
˝u_£t_t
 
gëAfföôyMask
(Ë{  
	gafföôyMask
; }

94 
Thªad
* 
£tAfföôy
(
ScheduÀr
* 
s
Ë{ 
	gafföôy
 = (
√xtScheduÀr
 = s);  
	gthis
; }

95 
ScheduÀr
* 
gëAfföôy
(Ëc⁄° {  
	gafföôy
 ? 
	g√xtScheduÀr
 : 
nuŒ±r
; }

97 c⁄° 
	gRu¡ime
::
ThªadSèts
& 
gëSèts
(Ëc⁄° {  
°©s
; }

	@src/testoptions.h

6 
	#TESTING_PING_LOOP
 1

	)

8 
	#TESTING_STDOUT_DEBUG
 1

	)

9 
	#TESTING_STDERR_DEBUG
 1

	)

10 
	#TESTING_TIMER_TEST
 1

	)

	@src/ulib/Makefile

1 
	gSRCDIR
:=
$
(
CURDIR
)/..

2 
ö˛ude
 
$
(
SRCDIR
)/
Makefûe
.
c⁄fig


4 
CXXFLAGS
=
$
(
CFGFLAGS
Ë$(
OPTFLAGS
Ë$(
DBGFLAGS
Ë$(
LANGFLAGS
Ë
	$$
(
MACHFLAGS
)

5 
	`i„q
 (
	`$
(
CC
),
˛™g
)

6 
CXXFLAGS
+=
	$$
(
CLANGFLAGS
)

7 
ídif


9 
SRC
=
	$$
(
wûdˇrd
 *.
cc
)

10 
OBJ
=
	`$
(
SRC
:%.
cc
=%.
o
)

11 
ASRC
=
	$$
(
wûdˇrd
 *.
S
)

12 
AOBJ
=
	`$
(
ASRC
:%.
S
=%.
o
)

13 
LIB
=
libKOS
.
a


15 
Æl
: 
	`$
(
LIB
)

17 
	$$
(
LIB
): 
	`$
(
OBJ
Ë
	$$
(
AOBJ
Ë
mÆloc
.
o


18 
	$$
(
AR
Ë
¸
 
$
@ $^

20 
mÆloc
.
o
: 
	`$
(
CURDIR
)/..//
dlmÆloc
/mÆloc.
c
 
mÆloc_glue
.
h


21 
	`$
(
CXX
Ë$(
CXXFLAGS
Ë-
c
 
$
< -
o
 $@ -
ö˛ude
 
mÆloc_glue
.
h
 -
DDEBUG


23 
	$$
(
OBJ
): %.
o
: %.
cc


24 
	`$
(
CXX
Ë$(
CXXFLAGS
Ë-
c
 
$
< -
o
 $@

26 
	$$
(
AOBJ
): %.
o
: %.
S


27 
	`$
(
AS
Ë$(
ASFLAGS
Ë
$
< -
o
 $@

29 
˛ón
:

30 
rm
 -
f
 
	`$
(
LIB
Ë$(
OBJ
Ë
	$$
(
AOBJ
Ë
mÆloc
.
o


32 
v˛ón
: 
˛ón


33 
rm
 -
f
 
Makefûe
.
dï


35 
dï
 
dïíd
 
Makefûe
.dep:

36 
	`$
(
CXX
Ë-
MM
 $(
CXXFLAGS
Ë$(
SRC
Ë> 
Makefûe
.
dï


38 -
ö˛ude
 
Makefûe
.
dï


	@src/ulib/Makefile.dep

1 
	g±hªad
.
	go
: 
±hªad
.
cc
 \

2 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ã°›ti⁄s
.
h
 \

3 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ö˛ude
/
sysˇŒs
.
h
 \

4 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ö˛ude
/
ko°y≥s
.
h
 \

5 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ö˛ude
/
±hªad
.
h
 \

6 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ö˛ude
/
sysˇŒs
.
h


7 
libKOS
.
o
:ÜibKOS.
cc
 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ã°›ti⁄s
.
h
 \

8 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ö˛ude
/
sysˇŒs
.
h
 \

9 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ö˛ude
/
ko°y≥s
.
h
 \

10 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
ulib
/../
ö˛ude
/
ko°y≥s
.
h


	@src/ulib/libKOS.cc

17 
	~"sysˇŒs.h
"

18 
	~"ko°y≥s.h
"

20 
	~<°rög.h
>

22 
	gsignum
 = 0;

24 "C" 
_KOS_sigwøµî
();

26 "C" 
	$_KOS_sigh™dÀr
(
mw‹d
 
s
) {

27 
signum
 = 
s
;

28 
	}
}

30 "C" 
	$_öôülize_KOS_°™d¨d_libøry
() {

31 
	`sysˇŒStub
(
SysˇŒNum
::
_öô_sig_h™dÀr
, (
mw‹d
)
_KOS_sigwøµî
);

32 
	}
}

34 "C" 
	$ab‹t
(Ë{ 
	`_exô
(-1); 
	}
}

36 "C" 
	$_‰ì_r
(
_ªít
* 
r
, * 
±r
Ë{ 
	`‰ì
’å); 
	}
}

37 "C" * 
	$_mÆloc_r
(
_ªít
* 
r
, 
size_t
 
size
Ë{  
	`mÆloc
(size); 
	}
}

38 "C" * 
	$_ˇŒoc_r
(
_ªít
* 
r
, 
size_t
 
nmemb
, size_à
size
Ë{  
	`ˇŒoc
“memb, size); 
	}
}

39 "C" * 
	$_ªÆloc_r
(
_ªít
* 
r
, * 
±r
, 
size_t
 
size
Ë{  
	`ªÆloc
’å, size); 
	}
}

41 "C" 
	$_exô
() {

42 
	`sysˇŒStub
(
SysˇŒNum
::
_exô
);

44 
	}
}

46 "C" 
	$›í
(c⁄° *
∑th
, 
oÊag
, ...) {

47 
ssize_t
 
ªt
 = 
	`sysˇŒStub
(
SysˇŒNum
::
›í
, 
	`mw‹d
(
∑th
), 
oÊag
);

48 i‡(
ªt
 < 0Ë{ *
	`__î∫o
() = -ret;  -1; } Ñet;

49 
	}
}

51 "C" 
	$˛o£
(
fûdes
) {

52 
ssize_t
 
ªt
 = 
	`sysˇŒStub
(
SysˇŒNum
::
˛o£
, 
fûdes
);

53 i‡(
ªt
 < 0Ë{ *
	`__î∫o
() = -ret;  -1; } Ñet;

54 
	}
}

56 "C" 
ssize_t
 
	$ªad
(
fûdes
, * 
buf
, 
size_t
 
nbyã
) {

57 
ssize_t
 
ªt
 = 
	`sysˇŒStub
(
SysˇŒNum
::
ªad
, 
fûdes
, 
	`mw‹d
(
buf
), 
nbyã
);

58 i‡(
ªt
 < 0Ë{ *
	`__î∫o
() = -ret;  -1; } Ñet;

59 
	}
}

61 "C" 
ssize_t
 
	$wrôe
(
fûdes
, c⁄° * 
buf
, 
size_t
 
nbyã
) {

62 i‡(
fûdes
 =
STDOUT_FILENO
) {

63 
	`sysˇŒStub
(
SysˇŒNum
::
wrôe
, 
STDDBG_FILENO
, 
	`mw‹d
(
buf
), 
nbyã
);

65 
ssize_t
 
ªt
 = 
	`sysˇŒStub
(
SysˇŒNum
::
wrôe
, 
fûdes
, 
	`mw‹d
(
buf
), 
nbyã
);

66 i‡(
ªt
 < 0Ë{ *
	`__î∫o
() = -ret;  -1; } Ñet;

67 
	}
}

69 "C" 
off_t
 
	$l£ek
(
fûdes
, 
off_t
 
off£t
, 
whí˚
) {

70 
ssize_t
 
ªt
 = 
	`sysˇŒStub
(
SysˇŒNum
::
l£ek
, 
fûdes
, 
off£t
, 
whí˚
);

71 i‡(
ªt
 < 0Ë{ *
	`__î∫o
() = -ret;  -1; } Ñet;

72 
	}
}

75 "C" 
	$gë_c‹e_cou¡
() {

76  
	`sysˇŒStub
(
SysˇŒNum
::
gë_c‹e_cou¡
);

77 
	}
}

79 "C" 
pid_t
 
	$gëpid
() {

80  
	`sysˇŒStub
(
SysˇŒNum
::
gëpid
);

81 
	}
}

83 "C" 
pid_t
 
	$gëcid
() {

84  
	`sysˇŒStub
(
SysˇŒNum
::
gëcid
);

85 
	}
}

87 "C" 
	$u¶ìp
(
u£c⁄ds_t
 
u£cs
) {

88  
	`sysˇŒStub
(
SysˇŒNum
::
gëcid
, 
u£cs
);

89 
	}
}

91 "C" * 
	$mm≠
(* 
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fûedes
, 
off_t
 
off
) {

92 * 
√waddr
 = 
addr
;

93 
ssize_t
 
ªt
 = 
	`sysˇŒStub
(
SysˇŒNum
::
_mm≠
, 
	`mw‹d
(&
√waddr
), 
Àn
, 
¥Ÿ
|(
Êags
<<4), 
fûedes
, 
off
);

94 i‡(
ªt
 < 0Ë{ *
	`__î∫o
(Ë-ªt;  
MAP_FAILED
; }  
√waddr
;

95 
	}
}

97 "C" 
	$munm≠
(* 
addr
, 
size_t
 
Àn
) {

98 
ssize_t
 
ªt
 = 
	`sysˇŒStub
(
SysˇŒNum
::
_munm≠
, 
	`mw‹d
(
addr
), 
Àn
);

99 i‡(
ªt
 < 0Ë{ *
	`__î∫o
() = -ret;  -1; } Ñet;

100 
	}
}

102 "C" 
	$¥ivûege
(* 
func
, 
mw‹d
 
a1
, mw‹d 
a2
, mw‹d 
a3
, mw‹d 
a4
) {

103  
	`sysˇŒStub
(
SysˇŒNum
::
¥ivûege
, (
mw‹d
)
func
, 
a1
, 
a2
, 
a3
, 
a4
);

104 
	}
}

108 "C" 
	$f°©
(
fûdes
, 
°©
 *
buf
) {

109 
	`mem£t
(
buf
, 0, (
°©
));

110 
fûdes
) {

111 
STDIN_FILENO
: 
buf
->
°_mode
 = 
S_IFCHR
;

112 
STDOUT_FILENO
: 
buf
->
°_mode
 = 
S_IFCHR
;

113 
STDERR_FILENO
: 
buf
->
°_mode
 = 
S_IFCHR
;

114 : 
buf
->
°_mode
 = 
S_IFREG
;

117 
	}
}

119 "C" *
	$gëív
(c⁄° *
«me
) {

120  
nuŒ±r
;

121 
	}
}

123 "C" 
	$ißây
(
fûdes
) {

124 
fûdes
) {

125 
STDIN_FILENO
:  1;

126 
STDOUT_FILENO
:  1;

127 
STDERR_FILENO
:  1;

130 
	}
}

132 "C" 
	$kûl
(
pid_t
 
pid
, 
sig
) {

133 *
	`__î∫o
(Ë
EINVAL
;

135 
	}
}

	@src/ulib/malloc_glue.h

1 
	~<c°ddef
>

2 
	~<sys/ty≥s.h
>

6 
	#HAVE_MORECORE
 0

7 
	#LACKS_SYS_MMAN_H


	)

8 
	#LACKS_TIME_H


	)

9 
	#mÆloc_gë∑gesize
 4096

10 

	)

13 
	#MAP_ANONYMOUS
 0

14 
	#PROT_READ
 0

	)

15 
	#PROT_WRITE
 0

	)

16 
	#MAP_PRIVATE
 0

	)

18 
	#MMAP
(
s
Ë
	`mm≠
(0, (s), 
MMAP_PROT
, 
MMAP_FLAGS
, -1, 0)

	)

19 
	#MUNMAP
(
a
,
s
Ë
	`munm≠
◊,s)

	)

20 
	#DIRECT_MMAP
(
s
Ë
	`MMAP
(s)

	)

22 "C" *
mm≠
(*, 
size_t
, , , , 
_off64_t
);

23 "C" 
munm≠
(*, 
size_t
);

	@src/ulib/pthread.cc

17 
	~"sysˇŒs.h
"

18 
	~"±hªad.h
"

20 
	#SIGTERM
 15

	)

22 
_±hªad_°¨t
(* (*
func
)(*), * 
d©a
) {

23 * 
	gªsu…
 = 
func
(
d©a
);

24 
±hªad_exô
(
ªsu…
);

27 "C" 
±hªad_¸óã
(
±hªad_t
*
ª°ri˘
 
tid
, c⁄° 
±hªad_©å_t
*ª°ri˘ 
©å
, * (*
func
)(*), *ª°ri˘ 
d©a
) {

28 *
tid
 = 
sysˇŒStub
(
SysˇŒNum
::
_±hªad_¸óã
, 
mw‹d
(
_±hªad_°¨t
), mw‹d(
func
), mw‹d(
d©a
));

32 "C" 
	$±hªad_exô
(* 
ªsu…
) {

33 
	`sysˇŒStub
(
SysˇŒNum
::
±hªad_exô
, 
	`mw‹d
(
ªsu…
));

34 
	}
}

36 "C" 
	$±hªad_joö
(
±hªad_t
 
tid
, ** 
ªsu…
) {

37  
	`sysˇŒStub
(
SysˇŒNum
::
±hªad_joö
, 
tid
, 
	`mw‹d
(
ªsu…
));

38 
	}
}

40 "C" 
	$±hªad_kûl
(
±hªad_t
 
tid
, 
sig
) {

41  
	`sysˇŒStub
(
SysˇŒNum
::
±hªad_kûl
, 
tid
, 
sig
);

42 
	}
}

44 "C" 
	$±hªad_ˇn˚l
(
±hªad_t
 
tid
) {

45  
	`sysˇŒStub
(
SysˇŒNum
::
±hªad_kûl
, 
tid
, 
SIGTERM
);

46 
	}
}

48 "C" 
±hªad_t
 
	$±hªad_£lf
() {

49  
	`sysˇŒStub
(
SysˇŒNum
::
±hªad_£lf
);

50 
	}
}

52 "C" 
	$£mCª©e
(
mw‹d
* 
rsid
, mw‹d 
öô
) {

53  
	`sysˇŒStub
(
SysˇŒNum
::
£mCª©e
, 
	`mw‹d
(
rsid
), 
öô
);

54 
	}
}

56 "C" 
	$£mDe°roy
(
mw‹d
 
sid
) {

57  
	`sysˇŒStub
(
SysˇŒNum
::
£mDe°roy
, 
sid
);

58 
	}
}

60 "C" 
	$£mP
(
mw‹d
 
sid
) {

61  
	`sysˇŒStub
(
SysˇŒNum
::
£mP
, 
sid
);

62 
	}
}

64 "C" 
	$£mV
(
mw‹d
 
sid
) {

65  
	`sysˇŒStub
(
SysˇŒNum
::
£mV
, 
sid
);

66 
	}
}

68 "C" 
	$±hªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
* 
c
) {

69 !
c
->
bí
.
	`em±y
()Ëc->bí.
	`V
();

71 
	}
}

73 "C" 
	$±hªad_c⁄d_de°roy
(
±hªad_c⁄d_t
* 
c
) {

74 
c
->
bí
.
	`de°roy
();

76 
	}
}

78 "C" 
	$±hªad_c⁄d_öô
(
±hªad_c⁄d_t
*
ª°ri˘
 
c
, c⁄° 
±hªad_c⁄d©å_t
*restrict) {

79 
c
->
bí
.
	`öô
(0);

81 
	}
}

83 "C" 
	$±hªad_c⁄d_sig«l
(
±hªad_c⁄d_t
* 
c
) {

84 i‡(!
c
->
bí
.
	`em±y
()Ëc->bí.
	`V
();

86 
	}
}

93 "C" 
	$±hªad_c⁄d_waô
(
±hªad_c⁄d_t
*
ª°ri˘
 
c
, 
±hªad_muãx_t
*ª°ri˘ 
m
) {

94 
c
->
bí
.
	`P
();

96 
	}
}

98 "C" 
	$±hªad_muãx_de°roy
(
±hªad_muãx_t
* 
m
) {

99 
m
->
bí
.
	`de°roy
();

101 
	}
}

103 "C" 
	$±hªad_muãx_öô
(
±hªad_muãx_t
*
ª°ri˘
 
m
, c⁄° 
±hªad_muãx©å_t
*ª°ri˘ 
a
) {

104 
m
->
bí
.
	`öô
(1);

106 
	}
}

108 "C" 
	$±hªad_muãx_lock
(
±hªad_muãx_t
* 
m
) {

109 
m
->
bí
.
	`P
();

111 
	}
}

118 "C" 
	$±hªad_muãx_åylock
(
±hªad_muãx_t
* 
m
) {

119 i‡(
m
->
bí
.
	`åyP
())  0;

120 *
	`__î∫o
(Ë
EBUSY
;

122 
	}
}

124 "C" 
	$±hªad_muãx_u∆ock
(
±hªad_muãx_t
* 
m
) {

125 
m
->
bí
.
	`V
();

127 
	}
}

	@src/unit/bitmap.cc

1 
	~"gíîic/Bôm≠.h
"

3 c⁄° 
size_t
 
	gbs
 = 64*8;

5 
	$maö
() {

6 
Bôm≠
<
bs
> 
bm
;

7 
cout
 << (
bm
.
	`em±y
(Ë? "em±y" : "nŸÉm±y"Ë<< 
ídl
;

8 
mw‹d
 
x
;

9 
cö
 >> 
x
) {

10 i‡(
x
 < 
bs
Ë
bm
.
	`£t
(x);

13 
cö
 >> 
x
) {

14 i‡(
x
 < 
bs
Ë
cout
 << (
bm
.
	`ã°
(xË? "yes" : "no"Ë<< 
ídl
;

17 
cout
 << (
bm
.
	`em±y
(Ë? "em±y" : "nŸÉm±y"Ë<< 
ídl
;

18 
cout
 << 
bm
.
	`cou¡
(Ë<< 
ídl
;

19 
cout
 << 
bm
.
	`föd£t
(Ë<< 
ídl
;

20 
cout
 << 
bm
.
	`föd£t_ªv
(Ë<< 
ídl
;

21 
cout
 << 
bm
.
	`föd˛ór
(Ë<< 
ídl
;

22 
	}
}

	@src/unit/hierbitmap.cc

1 
	~"gíîic/Bôm≠.h
"

3 c⁄° 
size_t
 
	gbc
 = 1ull << 20;

5 
	$maö
() {

6 
HõørchiˇlBôm≠
<512,40> 
hbm
;

7 * 
p
 = 
√w
 [
hbm
.
	`Ælocsize
(
bc
)];

8 
hbm
.
	`öô
(
bc
, 
p
);

9 
cout
 << (
hbm
.
	`em±y
(Ë? "em±y" : "nŸÉm±y"Ë<< 
ídl
;

10 
mw‹d
 
x
;

11 
cö
 >> 
x
) {

12 i‡(
x
 < 
bc
Ë
hbm
.
	`£t
(x);

15 
cö
 >> 
x
) {

16 i‡(
x
 < 
bc
Ë
hbm
.
	`˛ór
(x);

19 
cö
 >> 
x
) {

20 i‡(
x
 < 
bc
) {

21 
cout
 << (
hbm
.
	`ã°
(
x
Ë? "yes" : "no"Ë<< 
ídl
;

24 
cout
 << (
hbm
.
	`em±y
(Ë? "em±y" : "nŸÉm±y"Ë<< 
ídl
;

25 
cout
 << 
hbm
.
	`föd£t
(Ë<< 
ídl
;

26 
cout
 << 
hbm
.
	`föd£t_ªv
(Ë<< 
ídl
;

28 
	}
}

	@src/unit/marray.cc

1 
	~"gíîic/M™agedAºay.h
"

3 
	$kas£π¥öts
(c⁄°*, , c⁄°*Ë{
	}
}

4 
	$kas£π¥öã
(Ë{
	}
}

5 
	$ReboŸ
(Ë{ 
	`uƒóchabÀ
(); 
	}
}

7 
	$maö
() {

8 
M™agedAºay
<, 
Æloˇt‹
> 
	`a
(4);

9 
x
;

10 
cö
 >> 
x
) {

11 i‡(
x
 >0Ë
a
.
	`put
(x);

14 
cö
 >> 
x
) {

15 i‡(
x
 >0Ë
a
.
	`ªmove
(x);

18 
cö
 >> 
x
) {

19 i‡(
x
 >0Ë
a
.
	`£t
◊.
	`ª£rveIndex
(), x);

22 
i
 = 0; i < 
a
.
	`cuºítIndex
(); i += 1) {

23 i‡(
a
.
	`vÆid
(
i
)Ë
cout
 << ' ' <<á.
	`gë
(i);

25 
cout
 << ' ' << 
a
.
	`size
(Ë<< ' ' <<á.
	`cuºítC≠acôy
(Ë<< 
ídl
;

26 
	}
}

	@src/unit/region.cc

1 
	~"gíîic/Regi⁄Së.h
"

3 
	$maö
() {

4 
Regi⁄Së
<
Regi⁄
<
mw‹d
>> 
rs
;

5 
c
;

6 
s
, 
e
;

7 
cö
 >> 
c
 >> 
s
 >> 
e
) {

8 
	`tﬁowî
(
c
)) {

9 'i': 
rs
.
	`ö£π
(
Regi⁄
<
mw‹d
>(
s
,
e
)); ;

10 'r': 
rs
.
	`ªmove
(
Regi⁄
<
mw‹d
>(
s
,
e
));Ñs.
¥öt
<
åue
>(
cout
); couà<< 
ídl
; ;

11 'o': 
cout
 << (
rs
.
	`out
(
Regi⁄
<
mw‹d
>(
s
,
e
)Ë? " out" : "ÇŸ out"Ë<< 
ídl
; ;

12 : 
cout
 << "unknow¿cmd: " << 
c
 << 
ídl
;

15 
rs
.
¥öt
<
åue
>(
cout
); couà<< 
ídl
;

17 
	}
}

	@src/user/Makefile

1 
	gSRCDIR
:=
$
(
CURDIR
)/..

2 
ö˛ude
 
$
(
SRCDIR
)/
Makefûe
.
c⁄fig


4 #compûê
u£r
 
¥ogøms
 
wôh
 
gcc
/
g
++, 
˛™g
 
nŸ
 
usög
 
libKOS
 (
‹
 
√ed
 
øw
 
lökög
)

5 
	gCC
=
	$$
(
GCC
)

6 
CXX
=
	$$
(
GPP
)

8 
CXXFLAGS
=
	`$
(
CFGFLAGS
Ë$(
OPTFLAGS
Ë$(
DBGFLAGS
Ë$(
LANGFLAGS
Ë
	$$
(
MACHFLAGS
)

10 
SRC
=
	$$
(
wûdˇrd
 *.
cc
)

11 
OBJ
=
	`$
(
SRC
:%.
cc
=%.
o
)

12 
EXE
=
	`$
(
SRC
:%.
cc
=
exec
/%)

14 
Æl
: 
	$$
(
EXE
Ë
exec
/
mŸb


15 
Æl
: 
	$$
(
EXE
Ë
exec
/
sched∑øm


17 .
PHONY
: .
FORCE


19 
	$$
(
OBJ
): %.
o
: %.
cc


20 
	`$
(
CXX
Ë$(
CXXFLAGS
Ë-
c
 
$
< -
o
 $@

22 
	$$
(
EXE
): 
exec
/%: %.
o
 ../
ulib
/
libKOS
.
a


23 @
mkdú
 -
p
 
exec


25 
	`$
(
CXX
Ë-
L
../
ulib
 -
o
 
$
@ $<

26 #°rù 
$
@

28 
exec
/
mŸb
: .
FORCE


29 @
echo
 
¸ótög
 
$
@

30 @
mkdú
 -
p
 
exec


31 @
echo
 > 
$
@

32 @
echo
 "Hñlÿevîybody! SÿgœdÅÿ£êyou..." >> 
$
@

33 @
echo
 >> 
$
@

34 @
echo
 -
n
 "Buûd D©e: " >> 
$
@

35 @
d©e
 >> 
$
@

36 @
echo
 >> 
$
@

38 
exec
/
sched∑øm
: .
FORCE


39 @
echo
 
¸ótög
 
$
@

40 @
mkdú
 -
p
 
exec


41 @
echo
 "mögønuœrôy 4" > 
$
@

42 @
echo
 "ïochÀ¿20" >> 
$
@

44 
echo
:

45 @
echo
 
SRC
: 
	`$
(SRC)

46 @
echo
 
OBJ
: 
	`$
(OBJ)

47 @
echo
 
EXE
: 
	$$
(
EXE
)

49 
˛ón
:

50 
rm
 -
f
 
	`$
(
OBJ
Ë
	$$
(
EXE
Ë
exec
/
buût


51 
rm
 -
rf
 
exec


53 
v˛ón
: 
˛ón


54 
rm
 -
f
 
Makefûe
.
dï


56 
dï
 
dïíd
 
Makefûe
.dep:

57 
	`$
(
CXX
Ë-
MM
 $(
CXXFLAGS
Ë$(
SRC
Ë> 
Makefûe
.
dï


59 -
ö˛ude
 
Makefûe
.
dï


	@src/user/Makefile.dep

1 
	gthªadã°
.
	go
: 
thªadã°
.
cc
 \

2 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ã°›ti⁄s
.
h
 \

3 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
sysˇŒs
.
h
 \

4 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
ko°y≥s
.
h
 \

5 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
±hªad
.
h
 \

6 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
sysˇŒs
.
h


7 
sy°e°
.
o
: sy°e°.
cc
 \

8 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ã°›ti⁄s
.
h
 \

9 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
sysˇŒs
.
h
 \

10 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
ko°y≥s
.
h


11 
m™ythªad
.
o
: m™ythªad.
cc
 \

12 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ã°›ti⁄s
.
h
 \

13 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
sysˇŒs
.
h
 \

14 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
ko°y≥s
.
h
 \

15 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
±hªad
.
h
 \

16 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ö˛ude
/
sysˇŒs
.
h


17 
kblo›
.
o
: kblo›.
cc
 /
home
/
ugc
/
∑åick
.
¶uth
/
kos
/
§c
/
u£r
/../
ã°›ti⁄s
.
h


	@src/user/kbloop.cc

17 
	~<io°ªam
>

19 
usög
 
«me•a˚
 
	g°d
;

21 ˛as†
	cXYZ
 {

22 
	mpublic
:

23 ~
	$XYZ
() {

24 
cout
 << "hñlÿagaö!" << 
ídl
;

26 
	}
};

28 
XYZ
 
	gxyz
;

30 
	$maö
() {

31 
cout
 << "hñlÿw‹ld!" << 
ídl
;

32 
c
;

33 
cö
 >> 
°d
::
noskùws
 >> 
c
Ë
˚º
 << c;

35 
	}
};

	@src/user/manythread.cc

17 
	~"sysˇŒs.h
"

18 
	~"±hªad.h
"

20 
	~<io°ªam
>

22 
±hªad_muãx_t
 
	giﬁock
;

24 * 
	$èsk
(* 
x
) {

25 
id
 = 
	`gëcid
();

27 
	`±hªad_muãx_lock
(&
iﬁock
);

28 
°d
::
cout
 << *(*)
x
 << 
id
 << ' ';

29 
°d
::
cout
.
	`Êush
();

30 
	`±hªad_muãx_u∆ock
(&
iﬁock
);

31 
√wid
 = 
id
;

32 
˙t
 = 0;

33 
√wid
 =
id
 && 
˙t
 < 100000) {

34 
asm
 volatile("pause");

35 
√wid
 = 
	`gëcid
();

36 
˙t
 += 1;

38 
id
 = 
√wid
;

40  
nuŒ±r
;

41 
	}
}

43 
	$maö
() {

44 
	`±hªad_muãx_öô
–&
iﬁock
, 
nuŒ±r
 );

45 
±hªad_t
 
t
;

46 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"A");

47 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"B");

48 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"C");

49 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"D");

50 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"E");

51 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"F");

52 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"G");

53 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"H");

54 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"I");

55 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"J");

56 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"K");

57 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"L");

58 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"M");

59 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"N");

60 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"O");

61 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"P");

62 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"Q");

63 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"R");

64 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"S");

65 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"T");

66 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"U");

67 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"V");

68 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"W");

69 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"X");

70 
	`±hªad_¸óã
(&
t
, 
nuŒ±r
, 
èsk
, (*)"Y");

71 
	`èsk
( (*)"Z");

73 
	}
};

	@src/user/systest.cc

17 
	~"sysˇŒs.h
"

19 
	$sysfunc
() {

20 
asm
 volatile("cli");

21 
asm
 volatile("sti");

23 
	}
}

25 
	$maö
() {

26 
i
 = 0; i < 1000; i += 1) {

27 
	`¥ivûege
((*)
sysfunc
, 0, 0, 0, 0);

30 
	}
};

	@src/user/threadtest.cc

17 
	~"sysˇŒs.h
"

18 
	~"±hªad.h
"

20 
	~<uni°d.h
>

21 
	~<°dio.h
>

23 
	gy
 = 83;

25 
±hªad_muãx_t
 
	giﬁock
;

27 * 
	$foob¨1
(*) {

28 
j
 = 0; j < 500000; j++Ë
	`asm
("" ::: "memory");

29  &
y
;

30 
	}
}

32 * 
	$foob¨2
(*) {

33 
	`±hªad_muãx_lock
(&
iﬁock
);

34 
	`¥ötf
("hokey\n");

35 
	`±hªad_muãx_u∆ock
(&
iﬁock
);

36 
i
 = 0; i < 20; i++) {

37 
	`±hªad_muãx_lock
(&
iﬁock
);

38 
	`¥ötf
("pokey %d\n", 
i
);

39 
	`±hªad_muãx_u∆ock
(&
iﬁock
);

40 
j
 = 0; j < 500000; j++Ë
	`asm
("" ::: "memory");

42 
	`±hªad_muãx_lock
(&
iﬁock
);

43 
	`¥ötf
("dokey\n");

44 * 
x
 = 
√w
 ;

45 
	`±hªad_muãx_u∆ock
(&
iﬁock
);

46 *
x
 = 84;

47  
x
;

48 
	}
}

50 * 
	$foob¨3
(*) {

51 ;;Ë
	`asm
("" ::: "memory");

52  
nuŒ±r
;

53 
	}
}

55 
signum
;

57 
	$maö
() {

60 
	`±hªad_muãx_öô
(&
iﬁock
, 
nuŒ±r
);

61 
	`±hªad_muãx_lock
(&
iﬁock
);

62 
	`±hªad_muãx_u∆ock
(&
iﬁock
);

63 
±hªad_t
 
t1
;

64 
	`±hªad_¸óã
(&
t1
, 
nuŒ±r
, 
foob¨1
,Çullptr);

65 * 
ªsu…
;

66 
	`±hªad_joö
(
t1
, &
ªsu…
);

67 
	`±hªad_muãx_lock
(&
iﬁock
);

68 
	`¥ötf
("foob¨1: %i\n", *(*)
ªsu…
);

69 
	`±hªad_muãx_u∆ock
(&
iﬁock
);

70 
±hªad_t
 
t2
, 
t3
;

71 
	`±hªad_¸óã
(&
t3
, 
nuŒ±r
, 
foob¨3
,Çullptr);

72 
	`±hªad_¸óã
(&
t2
, 
nuŒ±r
, 
foob¨2
,Çullptr);

73 
	`±hªad_muãx_lock
(&
iﬁock
);

74 
	`¥ötf
("foobar3 created\n");

75 
	`±hªad_muãx_u∆ock
(&
iﬁock
);

76 
i
 = 
SysˇŒNum
::
max
; i <100; i++Ë
	`sysˇŒStub
(i);

77 
i
 = 0; i < 10; i++) {

78 
	`±hªad_muãx_lock
(&
iﬁock
);

79 
	`¥ötf
("w‹kög %d\n", 
i
);

80 
	`±hªad_muãx_u∆ock
(&
iﬁock
);

81 
j
 = 0; j < 100000; j++Ë
	`asm
("" ::: "memory");

83 
	`±hªad_joö
(
t2
, &
ªsu…
);

84 
	`±hªad_muãx_de°roy
(&
iﬁock
);

85 
	`¥ötf
("foob¨2: %i\n", *(*)
ªsu…
);

86 
	`¥ötf
("sig«»ª˚ived: 0x%x\n", 
signum
);

87 
	`dñëe
 (*)
ªsu…
;

88 
	`¥ötf
("goodbye\n");

90 
	}
};

	@src/world/Access.cc

17 
	~"w‹ld/Ac˚ss.h
"

19 
	~<c°rög
>

21 
	gm≠
<
	g°rög
,
	gRamFûe
> 
	gkî√lFS
;

23 
ssize_t
 
	gFûeAc˚ss
::
	$¥ód
(*
buf
, 
size_t
 
nbyã
, 
off_t
 
o
) {

24 i‡(
o
 + 
nbyã
 > 
rf
.
size
)Çbyte =Ñf.size - o;

25 
	`mem˝y
–
buf
, (
buÂå_t
)(
rf
.
vma
 + 
o
), 
nbyã
 );

26  
nbyã
;

27 
	}
}

29 
ssize_t
 
	gFûeAc˚ss
::
	$ªad
(*
buf
, 
size_t
 
nbyã
) {

30 
ﬁock
.
	`acquúe
();

31 
ssize_t
 
Àn
 = 
	`¥ód
(
buf
, 
nbyã
, 
off£t
);

32 i‡(
Àn
 >0Ë
off£t
 +=Üen;

33 
ﬁock
.
	`ªÀa£
();

34  
Àn
;

35 
	}
}

37 
off_t
 
	gFûeAc˚ss
::
	$l£ek
(
off_t
 
o
, 
whí˚
) {

38 
off_t
 
√w_o
;

39 
whí˚
) {

40 
SEEK_SET
: 
√w_o
 = 
o
; ;

41 
SEEK_CUR
: 
√w_o
 = 
off£t
 + 
o
; ;

42 
SEEK_END
: 
√w_o
 = 
rf
.
size
 + 
o
; ;

43 :  -
EINVAL
;

45 i‡(
√w_o
 < 0Ë -
EINVAL
;

46 
off£t
 = 
√w_o
;

47  
off£t
;

48 
	}
}

	@src/world/Access.h

17 #i‚de‡
_Ac˚ss_h_


18 
	#_Ac˚ss_h_


	)

20 
	~"ru¡ime/Synchr⁄izedAºay.h
"

21 
	~"kî√l/Ouçut.h
"

22 
	~"devi˚s/Keybﬂrd.h
"

24 
	~<m≠
>

25 
	~<°rög
>

26 
	~<˚ºno
>

27 
	~<uni°d.h
>

29 ˛as†
	cAc˚ss
 : 
public
 
Synchr⁄izedEÀmít
 {

30 
public
:

31 
vútuÆ
 ~
	$Ac˚ss
() {}

32 
vútuÆ
 
ssize_t
 
	$¥ód
(*
buf
, 
size_t
 
nbyã
, 
off_t
 
o
Ë{  -
EBADF
; 
	}
}

33 
vútuÆ
 
ssize_t
 
	$pwrôe
(c⁄° *
buf
, 
size_t
 
nbyã
, 
off_t
 
o
Ë{  -
EBADF
; 
	}
}

34 
vútuÆ
 
ssize_t
 
	$ªad
(*
buf
, 
size_t
 
nbyã
Ë{  -
EBADF
; 
	}
}

35 
vútuÆ
 
ssize_t
 
	$wrôe
(c⁄° *
buf
, 
size_t
 
nbyã
Ë{  -
EBADF
; 
	}
}

36 
vútuÆ
 
off_t
 
	$l£ek
(
off_t
 
o
, 
whí˚
Ë{  -
EBADF
; 
	}
}

39 
	sRamFûe
 {

40 
vaddr
 
	mvma
;

41 
∑ddr
 
	mpma
;

42 
size_t
 
	msize
;

43 
RamFûe
(
vaddr
 
v
, 
∑ddr
 
p
, 
size_t
 
s
Ë: 
vma
(v), 
pma
’), 
size
(s) {}

46 
m≠
<
°rög
,
RamFûe
> 
kî√lFS
;

48 ˛as†
	cFûeAc˚ss
 : 
public
 
Ac˚ss
 {

49 
SpöLock
 
ﬁock
;

50 
off_t
 
	moff£t
;

51 c⁄° 
	mRamFûe
 &
	mrf
;

52 
	mpublic
:

53 
	$FûeAc˚ss
(c⁄° 
RamFûe
& 
rf
Ë: 
	`off£t
(0), 
	$rf
(
rf
) {}

54 
vútuÆ
 
ssize_t
 
	`¥ód
(*
buf
, 
size_t
 
nbyã
, 
off_t
 
o
);

55 
vútuÆ
 
ssize_t
 
	`ªad
(*
buf
, 
size_t
 
nbyã
);

56 
vútuÆ
 
off_t
 
	`l£ek
(off_à
o
, 
whí˚
);

57 
	}
};

59 
˛ass
 
	gKî√lOuçut
;

60 ˛as†
	cOuçutAc˚ss
 : 
public
 
Ac˚ss
 {

61 
Kî√lOuçut
& 
ko
;

62 
	mpublic
:

63 
	$OuçutAc˚ss
(
Kî√lOuçut
& 
ko
Ë: 
	$ko
(
ko
) {}

64 
vútuÆ
 
ssize_t
 
	$wrôe
(c⁄° *
buf
, 
size_t
 
nbyã
) {

65  
ko
.
	`wrôe
(
buf
, 
nbyã
);

66 
	}
}

69 
Keybﬂrd
 
keybﬂrd
;

70 ˛as†
	cI≈utAc˚ss
 : 
public
 
Ac˚ss
 {

71 
public
:

72 
	$I≈utAc˚ss
() {}

73 
vútuÆ
 
ssize_t
 
	$ªad
(*
buf
, 
size_t
 
nbyã
) {

74 i‡(
nbyã
 == 0)  0;

75 
Keybﬂrd
::
KeyCode
 
k
 = 
keybﬂrd
.
	`ªad
();

76 * 
s
 = (*)
buf
;

77 
size_t
 
r
 = 0;Ñ < 
nbyã
;Ñ += 1) {

78 
s
[
r
] = 
k
;

79 i‡(!
keybﬂrd
.
	`åyRód
(
k
)Ë 
r
+1;

81  
nbyã
;

82 
	}
}

	@/usr/include/check.h

22 #i‚de‡
CHECK_H


23 
	#CHECK_H


	)

25 
	~<°ddef.h
>

26 
	~<°rög.h
>

28 
	~<check_°döt.h
>

36 #ifde‡
__˝lu•lus


37 
	#CK_CPPSTART
 "C" {

	)

38 
	#CK_CPPEND
 }

	)

39 
CK_CPPSTART


42 #i‡
deföed
(
__GNUC__
Ë&& deföed(
__GNUC_MINOR__
)

43 
	#GCC_VERSION_AT_LEAST
(
maj‹
, 
mö‹
) \

44 ((
__GNUC__
 > (
maj‹
)) || \

45 (
__GNUC__
 =(
maj‹
Ë&& 
__GNUC_MINOR__
 >(
mö‹
)))

	)

47 
	#GCC_VERSION_AT_LEAST
(
maj‹
, 
mö‹
Ë0

	)

50 #i‡
GCC_VERSION_AT_LEAST
(2,95)

51 
	#CK_ATTRIBUTE_UNUSED
 
	`__©åibuã__
 ((
unu£d
))

	)

53 
	#CK_ATTRIBUTE_UNUSED


	)

56 #i‡
GCC_VERSION_AT_LEAST
(2,5)

57 
	#CK_ATTRIBUTE_NORETURN
 
	`__©åibuã__
 ((
n‹ëu∫
))

	)

59 
	#CK_ATTRIBUTE_NORETURN


	)

62 
	~<sys/ty≥s.h
>

68 
	#CK_EXPORT


	)

75 #i‚de‡
CK_DLL_EXP


76 
	#CK_DLL_EXP


	)

81 
	#CHECK_MAJOR_VERSION
 (0)

	)

82 
	#CHECK_MINOR_VERSION
 (10)

	)

83 
	#CHECK_MICRO_VERSION
 (0)

	)

85 
CK_DLL_EXP
 
CK_EXPORT
 
check_maj‹_vîsi⁄
;

86 
CK_DLL_EXP
 
CK_EXPORT
 
check_mö‹_vîsi⁄
;

87 
CK_DLL_EXP
 
CK_EXPORT
 
check_mi¸o_vîsi⁄
;

89 #i‚de‡
NULL


90 
	#NULL
 ((*)0)

	)

100 
TCa£
 
	tTCa£
;

105 (*
	tTFun
) ();

110 (*
	tSFun
) ();

115 
Suôe
 
	tSuôe
;

131 
CK_DLL_EXP
 
Suôe
 *
CK_EXPORT
 
	`suôe_¸óã
(c⁄° *
«me
);

145 
CK_DLL_EXP
 
CK_EXPORT
 
	`suôe_tˇ£
(
Suôe
 * 
s
, c⁄° *
t˙ame
);

155 
CK_DLL_EXP
 
CK_EXPORT
 
	`suôe_add_tˇ£
(
Suôe
 * 
s
, 
TCa£
 * 
tc
);

170 
CK_DLL_EXP
 
TCa£
 *
CK_EXPORT
 
	`tˇ£_¸óã
(c⁄° *
«me
);

180 
	#tˇ£_add_ã°
(
tc
,
tf
Ë
	`tˇ£_add_ã°_øi£_sig«l
—c,tf,0)

	)

194 
	#tˇ£_add_ã°_øi£_sig«l
(
tc
,
tf
,
sig«l
) \

195 
	`_tˇ£_add_ã°
((
tc
),(
tf
),"" #t‡"",(
sig«l
), 0, 0, 1)

	)

209 
	#tˇ£_add_exô_ã°
(
tc
, 
tf
, 
ex≥˘ed_exô_vÆue
) \

210 
	`_tˇ£_add_ã°
((
tc
),(
tf
),"" #t‡"",0,(
ex≥˘ed_exô_vÆue
),0,1)

	)

226 
	#tˇ£_add_lo›_ã°
(
tc
,
tf
,
s
,
e
) \

227 
	`_tˇ£_add_ã°
((
tc
),(
tf
),"" #t‡"",0,0,(
s
),(
e
))

	)

247 
	#tˇ£_add_lo›_ã°_øi£_sig«l
(
tc
,
tf
,
sig«l
,
s
,
e
) \

248 
	`_tˇ£_add_ã°
((
tc
),(
tf
),"" #t‡"",(
sig«l
),0,(
s
),(
e
))

	)

268 
	#tˇ£_add_lo›_exô_ã°
(
tc
,
tf
,
ex≥˘ed_exô_vÆue
,
s
,
e
) \

269 
	`_tˇ£_add_ã°
((
tc
),(
tf
),"" #t‡"",0,(
ex≥˘ed_exô_vÆue
),(
s
),(
e
))

	)

274 
CK_DLL_EXP
 
CK_EXPORT
 
	`_tˇ£_add_ã°
(
TCa£
 * 
tc
, 
TFun
 
tf
,

275 c⁄° *
‚ame
, 
_sig«l
,

276 
Ælowed_exô_vÆue
, 
°¨t
,

277 
íd
);

304 
CK_DLL_EXP
 
CK_EXPORT
 
	`tˇ£_add_unchecked_fixtuª
(
TCa£
 * 
tc
, 
SFun
 
£tup
,

305 
SFun
 
ã¨down
);

333 
CK_DLL_EXP
 
CK_EXPORT
 
	`tˇ£_add_checked_fixtuª
(
TCa£
 * 
tc
, 
SFun
 
£tup
,

334 
SFun
 
ã¨down
);

356 
CK_DLL_EXP
 
CK_EXPORT
 
	`tˇ£_£t_timeout
(
TCa£
 * 
tc
, 
timeout
);

359 
CK_DLL_EXP
 
CK_EXPORT
 
	`tˇ£_‚_°¨t
(c⁄° *
‚ame
, c⁄° *
fûe
,

360 
löe
);

369 
	#START_TEST
(
__ã°«me
)\

370 
	`__ã°«me
 (
_i
 
CK_ATTRIBUTE_UNUSED
)\

372 
	`tˇ£_‚_°¨t
 (""#__ã°«me, 
__FILE__
, 
__LINE__
);

	)

379 
	#END_TEST
 
	}

	)
}

386 
	#Áû_u∆ess
 
ck_as£π_msg


	)

398 
	#Áû_if
(
ex¥
, ...)\

399 (
ex¥
) ? \

400 
	`_ck_as£π_Áûed
(
__FILE__
, 
__LINE__
, "Faûuª '"#ex¥"' occuºed" , ## 
__VA_ARGS__
, 
NULL
) \

401 : 
	`_m¨k_poöt
(
__FILE__
, 
__LINE__
)

	)

408 
	#Áû
 
ck_ab‹t_msg


	)

419 
CK_DLL_EXP
 
CK_EXPORT
 
	$_ck_as£π_Áûed
(c⁄° *
fûe
, 
löe
,

420 c⁄° *
ex¥
,

421 ...Ë
CK_ATTRIBUTE_NORETURN
;

423 
CK_DLL_EXP
 
CK_EXPORT
 
	`_ck_as£π_Áûed
(c⁄° *
fûe
, 
löe
,

424 c⁄° *
ex¥
, ...);

436 
	#ck_as£π
(
ex¥
Ë
	`ck_as£π_msg
”x¥, 
NULL
)

	)

451 
	#ck_as£π_msg
(
ex¥
, ...) \

452 (
ex¥
) ? \

453 
	`_m¨k_poöt
(
__FILE__
, 
__LINE__
) : \

454 
	`_ck_as£π_Áûed
(
__FILE__
, 
__LINE__
, "As£πi⁄ '"#ex¥"' faûed" , ## 
__VA_ARGS__
, 
NULL
)

	)

463 
	#ck_ab‹t
(Ë
	`ck_ab‹t_msg
(
NULL
)

	)

473 
	#ck_ab‹t_msg
(...Ë
	`_ck_as£π_Áûed
(
__FILE__
, 
__LINE__
, "Faûed" , ## 
__VA_ARGS__
, 
NULL
)

	)

477 
	#_ck_as£π_öt
(
X
, 
OP
, 
Y
) do { \

478 
ötmax_t
 
_ck_x
 = (
X
); \

479 
ötmax_t
 
_ck_y
 = (
Y
); \

480 
	`ck_as£π_msg
(
_ck_x
 
OP
 
_ck_y
, "Assertion '%s' failed: %s == %jd, %s == %jd", #X" "#OP" "#Y, #X, _ck_x, #Y, _ck_y); \

481 
	}
} 0)

	)

495 
	#ck_as£π_öt_eq
(
X
, 
Y
Ë
	`_ck_as£π_öt
(X, ==, Y)

	)

508 
	#ck_as£π_öt_√
(
X
, 
Y
Ë
	`_ck_as£π_öt
(X, !=, Y)

	)

521 
	#ck_as£π_öt_…
(
X
, 
Y
Ë
	`_ck_as£π_öt
(X, <, Y)

	)

534 
	#ck_as£π_öt_À
(
X
, 
Y
Ë
	`_ck_as£π_öt
(X, <=, Y)

	)

547 
	#ck_as£π_öt_gt
(
X
, 
Y
Ë
	`_ck_as£π_öt
(X, >, Y)

	)

560 
	#ck_as£π_öt_ge
(
X
, 
Y
Ë
	`_ck_as£π_öt
(X, >=, Y)

	)

562 
	#_ck_as£π_uöt
(
X
, 
OP
, 
Y
) do { \

563 
uötmax_t
 
_ck_x
 = (
X
); \

564 
uötmax_t
 
_ck_y
 = (
Y
); \

565 
	`ck_as£π_msg
(
_ck_x
 
OP
 
_ck_y
, "Assertion '%s' failed: %s == %ju, %s == %ju", #X" "#OP" "#Y, #X, _ck_x, #Y, _ck_y); \

566 } 0)

	)

579 
	#ck_as£π_uöt_eq
(
X
, 
Y
Ë
	`_ck_as£π_uöt
(X, ==, Y)

	)

592 
	#ck_as£π_uöt_√
(
X
, 
Y
Ë
	`_ck_as£π_uöt
(X, !=, Y)

	)

605 
	#ck_as£π_uöt_…
(
X
, 
Y
Ë
	`_ck_as£π_uöt
(X, <, Y)

	)

618 
	#ck_as£π_uöt_À
(
X
, 
Y
Ë
	`_ck_as£π_uöt
(X, <=, Y)

	)

631 
	#ck_as£π_uöt_gt
(
X
, 
Y
Ë
	`_ck_as£π_uöt
(X, >, Y)

	)

644 
	#ck_as£π_uöt_ge
(
X
, 
Y
Ë
	`_ck_as£π_uöt
(X, >=, Y)

	)

649 
	#_ck_as£π_°r
(
X
, 
OP
, 
Y
) do { \

650 c⁄° * 
_ck_x
 = (
X
); \

651 c⁄° * 
_ck_y
 = (
Y
); \

652 
	`ck_as£π_msg
(0 
OP
 
	`°rcmp
(
_ck_y
, 
_ck_x
), \

653 "As£πi⁄ '%s' faûed: %†=\"%s\", %†=\"%s\"", #X" "#OP" "#Y, #X, 
_ck_x
, #Y, 
_ck_y
); \

654 } 0)

	)

667 
	#ck_as£π_°r_eq
(
X
, 
Y
Ë
	`_ck_as£π_°r
(X, ==, Y)

	)

680 
	#ck_as£π_°r_√
(
X
, 
Y
Ë
	`_ck_as£π_°r
(X, !=, Y)

	)

693 
	#ck_as£π_°r_…
(
X
, 
Y
Ë
	`_ck_as£π_°r
(X, <, Y)

	)

706 
	#ck_as£π_°r_À
(
X
, 
Y
Ë
	`_ck_as£π_°r
(X, <=, Y)

	)

719 
	#ck_as£π_°r_gt
(
X
, 
Y
Ë
	`_ck_as£π_°r
(X, >, Y)

	)

732 
	#ck_as£π_°r_ge
(
X
, 
Y
Ë
	`_ck_as£π_°r
(X, >=, Y)

	)

736 
	#_ck_as£π_±r
(
X
, 
OP
, 
Y
) do { \

737 c⁄° * 
_ck_x
 = (
X
); \

738 c⁄° * 
_ck_y
 = (
Y
); \

739 
	`ck_as£π_msg
(
_ck_x
 
OP
 
_ck_y
, "Assertion '%s' failed: %s == %#x, %s == %#x", #X" "#OP" "#Y, #X, _ck_x, #Y, _ck_y); \

740 } 0)

	)

755 
	#ck_as£π_±r_eq
(
X
, 
Y
Ë
	`_ck_as£π_±r
(X, ==, Y)

	)

767 
	#ck_as£π_±r_√
(
X
, 
Y
Ë
	`_ck_as£π_±r
(X, !=, Y)

	)

779 
	#m¨k_poöt
(Ë
	`_m¨k_poöt
(
__FILE__
,
__LINE__
)

	)

782 
CK_DLL_EXP
 
CK_EXPORT
 
_m¨k_poöt
(c⁄° *
fûe
, 
löe
);

787 
	eã°_ªsu…


789 
	mCK_TEST_RESULT_INVALID
,

790 
	mCK_PASS
,

791 
	mCK_FAILURE
,

792 
	mCK_ERROR


799 
	e¥öt_ouçut


801 
	mCK_SILENT
,

802 
	mCK_MINIMAL
,

803 
	mCK_NORMAL
,

804 
	mCK_VERBOSE
,

805 
	mCK_ENV
,

811 
	mCK_SUBUNIT
,

813 
	mCK_LAST


819 
SRu¬î
 
	tSRu¬î
;

824 
Te°Resu…
 
	tTe°Resu…
;

829 
	eck_ªsu…_˘x


831 
	mCK_CTX_INVALID
,

832 
	mCK_CTX_SETUP
,

833 
	mCK_CTX_TEST
,

834 
	mCK_CTX_TEARDOWN


849 
CK_DLL_EXP
 
CK_EXPORT
 
å_πy≥
(
Te°Resu…
 * 
å
);

863 
CK_DLL_EXP
 
ck_ªsu…_˘x
 
CK_EXPORT
 
å_˘x
(
Te°Resu…
 * 
å
);

872 
CK_DLL_EXP
 c⁄° *
CK_EXPORT
 
å_msg
(
Te°Resu…
 * 
å
);

882 
CK_DLL_EXP
 
CK_EXPORT
 
å_ o
(
Te°Resu…
 * 
å
);

893 
CK_DLL_EXP
 c⁄° *
CK_EXPORT
 
å_lfûe
(
Te°Resu…
 * 
å
);

904 
CK_DLL_EXP
 c⁄° *
CK_EXPORT
 
å_t˙ame
(
Te°Resu…
 * 
å
);

920 
CK_DLL_EXP
 
SRu¬î
 *
CK_EXPORT
 
§u¬î_¸óã
(
Suôe
 * 
s
);

933 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_add_suôe
(
SRu¬î
 * 
§
, 
Suôe
 * 
s
);

946 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_‰ì
(
SRu¬î
 * 
§
);

963 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_run_Æl
(
SRu¬î
 * 
§
,

964 
¥öt_ouçut
 
¥öt_mode
);

981 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_run
(
SRu¬î
 * 
§
, c⁄° *
¢ame
,

982 c⁄° *
t˙ame
,

983 
¥öt_ouçut
 
¥öt_mode
);

997 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_¡e°s_Áûed
(
SRu¬î
 * 
§
);

1008 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_¡e°s_run
(
SRu¬î
 * 
§
);

1027 
CK_DLL_EXP
 
Te°Resu…
 **
CK_EXPORT
 
§u¬î_Áûuªs
(
SRu¬î
 * 
§
);

1047 
CK_DLL_EXP
 
Te°Resu…
 **
CK_EXPORT
 
§u¬î_ªsu…s
(
SRu¬î
 * 
§
);

1058 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_¥öt
(
SRu¬î
 * 
§
,

1059 
¥öt_ouçut
 
¥öt_mode
);

1077 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_£t_log
(
SRu¬î
 * 
§
, c⁄° *
‚ame
);

1089 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_has_log
(
SRu¬î
 * 
§
);

1099 
CK_DLL_EXP
 c⁄° *
CK_EXPORT
 
§u¬î_log_‚ame
(
SRu¬î
 * 
§
);

1117 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_£t_xml
(
SRu¬î
 * 
§
, c⁄° *
‚ame
);

1129 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_has_xml
(
SRu¬î
 * 
§
);

1139 
CK_DLL_EXP
 c⁄° *
CK_EXPORT
 
§u¬î_xml_‚ame
(
SRu¬î
 * 
§
);

1157 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_£t_èp
(
SRu¬î
 * 
§
, c⁄° *
‚ame
);

1169 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_has_èp
(
SRu¬î
 * 
§
);

1179 
CK_DLL_EXP
 c⁄° *
CK_EXPORT
 
§u¬î_èp_‚ame
(
SRu¬î
 * 
§
);

1184 
	ef‹k_°©us


1186 
	mCK_FORK_GETENV
,

1187 
	mCK_FORK
,

1188 
	mCK_NOFORK


1198 
CK_DLL_EXP
 
f‹k_°©us
 
CK_EXPORT
 
§u¬î_f‹k_°©us
(
SRu¬î
 * 
§
);

1220 
CK_DLL_EXP
 
CK_EXPORT
 
§u¬î_£t_f‹k_°©us
(
SRu¬î
 * 
§
,

1221 
f‹k_°©us
 
f°©
);

1243 
CK_DLL_EXP
 
pid_t
 
CK_EXPORT
 
check_f‹k
();

1260 
CK_DLL_EXP
 
CK_EXPORT
 
	$check_waôpid_™d_exô
(
pid_t
 
pid
Ë
CK_ATTRIBUTE_NORETURN
;

1262 #ifde‡
__˝lu•lus


1263 
CK_CPPEND


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

147 #ifde‡
__USE_ATFILE


148 
	#AT_FDCWD
 -100

	)

151 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

152 
	#AT_REMOVEDIR
 0x200

	)

154 
	#AT_SYMLINK_FOLLOW
 0x400

	)

155 #ifde‡
__USE_GNU


156 
	#AT_NO_AUTOMOUNT
 0x800

	)

158 
	#AT_EMPTY_PATH
 0x1000

	)

160 
	#AT_EACCESS
 0x200

	)

169 
f˙é
 (
__fd
, 
__cmd
, ...);

178 #i‚de‡
__USE_FILE_OFFSET64


179 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

181 #ifde‡
__REDIRECT


182 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

183 
	`__n⁄nuŒ
 ((1));

185 
	#›í
 
›í64


	)

188 #ifde‡
__USE_LARGEFILE64


189 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

192 #ifde‡
__USE_ATFILE


202 #i‚de‡
__USE_FILE_OFFSET64


203 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

204 
	`__n⁄nuŒ
 ((2));

206 #ifde‡
__REDIRECT


207 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

208 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

210 
	#›í©
 
›í©64


	)

213 #ifde‡
__USE_LARGEFILE64


214 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

215 
	`__n⁄nuŒ
 ((2));

224 #i‚de‡
__USE_FILE_OFFSET64


225 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

227 #ifde‡
__REDIRECT


228 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

229 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

231 
	#¸ót
 
¸ót64


	)

234 #ifde‡
__USE_LARGEFILE64


235 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

238 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

239 && !
deföed
 
__USE_POSIX
))

248 
	#F_ULOCK
 0

	)

249 
	#F_LOCK
 1

	)

250 
	#F_TLOCK
 2

	)

251 
	#F_TEST
 3

	)

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

256 #ifde‡
__REDIRECT


257 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

259 
	#lockf
 
lockf64


	)

262 #ifde‡
__USE_LARGEFILE64


263 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

267 #ifde‡
__USE_XOPEN2K


270 #i‚de‡
__USE_FILE_OFFSET64


271 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

272 
__advi£
Ë
__THROW
;

274 #ifde‡
__REDIRECT_NTH


275 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

276 
__off64_t
 
__Àn
, 
__advi£
),

277 
posix_Ádvi£64
);

279 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

284 
__advi£
Ë
__THROW
;

292 #i‚de‡
__USE_FILE_OFFSET64


293 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

295 #ifde‡
__REDIRECT


296 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

297 
__off64_t
 
__Àn
),

298 
posix_ÁŒoˇã64
);

300 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

303 #ifde‡
__USE_LARGEFILE64


304 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

310 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

311 && 
deföed
 
__va_¨g_∑ck_Àn


312 
	~<bôs/f˙é2.h
>

315 
__END_DECLS


	@/usr/include/linux/kernel.h

1 #i‚de‡
_LINUX_KERNEL_H


2 
	#_LINUX_KERNEL_H


	)

4 
	~<löux/sysöfo.h
>

9 
	#__ALIGN_KERNEL
(
x
, 
a
Ë
	`__ALIGN_KERNEL_MASK
(x, (
	`ty≥of
(x))◊Ë- 1)

	)

10 
	#__ALIGN_KERNEL_MASK
(
x
, 
mask
Ë(((xË+ (mask)Ë& ~(mask))

	)

12 
	#__KERNEL_DIV_ROUND_UP
(
n
, 
d
Ë((“Ë+ (dË- 1Ë/ (d))

	)

	@/usr/include/linux/sched.h

1 #i‚de‡
_LINUX_SCHED_H


2 
	#_LINUX_SCHED_H


	)

7 
	#CSIGNAL
 0x000000f‡

	)

8 
	#CLONE_VM
 0x00000100

	)

9 
	#CLONE_FS
 0x00000200

	)

10 
	#CLONE_FILES
 0x00000400

	)

11 
	#CLONE_SIGHAND
 0x00000800

	)

12 
	#CLONE_PTRACE
 0x00002000

	)

13 
	#CLONE_VFORK
 0x00004000

	)

14 
	#CLONE_PARENT
 0x00008000

	)

15 
	#CLONE_THREAD
 0x00010000

	)

16 
	#CLONE_NEWNS
 0x00020000

	)

17 
	#CLONE_SYSVSEM
 0x00040000

	)

18 
	#CLONE_SETTLS
 0x00080000

	)

19 
	#CLONE_PARENT_SETTID
 0x00100000

	)

20 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

21 
	#CLONE_DETACHED
 0x00400000

	)

22 
	#CLONE_UNTRACED
 0x00800000

	)

23 
	#CLONE_CHILD_SETTID
 0x01000000

	)

24 
	#CLONE_NEWCGROUP
 0x02000000

	)

25 
	#CLONE_NEWUTS
 0x04000000

	)

26 
	#CLONE_NEWIPC
 0x08000000

	)

27 
	#CLONE_NEWUSER
 0x10000000

	)

28 
	#CLONE_NEWPID
 0x20000000

	)

29 
	#CLONE_NEWNET
 0x40000000

	)

30 
	#CLONE_IO
 0x80000000

	)

35 
	#SCHED_NORMAL
 0

	)

36 
	#SCHED_FIFO
 1

	)

37 
	#SCHED_RR
 2

	)

38 
	#SCHED_BATCH
 3

	)

40 
	#SCHED_IDLE
 5

	)

41 
	#SCHED_DEADLINE
 6

	)

44 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

49 
	#SCHED_FLAG_RESET_ON_FORK
 0x01

	)

	@/usr/include/linux/string.h

1 #i‚de‡
_LINUX_STRING_H_


2 
	#_LINUX_STRING_H_


	)

6 
	~<°rög.h
>

	@/usr/include/malloc.h

19 #i‚de‡
_MALLOC_H


20 
	#_MALLOC_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 #ifde‡
_LIBC


27 
	#__MALLOC_HOOK_VOLATILE


	)

28 
	#__MALLOC_DEPRECATED


	)

30 
	#__MALLOC_HOOK_VOLATILE
 vﬁ©ûe

	)

31 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

35 
__BEGIN_DECLS


38 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

41 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

42 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

49 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

50 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

53 
	$‰ì
 (*
__±r
Ë
__THROW
;

56 
	$c‰ì
 (*
__±r
Ë
__THROW
;

59 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

60 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

63 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

67 *
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

71 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

74 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

75 
__THROW
 
__©åibuã_mÆloc__
;

79 
	smÆlöfo


81 
¨ía
;

82 
‹dblks
;

83 
smblks
;

84 
hblks
;

85 
hblkhd
;

86 
usmblks
;

87 
fsmblks
;

88 
u‹dblks
;

89 
f‹dblks
;

90 
kìpco°
;

94 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

97 #i‚de‡
M_MXFAST


98 
	#M_MXFAST
 1

	)

100 #i‚de‡
M_NLBLKS


101 
	#M_NLBLKS
 2

	)

103 #i‚de‡
M_GRAIN


104 
	#M_GRAIN
 3

	)

106 #i‚de‡
M_KEEP


107 
	#M_KEEP
 4

	)

111 
	#M_TRIM_THRESHOLD
 -1

	)

112 
	#M_TOP_PAD
 -2

	)

113 
	#M_MMAP_THRESHOLD
 -3

	)

114 
	#M_MMAP_MAX
 -4

	)

115 
	#M_CHECK_ACTION
 -5

	)

116 
	#M_PERTURB
 -6

	)

117 
	#M_ARENA_TEST
 -7

	)

118 
	#M_ARENA_MAX
 -8

	)

121 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

125 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

129 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

132 
	$mÆloc_°©s
 (Ë
__THROW
;

135 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

138 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

142 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

147 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

148 
__MALLOC_DEPRECATED
;

150 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

152 
__MALLOC_DEPRECATED
;

153 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
)(
size_t
 
__size
,

155 
__MALLOC_DEPRECATED
;

156 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
)(*
__±r
,

157 
size_t
 
__size
,

159 
__MALLOC_DEPRECATED
;

160 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
)(
size_t
 
__Æignmít
,

161 
size_t
 
__size
,

163 
__MALLOC_DEPRECATED
;

164 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

167 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

170 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


85 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


86 
	#PTHREAD_MUTEX_INITIALIZER
 \

87 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

88 #ifde‡
__USE_GNU


89 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

90 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

91 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

92 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

93 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

94 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

98 
	#PTHREAD_MUTEX_INITIALIZER
 \

99 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

100 #ifde‡
__USE_GNU


101 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

102 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

103 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

105 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

113 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


116 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

117 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

119 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


125 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


126 #i‡
__WORDSIZE
 == 64

127 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

132 
	#PTHREAD_RWLOCK_INITIALIZER
 \

133 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

134 #ifde‡
__USE_GNU


135 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


136 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

137 { { 0, 0, 0, 0, 0, 0, 0, 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, \

138 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

142 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

143 0, 
__PTHREAD_RWLOCK_ELISION_EXTRA
, 0, 0 } }

	)

145 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

146 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

147 0 } }

	)

157 
	mPTHREAD_INHERIT_SCHED
,

158 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

159 
	mPTHREAD_EXPLICIT_SCHED


160 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

167 
	mPTHREAD_SCOPE_SYSTEM
,

168 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

169 
	mPTHREAD_SCOPE_PROCESS


170 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

177 
	mPTHREAD_PROCESS_PRIVATE
,

178 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

179 
	mPTHREAD_PROCESS_SHARED


180 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

186 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

190 
	s_±hªad_˛ónup_buf„r


192 (*
	m__routöe
) (*);

193 *
	m__¨g
;

194 
	m__ˇn˚…y≥
;

195 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

201 
	mPTHREAD_CANCEL_ENABLE
,

202 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

203 
	mPTHREAD_CANCEL_DISABLE


204 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

208 
	mPTHREAD_CANCEL_DEFERRED
,

209 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

210 
	mPTHREAD_CANCEL_ASYNCHRONOUS


211 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

213 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

217 
	#PTHREAD_ONCE_INIT
 0

	)

220 #ifde‡
__USE_XOPEN2K


224 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

228 
__BEGIN_DECLS


233 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

234 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

235 *(*
__°¨t_routöe
) (*),

236 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

242 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

250 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

252 #ifde‡
__USE_GNU


255 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

263 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

264 c⁄° 
time•ec
 *
__ab°ime
);

271 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

275 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

278 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

279 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

287 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

294 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

295 *
__dëach°©e
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

299 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

300 
__dëach°©e
)

301 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 
size_t
 *
__gu¨dsize
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

311 
size_t
 
__gu¨dsize
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

317 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

322 c⁄° 
sched_∑øm
 *
__ª°ri˘


323 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

326 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


327 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

328 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

331 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

332 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


336 
__©å
, *
__ª°ri˘
 
__öhîô
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

340 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

341 
__öhîô
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

347 *
__ª°ri˘
 
__sc›e
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

352 
__THROW
 
	`__n⁄nuŒ
 ((1));

355 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


356 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

363 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

364 *
__°ackaddr
)

365 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

368 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


369 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

370 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

375 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

376 
size_t
 
__°acksize
)

377 
__THROW
 
	`__n⁄nuŒ
 ((1));

379 #ifde‡
__USE_XOPEN2K


381 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

382 **
__ª°ri˘
 
__°ackaddr
,

383 
size_t
 *
__ª°ri˘
 
__°acksize
)

384 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

389 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

390 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 #ifde‡
__USE_GNU


396 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

397 
size_t
 
__˝u£tsize
,

398 c⁄° 
˝u_£t_t
 *
__˝u£t
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

403 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

404 
size_t
 
__˝u£tsize
,

405 
˝u_£t_t
 *
__˝u£t
)

406 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

409 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1));

414 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

415 
__THROW
 
	`__n⁄nuŒ
 ((1));

420 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2));

429 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

430 c⁄° 
sched_∑øm
 *
__∑øm
)

431 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

435 *
__ª°ri˘
 
__pﬁicy
,

436 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

437 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

440 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

441 
__THROW
;

444 #ifde‡
__USE_GNU


446 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

447 
size_t
 
__buÊí
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

452 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 #ifde‡
__USE_UNIX98


458 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

461 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

464 #ifde‡
__USE_GNU


469 
	$±hªad_yõld
 (Ë
__THROW
;

474 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

475 c⁄° 
˝u_£t_t
 *
__˝u£t
)

476 
__THROW
 
	`__n⁄nuŒ
 ((3));

479 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

480 
˝u_£t_t
 *
__˝u£t
)

481 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

495 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

506 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

510 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

513 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

518 
	`±hªad_ã°ˇn˚l
 ();

527 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

528 
__mask_was_ßved
;

529 } 
__ˇn˚l_jmp_buf
[1];

530 *
__∑d
[4];

531 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

534 #i‚de‡
__˛ónup_f˘_©åibuã


535 
	#__˛ónup_f˘_©åibuã


	)

540 
	s__±hªad_˛ónup_‰ame


542 (*
__ˇn˚l_routöe
) (*);

543 *
__ˇn˚l_¨g
;

544 
__do_ô
;

545 
__ˇn˚l_ty≥
;

548 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


549 #ifde‡
__˝lu•lus


551 ˛as†
	c__±hªad_˛ónup_˛ass


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

558 
public
:

559 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

560 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

561 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

562 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

563 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

564 &
__ˇn˚l_ty≥
); 
	}
}

565 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

575 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

577 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

581 
	#±hªad_˛ónup_p›
(
execuã
) \

582 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

583 } 0)

	)

585 #ifde‡
__USE_GNU


589 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

591 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

592 
__˛‰ame
.
	`__de„r
 ()

	)

597 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

598 
__˛‰ame
.
	`__ª°‹e
 (); \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

607 
__exã∫_ölöe
 

608 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

610 i‡(
__‰ame
->
__do_ô
)

611 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

612 
	}
}

621 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

623 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

624 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

625 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

626 .
__do_ô
 = 1 };

	)

630 
	#±hªad_˛ónup_p›
(
execuã
) \

631 
__˛‰ame
.
__do_ô
 = (
execuã
); \

632 } 0)

	)

634 #ifde‡
__USE_GNU


638 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 }; \

644 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

645 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

650 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

651 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

652 
__˛‰ame
.
__do_ô
 = (
execuã
); \

653 } 0)

	)

664 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

666 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

667 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

668 *
__ˇn˚l_¨g
 = (
¨g
); \

669 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

670 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

671 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

673 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

674 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

678 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

679 dÿ{

	)

680 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

681 
__˛ónup_f˘_©åibuã
;

685 
	#±hªad_˛ónup_p›
(
execuã
) \

688 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

689 i‡(
execuã
) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 } 0)

	)

692 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

693 
__˛ónup_f˘_©åibuã
;

695 #ifde‡
__USE_GNU


699 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

701 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

702 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

703 *
__ˇn˚l_¨g
 = (
¨g
); \

704 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

705 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

706 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

708 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

709 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

713 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

714 dÿ{

	)

715 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

716 
__˛ónup_f˘_©åibuã
;

721 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

724 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

725 i‡(
execuã
) \

726 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

727 
	}
} 0)

	)

728 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

729 
__˛ónup_f˘_©åibuã
;

733 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

734 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

735 #i‚de‡
SHARED


736 
	`__©åibuã__
 ((
__wók__
))

742 
__jmp_buf_èg
;

743 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

749 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

750 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

751 
__THROW
 
	`__n⁄nuŒ
 ((1));

754 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

755 
__THROW
 
	`__n⁄nuŒ
 ((1));

758 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

759 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

763 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

765 #ifde‡
__USE_XOPEN2K


767 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

768 c⁄° 
time•ec
 *
__ª°ri˘


769 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

773 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

778 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

779 
__ª°ri˘
 
__muãx
,

780 *
__ª°ri˘
 
__¥io˚ûög
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

785 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

786 
__¥io˚ûög
,

787 *
__ª°ri˘
 
__ﬁd_˚ûög
)

788 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

791 #ifde‡
__USE_XOPEN2K8


793 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1));

795 #ifde‡
__USE_GNU


796 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

797 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1));

810 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1));

814 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

815 
__ª°ri˘
 
__©å
,

816 *
__ª°ri˘
 
__psh¨ed
)

817 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

820 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

821 
__psh¨ed
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

824 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


826 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


827 
__©å
, *
__ª°ri˘
 
__köd
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

833 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1));

838 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

839 
__ª°ri˘
 
__©å
,

840 *
__ª°ri˘
 
__¥Ÿocﬁ
)

841 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

845 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

846 
__¥Ÿocﬁ
)

847 
__THROW
 
	`__n⁄nuŒ
 ((1));

850 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

851 
__ª°ri˘
 
__©å
,

852 *
__ª°ri˘
 
__¥io˚ûög
)

853 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥io˚ûög
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_XOPEN2K


862 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

863 *
__robu°√ss
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

865 #ifde‡
__USE_GNU


866 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

867 *
__robu°√ss
)

868 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

872 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

873 
__robu°√ss
)

874 
__THROW
 
	`__n⁄nuŒ
 ((1));

875 #ifde‡
__USE_GNU


876 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

877 
__robu°√ss
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


888 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

889 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


890 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

893 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

894 
__THROW
 
	`__n⁄nuŒ
 ((1));

897 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

898 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

901 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

902 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

904 #ifde‡
__USE_XOPEN2K


906 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

907 c⁄° 
time•ec
 *
__ª°ri˘


908 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

912 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

916 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

917 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

919 #ifde‡
__USE_XOPEN2K


921 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

922 c⁄° 
time•ec
 *
__ª°ri˘


923 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

927 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

934 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

935 
__THROW
 
	`__n⁄nuŒ
 ((1));

938 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

939 
__THROW
 
	`__n⁄nuŒ
 ((1));

942 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

943 
__ª°ri˘
 
__©å
,

944 *
__ª°ri˘
 
__psh¨ed
)

945 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

948 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

949 
__psh¨ed
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__¥ef
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

968 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

969 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

974 
__THROW
 
	`__n⁄nuŒ
 ((1));

977 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

978 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

981 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

982 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

989 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

990 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

991 
	`__n⁄nuŒ
 ((1, 2));

1000 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1002 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1003 
	`__n⁄nuŒ
 ((1, 2, 3));

1008 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1));

1012 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1013 
__THROW
 
	`__n⁄nuŒ
 ((1));

1016 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1017 
__ª°ri˘
 
__©å
,

1018 *
__ª°ri˘
 
__psh¨ed
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1022 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1023 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1025 #ifde‡
__USE_XOPEN2K


1027 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__˛ockid_t
 
__˛ock_id
)

1035 
__THROW
 
	`__n⁄nuŒ
 ((1));

1039 #ifde‡
__USE_XOPEN2K


1044 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1048 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1049 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1053 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1056 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1057 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1060 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1061 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1068 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1069 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1070 
__©å
, 
__cou¡
)

1071 
__THROW
 
	`__n⁄nuŒ
 ((1));

1074 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1075 
__THROW
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1079 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1083 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1084 
__THROW
 
	`__n⁄nuŒ
 ((1));

1087 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1088 
__THROW
 
	`__n⁄nuŒ
 ((1));

1091 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1092 
__ª°ri˘
 
__©å
,

1093 *
__ª°ri˘
 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1097 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1098 
__psh¨ed
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1111 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1112 (*
__de°r_fun˘i⁄
) (*))

1113 
__THROW
 
	`__n⁄nuŒ
 ((1));

1116 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1119 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1122 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1123 c⁄° *
__poöãr
Ë
__THROW
 ;

1126 #ifde‡
__USE_XOPEN2K


1128 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1129 
__˛ockid_t
 *
__˛ock_id
)

1130 
__THROW
 
	`__n⁄nuŒ
 ((2));

1145 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1146 (*
__∑ª¡
) (),

1147 (*
__chûd
Ë()Ë
__THROW
;

1150 #ifde‡
__USE_EXTERN_INLINES


1152 
__exã∫_ölöe
 

1153 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1155  
__thªad1
 =
__thªad2
;

1156 
	}
}

1159 
	g__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/sys/param.h

19 #i‚de‡
_SYS_PARAM_H


20 
	#_SYS_PARAM_H
 1

	)

22 
	#__√ed_NULL


	)

23 
	~<°ddef.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<limôs.h
>

27 
	~<ídün.h
>

28 
	~<sig«l.h
>

31 
	~<bôs/∑øm.h
>

36 
	#NBBY
 
CHAR_BIT


	)

38 #i‡!
deföed
 
NGROUPS
 && deföed 
NGROUPS_MAX


39 
	#NGROUPS
 
NGROUPS_MAX


	)

41 #i‡!
deföed
 
MAXSYMLINKS
 && deföed 
SYMLOOP_MAX


42 
	#MAXSYMLINKS
 
SYMLOOP_MAX


	)

44 #i‡!
deföed
 
CANBSIZ
 && deföed 
MAX_CANON


45 
	#CANBSIZ
 
MAX_CANON


	)

47 #i‡!
deföed
 
MAXPATHLEN
 && deföed 
PATH_MAX


48 
	#MAXPATHLEN
 
PATH_MAX


	)

50 #i‡!
deföed
 
NOFILE
 && deföed 
OPEN_MAX


51 
	#NOFILE
 
OPEN_MAX


	)

53 #i‡!
deföed
 
MAXHOSTNAMELEN
 && deföed 
HOST_NAME_MAX


54 
	#MAXHOSTNAMELEN
 
HOST_NAME_MAX


	)

56 #i‚de‡
NCARGS


57 #ifde‡
ARG_MAX


58 
	#NCARGS
 
ARG_MAX


	)

62 
	#NCARGS
 
INT_MAX


	)

68 #i‚de‡
NOGROUP


69 
	#NOGROUP
 65535

	)

71 #i‚de‡
NODEV


72 
	#NODEV
 ((
dev_t
Ë-1Ë

	)

77 #i‚de‡
DEV_BSIZE


78 
	#DEV_BSIZE
 512

	)

83 
	#£tbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] |1<<((i)%NBBY))

	)

84 
	#˛rbô
(
a
,
i
Ë(◊)[(i)/
NBBY
] &~(1<<((i)%NBBY)))

	)

85 
	#is£t
(
a
,
i
Ë(◊)[(i)/
NBBY
] & (1<<((i)%NBBY)))

	)

86 
	#is˛r
(
a
,
i
Ë((◊)[(i)/
NBBY
] & (1<<((i)%NBBY))Ë=0)

	)

89 #i‚de‡
howm™y


90 
	#howm™y
(
x
, 
y
Ë(((xË+ ((yË- 1)Ë/ (y))

	)

92 #ifde‡
__GNUC__


93 
	#roundup
(
x
, 
y
Ë(
	`__buûtö_c⁄°™t_p
 (yË&& 
	`powîof2
 (y) \

94 ? (((
x
Ë+ (
y
) - 1) & ~((y) - 1)) \

95 : ((((
x
Ë+ ((
y
Ë- 1)Ë/ (y)Ë* (y)))

	)

97 
	#roundup
(
x
, 
y
Ë((((xË+ ((yË- 1)Ë/ (y)Ë* (y))

	)

99 
	#powîof2
(
x
Ë((((xË- 1Ë& (x)Ë=0)

	)

102 
	#MIN
(
a
,
b
Ë((◊)<(b))?◊):(b))

	)

103 
	#MAX
(
a
,
b
Ë((◊)>(b))?◊):(b))

	)

	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_ATFILE


30 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

33 #ifde‡
__USE_ATFILE


34 
	#__√ed_time•ec


	)

36 
	~<time.h
>

39 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


42 #i‚de‡
__dev_t_deföed


43 
__dev_t
 
	tdev_t
;

44 
	#__dev_t_deföed


	)

47 #i‚de‡
__gid_t_deföed


48 
__gid_t
 
	tgid_t
;

49 
	#__gid_t_deföed


	)

52 #i‚de‡
__öo_t_deföed


53 #i‚de‡
__USE_FILE_OFFSET64


54 
__öo_t
 
	töo_t
;

56 
__öo64_t
 
	töo_t
;

58 
	#__öo_t_deföed


	)

61 #i‚de‡
__mode_t_deföed


62 
__mode_t
 
	tmode_t
;

63 
	#__mode_t_deföed


	)

66 #i‚de‡
__∆ök_t_deföed


67 
__∆ök_t
 
	t∆ök_t
;

68 
	#__∆ök_t_deföed


	)

71 #i‚de‡
__off_t_deföed


72 #i‚de‡
__USE_FILE_OFFSET64


73 
__off_t
 
	toff_t
;

75 
__off64_t
 
	toff_t
;

77 
	#__off_t_deföed


	)

80 #i‚de‡
__uid_t_deföed


81 
__uid_t
 
	tuid_t
;

82 
	#__uid_t_deföed


	)

86 #ifde‡
__USE_UNIX98


87 #i‚de‡
__blk˙t_t_deföed


88 #i‚de‡
__USE_FILE_OFFSET64


89 
__blk˙t_t
 
	tblk˙t_t
;

91 
__blk˙t64_t
 
	tblk˙t_t
;

93 
	#__blk˙t_t_deföed


	)

96 #i‚de‡
__blksize_t_deföed


97 
__blksize_t
 
	tblksize_t
;

98 
	#__blksize_t_deföed


	)

102 
	g__BEGIN_DECLS


104 
	~<bôs/°©.h
>

106 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


107 
	#S_IFMT
 
__S_IFMT


	)

108 
	#S_IFDIR
 
__S_IFDIR


	)

109 
	#S_IFCHR
 
__S_IFCHR


	)

110 
	#S_IFBLK
 
__S_IFBLK


	)

111 
	#S_IFREG
 
__S_IFREG


	)

112 #ifde‡
__S_IFIFO


113 
	#S_IFIFO
 
__S_IFIFO


	)

115 #ifde‡
__S_IFLNK


116 
	#S_IFLNK
 
__S_IFLNK


	)

118 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

119 && 
deföed
 
	g__S_IFSOCK


120 
	#S_IFSOCK
 
__S_IFSOCK


	)

126 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

128 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

129 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

130 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

131 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

132 #ifde‡
__S_IFIFO


133 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

135 #ifde‡
__S_IFLNK


136 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

139 #i‡
deföed
 
__USE_MISC
 && !deföed 
__S_IFLNK


140 
	#S_ISLNK
(
mode
Ë0

	)

143 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

144 && 
deföed
 
	g__S_IFSOCK


145 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

146 #ñi‡
deföed
 
__USE_XOPEN2K


147 
	#S_ISSOCK
(
mode
Ë0

	)

154 #ifdef 
__USE_POSIX199309


155 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

156 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

157 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

163 
	#S_ISUID
 
__S_ISUID


	)

164 
	#S_ISGID
 
__S_ISGID


	)

166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
	#S_ISVTX
 
__S_ISVTX


	)

171 
	#S_IRUSR
 
__S_IREAD


	)

172 
	#S_IWUSR
 
__S_IWRITE


	)

173 
	#S_IXUSR
 
__S_IEXEC


	)

175 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

177 #ifde‡
__USE_MISC


178 
	#S_IREAD
 
S_IRUSR


	)

179 
	#S_IWRITE
 
S_IWUSR


	)

180 
	#S_IEXEC
 
S_IXUSR


	)

183 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

184 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

185 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

187 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

189 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

190 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

191 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

193 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

196 #ifdef 
__USE_MISC


198 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

199 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

200 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

202 
	#S_BLKSIZE
 512

	)

206 #i‚de‡
__USE_FILE_OFFSET64


208 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

209 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

213 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

215 #ifde‡
__REDIRECT_NTH


216 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

217 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

218 
	`__n⁄nuŒ
 ((1, 2));

219 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

220 
	`__n⁄nuŒ
 ((2));

222 
	#°©
 
°©64


	)

223 
	#f°©
 
f°©64


	)

226 #ifde‡
__USE_LARGEFILE64


227 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

228 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

229 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

232 #ifde‡
__USE_ATFILE


236 #i‚de‡
__USE_FILE_OFFSET64


237 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

238 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

239 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

243 
°©
 *
__ª°ri˘
 
__buf
,

244 
__Êag
),

245 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

247 
	#f°©©
 
f°©©64


	)

251 #ifde‡
__USE_LARGEFILE64


252 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

253 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

254 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

258 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


259 #i‚de‡
__USE_FILE_OFFSET64


262 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

263 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

265 #ifde‡
__REDIRECT_NTH


266 
	`__REDIRECT_NTH
 (
l°©
,

267 (c⁄° *
__ª°ri˘
 
__fûe
,

268 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 
	#l°©
 
l°©64


	)

274 #ifde‡
__USE_LARGEFILE64


275 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

276 
°©64
 *
__ª°ri˘
 
__buf
)

277 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

283 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

284 
__THROW
 
	`__n⁄nuŒ
 ((1));

286 #ifde‡
__USE_MISC


290 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

291 
__THROW
 
	`__n⁄nuŒ
 ((1));

295 #ifde‡
__USE_POSIX


296 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

299 #ifde‡
__USE_ATFILE


302 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

303 
__Êag
)

304 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

313 #ifdef 
__USE_GNU


316 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

320 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1));

323 #ifde‡
__USE_ATFILE


327 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

328 
__THROW
 
	`__n⁄nuŒ
 ((2));

334 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


335 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

336 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_ATFILE


342 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

343 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

349 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

352 #ifde‡
__USE_ATFILE


356 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 #ifde‡
__USE_ATFILE


363 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

364 c⁄° 
time•ec
 
__times
[2],

365 
__Êags
)

366 
__THROW
 
	`__n⁄nuŒ
 ((2));

369 #ifde‡
__USE_XOPEN2K8


371 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

389 #i‚de‡
_STAT_VER


390 
	#_STAT_VER
 0

	)

392 #i‚de‡
_MKNOD_VER


393 
	#_MKNOD_VER
 0

	)

397 #i‚de‡
__USE_FILE_OFFSET64


398 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

399 
__THROW
 
	`__n⁄nuŒ
 ((3));

400 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

401 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

402 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

403 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

404 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

405 
°©
 *
__°©_buf
, 
__Êag
)

406 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

408 #ifde‡
__REDIRECT_NTH


409 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

410 
°©
 *
__°©_buf
), 
__fx°©64
)

411 
	`__n⁄nuŒ
 ((3));

412 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

413 
°©
 *
__°©_buf
), 
__x°©64
)

414 
	`__n⁄nuŒ
 ((2, 3));

415 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

416 
°©
 *
__°©_buf
), 
__lx°©64
)

417 
	`__n⁄nuŒ
 ((2, 3));

418 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

419 c⁄° *
__fûíame
,

420 
°©
 *
__°©_buf
, 
__Êag
),

421 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

424 
	#__fx°©
 
__fx°©64


	)

425 
	#__x°©
 
__x°©64


	)

426 
	#__lx°©
 
__lx°©64


	)

430 #ifde‡
__USE_LARGEFILE64


431 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

432 
__THROW
 
	`__n⁄nuŒ
 ((3));

433 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

434 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

435 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

436 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

437 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

438 
°©64
 *
__°©_buf
, 
__Êag
)

439 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

441 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

442 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

444 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

445 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

446 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

448 #ifde‡
__USE_EXTERN_INLINES


451 
__exã∫_ölöe
 

452 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

454  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

455 
	}
}

457 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


458 
__exã∫_ölöe
 

459 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

461  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

462 
	}
}

465 
__exã∫_ölöe
 

466 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

468  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

469 
	}
}

471 #ifde‡
__USE_ATFILE


472 
__exã∫_ölöe
 

473 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

474 
__Êag
))

476  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

477 
	}
}

480 #ifde‡
__USE_MISC


481 
__exã∫_ölöe
 

482 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

484  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

485 
	}
}

488 #ifde‡
__USE_ATFILE


489 
__exã∫_ölöe
 

490 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

491 
__dev_t
 
__dev
))

493  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

494 
	}
}

497 #i‡
deföed
 
__USE_LARGEFILE64
 \

498 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

499 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

500 
__exã∫_ölöe
 

501 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

503  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

504 
	}
}

506 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


507 
__exã∫_ölöe
 

508 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

510  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

511 
	}
}

514 
__exã∫_ölöe
 

515 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

517  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

518 
	}
}

520 #ifde‡
__USE_ATFILE


521 
__exã∫_ölöe
 

522 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

523 
__Êag
))

525  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

526 
	}
}

533 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_MISC


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_MISC


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_MISC


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡(
	`__OPEN_NEEDS_MODE
 (
__oÊag
Ë&& 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/param.h

19 #i‚de‡
_SYS_PARAM_H


23 #i‚de‡
ARG_MAX


24 
	#__undef_ARG_MAX


	)

27 
	~<löux/limôs.h
>

28 
	~<löux/∑øm.h
>

31 #ifde‡
__undef_ARG_MAX


32 #unde‡
ARG_MAX


33 #unde‡
__undef_ARG_MAX


36 
	#MAXSYMLINKS
 20

	)

41 
	#NOFILE
 256

	)

42 
	#NCARGS
 131072

	)

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

192 
	#_XOPEN_STREAMS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

109 
	#__PTHREAD_SPINS
 0, 0

	)

111 
	m__nu£rs
;

112 
__exãnsi⁄__
 union

116 
	m__e•ös
;

117 
	m__ñisi⁄
;

118 
	#__•ös
 
__ñisi⁄_d©a
.
__e•ös


	)

119 
	#__ñisi⁄
 
__ñisi⁄_d©a
.
__ñisi⁄


	)

120 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

121 } 
	m__ñisi⁄_d©a
;

122 
__±hªad_¶i°_t
 
	m__li°
;

125 } 
	m__d©a
;

126 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

127 
	m__Æign
;

128 } 
	t±hªad_muãx_t
;

132 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

133 
	m__Æign
;

134 } 
	t±hªad_muãx©å_t
;

143 
	m__lock
;

144 
	m__fuãx
;

145 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

146 
__exãnsi⁄__
 
	m__wakeup_£q
;

147 
__exãnsi⁄__
 
	m__wokí_£q
;

148 *
	m__muãx
;

149 
	m__nwaôîs
;

150 
	m__brﬂdˇ°_£q
;

151 } 
	m__d©a
;

152 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

153 
__exãnsi⁄__
 
	m__Æign
;

154 } 
	t±hªad_c⁄d_t
;

158 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

159 
	m__Æign
;

160 } 
	t±hªad_c⁄d©å_t
;

164 
	t±hªad_key_t
;

168 
	t±hªad_⁄˚_t
;

171 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


176 #ifde‡
__x86_64__


179 
	m__lock
;

180 
	m__ƒ_ªadîs
;

181 
	m__ªadîs_wakeup
;

182 
	m__wrôî_wakeup
;

183 
	m__ƒ_ªadîs_queued
;

184 
	m__ƒ_wrôîs_queued
;

185 
	m__wrôî
;

186 
	m__sh¨ed
;

187 sig√d 
	m__rwñisi⁄
;

188 #ifde‡ 
__ILP32__


189 
	m__∑d1
[3];

190 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0 }

	)

192 
	m__∑d1
[7];

193 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0, { 0, 0, 0, 0, 0, 0, 0 }

	)

195 
	m__∑d2
;

198 
	m__Êags
;

199 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

200 } 
	m__d©a
;

204 
	m__lock
;

205 
	m__ƒ_ªadîs
;

206 
	m__ªadîs_wakeup
;

207 
	m__wrôî_wakeup
;

208 
	m__ƒ_ªadîs_queued
;

209 
	m__ƒ_wrôîs_queued
;

212 
	m__Êags
;

213 
	m__sh¨ed
;

214 sig√d 
	m__rwñisi⁄
;

215 
	#__PTHREAD_RWLOCK_ELISION_EXTRA
 0

	)

216 
	m__∑d2
;

217 
	m__wrôî
;

218 } 
	m__d©a
;

220 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

221 
	m__Æign
;

222 } 
	t±hªad_rwlock_t
;

226 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

227 
	m__Æign
;

228 } 
	t±hªad_rwlock©å_t
;

232 #ifde‡
__USE_XOPEN2K


234 vﬁ©ûê
	t±hªad_•ölock_t
;

241 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

242 
	m__Æign
;

243 } 
	t±hªad_b¨rõr_t
;

247 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

248 
	m__Æign
;

249 } 
	t±hªad_b¨rõøâr_t
;

253 #i‚de‡
__x86_64__


255 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/bits/sigaction.h

19 #i‚de‡
_SIGNAL_H


24 
	ssiga˘i⁄


27 #ifde‡
__USE_POSIX199309


31 
__sigh™dÀr_t
 
	mß_h™dÀr
;

33 (*
	mß_siga˘i⁄
Ë(, 
	msigöfo_t
 *, *);

35 
	m__siga˘i⁄_h™dÀr
;

36 
	#ß_h™dÀr
 
__siga˘i⁄_h™dÀr
.
ß_h™dÀr


	)

37 
	#ß_siga˘i⁄
 
__siga˘i⁄_h™dÀr
.
ß_siga˘i⁄


	)

39 
__sigh™dÀr_t
 
	mß_h™dÀr
;

43 
__sig£t_t
 
	mß_mask
;

46 
	mß_Êags
;

49 (*
	mß_ª°‹î
) ();

53 
	#SA_NOCLDSTOP
 1

	)

54 
	#SA_NOCLDWAIT
 2

	)

55 
	#SA_SIGINFO
 4

	)

57 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_MISC


58 
	#SA_ONSTACK
 0x08000000

	)

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


61 
	#SA_RESTART
 0x10000000

	)

62 
	#SA_NODEFER
 0x40000000

	)

64 
	#SA_RESETHAND
 0x80000000

	)

66 #ifde‡
__USE_MISC


67 
	#SA_INTERRUPT
 0x20000000

	)

70 
	#SA_NOMASK
 
SA_NODEFER


	)

71 
	#SA_ONESHOT
 
SA_RESETHAND


	)

72 
	#SA_STACK
 
SA_ONSTACK


	)

76 
	#SIG_BLOCK
 0

	)

77 
	#SIG_UNBLOCK
 1

	)

78 
	#SIG_SETMASK
 2

	)

	@/usr/include/bits/sigcontext.h

18 #i‚de‡
_BITS_SIGCONTEXT_H


19 
	#_BITS_SIGCONTEXT_H
 1

	)

21 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_SYS_UCONTEXT_H


25 
	#FP_XSTATE_MAGIC1
 0x46505853U

	)

26 
	#FP_XSTATE_MAGIC2
 0x46505845U

	)

27 
	#FP_XSTATE_MAGIC2_SIZE
 (
FP_XSTATE_MAGIC2
)

	)

29 
	s_Âx_sw_byãs


31 
__uöt32_t
 
	mmagic1
;

32 
__uöt32_t
 
	mexãnded_size
;

33 
__uöt64_t
 
	mx°©e_bv
;

34 
__uöt32_t
 
	mx°©e_size
;

35 
__uöt32_t
 
	m∑ddög
[7];

38 
	s_Âªg


40 
	msignifiˇnd
[4];

41 
	mexp⁄ít
;

44 
	s_Âxªg


46 
	msignifiˇnd
[4];

47 
	mexp⁄ít
;

48 
	m∑ddög
[3];

51 
	s_xmmªg


53 
__uöt32_t
 
	mñemít
[4];

58 #i‚de‡
__x86_64__


60 
	s_Â°©e


63 
__uöt32_t
 
	mcw
;

64 
__uöt32_t
 
	msw
;

65 
__uöt32_t
 
	mèg
;

66 
__uöt32_t
 
	mùoff
;

67 
__uöt32_t
 
	mcs£l
;

68 
__uöt32_t
 
	md©aoff
;

69 
__uöt32_t
 
	md©a£l
;

70 
_Âªg
 
	m_°
[8];

71 
	m°©us
;

72 
	mmagic
;

75 
__uöt32_t
 
	m_fx§_ív
[6];

76 
__uöt32_t
 
	mmxc§
;

77 
__uöt32_t
 
	mª£rved
;

78 
_Âxªg
 
	m_fx§_°
[8];

79 
_xmmªg
 
	m_xmm
[8];

80 
__uöt32_t
 
	m∑ddög
[56];

83 #i‚de‡
sigc⁄ãxt_°ru˘


88 
	#sigc⁄ãxt_°ru˘
 
sigc⁄ãxt


	)

91 
	#X86_FXSR_MAGIC
 0x0000

	)

93 
	ssigc⁄ãxt


95 
	mgs
, 
	m__gsh
;

96 
	mfs
, 
	m__fsh
;

97 
	mes
, 
	m__esh
;

98 
	mds
, 
	m__dsh
;

99 
	medi
;

100 
	mesi
;

101 
	mebp
;

102 
	me•
;

103 
	mebx
;

104 
	medx
;

105 
	mecx
;

106 
	móx
;

107 
	må≠no
;

108 
	mîr
;

109 
	meù
;

110 
	mcs
, 
	m__csh
;

111 
	meÊags
;

112 
	me•_©_sig«l
;

113 
	mss
, 
	m__ssh
;

114 
_Â°©e
 * 
	mÂ°©e
;

115 
	mﬁdmask
;

116 
	m¸2
;

121 
	s_Â°©e


124 
__uöt16_t
 
	mcwd
;

125 
__uöt16_t
 
	mswd
;

126 
__uöt16_t
 
	m·w
;

127 
__uöt16_t
 
	mf›
;

128 
__uöt64_t
 
	mrù
;

129 
__uöt64_t
 
	mrdp
;

130 
__uöt32_t
 
	mmxc§
;

131 
__uöt32_t
 
	mmx¸_mask
;

132 
_Âxªg
 
	m_°
[8];

133 
_xmmªg
 
	m_xmm
[16];

134 
__uöt32_t
 
	m∑ddög
[24];

137 
	ssigc⁄ãxt


139 
__uöt64_t
 
	mr8
;

140 
__uöt64_t
 
	mr9
;

141 
__uöt64_t
 
	mr10
;

142 
__uöt64_t
 
	mr11
;

143 
__uöt64_t
 
	mr12
;

144 
__uöt64_t
 
	mr13
;

145 
__uöt64_t
 
	mr14
;

146 
__uöt64_t
 
	mr15
;

147 
__uöt64_t
 
	mrdi
;

148 
__uöt64_t
 
	mrsi
;

149 
__uöt64_t
 
	mrbp
;

150 
__uöt64_t
 
	mrbx
;

151 
__uöt64_t
 
	mrdx
;

152 
__uöt64_t
 
	møx
;

153 
__uöt64_t
 
	mrcx
;

154 
__uöt64_t
 
	mr•
;

155 
__uöt64_t
 
	mrù
;

156 
__uöt64_t
 
	meÊags
;

157 
	mcs
;

158 
	mgs
;

159 
	mfs
;

160 
	m__∑d0
;

161 
__uöt64_t
 
	mîr
;

162 
__uöt64_t
 
	må≠no
;

163 
__uöt64_t
 
	mﬁdmask
;

164 
__uöt64_t
 
	m¸2
;

165 
__exãnsi⁄__
 union

167 
_Â°©e
 * 
	mÂ°©e
;

168 
__uöt64_t
 
	m__Â°©e_w‹d
;

170 
__uöt64_t
 
	m__ª£rved1
 [8];

175 
	s_xßve_hdr


177 
__uöt64_t
 
	mx°©e_bv
;

178 
__uöt64_t
 
	mª£rved1
[2];

179 
__uöt64_t
 
	mª£rved2
[5];

182 
	s_ymmh_°©e


184 
__uöt32_t
 
	mymmh_•a˚
[64];

187 
	s_x°©e


189 
_Â°©e
 
	mÂ°©e
;

190 
_xßve_hdr
 
	mx°©e_hdr
;

191 
_ymmh_°©e
 
	mymmh
;

	@/usr/include/bits/siginfo.h

19 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
__√ed_sigöfo_t
 \

20 && !
deföed
 
	g__√ed_sigevít_t


24 
	~<bôs/w‹dsize.h
>

26 #i‡(!
deföed
 
__have_sigvÆ_t
 \

27 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
 \

28 || 
deföed
 
	g__√ed_sigevít_t
))

29 
	#__have_sigvÆ_t
 1

	)

32 
	usigvÆ


34 
	msivÆ_öt
;

35 *
	msivÆ_±r
;

36 } 
	tsigvÆ_t
;

39 #i‡(!
deföed
 
__have_sigöfo_t
 \

40 && (
deföed
 
	g_SIGNAL_H
 || deföed 
	g__√ed_sigöfo_t
))

41 
	#__have_sigöfo_t
 1

	)

43 
	#__SI_MAX_SIZE
 128

	)

44 #i‡
__WORDSIZE
 == 64

45 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 4)

	)

47 
	#__SI_PAD_SIZE
 ((
__SI_MAX_SIZE
 /  ()Ë- 3)

	)

50 #i‡
deföed
 
__x86_64__
 && 
__WORDSIZE
 == 32

55 
__˛ock_t
 
	t__©åibuã__
 ((
	t__Æig√d__
 (4))Ë
	t__sigchld_˛ock_t
;

56 
	#__SI_ALIGNMENT
 
	`__©åibuã__
 ((
	`__Æig√d__
 (8)))

	)

58 
__˛ock_t
 
	t__sigchld_˛ock_t
;

59 
	#__SI_ALIGNMENT


	)

64 
si_signo
;

65 
si_î∫o
;

67 
si_code
;

71 
_∑d
[
__SI_PAD_SIZE
];

76 
__pid_t
 
si_pid
;

77 
__uid_t
 
si_uid
;

78 } 
_kûl
;

83 
si_tid
;

84 
si_ovîrun
;

85 
sigvÆ_t
 
si_sigvÆ
;

86 } 
_timî
;

91 
__pid_t
 
si_pid
;

92 
__uid_t
 
si_uid
;

93 
sigvÆ_t
 
si_sigvÆ
;

94 } 
_π
;

99 
__pid_t
 
si_pid
;

100 
__uid_t
 
si_uid
;

101 
si_°©us
;

102 
__sigchld_˛ock_t
 
si_utime
;

103 
__sigchld_˛ock_t
 
si_°ime
;

104 } 
_sigchld
;

109 *
si_addr
;

110 
si_addr_lsb
;

113 *
_lowî
;

114 *
_uµî
;

115 } 
si_addr_bnd
;

116 } 
_sigÁu…
;

121 
si_b™d
;

122 
si_fd
;

123 } 
_sigpﬁl
;

128 *
_ˇŒ_addr
;

129 
_sysˇŒ
;

130 
_¨ch
;

131 } 
_sigsys
;

132 } 
_sifõlds
;

133 } 
	tsigöfo_t
 
	t__SI_ALIGNMENT
;

137 
	#si_pid
 
_sifõlds
.
_kûl
.
si_pid


	)

138 
	#si_uid
 
_sifõlds
.
_kûl
.
si_uid


	)

139 
	#si_timîid
 
_sifõlds
.
_timî
.
si_tid


	)

140 
	#si_ovîrun
 
_sifõlds
.
_timî
.
si_ovîrun


	)

141 
	#si_°©us
 
_sifõlds
.
_sigchld
.
si_°©us


	)

142 
	#si_utime
 
_sifõlds
.
_sigchld
.
si_utime


	)

143 
	#si_°ime
 
_sifõlds
.
_sigchld
.
si_°ime


	)

144 
	#si_vÆue
 
_sifõlds
.
_π
.
si_sigvÆ


	)

145 
	#si_öt
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_öt


	)

146 
	#si_±r
 
_sifõlds
.
_π
.
si_sigvÆ
.
sivÆ_±r


	)

147 
	#si_addr
 
_sifõlds
.
_sigÁu…
.
si_addr


	)

148 
	#si_addr_lsb
 
_sifõlds
.
_sigÁu…
.
si_addr_lsb


	)

149 
	#si_lowî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_lowî


	)

150 
	#si_uµî
 
_sifõlds
.
_sigÁu…
.
si_addr_bnd
.
_uµî


	)

151 
	#si_b™d
 
_sifõlds
.
_sigpﬁl
.
si_b™d


	)

152 
	#si_fd
 
_sifõlds
.
_sigpﬁl
.
si_fd


	)

153 
	#si_ˇŒ_addr
 
_sifõlds
.
_sigsys
.
_ˇŒ_addr


	)

154 
	#si_sysˇŒ
 
_sifõlds
.
_sigsys
.
_sysˇŒ


	)

155 
	#si_¨ch
 
_sifõlds
.
_sigsys
.
_¨ch


	)

162 
SI_ASYNCNL
 = -60,

163 
	#SI_ASYNCNL
 
SI_ASYNCNL


	)

164 
SI_TKILL
 = -6,

165 
	#SI_TKILL
 
SI_TKILL


	)

166 
SI_SIGIO
,

167 
	#SI_SIGIO
 
SI_SIGIO


	)

168 
SI_ASYNCIO
,

169 
	#SI_ASYNCIO
 
SI_ASYNCIO


	)

170 
SI_MESGQ
,

171 
	#SI_MESGQ
 
SI_MESGQ


	)

172 
SI_TIMER
,

173 
	#SI_TIMER
 
SI_TIMER


	)

174 
SI_QUEUE
,

175 
	#SI_QUEUE
 
SI_QUEUE


	)

176 
SI_USER
,

177 
	#SI_USER
 
SI_USER


	)

178 
SI_KERNEL
 = 0x80

179 
	#SI_KERNEL
 
SI_KERNEL


	)

183 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


187 
ILL_ILLOPC
 = 1,

188 
	#ILL_ILLOPC
 
ILL_ILLOPC


	)

189 
ILL_ILLOPN
,

190 
	#ILL_ILLOPN
 
ILL_ILLOPN


	)

191 
ILL_ILLADR
,

192 
	#ILL_ILLADR
 
ILL_ILLADR


	)

193 
ILL_ILLTRP
,

194 
	#ILL_ILLTRP
 
ILL_ILLTRP


	)

195 
ILL_PRVOPC
,

196 
	#ILL_PRVOPC
 
ILL_PRVOPC


	)

197 
ILL_PRVREG
,

198 
	#ILL_PRVREG
 
ILL_PRVREG


	)

199 
ILL_COPROC
,

200 
	#ILL_COPROC
 
ILL_COPROC


	)

201 
ILL_BADSTK


202 
	#ILL_BADSTK
 
ILL_BADSTK


	)

208 
FPE_INTDIV
 = 1,

209 
	#FPE_INTDIV
 
FPE_INTDIV


	)

210 
FPE_INTOVF
,

211 
	#FPE_INTOVF
 
FPE_INTOVF


	)

212 
FPE_FLTDIV
,

213 
	#FPE_FLTDIV
 
FPE_FLTDIV


	)

214 
FPE_FLTOVF
,

215 
	#FPE_FLTOVF
 
FPE_FLTOVF


	)

216 
FPE_FLTUND
,

217 
	#FPE_FLTUND
 
FPE_FLTUND


	)

218 
FPE_FLTRES
,

219 
	#FPE_FLTRES
 
FPE_FLTRES


	)

220 
FPE_FLTINV
,

221 
	#FPE_FLTINV
 
FPE_FLTINV


	)

222 
FPE_FLTSUB


223 
	#FPE_FLTSUB
 
FPE_FLTSUB


	)

229 
SEGV_MAPERR
 = 1,

230 
	#SEGV_MAPERR
 
SEGV_MAPERR


	)

231 
SEGV_ACCERR


232 
	#SEGV_ACCERR
 
SEGV_ACCERR


	)

238 
BUS_ADRALN
 = 1,

239 
	#BUS_ADRALN
 
BUS_ADRALN


	)

240 
BUS_ADRERR
,

241 
	#BUS_ADRERR
 
BUS_ADRERR


	)

242 
BUS_OBJERR
,

243 
	#BUS_OBJERR
 
BUS_OBJERR


	)

244 
BUS_MCEERR_AR
,

245 
	#BUS_MCEERR_AR
 
BUS_MCEERR_AR


	)

246 
BUS_MCEERR_AO


247 
	#BUS_MCEERR_AO
 
BUS_MCEERR_AO


	)

251 #ifde‡
__USE_XOPEN_EXTENDED


255 
TRAP_BRKPT
 = 1,

256 
	#TRAP_BRKPT
 
TRAP_BRKPT


	)

257 
TRAP_TRACE


258 
	#TRAP_TRACE
 
TRAP_TRACE


	)

262 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


266 
CLD_EXITED
 = 1,

267 
	#CLD_EXITED
 
CLD_EXITED


	)

268 
CLD_KILLED
,

269 
	#CLD_KILLED
 
CLD_KILLED


	)

270 
CLD_DUMPED
,

271 
	#CLD_DUMPED
 
CLD_DUMPED


	)

272 
CLD_TRAPPED
,

273 
	#CLD_TRAPPED
 
CLD_TRAPPED


	)

274 
CLD_STOPPED
,

275 
	#CLD_STOPPED
 
CLD_STOPPED


	)

276 
CLD_CONTINUED


277 
	#CLD_CONTINUED
 
CLD_CONTINUED


	)

283 
POLL_IN
 = 1,

284 
	#POLL_IN
 
POLL_IN


	)

285 
POLL_OUT
,

286 
	#POLL_OUT
 
POLL_OUT


	)

287 
POLL_MSG
,

288 
	#POLL_MSG
 
POLL_MSG


	)

289 
POLL_ERR
,

290 
	#POLL_ERR
 
POLL_ERR


	)

291 
POLL_PRI
,

292 
	#POLL_PRI
 
POLL_PRI


	)

293 
POLL_HUP


294 
	#POLL_HUP
 
POLL_HUP


	)

298 #unde‡
__√ed_sigöfo_t


302 #i‡(
deföed
 
_SIGNAL_H
 || deföed 
__√ed_sigevít_t
) \

303 && !
deföed
 
__have_sigevít_t


304 
	#__have_sigevít_t
 1

	)

307 
	#__SIGEV_MAX_SIZE
 64

	)

308 #i‡
__WORDSIZE
 == 64

309 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 4)

	)

311 
	#__SIGEV_PAD_SIZE
 ((
__SIGEV_MAX_SIZE
 /  ()Ë- 3)

	)

315 #i‚de‡
__have_±hªad_©å_t


316 
±hªad_©å_t
 
	t±hªad_©å_t
;

317 
	#__have_±hªad_©å_t
 1

	)

320 
	ssigevít


322 
sigvÆ_t
 
sigev_vÆue
;

323 
sigev_signo
;

324 
sigev_nŸify
;

328 
_∑d
[
__SIGEV_PAD_SIZE
];

332 
__pid_t
 
_tid
;

336 (*
_fun˘i⁄
Ë(
sigvÆ_t
);

337 
±hªad_©å_t
 *
_©åibuã
;

338 } 
_sigev_thªad
;

339 } 
_sigev_un
;

340 } 
	tsigevít_t
;

343 
	#sigev_nŸify_fun˘i⁄
 
_sigev_un
.
_sigev_thªad
.
_fun˘i⁄


	)

344 
	#sigev_nŸify_©åibuãs
 
_sigev_un
.
_sigev_thªad
.
_©åibuã


	)

349 
SIGEV_SIGNAL
 = 0,

350 
	#SIGEV_SIGNAL
 
SIGEV_SIGNAL


	)

351 
SIGEV_NONE
,

352 
	#SIGEV_NONE
 
SIGEV_NONE


	)

353 
SIGEV_THREAD
,

354 
	#SIGEV_THREAD
 
SIGEV_THREAD


	)

356 
SIGEV_THREAD_ID
 = 4

357 
	#SIGEV_THREAD_ID
 
SIGEV_THREAD_ID


	)

	@/usr/include/bits/signum.h

19 #ifdef 
_SIGNAL_H


22 
	#SIG_ERR
 ((
__sigh™dÀr_t
Ë-1Ë

	)

23 
	#SIG_DFL
 ((
__sigh™dÀr_t
Ë0Ë

	)

24 
	#SIG_IGN
 ((
__sigh™dÀr_t
Ë1Ë

	)

26 #ifde‡
__USE_UNIX98


27 
	#SIG_HOLD
 ((
__sigh™dÀr_t
Ë2Ë

	)

32 
	#SIGHUP
 1

	)

33 
	#SIGINT
 2

	)

34 
	#SIGQUIT
 3

	)

35 
	#SIGILL
 4

	)

36 
	#SIGTRAP
 5

	)

37 
	#SIGABRT
 6

	)

38 
	#SIGIOT
 6

	)

39 
	#SIGBUS
 7

	)

40 
	#SIGFPE
 8

	)

41 
	#SIGKILL
 9

	)

42 
	#SIGUSR1
 10

	)

43 
	#SIGSEGV
 11

	)

44 
	#SIGUSR2
 12

	)

45 
	#SIGPIPE
 13

	)

46 
	#SIGALRM
 14

	)

47 
	#SIGTERM
 15

	)

48 
	#SIGSTKFLT
 16

	)

49 
	#SIGCLD
 
SIGCHLD


	)

50 
	#SIGCHLD
 17

	)

51 
	#SIGCONT
 18

	)

52 
	#SIGSTOP
 19

	)

53 
	#SIGTSTP
 20

	)

54 
	#SIGTTIN
 21

	)

55 
	#SIGTTOU
 22

	)

56 
	#SIGURG
 23

	)

57 
	#SIGXCPU
 24

	)

58 
	#SIGXFSZ
 25

	)

59 
	#SIGVTALRM
 26

	)

60 
	#SIGPROF
 27

	)

61 
	#SIGWINCH
 28

	)

62 
	#SIGPOLL
 
SIGIO


	)

63 
	#SIGIO
 29

	)

64 
	#SIGPWR
 30

	)

65 
	#SIGSYS
 31

	)

66 
	#SIGUNUSED
 31

	)

68 
	#_NSIG
 65

	)

71 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

72 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

76 
	#__SIGRTMIN
 32

	)

77 
	#__SIGRTMAX
 (
_NSIG
 - 1)

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/sigstack.h

19 #i‚de‡
_SIGNAL_H


25 
	ssig°ack


27 *
	mss_•
;

28 
	mss_⁄°ack
;

35 
	mSS_ONSTACK
 = 1,

36 
	#SS_ONSTACK
 
SS_ONSTACK


	)

37 
	mSS_DISABLE


38 
	#SS_DISABLE
 
SS_DISABLE


	)

42 
	#MINSIGSTKSZ
 2048

	)

45 
	#SIGSTKSZ
 8192

	)

49 
	ssigÆt°ack


51 *
	mss_•
;

52 
	mss_Êags
;

53 
size_t
 
	mss_size
;

54 } 
	t°ack_t
;

	@/usr/include/bits/sigthread.h

19 #i‚de‡
_BITS_SIGTHREAD_H


20 
	#_BITS_SIGTHREAD_H
 1

	)

22 #i‡!
deföed
 
_SIGNAL_H
 && !deföed 
_PTHREAD_H


30 
	$±hªad_sigmask
 (
__how
,

31 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__√wmask
,

32 
__sig£t_t
 *
__ª°ri˘
 
__ﬁdmask
)
__THROW
;

35 
	$±hªad_kûl
 (
±hªad_t
 
__thªadid
, 
__signo
Ë
__THROW
;

37 #ifde‡
__USE_GNU


39 
	$±hªad_sigqueue
 (
±hªad_t
 
__thªadid
, 
__signo
,

40 c⁄° 
sigvÆ
 
__vÆue
Ë
__THROW
;

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #ifde‡
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #ifde‡
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #ifde‡
__USE_POSIX


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #ifde‡
__USE_POSIX


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_INLINE_u«lig√d
 1

	)

27 
	#_HAVE_STRING_ARCH_memp˝y
 1

	)

31 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

32 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

33 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

34 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

35 || 
deföed
 
	g__ßndybridge__
 || deföed 
	g__haswñl__
 \

36 || 
deföed
 
	g__b⁄√Œ__
 || deföed 
	g__sûvîm⁄t__
 \

37 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

38 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

39 || 
deföed
 
	g__amdÁm10__
 || deföed 
	g__bdvî1__
 \

40 || 
deföed
 
	g__bdvî2__
 || deföed 
	g__bdvî3__
 \

41 || 
deföed
 
	g__bdvî4__
 || deföed 
	g__btvî1__
 \

42 || 
deföed
 
	g__btvî2__
)

46 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

47 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

49 #i‚de‡
__STRING_INLINE


50 #i‚de‡
__exã∫_ölöe


51 
	#__STRING_INLINE
 
ölöe


	)

53 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

58 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

59 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

60 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

62 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

63 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

64 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

65 | ((c⁄° *Ë(
§c
))[
idx
])

	)

69 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

70 
	#mem˝y
(
de°
, 
§c
, 
n
) \

71 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

72 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

73 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

74 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

75 ((
n
) == 0 \

76 ? (
de°
) \

77 : (((
n
) % 4 == 0) \

78 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

79 : (((
n
) % 2 == 0) \

80 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

81 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

83 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

84 
size_t
 
__n
);

86 
__STRING_INLINE
 *

87 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

89 
__d0
, 
__d1
;

90 *
__tmp
 = 
__de°
;

91 
__asm__
 
__vﬁ©ûe__


99 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

100 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

102  
__de°
;

103 
	}
}

105 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

106 
size_t
 
__n
);

108 
__STRING_INLINE
 *

109 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

111 
__d0
, 
__d1
;

112 *
__tmp
 = 
__de°
;

113 
__asm__
 
__vﬁ©ûe__


126 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

127 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

129  
__de°
;

130 
	}
}

132 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

134 
__STRING_INLINE
 *

135 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

137 
__d0
, 
__d1
, 
__d2
;

138 *
__tmp
 = 
__de°
;

139 
__asm__
 
__vﬁ©ûe__


150 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

151 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

152 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

153 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

155  
__de°
;

156 
	}
}

158 
	#_HAVE_STRING_ARCH_memmove
 1

	)

159 #i‚de‡
_FORCE_INLINES


162 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

164 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

165 
	`__asm__
 ("memmove");

167 
__STRING_INLINE
 *

168 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

170 
__d0
, 
__d1
, 
__d2
;

171 *
__tmp
 = 
__de°
;

172 i‡(
__de°
 < 
__§c
)

173 
__asm__
 
__vﬁ©ûe__


176 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

177 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

178 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

179 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

181 
__asm__
 
__vﬁ©ûe__


187 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

188 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

189 : "0" (
__n
), "1" (__¿+ (c⁄° *Ë
__§c
),

190 "2" (
__n
 + (*Ë
__tmp
),

191 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

192  
__de°
;

193 
	}
}

197 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

198 #i‚de‡
_FORCE_INLINES


199 #i‚de‡
__PIC__


201 
__STRING_INLINE
 

202 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

204 
__d0
, 
__d1
, 
__d2
;

205 
__ªs
;

206 
__asm__
 
__vﬁ©ûe__


214 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

215 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

216 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

217 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

219  
__ªs
;

220 
	}
}

225 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

226 
	#_USE_STRING_ARCH_mem£t
 1

	)

227 
	#mem£t
(
s
, 
c
, 
n
) \

228 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

229 ? ((
n
) == 1 \

230 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

231 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

232 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

233 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

234 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

235 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

236 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

237 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

238 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

240 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

241 *((*Ë
__s
Ë(Ë(
c
); \

242 
__s
; })

	)

244 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

245 ({ *
__s
 = (
s
); \

247 
__ui
; \

248 
__usi
; \

249 
__uc
; \

250 } *
__u
 = 
__s
; \

251 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

257 i‡((
n
) == 3 || (n) >= 5) \

258 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

261 
n
) \

264 
__u
->
__ui
 = 
__c
; \

265 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

267 
__u
->
__ui
 = 
__c
; \

268 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

270 
__u
->
__ui
 = 
__c
; \

271 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

273 
__u
->
__usi
 = (Ë
__c
; \

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

275 
__u
->
__uc
 = (Ë
__c
; \

279 
__u
->
__ui
 = 
__c
; \

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__usi
 = (Ë
__c
; \

292 
__u
->
__ui
 = 
__c
; \

293 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__uc
 = (Ë
__c
; \

305 
__u
->
__ui
 = 
__c
; \

306 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

308 
__u
->
__ui
 = 
__c
; \

309 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

311 
__u
->
__ui
 = 
__c
; \

312 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

314 
__u
->
__ui
 = 
__c
; \

319 
__s
; })

	)

321 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

322 (((
n
) % 4 == 0) \

323 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

324 
n
) \

325 : (((
n
) % 2 == 0) \

326 ? 
	`__mem£t_c˙_by2
 (
s
, \

327 ((Ë((Ë(
c
))) * 0x01010101,\

328 
n
) \

329 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

331 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

332 
size_t
 
__n
);

334 
__STRING_INLINE
 *

335 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

337 *
__tmp
 = 
__s
;

338 
__d0
;

339 #ifde‡
__i686__


340 
__asm__
 
__vﬁ©ûe__


343 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

344 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

345 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

348 
__asm__
 
__vﬁ©ûe__


354 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

355 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

356 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

359  
__s
;

360 
	}
}

362 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

363 
size_t
 
__n
);

365 
__STRING_INLINE
 *

366 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

368 
__d0
, 
__d1
;

369 *
__tmp
 = 
__s
;

370 #ifde‡
__i686__


371 
__asm__
 
__vﬁ©ûe__


375 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

376 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

377 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

380 
__asm__
 
__vﬁ©ûe__


386 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

387 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

388 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

391  
__s
;

392 
	}
}

394 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

395 (((
n
) % 4 == 0) \

396 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

397 : (((
n
) % 2 == 0) \

398 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

399 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

401 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

403 
__STRING_INLINE
 *

404 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

406 *
__tmp
 = 
__s
;

407 
__d0
;

408 
__asm__
 
__vﬁ©ûe__


418 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

419 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

420 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

422  
__s
;

423 
	}
}

425 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

427 
__STRING_INLINE
 *

428 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

430 
__d0
, 
__d1
;

431 *
__tmp
 = 
__s
;

432 
__asm__
 
__vﬁ©ûe__


443 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

444 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

445 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

447  
__s
;

448 
	}
}

452 
	#_HAVE_STRING_ARCH_memchr
 1

	)

453 #i‚de‡
_FORCE_INLINES


454 
__STRING_INLINE
 *

455 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

457 
__d0
;

458 #ifde‡
__i686__


459 
__d1
;

461 *
__ªs
;

462 i‡(
__n
 == 0)

463  
NULL
;

464 #ifde‡
__i686__


465 
__asm__
 
__vﬁ©ûe__


469 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

470 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

471 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

474 
__asm__
 
__vﬁ©ûe__


480 : "=D" (
__ªs
), "=&c" (
__d0
)

481 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

482 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

485  
__ªs
 - 1;

486 
	}
}

489 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

490 #i‚de‡
_FORCE_INLINES


491 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

493 
__STRING_INLINE
 *

494 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

496 
__d0
;

497 #ifde‡
__i686__


498 
__d1
;

500 *
__ªs
;

501 i‡(
__n
 == 0)

502  
NULL
;

503 #ifde‡
__i686__


504 
__asm__
 
__vﬁ©ûe__


510 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

511 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

512 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

515 
__asm__
 
__vﬁ©ûe__


522 : "=D" (
__ªs
), "=&c" (
__d0
)

523 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

524 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

527  
__ªs
;

528 
	}
}

529 #ifde‡
__USE_GNU


530 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

535 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

536 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

538 #i‚de‡
_FORCE_INLINES


539 
__STRING_INLINE
 *

540 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

542 
__d0
;

543 *
__ªs
;

544 
__asm__
 
__vﬁ©ûe__


547 : "=D" (
__ªs
), "=&c" (
__d0
)

548 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

549 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

551  
__ªs
 - 1;

552 
	}
}

553 #ifde‡
__USE_GNU


554 
__STRING_INLINE
 *

555 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

557  
	`__øwmemchr
 (
__s
, 
__c
);

558 
	}
}

564 
	#_HAVE_STRING_ARCH_°æí
 1

	)

565 
	#°æí
(
°r
) \

566 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

567 ? 
	`__buûtö_°æí
 (
°r
) \

568 : 
	`__°æí_g
 (
°r
)))

	)

569 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

571 
__STRING_INLINE
 
size_t


572 
	$__°æí_g
 (c⁄° *
__°r
)

574 
__dummy
;

575 c⁄° *
__tmp
 = 
__°r
;

576 
__asm__
 
__vﬁ©ûe__


582 : "Ù" (
__tmp
), "=&q" (
__dummy
)

583 : "0" (
__°r
),

584 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

586  
__tmp
 - 
__°r
 - 1;

587 
	}
}

591 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

592 
	#°r˝y
(
de°
, 
§c
) \

593 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

594 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

595 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

596 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

597 (c⁄° *Ë(
§c
), \

598 
	`°æí
 (
§c
) + 1)) \

599 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

601 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

602 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

604 
__ui
; \

605 
__usi
; \

606 
__uc
; \

607 
__c
; \

608 } *
__u
 = (*Ë
__de°
; \

609 
§˛í
) \

612 
__u
->
__uc
 = '\0'; \

615 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

618 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

619 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

620 
__u
->
__uc
 = '\0'; \

623 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__uc
 = '\0'; \

631 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

632 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

633 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

636 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

637 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

638 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

640 
__u
->
__uc
 = '\0'; \

643 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

644 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

645 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

648 (*Ë
__de°
; }))

	)

650 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

652 
__STRING_INLINE
 *

653 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

655 *
__tmp
 = 
__de°
;

656 
__dummy
;

657 
__asm__
 
__vﬁ©ûe__


666 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

667 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

668 : "0" (
__§c
), "1" (
__tmp
),

669 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

671  
__de°
;

672 
	}
}

675 #ifde‡
__USE_GNU


676 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

678 
	#__°p˝y
(
de°
, 
§c
) \

679 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

680 ? (
	`°æí
 (
§c
) + 1 <= 8 \

681 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

682 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

683 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

684 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

685 ((
§˛í
) % 4 == 0 \

686 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

687 : ((
§˛í
) % 2 == 0 \

688 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

689 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

692 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

694 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

695 (
	`__exãnsi⁄__
 ({ union { \

696 
__ui
; \

697 
__usi
; \

698 
__uc
; \

699 
__c
; \

700 } *
__u
 = (*Ë(
de°
); \

701 
§˛í
) \

704 
__u
->
__uc
 = '\0'; \

707 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

708 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

711 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

712 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

713 
__u
->
__uc
 = '\0'; \

716 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

717 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

720 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

721 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

722 
__u
->
__uc
 = '\0'; \

725 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

726 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

727 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

728 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

731 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

732 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

733 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

734 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

735 
__u
->
__uc
 = '\0'; \

738 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

739 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

740 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

741 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

744 (*Ë
__u
; }))

	)

746 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

747 
size_t
 
__§˛í
);

749 
__STRING_INLINE
 *

750 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

752 *
__tmp
 = 
__de°
;

753 
__d0
, 
__d1
;

754 
__asm__
 
__vﬁ©ûe__


762 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

763 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

765  
__tmp
;

766 
	}
}

768 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

769 
size_t
 
__§˛í
);

771 
__STRING_INLINE
 *

772 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

774 *
__tmp
 = 
__de°
;

775 
__d0
, 
__d1
;

776 
__asm__
 
__vﬁ©ûe__


789 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

790 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

791 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

792 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

794  
__tmp
 + 2;

795 
	}
}

797 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

798 
size_t
 
__§˛í
);

800 
__STRING_INLINE
 *

801 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

803 
__d0
, 
__d1
;

804 *
__tmp
 = 
__de°
;

805 
__asm__
 
__vﬁ©ûe__


816 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

817 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

818 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

819 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

821  
__tmp
;

822 
	}
}

824 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

826 
__STRING_INLINE
 *

827 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

829 *
__tmp
 = 
__de°
;

830 
__dummy
;

831 
__asm__
 
__vﬁ©ûe__


840 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

841 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

842 : "0" (
__§c
), "1" (
__tmp
),

843 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

845  
__tmp
 - 1;

846 
	}
}

851 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

852 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

853 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

854 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

855 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

856 (c⁄° *Ë(
§c
), 
n
) \

857 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

858 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

859 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

860 (((
§˛í
) % 4 == 0) \

861 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

862 : (((
§˛í
) % 2 == 0) \

863 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

864 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

866 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

867 
size_t
 
__§˛í
, size_à
__n
);

869 
__STRING_INLINE
 *

870 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

872 *
__tmp
 = 
__de°
;

873 
__dummy1
, 
__dummy2
;

874 
__asm__
 
__vﬁ©ûe__


882 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

883 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

884 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

885 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

887 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

888  
__de°
;

889 
	}
}

891 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

892 
size_t
 
__§˛í
, size_à
__n
);

894 
__STRING_INLINE
 *

895 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

897 *
__tmp
 = 
__de°
;

898 
__dummy1
, 
__dummy2
;

899 
__asm__
 
__vﬁ©ûe__


912 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

913 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

914 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

915 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

917 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

918  
__de°
;

919 
	}
}

921 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

922 
size_t
 
__§˛í
, size_à
__n
);

924 
__STRING_INLINE
 *

925 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

927 
__d0
, 
__d1
;

928 *
__tmp
 = 
__de°
;

929 
__asm__
 
__vﬁ©ûe__


940 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

941 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

942 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

943 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

945 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

946  
__de°
;

947 
	}
}

949 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

950 
size_t
 
__n
);

952 
__STRING_INLINE
 *

953 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

955 *
__tmp
 = 
__de°
;

956 
__dummy
;

957 i‡(
__n
 > 0)

958 
__asm__
 
__vﬁ©ûe__


974 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

975 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

978  
__de°
;

979 
	}
}

983 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

984 
	#°rˇt
(
de°
, 
§c
) \

985 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

986 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

987 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

989 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

990 
size_t
 
__§˛í
);

992 
__STRING_INLINE
 *

993 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

995 #ifde‡
__i686__


996 
__d0
;

997 *
__tmp
;

998 
__asm__
 
__vﬁ©ûe__


1000 : "=D" (
__tmp
), "=&c" (
__d0
),

1001 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1002 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

1003 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1005 --
__tmp
;

1007 *
__tmp
 = 
__de°
;

1008 
__asm__
 
__vﬁ©ûe__


1014 : "Ù" (
__tmp
),

1015 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1016 : "0" (
__tmp
),

1017 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1020 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1021  
__de°
;

1022 
	}
}

1024 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1026 
__STRING_INLINE
 *

1027 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1029 *
__tmp
 = 
__de°
;

1030 
__dummy
;

1031 
__asm__
 
__vﬁ©ûe__


1044 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1045 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1046 : "1" (
__tmp
), "2" (
__§c
),

1047 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1049  
__de°
;

1050 
	}
}

1054 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1055 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1056 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1057 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1058 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1059 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1060 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1061 (c⁄° *Ë(
§c
), \

1062 (
n
)Ë0, 
__de°
)) \

1063 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1065 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1066 
size_t
 
__n
);

1068 
__STRING_INLINE
 *

1069 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1071 *
__tmp
 = 
__de°
;

1072 
__dummy
;

1073 #ifde‡
__i686__


1074 
__asm__
 
__vﬁ©ûe__


1088 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1089 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1092 --
__tmp
;

1093 
__asm__
 
__vﬁ©ûe__


1110 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1111 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1114  
__de°
;

1115 
	}
}

1119 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1120 
	#°rcmp
(
s1
, 
s2
) \

1121 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1122 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1123 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1124 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1125 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1126 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1127 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1128 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1129 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1130 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s1
)) \

1133 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1134 (c⁄° *Ë(
s2
), \

1135 
	`°æí
 (
s1
))) \

1136 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1137 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1138 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1139 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1140 (c⁄° *Ë(
s2
), \

1141 
	`°æí
 (
s2
)) \

1142 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1143 (c⁄° *Ë(
s2
), \

1144 
	`°æí
 (
s2
))) \

1145 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1147 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1148 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1149 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1151 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1152 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1155 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1156 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1159 
__ªsu…
; }))

	)

1161 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1162 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1163 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1164 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1166 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1167 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1170 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1171 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1174 
__ªsu…
; }))

	)

1176 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1177 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1178 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1179 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1181 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1182 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1184 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1185 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1186 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1189 
__ªsu…
; }))

	)

1191 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1193 
__STRING_INLINE
 

1194 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1196 
__ªs
;

1197 
__asm__
 
__vﬁ©ûe__


1213 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1214 : "1" (
__s1
), "2" (
__s2
),

1215 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1216 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1218  
__ªs
;

1219 
	}
}

1223 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1224 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1225 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1226 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1227 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1228 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1229 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1231 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1232 
size_t
 
__n
);

1234 
__STRING_INLINE
 

1235 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1237 
__ªs
;

1238 
__asm__
 
__vﬁ©ûe__


1257 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1258 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1259 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1260 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1262  
__ªs
;

1263 
	}
}

1267 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1268 
	#_USE_STRING_ARCH_°rchr
 1

	)

1269 
	#°rchr
(
s
, 
c
) \

1270 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1271 ? ((
c
) == '\0' \

1272 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1273 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1274 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1276 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1278 
__STRING_INLINE
 *

1279 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1281 
__d0
;

1282 *
__ªs
;

1283 
__asm__
 
__vﬁ©ûe__


1293 : "Ù" (
__ªs
), "=&a" (
__d0
)

1294 : "0" (
__s
), "1" (
__c
),

1295 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1297  
__ªs
;

1298 
	}
}

1300 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1302 
__STRING_INLINE
 *

1303 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1305 
__d0
;

1306 *
__ªs
;

1307 
__asm__
 
__vﬁ©ûe__


1318 : "Ù" (
__ªs
), "=&a" (
__d0
)

1319 : "0" (
__s
), "1" (
__c
),

1320 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1322  
__ªs
;

1323 
	}
}

1327 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1328 
	#__°rch∫ul
(
s
, 
c
) \

1329 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1330 ? ((
c
) == '\0' \

1331 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1332 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1333 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1335 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1337 
__STRING_INLINE
 *

1338 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1340 
__d0
;

1341 *
__ªs
;

1342 
__asm__
 
__vﬁ©ûe__


1352 : "Ù" (
__ªs
), "=&a" (
__d0
)

1353 : "0" (
__s
), "1" (
__c
),

1354 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1356  
__ªs
;

1357 
	}
}

1359 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1361 
__STRING_INLINE
 *

1362 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1364 
__d0
;

1365 *
__ªs
;

1366 
__asm__
 
__vﬁ©ûe__


1377 : "Ù" (
__ªs
), "=&a" (
__d0
)

1378 : "0" (
__s
), "1" (
__c
),

1379 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1381  
__ªs
;

1382 
	}
}

1383 #ifde‡
__USE_GNU


1384 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1388 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1390 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1391 
	#ödex
(
s
, 
c
) \

1392 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1393 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1394 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1399 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1400 
	#°ºchr
(
s
, 
c
) \

1401 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1402 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1403 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1405 #ifde‡
__i686__


1406 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1408 
__STRING_INLINE
 *

1409 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1411 
__d0
, 
__d1
;

1412 *
__ªs
;

1413 
__asm__
 
__vﬁ©ûe__


1421 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1422 : "0" (1), "1" (
__s
), "2" (
__c
),

1423 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1425  
__ªs
 - 1;

1426 
	}
}

1428 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1430 
__STRING_INLINE
 *

1431 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1433 
__d0
, 
__d1
;

1434 *
__ªs
;

1435 
__asm__
 
__vﬁ©ûe__


1444 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1445 : "0" (1), "1" (
__s
), "2" (
__c
),

1446 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1448  
__ªs
 - 1;

1449 
	}
}

1451 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1453 
__STRING_INLINE
 *

1454 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1456 
__d0
, 
__d1
;

1457 *
__ªs
;

1458 
__asm__
 
__vﬁ©ûe__


1468 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1469 : "0" (0), "1" (
__s
), "2" (
__c
),

1470 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1472  
__ªs
;

1473 
	}
}

1475 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1477 
__STRING_INLINE
 *

1478 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1480 
__d0
, 
__d1
;

1481 *
__ªs
;

1482 
__asm__
 
__vﬁ©ûe__


1493 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1494 : "0" (0), "1" (
__s
), "2" (
__c
),

1495 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1497  
__ªs
;

1498 
	}
}

1502 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1504 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1505 
	#rödex
(
s
, 
c
) \

1506 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1507 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1508 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1514 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1515 
	#°rc•n
(
s
, 
ªje˘
) \

1516 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1517 ? ((
ªje˘
)[0] == '\0' \

1518 ? 
	`°æí
 (
s
) \

1519 : ((
ªje˘
)[1] == '\0' \

1520 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1521 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1522 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1524 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1526 #i‚de‡
_FORCE_INLINES


1527 
__STRING_INLINE
 
size_t


1528 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1530 
__d0
;

1531 *
__ªs
;

1532 
__asm__
 
__vﬁ©ûe__


1541 : "Ù" (
__ªs
), "=&a" (
__d0
)

1542 : "0" (
__s
), "1" (
__ªje˘
),

1543 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1545  (
__ªs
 - 1Ë- 
__s
;

1546 
	}
}

1549 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1550 
size_t
 
__ªje˘_Àn
);

1552 
__STRING_INLINE
 
size_t


1553 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1555 
__d0
, 
__d1
, 
__d2
;

1556 c⁄° *
__ªs
;

1557 
__asm__
 
__vﬁ©ûe__


1568 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1569 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1571  (
__ªs
 - 1Ë- 
__s
;

1572 
	}
}

1574 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1575 #ifde‡
__PIC__


1577 
__STRING_INLINE
 
size_t


1578 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1580 
__d0
, 
__d1
, 
__d2
;

1581 c⁄° *
__ªs
;

1582 
__asm__
 
__vﬁ©ûe__


1599 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1600 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1602  (
__ªs
 - 1Ë- 
__s
;

1603 
	}
}

1605 
__STRING_INLINE
 
size_t


1606 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1608 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1609 c⁄° *
__ªs
;

1610 
__asm__
 
__vﬁ©ûe__


1624 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1625 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1628  (
__ªs
 - 1Ë- 
__s
;

1629 
	}
}

1635 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1636 
	#°r•n
(
s
, 
ac˚±
) \

1637 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1638 ? ((
ac˚±
)[0] == '\0' \

1639 ? ((Ë(
s
), 0) \

1640 : ((
ac˚±
)[1] == '\0' \

1641 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1642 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1643 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1645 #i‚de‡
_FORCE_INLINES


1646 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1648 
__STRING_INLINE
 
size_t


1649 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1651 
__d0
;

1652 *
__ªs
;

1654 
__asm__
 
__vﬁ©ûe__


1660 : "Ù" (
__ªs
), "=&q" (
__d0
)

1661 : "0" (
__s
), "1" (
__ac˚±
),

1662 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1664  (
__ªs
 - 1Ë- 
__s
;

1665 
	}
}

1668 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1669 
size_t
 
__ac˚±_Àn
);

1671 
__STRING_INLINE
 
size_t


1672 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1674 
__d0
, 
__d1
, 
__d2
;

1675 c⁄° *
__ªs
;

1676 
__asm__
 
__vﬁ©ûe__


1687 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1688 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1691 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1692 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1694  (
__ªs
 - 1Ë- 
__s
;

1695 
	}
}

1697 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1698 #ifde‡
__PIC__


1700 
__STRING_INLINE
 
size_t


1701 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1703 
__d0
, 
__d1
, 
__d2
;

1704 c⁄° *
__ªs
;

1705 
__asm__
 
__vﬁ©ûe__


1721 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1722 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1724  (
__ªs
 - 1Ë- 
__s
;

1725 
	}
}

1727 
__STRING_INLINE
 
size_t


1728 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1730 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1731 c⁄° *
__ªs
;

1732 
__asm__
 
__vﬁ©ûe__


1746 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1747 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1749  (
__ªs
 - 1Ë- 
__s
;

1750 
	}
}

1755 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1756 
	#°Ωbrk
(
s
, 
ac˚±
) \

1757 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1758 ? ((
ac˚±
)[0] == '\0' \

1759 ? ((Ë(
s
), (*) 0) \

1760 : ((
ac˚±
)[1] == '\0' \

1761 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1762 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1763 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1765 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1766 
size_t
 
__ac˚±_Àn
);

1768 
__STRING_INLINE
 *

1769 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1771 
__d0
, 
__d1
, 
__d2
;

1772 *
__ªs
;

1773 
__asm__
 
__vﬁ©ûe__


1788 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1789 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1791  
__ªs
;

1792 
	}
}

1794 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1795 #ifde‡
__PIC__


1797 
__STRING_INLINE
 *

1798 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1800 
__d0
, 
__d1
, 
__d2
;

1801 *
__ªs
;

1802 
__asm__
 
__vﬁ©ûe__


1823 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1824 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1826  
__ªs
;

1827 
	}
}

1829 
__STRING_INLINE
 *

1830 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1832 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1833 *
__ªs
;

1834 
__asm__
 
__vﬁ©ûe__


1853 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1854 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1856  
__ªs
;

1857 
	}
}

1862 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1863 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1864 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1865 ? ((
√edÀ
)[0] == '\0' \

1866 ? (
hay°ack
) \

1867 : ((
√edÀ
)[1] == '\0' \

1868 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1869 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1870 
	`°æí
 (
√edÀ
)))) \

1871 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1875 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1876 c⁄° 
__√edÀ
[],

1877 
size_t
 
__√edÀ_Àn
);

1879 
__STRING_INLINE
 *

1880 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1881 
size_t
 
__√edÀ_Àn
)

1883 
__d0
, 
__d1
, 
__d2
;

1884 *
__ªs
;

1885 
__asm__
 
__vﬁ©ûe__


1898 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1899 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1901  
__ªs
;

1902 
	}
}

1904 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1905 c⁄° *
__√edÀ
);

1906 #ifde‡
__PIC__


1908 
__STRING_INLINE
 *

1909 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1911 
__d0
, 
__d1
, 
__d2
;

1912 *
__ªs
;

1913 
__asm__
 
__vﬁ©ûe__


1932 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1933 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1934 "d" (
__√edÀ
)

1936  
__ªs
;

1937 
	}
}

1939 
__STRING_INLINE
 *

1940 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1942 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1943 *
__ªs
;

1944 
__asm__
 
__vﬁ©ûe__


1961 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1962 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1963 "b" (
__√edÀ
)

1965  
__ªs
;

1966 
	}
}

1972 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1973 #ifde‡
__i686__


1974 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1975 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1976 ? 
	`__buûtö_ffs
 (
w‹d
) \

1977 : ({ 
__˙t
, 
__tmp
; \

1978 
__asm__
 
__vﬁ©ûe__
 \

1981 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1982 : "rm" (
w‹d
), "1" (-1)); \

1983 
__˙t
 + 1; }))

	)

1985 #i‚de‡
ff¶


1986 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1991 #i‚de‡
_FORCE_INLINES


1992 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_INLINE_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_INLINE_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_INLINE_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_INLINE_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_INLINE_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #ifde‡
__USE_POSIX


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_MISC


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_XOPEN2K8


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 #i‡!
__GNUC_PREREQ
 (5,0)

23 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

27 #i‚de‡
__˝lu•lus


31 #unde‡
mem˝y


32 #unde‡
memmove


33 #unde‡
mem£t


34 #unde‡
°rˇt


35 #unde‡
°r˝y


36 #unde‡
°∫ˇt


37 #unde‡
°∫˝y


38 #ifde‡
__USE_GNU


39 #unde‡
memp˝y


40 #unde‡
°p˝y


42 #ifde‡
__USE_MISC


43 #unde‡
bc›y


44 #unde‡
bzîo


49 
__f‹tify_fun˘i⁄
 *

50 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

51 
size_t
 
__Àn
))

53  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

54 
	}
}

56 
__f‹tify_fun˘i⁄
 *

57 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

59  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

60 
	}
}

62 #ifde‡
__USE_GNU


63 
__f‹tify_fun˘i⁄
 *

64 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

65 
size_t
 
__Àn
))

67  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

68 
	}
}

77 
__f‹tify_fun˘i⁄
 *

78 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

82 #i‡!
	`__GNUC_PREREQ
 (5,0)

83 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

84 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

86 
	`__w¨n_mem£t_zîo_Àn
 ();

87  
__de°
;

90  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

91 
	}
}

93 #ifde‡
__USE_MISC


94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

100 
__f‹tify_fun˘i⁄
 

101 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

103 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

104 
	}
}

107 
__f‹tify_fun˘i⁄
 *

108 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

110  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

111 
	}
}

113 #ifde‡
__USE_GNU


114 
__f‹tify_fun˘i⁄
 *

115 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

117  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

118 
	}
}

122 
__f‹tify_fun˘i⁄
 *

123 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

124 
size_t
 
__Àn
))

126  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

127 
	}
}

130 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

131 
size_t
 
__de°Àn
Ë
__THROW
;

132 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

133 
size_t
 
__n
), 
°≤˝y
);

135 
__f‹tify_fun˘i⁄
 *

136 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

138 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

139 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿> 
	`__bos
 (
__de°
)))

140  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

141  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

142 
	}
}

145 
__f‹tify_fun˘i⁄
 *

146 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

148  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

149 
	}
}

152 
__f‹tify_fun˘i⁄
 *

153 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

154 
size_t
 
__Àn
))

156  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

157 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_MISC


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_MISC


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/check_stdint.h

1 #i‚de‡
_CHECK_CHECK_STDINT_H


2 
	#_CHECK_CHECK_STDINT_H
 1

	)

3 #i‚de‡
_GENERATED_STDINT_H


4 
	#_GENERATED_STDINT_H
 "check 0.10.0"

	)

6 
	#_STDINT_HAVE_STDINT_H
 1

	)

7 
	~<°döt.h
>

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


149 #unde‡
_DEFAULT_SOURCE


150 
	#_DEFAULT_SOURCE
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_ISOC11_SOURCE


160 
	#_ISOC11_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_DEFAULT_SOURCE


172 
	#_DEFAULT_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
))

184 #unde‡
_DEFAULT_SOURCE


185 
	#_DEFAULT_SOURCE
 1

	)

189 #i‡(
deföed
 
_ISOC11_SOURCE
 \

190 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

191 
	#__USE_ISOC11
 1

	)

195 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

196 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

197 
	#__USE_ISOC99
 1

	)

201 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

202 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

203 
	#__USE_ISOC95
 1

	)

210 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

211 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

212 
	#__USE_ISOCXX11
 1

	)

218 #ifde‡
_DEFAULT_SOURCE


219 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


220 
	#__USE_POSIX_IMPLICITLY
 1

	)

222 #unde‡
_POSIX_SOURCE


223 
	#_POSIX_SOURCE
 1

	)

224 #unde‡
_POSIX_C_SOURCE


225 
	#_POSIX_C_SOURCE
 200809L

	)

227 #i‡((!
deföed
 
__STRICT_ANSI__
 \

228 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

229 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

230 
	#_POSIX_SOURCE
 1

	)

231 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

232 
	#_POSIX_C_SOURCE
 2

	)

233 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

234 
	#_POSIX_C_SOURCE
 199506L

	)

235 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

236 
	#_POSIX_C_SOURCE
 200112L

	)

238 
	#_POSIX_C_SOURCE
 200809L

	)

240 
	#__USE_POSIX_IMPLICITLY
 1

	)

243 #i‡(
deföed
 
_POSIX_SOURCE
 \

244 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

245 || 
deföed
 
_XOPEN_SOURCE
)

246 
	#__USE_POSIX
 1

	)

249 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


250 
	#__USE_POSIX2
 1

	)

253 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

254 
	#__USE_POSIX199309
 1

	)

257 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

258 
	#__USE_POSIX199506
 1

	)

261 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

262 
	#__USE_XOPEN2K
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

270 
	#__USE_XOPEN2K8
 1

	)

271 #unde‡
_ATFILE_SOURCE


272 
	#_ATFILE_SOURCE
 1

	)

275 #ifdef 
_XOPEN_SOURCE


276 
	#__USE_XOPEN
 1

	)

277 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

278 
	#__USE_XOPEN_EXTENDED
 1

	)

279 
	#__USE_UNIX98
 1

	)

280 #unde‡
_LARGEFILE_SOURCE


281 
	#_LARGEFILE_SOURCE
 1

	)

282 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

283 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

284 
	#__USE_XOPEN2K8
 1

	)

285 
	#__USE_XOPEN2K8XSI
 1

	)

287 
	#__USE_XOPEN2K
 1

	)

288 
	#__USE_XOPEN2KXSI
 1

	)

289 #unde‡
__USE_ISOC95


290 
	#__USE_ISOC95
 1

	)

291 #unde‡
__USE_ISOC99


292 
	#__USE_ISOC99
 1

	)

295 #ifde‡
_XOPEN_SOURCE_EXTENDED


296 
	#__USE_XOPEN_EXTENDED
 1

	)

301 #ifde‡
_LARGEFILE_SOURCE


302 
	#__USE_LARGEFILE
 1

	)

305 #ifde‡
_LARGEFILE64_SOURCE


306 
	#__USE_LARGEFILE64
 1

	)

309 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

310 
	#__USE_FILE_OFFSET64
 1

	)

313 #i‡
deföed
 
_DEFAULT_SOURCE


314 
	#__USE_MISC
 1

	)

317 #ifdef 
_ATFILE_SOURCE


318 
	#__USE_ATFILE
 1

	)

321 #ifdef 
_GNU_SOURCE


322 
	#__USE_GNU
 1

	)

325 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


326 
	#__USE_REENTRANT
 1

	)

329 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

330 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

331 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
compûög
 
wôh
 
›timiz©i⁄
 (-
O
)

332 #ñi‡!
__GNUC_PREREQ
 (4, 1)

333 #w¨nög 
_FORTIFY_SOURCE
 
ªquúes
 
GCC
 4.1 
‹
 
œãr


334 #ñi‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 #i‚de‡
__USE_FORTIFY_LEVEL


341 
	#__USE_FORTIFY_LEVEL
 0

	)

346 
	~<°dc-¥edef.h
>

354 #unde‡
__GNU_LIBRARY__


355 
	#__GNU_LIBRARY__
 6

	)

359 
	#__GLIBC__
 2

	)

360 
	#__GLIBC_MINOR__
 23

	)

362 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

363 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

366 #i‚de‡
__ASSEMBLER__


367 #i‚de‡
_SYS_CDEFS_H


368 
	~<sys/cdefs.h
>

373 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


374 
	#__USE_LARGEFILE
 1

	)

375 
	#__USE_LARGEFILE64
 1

	)

381 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

382 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

383 && 
deföed
 
	g__exã∫_ölöe


384 
	#__USE_EXTERN_INLINES
 1

	)

392 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/sysinfo.h

1 #i‚de‡
_LINUX_SYSINFO_H


2 
	#_LINUX_SYSINFO_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#SI_LOAD_SHIFT
 16

	)

7 
	ssysöfo
 {

8 
__kî√l_l⁄g_t
 
	mu±ime
;

9 
__kî√l_ul⁄g_t
 
	mlﬂds
[3];

10 
__kî√l_ul⁄g_t
 
	mtŸÆøm
;

11 
__kî√l_ul⁄g_t
 
	m‰ìøm
;

12 
__kî√l_ul⁄g_t
 
	msh¨edøm
;

13 
__kî√l_ul⁄g_t
 
	mbuf„ºam
;

14 
__kî√l_ul⁄g_t
 
	mtŸÆsw≠
;

15 
__kî√l_ul⁄g_t
 
	m‰ìsw≠
;

16 
__u16
 
	m¥ocs
;

17 
__u16
 
	m∑d
;

18 
__kî√l_ul⁄g_t
 
	mtŸÆhigh
;

19 
__kî√l_ul⁄g_t
 
	m‰ìhigh
;

20 
__u32
 
	mmem_unô
;

21 
	m_f
[20-2*(
__kî√l_ul⁄g_t
)-(
__u32
)];

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë(1UL << ((dË% 
__NFDBITS
)))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ucontext.h

18 #i‚de‡
_SYS_UCONTEXT_H


19 
	#_SYS_UCONTEXT_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sig«l.h
>

26 
	~<bôs/sigc⁄ãxt.h
>

28 #ifde‡
__x86_64__


31 
__exãnsi⁄__
 
	tgªg_t
;

34 
	#NGREG
 23

	)

37 
gªg_t
 
	tgªg£t_t
[
NGREG
];

39 #ifde‡
__USE_GNU


43 
	mREG_R8
 = 0,

44 
	#REG_R8
 
REG_R8


	)

45 
	mREG_R9
,

46 
	#REG_R9
 
REG_R9


	)

47 
	mREG_R10
,

48 
	#REG_R10
 
REG_R10


	)

49 
	mREG_R11
,

50 
	#REG_R11
 
REG_R11


	)

51 
	mREG_R12
,

52 
	#REG_R12
 
REG_R12


	)

53 
	mREG_R13
,

54 
	#REG_R13
 
REG_R13


	)

55 
	mREG_R14
,

56 
	#REG_R14
 
REG_R14


	)

57 
	mREG_R15
,

58 
	#REG_R15
 
REG_R15


	)

59 
	mREG_RDI
,

60 
	#REG_RDI
 
REG_RDI


	)

61 
	mREG_RSI
,

62 
	#REG_RSI
 
REG_RSI


	)

63 
	mREG_RBP
,

64 
	#REG_RBP
 
REG_RBP


	)

65 
	mREG_RBX
,

66 
	#REG_RBX
 
REG_RBX


	)

67 
	mREG_RDX
,

68 
	#REG_RDX
 
REG_RDX


	)

69 
	mREG_RAX
,

70 
	#REG_RAX
 
REG_RAX


	)

71 
	mREG_RCX
,

72 
	#REG_RCX
 
REG_RCX


	)

73 
	mREG_RSP
,

74 
	#REG_RSP
 
REG_RSP


	)

75 
	mREG_RIP
,

76 
	#REG_RIP
 
REG_RIP


	)

77 
	mREG_EFL
,

78 
	#REG_EFL
 
REG_EFL


	)

79 
	mREG_CSGSFS
,

80 
	#REG_CSGSFS
 
REG_CSGSFS


	)

81 
	mREG_ERR
,

82 
	#REG_ERR
 
REG_ERR


	)

83 
	mREG_TRAPNO
,

84 
	#REG_TRAPNO
 
REG_TRAPNO


	)

85 
	mREG_OLDMASK
,

86 
	#REG_OLDMASK
 
REG_OLDMASK


	)

87 
	mREG_CR2


88 
	#REG_CR2
 
REG_CR2


	)

92 
	s_libc_Âxªg


94 
	msignifiˇnd
[4];

95 
	mexp⁄ít
;

96 
	m∑ddög
[3];

99 
	s_libc_xmmªg


101 
__uöt32_t
 
	mñemít
[4];

104 
	s_libc_Â°©e


107 
__uöt16_t
 
	mcwd
;

108 
__uöt16_t
 
	mswd
;

109 
__uöt16_t
 
	m·w
;

110 
__uöt16_t
 
	mf›
;

111 
__uöt64_t
 
	mrù
;

112 
__uöt64_t
 
	mrdp
;

113 
__uöt32_t
 
	mmxc§
;

114 
__uöt32_t
 
	mmx¸_mask
;

115 
_libc_Âxªg
 
	m_°
[8];

116 
_libc_xmmªg
 
	m_xmm
[16];

117 
__uöt32_t
 
	m∑ddög
[24];

121 
_libc_Â°©e
 *
	tÂªg£t_t
;

126 
gªg£t_t
 
	mgªgs
;

128 
Âªg£t_t
 
	mÂªgs
;

129 
__exãnsi⁄__
 
	m__ª£rved1
 [8];

130 } 
	tmc⁄ãxt_t
;

133 
	suc⁄ãxt


135 
	muc_Êags
;

136 
uc⁄ãxt
 *
	muc_lök
;

137 
°ack_t
 
	muc_°ack
;

138 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

139 
__sig£t_t
 
	muc_sigmask
;

140 
_libc_Â°©e
 
	m__Âªgs_mem
;

141 } 
	tuc⁄ãxt_t
;

146 
	tgªg_t
;

149 
	#NGREG
 19

	)

152 
gªg_t
 
	tgªg£t_t
[
NGREG
];

154 #ifde‡
__USE_GNU


158 
	mREG_GS
 = 0,

159 
	#REG_GS
 
REG_GS


	)

160 
	mREG_FS
,

161 
	#REG_FS
 
REG_FS


	)

162 
	mREG_ES
,

163 
	#REG_ES
 
REG_ES


	)

164 
	mREG_DS
,

165 
	#REG_DS
 
REG_DS


	)

166 
	mREG_EDI
,

167 
	#REG_EDI
 
REG_EDI


	)

168 
	mREG_ESI
,

169 
	#REG_ESI
 
REG_ESI


	)

170 
	mREG_EBP
,

171 
	#REG_EBP
 
REG_EBP


	)

172 
	mREG_ESP
,

173 
	#REG_ESP
 
REG_ESP


	)

174 
	mREG_EBX
,

175 
	#REG_EBX
 
REG_EBX


	)

176 
	mREG_EDX
,

177 
	#REG_EDX
 
REG_EDX


	)

178 
	mREG_ECX
,

179 
	#REG_ECX
 
REG_ECX


	)

180 
	mREG_EAX
,

181 
	#REG_EAX
 
REG_EAX


	)

182 
	mREG_TRAPNO
,

183 
	#REG_TRAPNO
 
REG_TRAPNO


	)

184 
	mREG_ERR
,

185 
	#REG_ERR
 
REG_ERR


	)

186 
	mREG_EIP
,

187 
	#REG_EIP
 
REG_EIP


	)

188 
	mREG_CS
,

189 
	#REG_CS
 
REG_CS


	)

190 
	mREG_EFL
,

191 
	#REG_EFL
 
REG_EFL


	)

192 
	mREG_UESP
,

193 
	#REG_UESP
 
REG_UESP


	)

194 
	mREG_SS


195 
	#REG_SS
 
REG_SS


	)

200 
	s_libc_Âªg


202 
	msignifiˇnd
[4];

203 
	mexp⁄ít
;

206 
	s_libc_Â°©e


208 
	mcw
;

209 
	msw
;

210 
	mèg
;

211 
	mùoff
;

212 
	mcs£l
;

213 
	md©aoff
;

214 
	md©a£l
;

215 
_libc_Âªg
 
	m_°
[8];

216 
	m°©us
;

220 
_libc_Â°©e
 *
	tÂªg£t_t
;

225 
gªg£t_t
 
	mgªgs
;

228 
Âªg£t_t
 
	mÂªgs
;

229 
	mﬁdmask
;

230 
	m¸2
;

231 } 
	tmc⁄ãxt_t
;

234 
	suc⁄ãxt


236 
	muc_Êags
;

237 
uc⁄ãxt
 *
	muc_lök
;

238 
°ack_t
 
	muc_°ack
;

239 
mc⁄ãxt_t
 
	muc_mc⁄ãxt
;

240 
__sig£t_t
 
	muc_sigmask
;

241 
_libc_Â°©e
 
	m__Âªgs_mem
;

242 } 
	tuc⁄ãxt_t
;

	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 (020000000 | 
__O_DIRECTORY
)

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

131 #ifde‡
__USE_GNU


132 
	#F_OFD_GETLK
 36

	)

133 
	#F_OFD_SETLK
 37

	)

134 
	#F_OFD_SETLKW
 38

	)

137 #ifde‡
__USE_LARGEFILE64


138 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

141 #ifde‡
__USE_XOPEN2K8


142 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

143 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

144 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

147 #ifde‡
__USE_GNU


148 
	#O_DIRECT
 
__O_DIRECT


	)

149 
	#O_NOATIME
 
__O_NOATIME


	)

150 
	#O_PATH
 
__O_PATH


	)

151 
	#O_TMPFILE
 
__O_TMPFILE


	)

157 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


158 
	#O_DSYNC
 
__O_DSYNC


	)

159 #i‡
deföed
 
__O_RSYNC


160 
	#O_RSYNC
 
__O_RSYNC


	)

162 
	#O_RSYNC
 
O_SYNC


	)

167 
	#F_DUPFD
 0

	)

168 
	#F_GETFD
 1

	)

169 
	#F_SETFD
 2

	)

170 
	#F_GETFL
 3

	)

171 
	#F_SETFL
 4

	)

173 #i‚de‡
__F_SETOWN


174 
	#__F_SETOWN
 8

	)

175 
	#__F_GETOWN
 9

	)

178 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


179 
	#F_SETOWN
 
__F_SETOWN


	)

180 
	#F_GETOWN
 
__F_GETOWN


	)

183 #i‚de‡
__F_SETSIG


184 
	#__F_SETSIG
 10

	)

185 
	#__F_GETSIG
 11

	)

187 #i‚de‡
__F_SETOWN_EX


188 
	#__F_SETOWN_EX
 15

	)

189 
	#__F_GETOWN_EX
 16

	)

192 #ifde‡
__USE_GNU


193 
	#F_SETSIG
 
__F_SETSIG


	)

194 
	#F_GETSIG
 
__F_GETSIG


	)

195 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

196 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

199 #ifde‡
__USE_GNU


200 
	#F_SETLEASE
 1024

	)

201 
	#F_GETLEASE
 1025

	)

202 
	#F_NOTIFY
 1026

	)

203 
	#F_SETPIPE_SZ
 1031

	)

204 
	#F_GETPIPE_SZ
 1032

	)

206 #ifde‡
__USE_XOPEN2K8


207 
	#F_DUPFD_CLOEXEC
 1030

	)

212 
	#FD_CLOEXEC
 1

	)

214 #i‚de‡
F_RDLCK


216 
	#F_RDLCK
 0

	)

217 
	#F_WRLCK
 1

	)

218 
	#F_UNLCK
 2

	)

223 #i‚de‡
F_EXLCK


224 
	#F_EXLCK
 4

	)

225 
	#F_SHLCK
 8

	)

228 #ifde‡
__USE_MISC


230 
	#LOCK_SH
 1

	)

231 
	#LOCK_EX
 2

	)

232 
	#LOCK_NB
 4

	)

234 
	#LOCK_UN
 8

	)

237 #ifde‡
__USE_GNU


238 
	#LOCK_MAND
 32

	)

239 
	#LOCK_READ
 64

	)

240 
	#LOCK_WRITE
 128

	)

241 
	#LOCK_RW
 192

	)

244 #ifde‡
__USE_GNU


246 
	#DN_ACCESS
 0x00000001

	)

247 
	#DN_MODIFY
 0x00000002

	)

248 
	#DN_CREATE
 0x00000004

	)

249 
	#DN_DELETE
 0x00000008

	)

250 
	#DN_RENAME
 0x00000010

	)

251 
	#DN_ATTRIB
 0x00000020

	)

252 
	#DN_MULTISHOT
 0x80000000

	)

256 #ifde‡
__USE_GNU


258 
	e__pid_ty≥


260 
	mF_OWNER_TID
 = 0,

261 
	mF_OWNER_PID
,

262 
	mF_OWNER_PGRP
,

263 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


267 
	sf_ow√r_ex


269 
__pid_ty≥
 
	mty≥
;

270 
__pid_t
 
	mpid
;

276 #ifdef 
__USE_MISC


277 
	#FAPPEND
 
O_APPEND


	)

278 
	#FFSYNC
 
O_FSYNC


	)

279 
	#FASYNC
 
O_ASYNC


	)

280 
	#FNONBLOCK
 
O_NONBLOCK


	)

281 
	#FNDELAY
 
O_NDELAY


	)

284 #i‚de‡
__POSIX_FADV_DONTNEED


285 
	#__POSIX_FADV_DONTNEED
 4

	)

286 
	#__POSIX_FADV_NOREUSE
 5

	)

289 #ifde‡
__USE_XOPEN2K


290 
	#POSIX_FADV_NORMAL
 0

	)

291 
	#POSIX_FADV_RANDOM
 1

	)

292 
	#POSIX_FADV_SEQUENTIAL
 2

	)

293 
	#POSIX_FADV_WILLNEED
 3

	)

294 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

295 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

299 #ifde‡
__USE_GNU


301 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

304 
	#SYNC_FILE_RANGE_WRITE
 2

	)

307 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

312 
	#SPLICE_F_MOVE
 1

	)

313 
	#SPLICE_F_NONBLOCK
 2

	)

316 
	#SPLICE_F_MORE
 4

	)

317 
	#SPLICE_F_GIFT
 8

	)

321 
	#FALLOC_FL_KEEP_SIZE
 1

	)

324 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

325 
	#FALLOC_FL_COLLAPSE_RANGE
 8

	)

328 
	#FALLOC_FL_ZERO_RANGE
 16

	)

333 
	sfûe_h™dÀ


335 
	mh™dÀ_byãs
;

336 
	mh™dÀ_ty≥
;

338 
	mf_h™dÀ
[0];

342 
	#MAX_HANDLE_SZ
 128

	)

345 
	g__BEGIN_DECLS


347 #ifde‡
__USE_GNU


350 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

351 
__THROW
;

358 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

359 
__Êags
);

366 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

367 
size_t
 
__cou¡
, 
__Êags
);

373 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

374 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

375 
__Êags
);

381 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

382 
__Êags
);

388 #i‚de‡
__USE_FILE_OFFSET64


389 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

391 #ifde‡
__REDIRECT


392 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

393 
__off64_t
 
__Àn
),

394 
ÁŒoˇã64
);

396 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

399 #ifde‡
__USE_LARGEFILE64


400 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

401 
__off64_t
 
__Àn
);

406 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

407 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

408 
__Êags
Ë
__THROW
;

414 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

415 
__Êags
);

419 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/posix1_lim.h

24 #i‚def 
_BITS_POSIX1_LIM_H


25 
	#_BITS_POSIX1_LIM_H
 1

	)

31 
	#_POSIX_AIO_LISTIO_MAX
 2

	)

34 
	#_POSIX_AIO_MAX
 1

	)

37 
	#_POSIX_ARG_MAX
 4096

	)

40 #ifde‡
__USE_XOPEN2K


41 
	#_POSIX_CHILD_MAX
 25

	)

43 
	#_POSIX_CHILD_MAX
 6

	)

47 
	#_POSIX_DELAYTIMER_MAX
 32

	)

51 
	#_POSIX_HOST_NAME_MAX
 255

	)

54 
	#_POSIX_LINK_MAX
 8

	)

57 
	#_POSIX_LOGIN_NAME_MAX
 9

	)

60 
	#_POSIX_MAX_CANON
 255

	)

64 
	#_POSIX_MAX_INPUT
 255

	)

67 
	#_POSIX_MQ_OPEN_MAX
 8

	)

70 
	#_POSIX_MQ_PRIO_MAX
 32

	)

73 
	#_POSIX_NAME_MAX
 14

	)

76 #ifde‡
__USE_XOPEN2K


77 
	#_POSIX_NGROUPS_MAX
 8

	)

79 
	#_POSIX_NGROUPS_MAX
 0

	)

83 #ifde‡
__USE_XOPEN2K


84 
	#_POSIX_OPEN_MAX
 20

	)

86 
	#_POSIX_OPEN_MAX
 16

	)

89 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


92 
	#_POSIX_FD_SETSIZE
 
_POSIX_OPEN_MAX


	)

96 
	#_POSIX_PATH_MAX
 256

	)

99 
	#_POSIX_PIPE_BUF
 512

	)

103 
	#_POSIX_RE_DUP_MAX
 255

	)

106 
	#_POSIX_RTSIG_MAX
 8

	)

109 
	#_POSIX_SEM_NSEMS_MAX
 256

	)

112 
	#_POSIX_SEM_VALUE_MAX
 32767

	)

115 
	#_POSIX_SIGQUEUE_MAX
 32

	)

118 
	#_POSIX_SSIZE_MAX
 32767

	)

121 
	#_POSIX_STREAM_MAX
 8

	)

124 
	#_POSIX_SYMLINK_MAX
 255

	)

128 
	#_POSIX_SYMLOOP_MAX
 8

	)

131 
	#_POSIX_TIMER_MAX
 32

	)

134 
	#_POSIX_TTY_NAME_MAX
 9

	)

137 #ifde‡
__USE_XOPEN2K


138 
	#_POSIX_TZNAME_MAX
 6

	)

140 
	#_POSIX_TZNAME_MAX
 3

	)

143 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


145 
	#_POSIX_QLIMIT
 1

	)

149 
	#_POSIX_HIWAT
 
_POSIX_PIPE_BUF


	)

152 
	#_POSIX_UIO_MAXIOV
 16

	)

156 
	#_POSIX_CLOCKRES_MIN
 20000000

	)

160 
	~<bôs/loˇl_lim.h
>

163 #i‚def 
SSIZE_MAX


164 
	#SSIZE_MAX
 
LONG_MAX


	)

171 #i‚def 
NGROUPS_MAX


172 
	#NGROUPS_MAX
 8

	)

	@/usr/include/bits/posix2_lim.h

22 #i‚def 
_BITS_POSIX2_LIM_H


23 
	#_BITS_POSIX2_LIM_H
 1

	)

27 
	#_POSIX2_BC_BASE_MAX
 99

	)

30 
	#_POSIX2_BC_DIM_MAX
 2048

	)

33 
	#_POSIX2_BC_SCALE_MAX
 99

	)

36 
	#_POSIX2_BC_STRING_MAX
 1000

	)

40 
	#_POSIX2_COLL_WEIGHTS_MAX
 2

	)

44 
	#_POSIX2_EXPR_NEST_MAX
 32

	)

47 
	#_POSIX2_LINE_MAX
 2048

	)

51 
	#_POSIX2_RE_DUP_MAX
 255

	)

55 
	#_POSIX2_CHARCLASS_NAME_MAX
 14

	)

62 #i‚def 
BC_BASE_MAX


63 
	#BC_BASE_MAX
 
_POSIX2_BC_BASE_MAX


	)

65 #i‚def 
BC_DIM_MAX


66 
	#BC_DIM_MAX
 
_POSIX2_BC_DIM_MAX


	)

68 #i‚def 
BC_SCALE_MAX


69 
	#BC_SCALE_MAX
 
_POSIX2_BC_SCALE_MAX


	)

71 #i‚def 
BC_STRING_MAX


72 
	#BC_STRING_MAX
 
_POSIX2_BC_STRING_MAX


	)

74 #i‚def 
COLL_WEIGHTS_MAX


75 
	#COLL_WEIGHTS_MAX
 255

	)

77 #i‚def 
EXPR_NEST_MAX


78 
	#EXPR_NEST_MAX
 
_POSIX2_EXPR_NEST_MAX


	)

80 #i‚def 
LINE_MAX


81 
	#LINE_MAX
 
_POSIX2_LINE_MAX


	)

83 #i‚def 
CHARCLASS_NAME_MAX


84 
	#CHARCLASS_NAME_MAX
 2048

	)

88 
	#RE_DUP_MAX
 (0x7fff)

	)

	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
__CPU_MASK_TYPE
 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 ((
˛ock_t
Ë1000000)

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

81 
	#CLOCK_TAI
 11

	)

84 
	#TIMER_ABSTIME
 1

	)

87 #ifde‡
__USE_GNU


88 
	~<bôs/timex.h
>

90 
__BEGIN_DECLS


93 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

95 
__END_DECLS


101 #unde‡
__√ed_timevÆ


	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

74 
	#__CPU_MASK_TYPE
 
__SYSCALL_ULONG_TYPE


	)

76 #ifde‡
__x86_64__


80 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

83 
	#__INO_T_MATCHES_INO64_T
 1

	)

87 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/xopen_lim.h

29 #i‚de‡
_XOPEN_LIM_H


30 
	#_XOPEN_LIM_H
 1

	)

32 
	#__√ed_IOV_MAX


	)

33 
	~<bôs/°dio_lim.h
>

65 
	#_XOPEN_IOV_MAX
 
_POSIX_UIO_MAXIOV


	)

70 
	#NL_ARGMAX
 
_POSIX_ARG_MAX


	)

73 
	#NL_LANGMAX
 
_POSIX2_LINE_MAX


	)

76 
	#NL_MSGMAX
 
INT_MAX


	)

80 
	#NL_NMAX
 
INT_MAX


	)

83 
	#NL_SETMAX
 
INT_MAX


	)

86 
	#NL_TEXTMAX
 
INT_MAX


	)

89 
	#NZERO
 20

	)

93 #ifde‡
INT_MAX


94 #i‡
INT_MAX
 == 32767

95 
	#WORD_BIT
 16

	)

97 #i‡
INT_MAX
 == 2147483647

98 
	#WORD_BIT
 32

	)

101 
	#WORD_BIT
 64

	)

104 #ñi‡
deföed
 
__INT_MAX__


105 #i‡
__INT_MAX__
 == 32767

106 
	#WORD_BIT
 16

	)

108 #i‡
__INT_MAX__
 == 2147483647

109 
	#WORD_BIT
 32

	)

112 
	#WORD_BIT
 64

	)

116 
	#WORD_BIT
 32

	)

120 #ifde‡
LONG_MAX


121 #i‡
LONG_MAX
 == 2147483647

122 
	#LONG_BIT
 32

	)

125 
	#LONG_BIT
 64

	)

127 #ñi‡
deföed
 
__LONG_MAX__


128 #i‡
__LONG_MAX__
 == 2147483647

129 
	#LONG_BIT
 32

	)

132 
	#LONG_BIT
 64

	)

135 
	~<bôs/w‹dsize.h
>

136 #i‡
__WORDSIZE
 == 64

137 
	#LONG_BIT
 64

	)

139 
	#LONG_BIT
 32

	)

	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/limits.h

1 #i‚de‡
_LINUX_LIMITS_H


2 
	#_LINUX_LIMITS_H


	)

4 
	#NR_OPEN
 1024

	)

6 
	#NGROUPS_MAX
 65536

	)

7 
	#ARG_MAX
 131072

	)

8 
	#LINK_MAX
 127

	)

9 
	#MAX_CANON
 255

	)

10 
	#MAX_INPUT
 255

	)

11 
	#NAME_MAX
 255

	)

12 
	#PATH_MAX
 4096

	)

13 
	#PIPE_BUF
 4096

	)

14 
	#XATTR_NAME_MAX
 255

	)

15 
	#XATTR_SIZE_MAX
 65536

	)

16 
	#XATTR_LIST_MAX
 65536

	)

18 
	#RTSIG_MAX
 32

	)

	@/usr/include/linux/param.h

1 #i‚de‡
_LINUX_PARAM_H


2 
	#_LINUX_PARAM_H


	)

4 
	~<asm/∑øm.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

181 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

182 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

184 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

185 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

186 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

187 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

189 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

190 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

203 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

204 
	#__©åibuã__
(
xyz
Ë

	)

210 #i‡
__GNUC_PREREQ
 (2,96)

211 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

213 
	#__©åibuã_mÆloc__


	)

218 #i‡
__GNUC_PREREQ
 (4, 3)

219 
	#__©åibuã_Æloc_size__
(
∑øms
) \

220 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

222 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

228 #i‡
__GNUC_PREREQ
 (2,96)

229 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

231 
	#__©åibuã_puª__


	)

235 #i‡
__GNUC_PREREQ
 (2,5)

236 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

238 
	#__©åibuã_c⁄°__


	)

244 #i‡
__GNUC_PREREQ
 (3,1)

245 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

246 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

248 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

249 
	#__©åibuã_noölöe__


	)

253 #i‡
__GNUC_PREREQ
 (3,2)

254 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

256 
	#__©åibuã_dïªˇãd__


	)

265 #i‡
__GNUC_PREREQ
 (2,8)

266 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

268 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

275 #i‡
__GNUC_PREREQ
 (2,97)

276 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

277 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

279 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

284 #i‡
__GNUC_PREREQ
 (3,3)

285 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

287 
	#__n⁄nuŒ
(
∑øms
)

	)

292 #i‡
__GNUC_PREREQ
 (3,4)

293 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

294 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

295 #i‡
__USE_FORTIFY_LEVEL
 > 0

296 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

299 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

301 #i‚de‡
__wur


302 
	#__wur


	)

306 #i‡
__GNUC_PREREQ
 (3,2)

307 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

309 
	#__Æways_ölöe
 
__ölöe


	)

314 #i‡
__GNUC_PREREQ
 (4,3)

315 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

317 
	#__©åibuã_¨tificül__


	)

329 #i‡(!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3) \

330 || (
deföed
 
__˛™g__
 && (deföed 
__GNUC_STDC_INLINE__
 \

331 || 
deföed
 
__GNUC_GNU_INLINE__
)))

332 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


333 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

334 
	#__exã∫_Æways_ölöe
 \

335 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

337 
	#__exã∫_ölöe
 
__ölöe


	)

338 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

342 #ifde‡
__exã∫_Æways_ölöe


343 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

348 #i‡
__GNUC_PREREQ
 (4,3)

349 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

350 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

357 #i‡!
__GNUC_PREREQ
 (2,8)

358 
	#__exãnsi⁄__


	)

362 #i‡!
__GNUC_PREREQ
 (2,92)

363 
	#__ª°ri˘


	)

369 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


370 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

372 #ifde‡
__GNUC__


373 
	#__ª°ri˘_¨r


	)

375 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

376 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

379 
	#__ª°ri˘_¨r


	)

384 #i‡
__GNUC__
 >= 3

385 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

386 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

388 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

389 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

392 #i‡(!
deföed
 
_N‹ëu∫
 \

393 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

394 && !
	$__GNUC_PREREQ
 (4,7))

395 #i‡
	`__GNUC_PREREQ
 (2,8)

396 
	#_N‹ëu∫
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

398 
	#_N‹ëu∫


	)

402 #i‡(!
deföed
 
_Sètic_as£π
 && !deföed 
__˝lu•lus
 \

403 && (
deföed
 
__STDC_VERSION__
 ? __STDC_VERSION__ : 0) < 201112 \

404 && (!
	`__GNUC_PREREQ
 (4, 6Ë|| 
deföed
 
__STRICT_ANSI__
))

405 
	#_Sètic_as£π
(
ex¥
, 
dügno°ic
) \

406 (*
	`__Sètic_as£π_fun˘i⁄
 ()) \

407 [!! (°ru˘ { 
__îr‹_if_√g©ive
: (
ex¥
Ë? 2 : -1; })]

	)

410 
	~<bôs/w‹dsize.h
>

412 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


413 
	#__LDBL_COMPAT
 1

	)

414 #ifde‡
__REDIRECT


415 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

416 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

417 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

418 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

419 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

420 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

421 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

422 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

423 
	#__LDBL_REDIR_DECL
(
«me
) \

424 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

425 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

426 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

427 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

428 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

431 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


432 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

433 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

434 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

435 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

436 
	#__LDBL_REDIR_DECL
(
«me
)

	)

437 #ifde‡
__REDIRECT


438 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

439 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

440 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm/param.h

1 
	~<asm-gíîic/∑øm.h
>

	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_X86_TYPES_H


2 
	#_ASM_X86_TYPES_H


	)

4 
	~<asm-gíîic/ty≥s.h
>

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/local_lim.h

24 #i‚de‡
NR_OPEN


25 
	#__undef_NR_OPEN


	)

27 #i‚de‡
LINK_MAX


28 
	#__undef_LINK_MAX


	)

30 #i‚de‡
OPEN_MAX


31 
	#__undef_OPEN_MAX


	)

33 #i‚de‡
ARG_MAX


34 
	#__undef_ARG_MAX


	)

38 
	~<löux/limôs.h
>

41 #ifde‡
__undef_NR_OPEN


42 #unde‡
NR_OPEN


43 #unde‡
__undef_NR_OPEN


46 #ifde‡
__undef_LINK_MAX


47 #unde‡
LINK_MAX


48 #unde‡
__undef_LINK_MAX


51 #ifde‡
__undef_OPEN_MAX


52 #unde‡
OPEN_MAX


53 #unde‡
__undef_OPEN_MAX


56 #ifde‡
__undef_ARG_MAX


57 #unde‡
ARG_MAX


58 #unde‡
__undef_ARG_MAX


62 
	#_POSIX_THREAD_KEYS_MAX
 128

	)

64 
	#PTHREAD_KEYS_MAX
 1024

	)

67 
	#_POSIX_THREAD_DESTRUCTOR_ITERATIONS
 4

	)

69 
	#PTHREAD_DESTRUCTOR_ITERATIONS
 
_POSIX_THREAD_DESTRUCTOR_ITERATIONS


	)

72 
	#_POSIX_THREAD_THREADS_MAX
 64

	)

74 #unde‡
PTHREAD_THREADS_MAX


78 
	#AIO_PRIO_DELTA_MAX
 20

	)

81 
	#PTHREAD_STACK_MIN
 16384

	)

84 
	#DELAYTIMER_MAX
 2147483647

	)

87 
	#TTY_NAME_MAX
 32

	)

90 
	#LOGIN_NAME_MAX
 256

	)

93 
	#HOST_NAME_MAX
 64

	)

96 
	#MQ_PRIO_MAX
 32768

	)

99 
	#SEM_VALUE_MAX
 (2147483647)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_SETOFFSET
 0x0100

	)

64 
	#ADJ_MICRO
 0x1000

	)

65 
	#ADJ_NANO
 0x2000

	)

66 
	#ADJ_TICK
 0x4000

	)

67 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

68 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

71 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

72 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

73 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

74 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

75 
	#MOD_STATUS
 
ADJ_STATUS


	)

76 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

77 
	#MOD_CLKB
 
ADJ_TICK


	)

78 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

79 
	#MOD_TAI
 
ADJ_TAI


	)

80 
	#MOD_MICRO
 
ADJ_MICRO


	)

81 
	#MOD_NANO
 
ADJ_NANO


	)

85 
	#STA_PLL
 0x0001

	)

86 
	#STA_PPSFREQ
 0x0002

	)

87 
	#STA_PPSTIME
 0x0004

	)

88 
	#STA_FLL
 0x0008

	)

90 
	#STA_INS
 0x0010

	)

91 
	#STA_DEL
 0x0020

	)

92 
	#STA_UNSYNC
 0x0040

	)

93 
	#STA_FREQHOLD
 0x0080

	)

95 
	#STA_PPSSIGNAL
 0x0100

	)

96 
	#STA_PPSJITTER
 0x0200

	)

97 
	#STA_PPSWANDER
 0x0400

	)

98 
	#STA_PPSERROR
 0x0800

	)

100 
	#STA_CLOCKERR
 0x1000

	)

101 
	#STA_NANO
 0x2000

	)

102 
	#STA_MODE
 0x4000

	)

103 
	#STA_CLK
 0x8000

	)

106 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

107 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___com∑t_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

17 
	#ENOSYS
 38

	)

19 
	#ENOTEMPTY
 39

	)

20 
	#ELOOP
 40

	)

21 
	#EWOULDBLOCK
 
EAGAIN


	)

22 
	#ENOMSG
 42

	)

23 
	#EIDRM
 43

	)

24 
	#ECHRNG
 44

	)

25 
	#EL2NSYNC
 45

	)

26 
	#EL3HLT
 46

	)

27 
	#EL3RST
 47

	)

28 
	#ELNRNG
 48

	)

29 
	#EUNATCH
 49

	)

30 
	#ENOCSI
 50

	)

31 
	#EL2HLT
 51

	)

32 
	#EBADE
 52

	)

33 
	#EBADR
 53

	)

34 
	#EXFULL
 54

	)

35 
	#ENOANO
 55

	)

36 
	#EBADRQC
 56

	)

37 
	#EBADSLT
 57

	)

39 
	#EDEADLOCK
 
EDEADLK


	)

41 
	#EBFONT
 59

	)

42 
	#ENOSTR
 60

	)

43 
	#ENODATA
 61

	)

44 
	#ETIME
 62

	)

45 
	#ENOSR
 63

	)

46 
	#ENONET
 64

	)

47 
	#ENOPKG
 65

	)

48 
	#EREMOTE
 66

	)

49 
	#ENOLINK
 67

	)

50 
	#EADV
 68

	)

51 
	#ESRMNT
 69

	)

52 
	#ECOMM
 70

	)

53 
	#EPROTO
 71

	)

54 
	#EMULTIHOP
 72

	)

55 
	#EDOTDOT
 73

	)

56 
	#EBADMSG
 74

	)

57 
	#EOVERFLOW
 75

	)

58 
	#ENOTUNIQ
 76

	)

59 
	#EBADFD
 77

	)

60 
	#EREMCHG
 78

	)

61 
	#ELIBACC
 79

	)

62 
	#ELIBBAD
 80

	)

63 
	#ELIBSCN
 81

	)

64 
	#ELIBMAX
 82

	)

65 
	#ELIBEXEC
 83

	)

66 
	#EILSEQ
 84

	)

67 
	#ERESTART
 85

	)

68 
	#ESTRPIPE
 86

	)

69 
	#EUSERS
 87

	)

70 
	#ENOTSOCK
 88

	)

71 
	#EDESTADDRREQ
 89

	)

72 
	#EMSGSIZE
 90

	)

73 
	#EPROTOTYPE
 91

	)

74 
	#ENOPROTOOPT
 92

	)

75 
	#EPROTONOSUPPORT
 93

	)

76 
	#ESOCKTNOSUPPORT
 94

	)

77 
	#EOPNOTSUPP
 95

	)

78 
	#EPFNOSUPPORT
 96

	)

79 
	#EAFNOSUPPORT
 97

	)

80 
	#EADDRINUSE
 98

	)

81 
	#EADDRNOTAVAIL
 99

	)

82 
	#ENETDOWN
 100

	)

83 
	#ENETUNREACH
 101

	)

84 
	#ENETRESET
 102

	)

85 
	#ECONNABORTED
 103

	)

86 
	#ECONNRESET
 104

	)

87 
	#ENOBUFS
 105

	)

88 
	#EISCONN
 106

	)

89 
	#ENOTCONN
 107

	)

90 
	#ESHUTDOWN
 108

	)

91 
	#ETOOMANYREFS
 109

	)

92 
	#ETIMEDOUT
 110

	)

93 
	#ECONNREFUSED
 111

	)

94 
	#EHOSTDOWN
 112

	)

95 
	#EHOSTUNREACH
 113

	)

96 
	#EALREADY
 114

	)

97 
	#EINPROGRESS
 115

	)

98 
	#ESTALE
 116

	)

99 
	#EUCLEAN
 117

	)

100 
	#ENOTNAM
 118

	)

101 
	#ENAVAIL
 119

	)

102 
	#EISNAM
 120

	)

103 
	#EREMOTEIO
 121

	)

104 
	#EDQUOT
 122

	)

106 
	#ENOMEDIUM
 123

	)

107 
	#EMEDIUMTYPE
 124

	)

108 
	#ECANCELED
 125

	)

109 
	#ENOKEY
 126

	)

110 
	#EKEYEXPIRED
 127

	)

111 
	#EKEYREVOKED
 128

	)

112 
	#EKEYREJECTED
 129

	)

115 
	#EOWNERDEAD
 130

	)

116 
	#ENOTRECOVERABLE
 131

	)

118 
	#ERFKILL
 132

	)

120 
	#EHWPOISON
 133

	)

	@/usr/include/asm-generic/param.h

1 #i‚de‡
__ASM_GENERIC_PARAM_H


2 
	#__ASM_GENERIC_PARAM_H


	)

4 #i‚de‡
HZ


5 
	#HZ
 100

	)

8 #i‚de‡
EXEC_PAGESIZE


9 
	#EXEC_PAGESIZE
 4096

	)

12 #i‚de‡
NOGROUP


13 
	#NOGROUP
 (-1)

	)

16 
	#MAXHOSTNAMELEN
 64

	)

	@/usr/include/asm-generic/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

6 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/asm/posix_types.h

1 #ifde‡
__i386__


2 
	~<asm/posix_ty≥s_32.h
>

3 #ñi‡
deföed
(
__ILP32__
)

4 
	~<asm/posix_ty≥s_x32.h
>

6 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/linux/stddef.h

3 #i‚de‡
__Æways_ölöe


4 
	#__Æways_ölöe
 
__ölöe__


	)

	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/asm/posix_types_32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_32_H


2 
	#_ASM_X86_POSIX_TYPES_32_H


	)

10 
	t__kî√l_mode_t
;

11 
	#__kî√l_mode_t
 
__kî√l_mode_t


	)

13 
	t__kî√l_ùc_pid_t
;

14 
	#__kî√l_ùc_pid_t
 
__kî√l_ùc_pid_t


	)

16 
	t__kî√l_uid_t
;

17 
	t__kî√l_gid_t
;

18 
	#__kî√l_uid_t
 
__kî√l_uid_t


	)

20 
	t__kî√l_ﬁd_dev_t
;

21 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

23 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_64.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_64_H


2 
	#_ASM_X86_POSIX_TYPES_64_H


	)

10 
	t__kî√l_ﬁd_uid_t
;

11 
	t__kî√l_ﬁd_gid_t
;

12 
	#__kî√l_ﬁd_uid_t
 
__kî√l_ﬁd_uid_t


	)

14 
	t__kî√l_ﬁd_dev_t
;

15 
	#__kî√l_ﬁd_dev_t
 
__kî√l_ﬁd_dev_t


	)

17 
	~<asm-gíîic/posix_ty≥s.h
>

	@/usr/include/asm/posix_types_x32.h

1 #i‚de‡
_ASM_X86_POSIX_TYPES_X32_H


2 
	#_ASM_X86_POSIX_TYPES_X32_H


	)

13 
	t__kî√l_l⁄g_t
;

14 
	t__kî√l_ul⁄g_t
;

15 
	#__kî√l_l⁄g_t
 
__kî√l_l⁄g_t


	)

17 
	~<asm/posix_ty≥s_64.h
>

	@/usr/include/asm-generic/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_X86_BITSPERLONG_H


2 
	#__ASM_X86_BITSPERLONG_H


	)

4 #i‡
deföed
(
__x86_64__
Ë&& !deföed(
__ILP32__
)

5 
	#__BITS_PER_LONG
 64

	)

7 
	#__BITS_PER_LONG
 32

	)

10 
	~<asm-gíîic/bô•îl⁄g.h
>

	@/usr/include/asm-generic/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@
1
.
1
/usr/include
398
13448
Makefile
src/Makefile
src/Makefile.config
src/Makefile.local
src/Makefile.state
src/devices/Devices.cc
src/devices/ISA_DMA.cc
src/devices/ISA_DMA.h
src/devices/Keyboard.cc
src/devices/Keyboard.h
src/devices/PCI.cc
src/devices/PCI.h
src/devices/PIT.cc
src/devices/PIT.h
src/devices/RTC.cc
src/devices/RTC.h
src/devices/Screen.h
src/devices/Serial.h
src/extern/acpica/Makefile
src/extern/acpica/generate/unix/Makefile
src/extern/acpica/generate/unix/Makefile.common
src/extern/acpica/generate/unix/Makefile.config
src/extern/acpica/generate/unix/Makefile.rules
src/extern/acpica/generate/unix/acpibin/Makefile
src/extern/acpica/generate/unix/acpidump/Makefile
src/extern/acpica/generate/unix/acpiexamples/Makefile
src/extern/acpica/generate/unix/acpiexec/Makefile
src/extern/acpica/generate/unix/acpihelp/Makefile
src/extern/acpica/generate/unix/acpinames/Makefile
src/extern/acpica/generate/unix/acpisrc/Makefile
src/extern/acpica/generate/unix/acpixtract/Makefile
src/extern/acpica/generate/unix/iasl/Makefile
src/extern/acpica/source/compiler/aslcompiler.h
src/extern/acpica/source/compiler/asldefine.h
src/extern/acpica/source/compiler/aslglobal.h
src/extern/acpica/source/compiler/aslmessages.h
src/extern/acpica/source/compiler/asltypes.h
src/extern/acpica/source/compiler/dtcompiler.h
src/extern/acpica/source/compiler/dttemplate.h
src/extern/acpica/source/compiler/preprocess.h
src/extern/acpica/source/include/acapps.h
src/extern/acpica/source/include/acbuffer.h
src/extern/acpica/source/include/accommon.h
src/extern/acpica/source/include/acconfig.h
src/extern/acpica/source/include/acdebug.h
src/extern/acpica/source/include/acdisasm.h
src/extern/acpica/source/include/acdispat.h
src/extern/acpica/source/include/acevents.h
src/extern/acpica/source/include/acexcep.h
src/extern/acpica/source/include/acglobal.h
src/extern/acpica/source/include/achware.h
src/extern/acpica/source/include/acinterp.h
src/extern/acpica/source/include/aclocal.h
src/extern/acpica/source/include/acmacros.h
src/extern/acpica/source/include/acnames.h
src/extern/acpica/source/include/acnamesp.h
src/extern/acpica/source/include/acobject.h
src/extern/acpica/source/include/acopcode.h
src/extern/acpica/source/include/acoutput.h
src/extern/acpica/source/include/acparser.h
src/extern/acpica/source/include/acpi.h
src/extern/acpica/source/include/acpiosxf.h
src/extern/acpica/source/include/acpixf.h
src/extern/acpica/source/include/acpredef.h
src/extern/acpica/source/include/acresrc.h
src/extern/acpica/source/include/acrestyp.h
src/extern/acpica/source/include/acstruct.h
src/extern/acpica/source/include/actables.h
src/extern/acpica/source/include/actbl.h
src/extern/acpica/source/include/actbl1.h
src/extern/acpica/source/include/actbl2.h
src/extern/acpica/source/include/actbl3.h
src/extern/acpica/source/include/actypes.h
src/extern/acpica/source/include/acutils.h
src/extern/acpica/source/include/amlcode.h
src/extern/acpica/source/include/amlresrc.h
src/extern/acpica/source/include/platform/accygwin.h
src/extern/acpica/source/include/platform/acdragonfly.h
src/extern/acpica/source/include/platform/acdragonflyex.h
src/extern/acpica/source/include/platform/acefi.h
src/extern/acpica/source/include/platform/acenv.h
src/extern/acpica/source/include/platform/acenvex.h
src/extern/acpica/source/include/platform/acfreebsd.h
src/extern/acpica/source/include/platform/acgcc.h
src/extern/acpica/source/include/platform/achaiku.h
src/extern/acpica/source/include/platform/acintel.h
src/extern/acpica/source/include/platform/ackos.h
src/extern/acpica/source/include/platform/aclinux.h
src/extern/acpica/source/include/platform/aclinuxex.h
src/extern/acpica/source/include/platform/acmacosx.h
src/extern/acpica/source/include/platform/acmsvc.h
src/extern/acpica/source/include/platform/acnetbsd.h
src/extern/acpica/source/include/platform/acos2.h
src/extern/acpica/source/include/platform/acwin.h
src/extern/acpica/source/include/platform/acwin64.h
src/extern/acpica/source/tools/acpibin/acpibin.h
src/extern/acpica/source/tools/acpidump/acpidump.h
src/extern/acpica/source/tools/acpiexec/aecommon.h
src/extern/acpica/source/tools/acpiexec/aetables.h
src/extern/acpica/source/tools/acpihelp/acpihelp.h
src/extern/acpica/source/tools/acpinames/acpinames.h
src/extern/acpica/source/tools/acpisrc/acpisrc.h
src/extern/acpica/source/tools/examples/examples.h
src/extern/acpica/tests/templates/Makefile
src/extern/cdi/Makefile
src/extern/cdi/Makefile.dep
src/extern/cdi/cdi_glue.cc
src/extern/cdi/cdi_glue.h
src/extern/cdi/e1000/device.h
src/extern/cdi/e1000/e1000_io.h
src/extern/cdi/include/cdi-osdep.h
src/extern/cdi/include/cdi.h
src/extern/cdi/include/cdi/io.h
src/extern/cdi/include/cdi/lists.h
src/extern/cdi/include/cdi/mem.h
src/extern/cdi/include/cdi/misc.h
src/extern/cdi/include/cdi/net.h
src/extern/cdi/include/cdi/pci.h
src/extern/dlmalloc/Makefile
src/extern/dlmalloc/malloc.h
src/extern/dlmalloc/malloc_glue.h
src/extern/lwip/Makefile
src/extern/lwip/Makefile.dep
src/extern/lwip/arch/cc.h
src/extern/lwip/arch/perf.h
src/extern/lwip/arch/sys_arch.h
src/extern/lwip/lwip/src/include/ipv4/lwip/autoip.h
src/extern/lwip/lwip/src/include/ipv4/lwip/icmp.h
src/extern/lwip/lwip/src/include/ipv4/lwip/igmp.h
src/extern/lwip/lwip/src/include/ipv4/lwip/inet.h
src/extern/lwip/lwip/src/include/ipv4/lwip/inet_chksum.h
src/extern/lwip/lwip/src/include/ipv4/lwip/ip.h
src/extern/lwip/lwip/src/include/ipv4/lwip/ip_addr.h
src/extern/lwip/lwip/src/include/ipv4/lwip/ip_frag.h
src/extern/lwip/lwip/src/include/ipv6/lwip/icmp.h
src/extern/lwip/lwip/src/include/ipv6/lwip/inet.h
src/extern/lwip/lwip/src/include/ipv6/lwip/ip.h
src/extern/lwip/lwip/src/include/ipv6/lwip/ip_addr.h
src/extern/lwip/lwip/src/include/lwip/api.h
src/extern/lwip/lwip/src/include/lwip/api_msg.h
src/extern/lwip/lwip/src/include/lwip/arch.h
src/extern/lwip/lwip/src/include/lwip/debug.h
src/extern/lwip/lwip/src/include/lwip/def.h
src/extern/lwip/lwip/src/include/lwip/dhcp.h
src/extern/lwip/lwip/src/include/lwip/dns.h
src/extern/lwip/lwip/src/include/lwip/err.h
src/extern/lwip/lwip/src/include/lwip/init.h
src/extern/lwip/lwip/src/include/lwip/mem.h
src/extern/lwip/lwip/src/include/lwip/memp.h
src/extern/lwip/lwip/src/include/lwip/memp_std.h
src/extern/lwip/lwip/src/include/lwip/netbuf.h
src/extern/lwip/lwip/src/include/lwip/netdb.h
src/extern/lwip/lwip/src/include/lwip/netif.h
src/extern/lwip/lwip/src/include/lwip/netifapi.h
src/extern/lwip/lwip/src/include/lwip/opt.h
src/extern/lwip/lwip/src/include/lwip/pbuf.h
src/extern/lwip/lwip/src/include/lwip/raw.h
src/extern/lwip/lwip/src/include/lwip/sio.h
src/extern/lwip/lwip/src/include/lwip/snmp.h
src/extern/lwip/lwip/src/include/lwip/snmp_asn1.h
src/extern/lwip/lwip/src/include/lwip/snmp_msg.h
src/extern/lwip/lwip/src/include/lwip/snmp_structs.h
src/extern/lwip/lwip/src/include/lwip/sockets.h
src/extern/lwip/lwip/src/include/lwip/stats.h
src/extern/lwip/lwip/src/include/lwip/sys.h
src/extern/lwip/lwip/src/include/lwip/tcp.h
src/extern/lwip/lwip/src/include/lwip/tcp_impl.h
src/extern/lwip/lwip/src/include/lwip/tcpip.h
src/extern/lwip/lwip/src/include/lwip/timers.h
src/extern/lwip/lwip/src/include/lwip/udp.h
src/extern/lwip/lwip/src/include/netif/etharp.h
src/extern/lwip/lwip/src/include/netif/ppp_oe.h
src/extern/lwip/lwip/src/include/netif/slipif.h
src/extern/lwip/lwip/src/include/posix/netdb.h
src/extern/lwip/lwip/src/include/posix/sys/socket.h
src/extern/lwip/lwip/src/netif/ppp/auth.h
src/extern/lwip/lwip/src/netif/ppp/chap.h
src/extern/lwip/lwip/src/netif/ppp/chpms.h
src/extern/lwip/lwip/src/netif/ppp/fsm.h
src/extern/lwip/lwip/src/netif/ppp/ipcp.h
src/extern/lwip/lwip/src/netif/ppp/lcp.h
src/extern/lwip/lwip/src/netif/ppp/magic.h
src/extern/lwip/lwip/src/netif/ppp/md5.h
src/extern/lwip/lwip/src/netif/ppp/pap.h
src/extern/lwip/lwip/src/netif/ppp/ppp.h
src/extern/lwip/lwip/src/netif/ppp/ppp_impl.h
src/extern/lwip/lwip/src/netif/ppp/pppdebug.h
src/extern/lwip/lwip/src/netif/ppp/randm.h
src/extern/lwip/lwip/src/netif/ppp/vj.h
src/extern/lwip/lwip/test/unit/core/test_mem.h
src/extern/lwip/lwip/test/unit/etharp/test_etharp.h
src/extern/lwip/lwip/test/unit/lwip_check.h
src/extern/lwip/lwip/test/unit/lwipopts.h
src/extern/lwip/lwip/test/unit/tcp/tcp_helper.h
src/extern/lwip/lwip/test/unit/tcp/test_tcp.h
src/extern/lwip/lwip/test/unit/tcp/test_tcp_oos.h
src/extern/lwip/lwip/test/unit/udp/test_udp.h
src/extern/lwip/lwip_glue.cc
src/extern/lwip/lwipopts.h
src/extern/lwip/sys_arch.cc
src/extern/multiboot/multiboot2.h
src/gdb/Gdb.cc
src/gdb/Gdb.h
src/generic/Bitmap.h
src/generic/Buffers.h
src/generic/EmbeddedContainers.h
src/generic/ManagedArray.h
src/generic/RegionSet.h
src/generic/basics.h
src/generic/bitmanip.h
src/generic/regsave.h
src/include/kostypes.h
src/include/linuxtypes.h
src/include/pthread.h
src/include/syscalls.h
src/kernel/AddressSpace.cc
src/kernel/AddressSpace.h
src/kernel/Clock.h
src/kernel/FrameManager.cc
src/kernel/FrameManager.h
src/kernel/Kernel.cc
src/kernel/MemoryManager.cc
src/kernel/MemoryManager.h
src/kernel/Multiboot.cc
src/kernel/Multiboot.h
src/kernel/Output.cc
src/kernel/Output.h
src/kernel/OutputBasic.h
src/kernel/Process.cc
src/kernel/Process.h
src/kernel/Tree.h
src/kernel/syscalls.cc
src/machine/ACPI.h
src/machine/APIC.cc
src/machine/APIC.h
src/machine/CPU.cc
src/machine/CPU.h
src/machine/Descriptors.h
src/machine/Machine.cc
src/machine/Machine.h
src/machine/Memory.h
src/machine/Paging.cc
src/machine/Paging.h
src/machine/Processor.cc
src/machine/Processor.h
src/machine/SpinLock.h
src/machine/asmdecl.h
src/machine/asmshare.h
src/main/Experiments.cc
src/main/InitProcess.cc
src/main/LockTest.cc
src/main/Makefile
src/main/TcpTest.cc
src/main/UserMain.h
src/runtime/BlockingSync.cc
src/runtime/BlockingSync.h
src/runtime/JoinableThread.h
src/runtime/Runtime.h
src/runtime/RuntimeImpl.h
src/runtime/Scheduler.cc
src/runtime/Scheduler.h
src/runtime/Stack.h
src/runtime/SyncQueues.h
src/runtime/SynchronizedArray.h
src/runtime/Thread.cc
src/runtime/Thread.h
src/testoptions.h
src/ulib/Makefile
src/ulib/Makefile.dep
src/ulib/libKOS.cc
src/ulib/malloc_glue.h
src/ulib/pthread.cc
src/unit/bitmap.cc
src/unit/hierbitmap.cc
src/unit/marray.cc
src/unit/region.cc
src/user/Makefile
src/user/Makefile.dep
src/user/kbloop.cc
src/user/manythread.cc
src/user/systest.cc
src/user/threadtest.cc
src/world/Access.cc
src/world/Access.h
/usr/include/check.h
/usr/include/ctype.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/linux/kernel.h
/usr/include/linux/sched.h
/usr/include/linux/string.h
/usr/include/malloc.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/param.h
/usr/include/sys/stat.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/param.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/bits/sigaction.h
/usr/include/bits/sigcontext.h
/usr/include/bits/siginfo.h
/usr/include/bits/signum.h
/usr/include/bits/sigset.h
/usr/include/bits/sigstack.h
/usr/include/bits/sigthread.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/check_stdint.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/limits.h
/usr/include/linux/sysinfo.h
/usr/include/sched.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ucontext.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/posix1_lim.h
/usr/include/bits/posix2_lim.h
/usr/include/bits/sched.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/time.h
/usr/include/bits/typesizes.h
/usr/include/bits/xopen_lim.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/limits.h
/usr/include/linux/param.h
/usr/include/linux/types.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/asm/errno.h
/usr/include/asm/param.h
/usr/include/asm/types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/local_lim.h
/usr/include/bits/timex.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/posix_types.h
/usr/include/wchar.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/param.h
/usr/include/asm-generic/types.h
/usr/include/asm/posix_types.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/linux/stddef.h
/usr/include/wctype.h
/usr/include/asm-generic/errno-base.h
/usr/include/asm-generic/int-ll64.h
/usr/include/asm/posix_types_32.h
/usr/include/asm/posix_types_64.h
/usr/include/asm/posix_types_x32.h
/usr/include/asm-generic/posix_types.h
/usr/include/asm/bitsperlong.h
/usr/include/asm-generic/bitsperlong.h
